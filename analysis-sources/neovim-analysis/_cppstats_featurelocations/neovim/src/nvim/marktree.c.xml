<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\marktree.c">
















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/marktree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kvec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name></cpp:macro> <cpp:value>MT_BRANCH_FACTOR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ILEN</name></cpp:macro> <cpp:value>(sizeof(mtnode_t)+(2 * T) * sizeof(void *))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>key_t</name></cpp:macro> <cpp:value>SKRAPET</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIGHT_GRAVITY</name></cpp:macro> <cpp:value>(((uint64_t)1) &lt;&lt; 63)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANTIGRAVITY</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((id)&amp;(RIGHT_GRAVITY-1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_RIGHT</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((id)&amp;RIGHT_GRAVITY)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAIRED</name></cpp:macro> <cpp:value>MARKTREE_PAIRED_FLAG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_FLAG</name></cpp:macro> <cpp:value>MARKTREE_END_FLAG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_INCR</name></cpp:macro> <cpp:value>(((uint64_t)1) &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROP_MASK</name></cpp:macro> <cpp:value>(RIGHT_GRAVITY|PAIRED|END_FLAG)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rawkey</name><parameter_list>(<parameter><type><name>itr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(itr-&gt;node-&gt;key[itr-&gt;i])</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>pos_leq</name><parameter_list>(<parameter><decl><type><name>mtpos_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>mtpos_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>a</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>row</name></name> <operator>||</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>col</name></name> <operator>&lt;=</operator> <name><name>b</name><operator>.</operator><name>col</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>relative</name><parameter_list>(<parameter><decl><type><name>mtpos_t</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>mtpos_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pos_leq</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>row</name></name> <operator>==</operator> <name><name>base</name><operator>.</operator><name>row</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>col</name></name> <operator>-=</operator> <name><name>base</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>row</name></name> <operator>-=</operator> <name><name>base</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unrelative</name><parameter_list>(<parameter><decl><type><name>mtpos_t</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>mtpos_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>row</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <name><name>base</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>col</name></name> <operator>+=</operator> <name><name>base</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>row</name></name> <operator>+=</operator> <name><name>base</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compose</name><parameter_list>(<parameter><decl><type><name>mtpos_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>mtpos_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>row</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>col</name></name> <operator>+=</operator> <name><name>val</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>row</name></name> <operator>+=</operator> <name><name>val</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>val</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"marktree.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mt_generic_cmp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((b) &lt; (a)) - ((a) &lt; (b)))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>key_cmp</name><parameter_list>(<parameter><decl><type><name>mtkey_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>mtkey_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>mt_generic_cmp</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>cmp</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>mt_generic_cmp</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>cmp</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><call><name>mt_generic_cmp</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>marktree_getp_aux</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mtnode_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>mtkey_t</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rr</name></decl>, <decl><type ref="prev"/><name>begin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rr</name> <operator>=</operator> <ternary><condition><expr><name>r</name></expr>?</condition><then> <expr><name>r</name></expr> </then><else>: <expr><operator>&amp;</operator><name>tr</name></expr></else></ternary></expr>;</expr_stmt>
<while>while <condition>(<expr><name>begin</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>begin</name> <operator>+</operator> <name>end</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>key_cmp</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>mid</name></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>begin</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>==</operator> <name><name>x</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>rr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <return>return <expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>rr</name> <operator>=</operator> <call><name>key_cmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>begin</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>begin</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>begin</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>refkey</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><call><name>pmap_put</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>id2node</name></name></expr></argument>, <argument><expr><call><name>ANTIGRAVITY</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>split_node</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>mtnode_t</name> <operator>*</operator><operator>)</operator><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>y</name><operator>-&gt;</operator><name>level</name></name></expr> ?</condition><then> <expr><name>ILEN</name></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mtnode_t</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>n_nodes</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>T</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>T</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mtkey_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>T</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>T</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>refkey</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>y</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>T</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mtnode_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>T</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>parent</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>T</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mtnode_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mtkey_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>T</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refkey</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>T</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>relative</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>marktree_putp_aux</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>mtkey_t</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>marktree_getp_aux</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>x</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mtkey_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refkey</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>marktree_getp_aux</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>n</name> <operator>==</operator> <literal type="number">2</literal> <operator>*</operator> <name>T</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>split_node</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>key_cmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>relative</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>k</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>marktree_putp_aux</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>marktree_put</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>right_gravity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>next_id</name></name><operator>+=</operator><name>ID_INCR</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>keyid</name> <init>= <expr><name>id</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>right_gravity</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>keyid</name> <operator>|=</operator> <name>RIGHT_GRAVITY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>marktree_put_key</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>keyid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>marktree_put_pair</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>start_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_col</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>start_right</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>end_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_col</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>end_right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>next_id</name></name><operator>+=</operator><name>ID_INCR</name><operator>)</operator><operator>|</operator><name>PAIRED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>start_id</name> <init>= <expr><name>id</name><operator>|</operator><operator>(</operator><ternary><condition><expr><name>start_right</name></expr>?</condition><then><expr><name>RIGHT_GRAVITY</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>end_id</name> <init>= <expr><name>id</name><operator>|</operator><name>END_FLAG</name><operator>|</operator><operator>(</operator><ternary><condition><expr><name>end_right</name></expr>?</condition><then><expr><name>RIGHT_GRAVITY</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>marktree_put_key</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>start_row</name></expr></argument>, <argument><expr><name>start_col</name></expr></argument>, <argument><expr><name>start_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>marktree_put_key</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>end_row</name></expr></argument>, <argument><expr><name>end_col</name></expr></argument>, <argument><expr><name>end_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>marktree_put_key</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mtkey_t</name></type> <name>k</name> <init>= <expr><block>{ <expr><operator>.</operator><name>pos</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>row</name> <operator>=</operator> <name>row</name></expr>, <expr><operator>.</operator><name>col</name> <operator>=</operator> <name>col</name></expr> }</block></expr>, <expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <operator>(</operator><name>mtnode_t</name> <operator>*</operator><operator>)</operator><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ILEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>id2node</name></name> <operator>=</operator> <call><call><name>pmap_new</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>n_nodes</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>n_keys</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>*</operator> <name>T</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>n_nodes</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>mtnode_t</name> <operator>*</operator><operator>)</operator><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ILEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>level</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>split_node</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>marktree_putp_aux</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

























<function><type><name>void</name></type> <name>marktree_del_itr</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>adjustment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curi</name> <init>= <expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>curi</name></expr>]</index></name><operator>.</operator><name>id</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><call><name>marktree_itr_prev</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>adjustment</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mtkey_t</name></type> <name>intkey</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;</operator> <name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mtkey_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>--</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>adjustment</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>adjustment</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>ilvl</name> <init>= <expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>lnode</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>lnode</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ilvl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>ilvl</name></expr>]</index></name><operator>.</operator><name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>lnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>intkey</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lnode</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ilvl</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>lnode</name> <operator>!=</operator> <name>cur</name></expr>)</condition>;</do>

<decl_stmt><decl><type><name>mtkey_t</name></type> <name>deleted</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>curi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>curi</name></expr>]</index></name> <operator>=</operator> <name>intkey</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refkey</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>curi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>relative</name><argument_list>(<argument><expr><name><name>intkey</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>deleted</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>curi</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>deleted</name><operator>.</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>||</operator> <name><name>deleted</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>y</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name><name>deleted</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>y</name> <operator>=</operator> <ternary><condition><expr><name><name>y</name><operator>-&gt;</operator><name>level</name></name></expr> ?</condition><then> <expr><name><name>y</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>n_keys</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>pmap_del</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>id2node</name></name></expr></argument>, <argument><expr><call><name>ANTIGRAVITY</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>itr_dirty</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rlvl</name> <init>= <expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lasti</name> <init>= <expr><operator>&amp;</operator><name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>x</name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rlvl</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;=</operator> <name>T</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pi</name> <init>= <expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>rlvl</name></expr>]</index></name><operator>.</operator><name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>pi</name></expr>]</index></name> <operator>==</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pi</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>pi</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>n</name> <operator>&gt;</operator> <name>T</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lasti</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>itr_dirty</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pivot_right</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pi</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pi</name> <argument_list type="generic">&lt; <argument><expr><name><name>p</name><operator>-&gt;</operator><name>n</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>pi</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>n</name></expr></argument> &gt;</argument_list></name> <name>T</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pivot_left</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pi</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>pi</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>n</name> <operator>==</operator> <name>T</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lasti</name> <operator>+=</operator> <name>T</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>merge_node</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pi</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lasti</name> <operator>==</operator> <operator>&amp;</operator><name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>rlvl</name></expr>]</index></name><operator>.</operator><name>i</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>itr_dirty</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pi</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>n</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>pi</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>n</name> <operator>==</operator> <name>T</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>merge_node</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>lasti</name> <operator>=</operator> <operator>&amp;</operator><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>rlvl</name></expr>]</index></name><operator>.</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rlvl</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>itr</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>oldroot</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>oldroot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>&amp;&amp;</operator> <name>itr_dirty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>marktree_itr_fix_pos</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>adjustment</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>adjustment</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>marktree_itr_next</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>marktree_itr_next</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>&amp;&amp;</operator> <name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>marktree_itr_next</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mtnode_t</name> <modifier>*</modifier></type><name>merge_node</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refkey</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>relative</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>y</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mtkey_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>y</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>refkey</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>k</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>y</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mtnode_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>y</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>parent</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name> <operator>+=</operator> <name><name>y</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mtkey_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mtkey_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>n</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>n_nodes</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>pivot_right</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>y</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mtkey_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>y</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>y</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mtnode_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refkey</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refkey</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>parent</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>relative</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>y</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name><name>y</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pivot_left</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>y</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>relative</name><argument_list>(<argument><expr><name><name>y</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>relative</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refkey</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refkey</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>parent</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>y</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>y</name><operator>-&gt;</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mtkey_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>y</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>y</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>y</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mtnode_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>n</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>marktree_clear</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>marktree_free_node</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>id2node</name></name></expr>)</condition> <block>{<block_content>
<function_decl><type><name>pmap_free</name></type>(<name>uint64_t</name>)<parameter_list>(<parameter><decl><type><name><name>b</name><operator>-&gt;</operator><name>id2node</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>id2node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>n_keys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>n_nodes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>marktree_free_node</name><parameter_list>(<parameter><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>marktree_free_node</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>uint64_t</name></type> <name>marktree_revise</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>old_id</name> <init>= <expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><call><name>pmap_del</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>id2node</name></name></expr></argument>, <argument><expr><call><name>ANTIGRAVITY</name><argument_list>(<argument><expr><name>old_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>new_id</name> <init>= <expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>next_id</name></name> <operator>+=</operator> <name>ID_INCR</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name> <operator>=</operator> <name>new_id</name> <operator>+</operator> <operator>(</operator><name>RIGHT_GRAVITY</name><operator>&amp;</operator><name>old_id</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refkey</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new_id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>marktree_move</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>old_id</name> <init>= <expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>marktree_del_itr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>marktree_put_key</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>old_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>marktree_itr_get</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>marktree_itr_get_ext</name><argument_list>(<argument>b</argument>, <argument>(mtpos_t){ row</argument>, <argument>col }</argument>,
<argument>itr</argument>, <argument>false</argument>, <argument>false</argument>, <argument>NULL</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>marktree_itr_get_ext</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>mtpos_t</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>last</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>gravity</name></decl></parameter>, <parameter><decl><type><name>mtpos_t</name> <modifier>*</modifier></type><name>oldbase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mtkey_t</name></type> <name>k</name> <init>= <expr><block>{ <expr><operator>.</operator><name>pos</name> <operator>=</operator> <name>p</name></expr>, <expr><operator>.</operator><name>id</name> <operator>=</operator> <name>gravity</name> <operator>?</operator> <name>RIGHT_GRAVITY</name> <operator>:</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>gravity</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>k</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>n_keys</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>mtpos_t</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oldbase</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>oldbase</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <call><name>marktree_getp_aux</name><argument_list>(<argument><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>.</operator><name>oldcol</name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>compose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>itr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>relative</name><argument_list>(<argument><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>k</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oldbase</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>oldbase</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>marktree_itr_prev</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>marktree_itr_next</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>marktree_itr_first</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>n_keys</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>mtpos_t</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>.</operator><name>oldcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>marktree_itr_last</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>n_keys</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>mtpos_t</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>.</operator><name>oldcol</name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>itr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>marktree_itr_next</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>marktree_itr_next_skip</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>marktree_itr_next_skip</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>skip</name></decl></parameter>,
<parameter><decl><type><name>mtpos_t</name></type> <name><name>oldbase</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>skip</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>


<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>.</operator><name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>-=</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>.</operator><name>oldcol</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>


<while>while <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>.</operator><name>oldcol</name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>itr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>oldbase</name> <operator>&amp;&amp;</operator> <name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>oldbase</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>oldbase</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name><operator>-&gt;</operator><name>parent</name> <operator>==</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>marktree_itr_prev</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>.</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>-=</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>.</operator><name>oldcol</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>


<while>while <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>.</operator><name>oldcol</name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>itr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name><operator>-&gt;</operator><name>parent</name> <operator>==</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>marktree_itr_rewind</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>marktree_itr_prev</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>marktree_itr_node_done</name><parameter_list>(<parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>||</operator> <name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>mtpos_t</name></type> <name>marktree_itr_pos</name><parameter_list>(<parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>pos</name> <init>= <expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name><name>itr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>mtmark_t</name></type> <name>marktree_itr_current</name><parameter_list>(<parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>keyid</name> <init>= <expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>pos</name> <init>= <expr><call><name>marktree_itr_pos</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mtmark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><operator>.</operator><name>row</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>row</name></name></expr>,
<expr><operator>.</operator><name>col</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <call><name>ANTIGRAVITY</name><argument_list>(<argument><expr><name>keyid</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>right_gravity</name> <operator>=</operator> <name>keyid</name> <operator>&amp;</operator> <name>RIGHT_GRAVITY</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>mark</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>mtmark_t</name><operator>)</operator><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>swap_id</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>id1</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>id2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>temp</name> <init>= <expr><operator>*</operator><name>id1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>id1</name> <operator>=</operator> <operator>*</operator><name>id2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>id2</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>marktree_splice</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>start_line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>old_extent_line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>old_extent_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>new_extent_line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_extent_col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>start</name> <init>= <expr><block>{ <expr><name>start_line</name></expr>, <expr><name>start_col</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>old_extent</name> <init>= <expr><block>{ <expr><operator>(</operator><name>int</name><operator>)</operator><name>old_extent_line</name></expr>, <expr><name>old_extent_col</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>new_extent</name> <init>= <expr><block>{ <expr><operator>(</operator><name>int</name><operator>)</operator><name>new_extent_line</name></expr>, <expr><name>new_extent_col</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>may_delete</name> <init>= <expr><operator>(</operator><name><name>old_extent</name><operator>.</operator><name>row</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>old_extent</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>same_line</name> <init>= <expr><name><name>old_extent</name><operator>.</operator><name>row</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>new_extent</name><operator>.</operator><name>row</name></name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MarkTreeIter</name></type> <name><name>itr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MarkTreeIter</name></type> <name><name>enditr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mtpos_t</name></type> <name><name>oldbase</name><index>[<expr><name>MT_MAX_DEPTH</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>marktree_itr_get_ext</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>oldbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>delta</name> <init>= <expr><block>{ <expr><name><name>new_extent</name><operator>.</operator><name>row</name></name> <operator>-</operator> <name><name>old_extent</name><operator>.</operator><name>row</name></name></expr>,
<expr><name><name>new_extent</name><operator>.</operator><name>col</name></name><operator>-</operator><name><name>old_extent</name><operator>.</operator><name>col</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>may_delete</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>ipos</name> <init>= <expr><call><name>marktree_itr_pos</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pos_leq</name><argument_list>(<argument><expr><name>old_extent</name></expr></argument>, <argument><expr><name>ipos</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name><name>old_extent</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>ipos</name><operator>.</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>old_extent</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>ipos</name><operator>.</operator><name>col</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_RIGHT</name><argument_list>(<argument><expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>marktree_itr_get_ext</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>old_extent</name></expr></argument>, <argument><expr><name>enditr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>enditr</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>may_delete</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>past_right</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>moved</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>may_delete</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>past_right</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>loc_start</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>loc_old</name> <init>= <expr><name>old_extent</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>relative</name><argument_list>(<argument><expr><name><name>itr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>relative</name><argument_list>(<argument><expr><name><name>oldbase</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>continue_same_node</name>:</label>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pos_leq</name><argument_list>(<argument><expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><name>loc_old</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_RIGHT</name><argument_list>(<argument><expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name> <operator>!=</operator> <call><name>rawkey</name><argument_list>(<argument><expr><name>enditr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name>
<operator>&amp;&amp;</operator> <call><name>IS_RIGHT</name><argument_list>(<argument><expr><call><name>rawkey</name><argument_list>(<argument><expr><name>enditr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>marktree_itr_prev</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>enditr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_RIGHT</name><argument_list>(<argument><expr><call><name>rawkey</name><argument_list>(<argument><expr><name>enditr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>swap_id</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>rawkey</name><argument_list>(<argument><expr><name>enditr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refkey</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refkey</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>enditr</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>enditr</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>past_right</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name> <operator>==</operator> <call><name>rawkey</name><argument_list>(<argument><expr><name>enditr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>past_right</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>oldbase</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name><name>oldbase</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oldbase</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>pos</name> <operator>=</operator> <name>loc_start</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>marktree_itr_next_skip</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>oldbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>pos</name> <operator>=</operator> <name>loc_start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>past_right</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>continue_same_node</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>marktree_itr_next</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>loc_new</name> <init>= <expr><name>new_extent</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>relative</name><argument_list>(<argument><expr><name><name>itr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>limit</name> <init>= <expr><name>old_extent</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>relative</name><argument_list>(<argument><expr><name><name>oldbase</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>past_continue_same_node</name>:</label>

<if_stmt><if>if <condition>(<expr><call><name>pos_leq</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>mtpos_t</name></type> <name>oldpos</name> <init>= <expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>pos</name> <operator>=</operator> <name>loc_new</name></expr>;</expr_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>oldbase</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>oldpos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name><name>oldbase</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oldbase</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>marktree_itr_next_skip</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>oldbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>past_continue_same_node</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>marktree_itr_next</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name><name>oldbase</name><index>[<expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>realrow</name> <init>= <expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>pos</name><operator>.</operator><name>row</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>realrow</name> <operator>&gt;=</operator> <name><name>old_extent</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>realrow</name> <operator>==</operator> <name><name>old_extent</name><operator>.</operator><name>row</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>delta</name><operator>.</operator><name>col</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name><name>delta</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>same_line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>delta</name><operator>.</operator><name>row</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>+=</operator> <name><name>delta</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>relative</name><argument_list>(<argument><expr><name><name>itr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>marktree_itr_next_skip</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>moved</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>marktree_move_region</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>start_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>start_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>extent_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>extent_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>new_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>new_col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>start</name> <init>= <expr><block>{ <expr><name>start_row</name></expr>, <expr><name>start_col</name></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><block>{ <expr><name>extent_row</name></expr>, <expr><name>extent_col</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>end</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MarkTreeIter</name></type> <name><name>itr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>marktree_itr_get_ext</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>kvec_t</name><argument_list>(<argument>mtkey_t</argument>)</argument_list></macro> <expr_stmt><expr><name>saved</name> <operator>=</operator> <name>KV_INITIAL_VALUE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>pos</name> <init>= <expr><call><name>marktree_itr_pos</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pos_leq</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>end</name><operator>.</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>end</name><operator>.</operator><name>col</name></name>
<operator>&amp;&amp;</operator> <call><name>rawkey</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name> <operator>&amp;</operator> <name>RIGHT_GRAVITY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>relative</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>kv_push</name><argument_list>(<argument>saved</argument>, <argument>((mtkey_t){ .pos = pos, .id = rawkey(itr).id })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>marktree_del_itr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>marktree_splice</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>start</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>start</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>new</name> <init>= <expr><block>{ <expr><name>new_row</name></expr>, <expr><name>new_col</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>marktree_splice</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>new</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>.</operator><name>col</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>saved</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>mtkey_t</name></type> <name>item</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name>saved</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>marktree_put_key</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name>saved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>mtpos_t</name></type> <name>marktree_lookup</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><call><name>pmap_get</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>id2node</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>itr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>mtpos_t</name><operator>)</operator><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>n</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ANTIGRAVITY</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<label><name>found</name>:</label> <block>{<block_content/>}</block>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>pos</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>itr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>level</name></name> <operator>-</operator> <name><name>n</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>found_node</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<label><name>found_node</name>:</label>
<if_stmt><if>if <condition>(<expr><name>itr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>itr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>marktree_itr_fix_pos</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>marktree_itr_fix_pos</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>MarkTreeIter</name> <modifier>*</modifier></type><name>itr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>mtpos_t</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>lvl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lvl</name> <operator>&lt;</operator> <name><name>itr</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</condition> <incr><expr><name>lvl</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>lvl</name></expr>]</index></name><operator>.</operator><name>oldcol</name> <operator>=</operator> <name><name>itr</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>itr</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>lvl</name></expr>]</index></name><operator>.</operator><name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>compose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>itr</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>x</name> <operator>==</operator> <name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>marktree_check</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>n_keys</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>n_nodes</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>id2node</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>map_size</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>id2node</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>mtpos_t</name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>last_right</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nkeys</name> <init>= <expr><call><name>check_node</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>n_keys</name></name> <operator>==</operator> <name>nkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>n_keys</name></name> <operator>==</operator> <call><name>map_size</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>id2node</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>check_node</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,
<parameter><decl><type><name>mtpos_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>last_right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>T</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;=</operator> <operator>(</operator><ternary><condition><expr><name>x</name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>root</name></name></expr> ?</condition><then> <expr><name>T</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n_keys</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_keys</name> <operator>+=</operator> <call><name>check_node</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>last_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <operator>(</operator><name>mtpos_t</name><operator>)</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pos_leq</name><argument_list>(<argument><expr><operator>*</operator><name>last</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>last</name><operator>-&gt;</operator><name>row</name></name> <operator>==</operator> <name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>last</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>col</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>*</operator><name>last_right</name> <operator>||</operator> <call><name>IS_RIGHT</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>last_right</name> <operator>=</operator> <call><name>IS_RIGHT</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><call><name>pmap_get</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>id2node</name></name></expr></argument>, <argument><expr><call><name>ANTIGRAVITY</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_keys</name> <operator>+=</operator> <call><name>check_node</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>last_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>parent</name> <operator>==</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>level</name> <operator>==</operator> <name><name>x</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>x</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>x</name><operator>-&gt;</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>n_keys</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char</name> <modifier>*</modifier></type><name>mt_inspect_rec</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>p</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mt_inspect_node</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mt_inspect_node</name><parameter_list>(<parameter><decl><type><name>MarkTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>ga</name></decl></parameter>, <parameter><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>mtpos_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GA_PUT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ga_concat(ga, (char_u *)(x))</cpp:value></cpp:define>
<expr_stmt><expr><call><name>GA_PUT</name><argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mt_inspect_node</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ga</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>n</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>p</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unrelative</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d/%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GA_PUT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mt_inspect_node</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ga</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>GA_PUT</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>GA_PUT</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GA_PUT</name></cpp:undef>
</block_content>}</block></function>

</unit>
