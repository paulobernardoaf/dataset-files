<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\move.c">













<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/edit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fold.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/popupmnu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fill</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt> 
}</block></struct></type> <name>lineoff_T</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"move.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>void</name></type> <name>comp_botline</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt>





<expr_stmt><expr><call><name>check_cursor_moved</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_CROW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cline_row</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr><expr><name>lnum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>last</name> <init>= <expr><name>lnum</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>folded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>plines_win_full</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>folded</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>last</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cline_row</name></name> <operator>=</operator> <name>done</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cline_height</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cline_folded</name></name> <operator>=</operator> <name>folded</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_for_cursorline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <operator>(</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_CHEIGHT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>done</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_viewport_invalid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_empty_rows</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_check_anchored_floats</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_cursorline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_last_cursorline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>redraw_for_cursorline</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name> <operator>||</operator> <call><name>win_cursorline_standout</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_CROW</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>pum_visible</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_cursorline_standout</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&lt;=</operator> <name>VALID</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_last_cursorline</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>redrawWinline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_last_cursorline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawWinline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>update_topline_redraw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>must_redraw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>update_topline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_topline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_topfill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>check_topline</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>check_botline</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>so_ptr</name> <init>= <expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name>p_so</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>save_so</name> <init>= <expr><operator>*</operator><name>so_ptr</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>default_grid</name><operator>.</operator><name>chars</name></name> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_viewport_invalid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_scbind_pos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_cursor_moved</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_TOPLINE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>mouse_dragging</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>so_ptr</name> <operator>=</operator> <name>mouse_dragging</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_topline</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_topfill</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BUFEMPTY</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_viewport_invalid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_scbind_pos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>




<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>check_topline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>check_top_offset</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>check_topline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>check_topline</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>,
<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>check_topline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>check_topline</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>halfheight</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>halfheight</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>halfheight</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</init>
<condition><expr><name>lnum</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>+</operator> <operator>*</operator><name>so_ptr</name></expr>;</condition> <incr><expr><name>lnum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <name>halfheight</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>+</operator> <operator>*</operator><name>so_ptr</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>halfheight</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scroll_cursor_halfway</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>scroll_cursor_top</name><argument_list>(<argument><expr><call><name>scrolljump_value</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>check_botline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>check_botline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>









<if_stmt><if>if <condition>(<expr><name>check_botline</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_BOTLINE_AP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>validate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&gt;=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <operator>*</operator><name>so_ptr</name>
<operator>||</operator> <call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call>
<operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lineoff_T</name></type> <name>loff</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_empty_rows</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>loff</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>loff</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_filler_rows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>||</operator> <name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>loff</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <operator>*</operator><name>so_ptr</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>botline_forw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <operator>*</operator><name>so_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>check_botline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>check_botline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>check_botline</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>line_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<for>for <control>(<init><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</init>
<condition><expr><name>lnum</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <operator>*</operator><name>so_ptr</name></expr>;</condition> <incr><expr><name>lnum</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>line_count</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>line_count</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>line_count</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name>
<operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>so_ptr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&lt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scroll_cursor_bot</name><argument_list>(<argument><expr><call><name>scrolljump_value</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>scroll_cursor_halfway</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_TOPLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_viewport_invalid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_check_anchored_floats</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>!=</operator> <name>old_topline</name>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>!=</operator> <name>old_topfill</name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name>dollar_vcol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>so_ptr</name> <operator>=</operator> <name>save_so</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>update_topline_win</name><parameter_list>(<parameter><decl><type><name>win_T</name><modifier>*</modifier></type> <name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>switch_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_curwin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restore_win</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>scrolljump_value</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><name>p_sj</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>p_sj</name></expr> </then><else>: <expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>*</operator> <operator>-</operator><name>p_sj</name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>result</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_top_offset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>so</name> <init>= <expr><call><name>get_scrolloff_value</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>+</operator> <name>so</name>
<operator>||</operator> <call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>
)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lineoff_T</name></type> <name>loff</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr></init></decl>;</decl_stmt> 

<while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>so</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>topline_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name>
<operator>||</operator> <operator>(</operator><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&amp;&amp;</operator> <name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>
)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>loff</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>so</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>update_curswant</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>check_cursor_moved</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_valid_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_VIRTCOL</name>
<operator>|</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_TOPLINE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid_cursor</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid_leftcol</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_viewport_invalid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_valid_cursor</name><operator>.</operator><name>col</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_valid_leftcol</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_valid_cursor</name><operator>.</operator><name>coladd</name></name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_VIRTCOL</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid_leftcol</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_viewport_invalid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>changed_window_setting</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>changed_window_setting_win</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>changed_window_setting_win</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed_line_abv_curs_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name><operator>|</operator><name>VALID_TOPLINE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>set_topline</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>+=</operator> <name>lnum</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline_was_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_BOTLINE</name><operator>|</operator><name>VALID_TOPLINE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>changed_cline_bef_curs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_VIRTCOL</name>
<operator>|</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_TOPLINE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>changed_cline_bef_curs_win</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_VIRTCOL</name>
<operator>|</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_TOPLINE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>changed_line_abv_curs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_VIRTCOL</name><operator>|</operator><name>VALID_CROW</name>
<operator>|</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_TOPLINE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>changed_line_abv_curs_win</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_VIRTCOL</name><operator>|</operator><name>VALID_CROW</name>
<operator>|</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_TOPLINE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>validate_botline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_BOTLINE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>comp_botline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>invalidate_botline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>invalidate_botline_win</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>approximate_botline_win</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VALID_BOTLINE</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>cursor_valid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>check_cursor_moved</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_WCOL</name><operator>)</operator><operator>)</operator> <operator>==</operator>
<operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_WCOL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>validate_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>check_cursor_moved</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <operator>(</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_WROW</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_WROW</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curs_columns</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>curs_rows</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>all_invalid</name> <init>= <expr><operator>(</operator><operator>!</operator><call><name>redrawing</name><argument_list>()</argument_list></call>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cline_row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></init></decl>;</init> <condition><expr><name>lnum</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>all_invalid</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>&lt;</operator> <name>lnum</name> <operator>||</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_valid</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>==</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_set</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>wl_lastlnum</name> <argument_list type="generic">&lt; <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_top</name></name></expr></argument>
&gt;</argument_list></name> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>&gt;</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>valid</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>lnum</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>||</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff</name></name><operator>)</operator></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cline_row</name></name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>last</name> <init>= <expr><name>lnum</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>folded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>plines_win_full</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>folded</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name>last</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>folded</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cline_row</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>check_cursor_moved</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_CHEIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>all_invalid</name>
<operator>||</operator> <name>i</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name>
<operator>||</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cline_height</name></name> <operator>=</operator> <call><name>plines_win_full</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cline_folded</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cline_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cline_folded</name></name> <operator>=</operator> <call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cline_height</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cline_folded</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_folded</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_for_cursorline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_CROW</name><operator>|</operator><name>VALID_CHEIGHT</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>validate_virtcol</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>validate_virtcol_win</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>validate_virtcol_win</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>check_cursor_moved</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_VIRTCOL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_VIRTCOL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>pum_visible</name><argument_list>()</argument_list></call></expr>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>validate_cheight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>check_cursor_moved</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_CHEIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_height</name></name> <operator>=</operator> <call><name>plines_win_full</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_folded</name></name></expr></argument>,
<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_CHEIGHT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>validate_cursor_col</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_WCOL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>off</name> <init>= <expr><call><name>curwin_col_off</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>off</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <name>off</name> <operator>+</operator> <call><name>curwin_col_off2</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name>
<operator>&amp;&amp;</operator> <name>width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>col</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name><operator>)</operator> <operator>/</operator> <name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_WCOL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>win_col_off</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>cmdwin_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>wp</name> <operator>!=</operator> <name>curwin</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator>
<operator>+</operator> <call><name>win_fdccol_count</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>+</operator> <operator>(</operator><call><name>win_signcol_count</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>win_signcol_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>curwin_col_off</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>win_col_off</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>win_col_off2</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_NUMCOL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>curwin_col_off2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>win_col_off2</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>curs_columns</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>may_scroll</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>startcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>endcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>prev_skipcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>so</name> <init>= <expr><call><name>get_scrolloff_value</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>siso</name> <init>= <expr><call><name>get_sidescrolloff_value</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_CROW</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curs_rows</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_folded</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>startcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>=</operator> <name>endcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>startcol</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>endcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>startcol</name> <operator>&gt;</operator> <name>dollar_vcol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dollar_vcol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><call><name>curwin_col_off</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>+</operator> <name>extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>endcol</name> <operator>+=</operator> <name>extra</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cline_row</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>textwidth</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <name>extra</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>textwidth</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>textwidth</name> <operator>+</operator> <call><name>curwin_col_off2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name><operator>)</operator> <operator>/</operator> <name>width</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>-=</operator> <name>n</name> <operator>*</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sbr</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>vim_strsize</name><argument_list>(<argument><expr><name>p_sbr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>



<if type="elseif">else if <condition>(<expr><name>may_scroll</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_folded</name></name></expr>
)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>siso</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off_left</name> <init>= <expr><name>startcol</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>siso</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off_right</name> <init>=
<expr><name>endcol</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>siso</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>off_left</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>off_right</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>off_left</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>off_left</name></expr></then><else>: <expr><name>off_right</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>new_leftcol</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_ss</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>diff</name> <operator>&gt;=</operator> <name>textwidth</name> <operator>/</operator> <literal type="number">2</literal> <operator>||</operator> <name>off_right</name> <operator>&gt;=</operator> <name>off_left</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_leftcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>-</operator> <name>extra</name> <operator>-</operator> <name>textwidth</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>p_ss</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_ss</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_ss</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off_left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_leftcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>-</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_leftcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>+</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_leftcol</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_leftcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_leftcol</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <name>new_leftcol</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_check_anchored_floats</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>+=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>+=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>prev_skipcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>prev_skipcol</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>+</operator> <name>so</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>plines</name> <operator>=</operator>
<call><name>plines_win_nofill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">1</literal>
<operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name>
<operator>&amp;&amp;</operator> <name>width</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>
)</condition> <block>{<block_content>






<expr_stmt><expr><name>extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>+</operator> <name>so</name> <operator>*</operator> <name>width</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>plines</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>plines</name> <operator>=</operator> <call><name>plines_win</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>plines</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>plines</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>+</operator> <name>so</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>so</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>so</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>plines</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>n</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>/</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extra</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>plines</name> <operator>&lt;</operator> <name>so</name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>/</operator> <name>width</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>plines</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>plines</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>=</operator> <name>n</name> <operator>*</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>extra</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>so</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extra</name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>so</name> <operator>*</operator> <name>width</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name>
<operator>+</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>width</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>extra</name> <operator>*</operator> <name>width</name><operator>)</operator> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extra</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>/</operator> <name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>-=</operator> <name>extra</name> <operator>*</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>extra</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>width</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>endcol</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>endcol</name> <operator>-=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>endcol</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>=</operator> <name>endcol</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>/</operator> <name>width</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>+=</operator> <name>extra</name> <operator>*</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>-=</operator> <name>extra</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>extra</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>prev_skipcol</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name><operator>)</operator> <operator>/</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_scroll_lines</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_skipcol</name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cuc</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_VIRTCOL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>pum_visible</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_WCOL</name><operator>|</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_VIRTCOL</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>textpos2screenpos</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rowp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>scolp</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ccolp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ecolp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>local</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>scol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ccol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ecol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rowoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>coloff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>visible_row</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>plines_m_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>visible_row</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>existing_row</name> <init>= <expr><operator>(</operator><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>local</name> <operator>&amp;&amp;</operator> <name>existing_row</name><operator>)</operator> <operator>||</operator> <name>visible_row</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ccol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>col</name> <operator>=</operator> <name>scol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>off</name> <operator>+</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&amp;&amp;</operator> <name>width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rowoff</name> <operator>=</operator> <ternary><condition><expr><name>visible_row</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>col</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name><operator>)</operator> <operator>/</operator> <name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>rowoff</name> <operator>*</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>coloff</name> <operator>=</operator> <name>col</name> <operator>-</operator> <name>scol</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>local</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>scol</name> <operator>=</operator> <name>ccol</name> <operator>=</operator> <name>ecol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>local</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>coloff</name> <operator>=</operator> <ternary><condition><expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rowp</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>local</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>row</name> <operator>+</operator> <name>rowoff</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>scolp</name> <operator>=</operator> <name>scol</name> <operator>+</operator> <name>coloff</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ccolp</name> <operator>=</operator> <name>ccol</name> <operator>+</operator> <name>coloff</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ecolp</name> <operator>=</operator> <name>ecol</name> <operator>+</operator> <name>coloff</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> 
<name>scrolldown</name> <parameter_list>(
<parameter><decl><type><name>long</name></type> <name>line_count</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>byfold</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<while>while <condition>(<expr><name>line_count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&lt;</operator> <call><name>diff_check</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>first</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>done</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>byfold</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line_count</name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <name>first</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>done</name> <operator>+=</operator> <call><name>plines_nofill</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>invalidate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>+=</operator> <name>done</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_row</name></name> <operator>+=</operator> <name>done</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>check_topfill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>wrow</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_cheight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wrow</name> <operator>+=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cline_height</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator>
<name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>/</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>moved</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>wrow</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>first</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>wrow</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>first</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>wrow</name> <operator>-=</operator> <call><name>plines</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator>
<operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_VIRTCOL</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>moved</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldAdjustCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> 
<name>scrollup</name> <parameter_list>(
<parameter><decl><type><name>long</name></type> <name>line_count</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>byfold</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>byfold</name> <operator>&amp;&amp;</operator> <call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>line_count</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>byfold</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>+=</operator> <name>lnum</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>+=</operator> <name>line_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>+=</operator> <name>line_count</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_topfill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_BOTLINE</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator>
<operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_VIRTCOL</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> 
<name>check_topfill</name> <parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>down</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>plines_win_nofill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>down</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>win_check_anchored_floats</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>max_topfill</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>plines_nofill</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>scrolldown_clamp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>can_fill</name> <init>= <expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name>
<operator>&lt;</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;=</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><name>can_fill</name></expr>
)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 






<decl_stmt><decl><type><name>int</name></type> <name>end_row</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>can_fill</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>end_row</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>end_row</name> <operator>+=</operator> <call><name>plines_nofill</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>validate_cheight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_row</name> <operator>+=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cline_height</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator>
<name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>/</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end_row</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>-</operator> <call><name>get_scrolloff_value</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>can_fill</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_topfill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_BOTLINE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>scrollup_clamp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>==</operator> <literal type="number">0</literal></expr>
)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 






<decl_stmt><decl><type><name>int</name></type> <name>start_row</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>-</operator> <call><name>plines_nofill</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call>
<operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start_row</name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>/</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start_row</name> <operator>&gt;=</operator> <call><name>get_scrolloff_value</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_BOTLINE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>topline_back</name><parameter_list>(<parameter><decl><type><name>lineoff_T</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>fill</name></name> <operator>&lt;</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>lp</name><operator>-&gt;</operator><name>fill</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>fill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>plines_nofill</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>botline_forw</name><parameter_list>(<parameter><decl><type><name>lineoff_T</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>fill</name></name> <operator>&lt;</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>lp</name><operator>-&gt;</operator><name>fill</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>fill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>plines_nofill</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>botline_topline</name><parameter_list>(<parameter><decl><type><name>lineoff_T</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>fill</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>fill</name></name> <operator>=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>lp</name><operator>-&gt;</operator><name>fill</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>topline_botline</name><parameter_list>(<parameter><decl><type><name>lineoff_T</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>fill</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>fill</name></name> <operator>=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>lp</name><operator>-&gt;</operator><name>fill</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>scroll_cursor_top</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>min_scroll</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>always</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>scrolled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>top</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>bot</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_topline</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_topfill</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>new_topline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>get_scrolloff_value</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mouse_dragging</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>mouse_dragging</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>








<expr_stmt><expr><call><name>validate_cheight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>used</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_height</name></name></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scrolled</name> <operator>=</operator> <name>used</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bot</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>top</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>bot</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>new_topline</name> <operator>=</operator> <name>top</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<while>while <condition>(<expr><name>top</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><call><name>hasFolding</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><literal type="number">1</literal></expr> 
</then><else>: <expr><call><name>plines_nofill</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>+</operator> <name>i</name> <operator>&lt;=</operator> <name>off</name> <operator>&amp;&amp;</operator> <name>bot</name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name>bot</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>used</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <call><name>plines</name><argument_list>(<argument><expr><name>bot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>used</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scrolled</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>new_topline</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>||</operator> <name>scrolled</name> <operator>&gt;</operator> <name>min_scroll</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>extra</name> <operator>&gt;=</operator> <name>off</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>extra</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_topline</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>top</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>bot</name></expr>;</expr_stmt>
</block_content>}</block></while>






<if_stmt><if>if <condition>(<expr><name>used</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scroll_cursor_halfway</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>new_topline</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>||</operator> <name>always</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name>new_topline</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>extra</name> <operator>&gt;</operator> <name>off</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>-=</operator> <name>extra</name> <operator>-</operator> <name>off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>check_topfill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>!=</operator> <name>old_topline</name>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>!=</operator> <name>old_topfill</name></expr>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator>
<operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_TOPLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_viewport_invalid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>set_empty_rows</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>used</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_filler_rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>used</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_empty_rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_empty_rows</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>-</operator> <name>used</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&lt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_filler_rows</name></name> <operator>=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_empty_rows</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_filler_rows</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_empty_rows</name></name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_filler_rows</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_filler_rows</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_empty_rows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_empty_rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>scroll_cursor_bot</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>min_scroll</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set_topbot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scrolled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lineoff_T</name></type> <name>loff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lineoff_T</name></type> <name>boff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fill_below_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_topline</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_topfill</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_botline</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_valid</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_empty_rows</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_empty_rows</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>cln</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>so</name> <init>= <expr><call><name>get_scrolloff_value</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>set_topbot</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>cln</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>;</init>
<condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition>
<incr><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>loff</name><operator>.</operator><name>lnum</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>topline_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>loff</name><operator>.</operator><name>height</name></name> <operator>==</operator> <name>MAXCOL</name>
<operator>||</operator> <name>used</name> <operator>+</operator> <name><name>loff</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <name><name>loff</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <name><name>loff</name><operator>.</operator><name>fill</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>set_empty_rows</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>!=</operator> <name>old_topline</name>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>!=</operator> <name>old_topfill</name></expr>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_CROW</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>validate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>plines_nofill</name><argument_list>(<argument><expr><name>cln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>cln</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scrolled</name> <operator>=</operator> <name>used</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cln</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scrolled</name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_empty_rows</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>loff</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>boff</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>cln</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>boff</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>cln</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>boff</name><operator>.</operator><name>fill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fill_below_window</name> <operator>=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr></argument>)</argument_list></call>
<operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_filler_rows</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>scrolled</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>scrolled</name> <operator>&gt;=</operator> <name>min_scroll</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>extra</name> <operator>&gt;=</operator> <operator>(</operator><ternary><condition><expr><name>mouse_dragging</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>mouse_dragging</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>so</name></expr></else></ternary><operator>)</operator><operator>)</operator>
<operator>||</operator> <name><name>boff</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name>
<operator>||</operator> <name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>&gt;=</operator> <name>fill_below_window</name><operator>)</operator></expr>
)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>topline_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>loff</name><operator>.</operator><name>height</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>used</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <name><name>loff</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>used</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name>
<operator>||</operator> <name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>&lt;=</operator> <name>fill_below_window</name><operator>)</operator></expr>
)</condition> <block>{<block_content>

<expr_stmt><expr><name>scrolled</name> <operator>+=</operator> <name><name>loff</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name>
<operator>&amp;&amp;</operator> <name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scrolled</name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_empty_rows</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>boff</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>botline_forw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>boff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <name><name>boff</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>used</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name>mouse_dragging</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>mouse_dragging</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>so</name></expr></else></ternary><operator>)</operator>
<operator>||</operator> <name>scrolled</name> <operator>&lt;</operator> <name>min_scroll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extra</name> <operator>+=</operator> <name><name>boff</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>boff</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name>
<operator>||</operator> <operator>(</operator><name><name>boff</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name>
<operator>&amp;&amp;</operator> <name><name>boff</name><operator>.</operator><name>fill</name></name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_filler_rows</name></name><operator>)</operator></expr>
)</condition> <block>{<block_content>

<expr_stmt><expr><name>scrolled</name> <operator>+=</operator> <name><name>boff</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>boff</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name>
<operator>&amp;&amp;</operator> <name><name>boff</name><operator>.</operator><name>fill</name></name> <operator>==</operator> <literal type="number">0</literal></expr>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scrolled</name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_empty_rows</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>line_count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>scrolled</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>used</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_count</name> <operator>=</operator> <name>used</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>line_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>boff</name><operator>.</operator><name>fill</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>boff</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>scrolled</name> <operator>&amp;&amp;</operator> <name><name>boff</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>botline_forw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>boff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>boff</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>line_count</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>scrolled</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>line_count</name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>&amp;&amp;</operator> <name>line_count</name> <operator>&gt;</operator> <name>min_scroll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scroll_cursor_halfway</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>scrollup</name><argument_list>(<argument><expr><name>line_count</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <name>old_topline</name> <operator>&amp;&amp;</operator> <name>set_topbot</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>old_botline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_empty_rows</name></name> <operator>=</operator> <name>old_empty_rows</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>=</operator> <name>old_valid</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_TOPLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_viewport_invalid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>scroll_cursor_halfway</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>atend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>above</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>topfill</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>below</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lineoff_T</name></type> <name>loff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lineoff_T</name></type> <name>boff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_topline</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>boff</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>loff</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>loff</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>boff</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>used</name> <init>= <expr><call><name>plines_nofill</name><argument_list>(<argument><expr><name><name>loff</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>boff</name><operator>.</operator><name>fill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>topline</name> <init>= <expr><name><name>loff</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>topline</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>below</name> <operator>&lt;=</operator> <name>above</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>boff</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>botline_forw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>boff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <name><name>boff</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>used</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>below</name> <operator>+=</operator> <name><name>boff</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>below</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>atend</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>used</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>below</name> <operator>&gt;</operator> <name>above</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>topline_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>loff</name><operator>.</operator><name>height</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>used</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>used</name> <operator>+=</operator> <name><name>loff</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>used</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>above</name> <operator>+=</operator> <name><name>loff</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>topline</name> <operator>=</operator> <name><name>loff</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>topfill</name> <operator>=</operator> <name><name>loff</name><operator>.</operator><name>fill</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name>topline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name>topline</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <name>topfill</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_topline</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botfill</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>check_topfill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_TOPLINE</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>cursor_correct</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>above_wanted</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>get_scrolloff_value</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>below_wanted</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>get_scrolloff_value</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mouse_dragging</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>above_wanted</name> <operator>=</operator> <name>mouse_dragging</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>below_wanted</name> <operator>=</operator> <name>mouse_dragging</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>above_wanted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_off</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>below_wanted</name> <operator>&gt;</operator> <name>max_off</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>below_wanted</name> <operator>=</operator> <name>max_off</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>validate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>mouse_dragging</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>below_wanted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_off</name> <init>= <expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>above_wanted</name> <operator>&gt;</operator> <name>max_off</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>above_wanted</name> <operator>=</operator> <name>max_off</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<decl_stmt><decl><type><name>linenr_T</name></type> <name>cln</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name>cln</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>+</operator> <name>above_wanted</name>
<operator>&amp;&amp;</operator> <name>cln</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <name>below_wanted</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>
)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>







<decl_stmt><decl><type><name>linenr_T</name></type> <name>topline</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>botline</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>above</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>below</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_filler_rows</name></name></expr></init></decl>;</decl_stmt> 
<while>while <condition>(<expr><operator>(</operator><name>above</name> <operator>&lt;</operator> <name>above_wanted</name> <operator>||</operator> <name>below</name> <operator>&lt;</operator> <name>below_wanted</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>topline</name> <operator>&lt;</operator> <name>botline</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>below</name> <operator>&lt;</operator> <name>below_wanted</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>below</name> <operator>&lt;=</operator> <name>above</name> <operator>||</operator> <name>above</name> <operator>&gt;=</operator> <name>above_wanted</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name>botline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>botline</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>below</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>below</name> <operator>+=</operator> <call><name>plines</name><argument_list>(<argument><expr><name>botline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>--</operator><name>botline</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>above</name> <operator>&lt;</operator> <name>above_wanted</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>above</name> <operator>&lt;</operator> <name>below</name> <operator>||</operator> <name>below</name> <operator>&gt;=</operator> <name>below_wanted</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name>topline</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topline</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>above</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>above</name> <operator>+=</operator> <call><name>plines_nofill</name><argument_list>(<argument><expr><name>topline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>topline</name> <operator>&lt;</operator> <name>botline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>above</name> <operator>+=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>topline</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>topline</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>topline</name> <operator>==</operator> <name>botline</name> <operator>||</operator> <name>botline</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>topline</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>topline</name> <operator>&gt;</operator> <name>botline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>botline</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cln</name> <argument_list type="generic">&lt; <argument><expr><name>topline</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>topline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator>
<operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_CROW</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cln</name> <operator>&gt;</operator> <name>botline</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>botline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator>
<operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_CROW</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_TOPLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_viewport_invalid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>onepage</name><parameter_list>(<parameter><decl><type><name>Direction</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lineoff_T</name></type> <name>loff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_topline</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>so</name> <init>= <expr><call><name>get_scrolloff_value</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>count</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>validate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>
?</condition><then> <expr><operator>(</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>so</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>==</operator>
<call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call>
<operator>)</operator></expr></else></ternary></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ONE_WINDOW</name> <operator>&amp;&amp;</operator> <name>p_window</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_window</name> <operator>&lt;</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_window</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>+=</operator> <name>p_window</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_CROW</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>loff</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call>
<operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_filler_rows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_scroll_overlap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loff</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>loff</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <name><name>loff</name><operator>.</operator><name>fill</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_topfill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_WROW</name><operator>|</operator>
<name>VALID_CROW</name><operator>|</operator><name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>max_topfill</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ONE_WINDOW</name> <operator>&amp;&amp;</operator> <name>p_window</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_window</name> <operator>&lt;</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_window</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-=</operator> <name>p_window</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>+</operator> <name>p_window</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_scroll_overlap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>botline_topline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>loff</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>n</name> <operator>&lt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>&amp;&amp;</operator> <name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>topline_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>loff</name><operator>.</operator><name>height</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>loff</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>max_topfill</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_BOTLINE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>topline_botline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>botline_forw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>botline_forw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>botline_topline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>loff</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>loff</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>loff</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name>
<operator>||</operator> <name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name><operator>)</operator></expr>
)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>loff</name><operator>.</operator><name>fill</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&lt;</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>,
<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>max_topfill</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>==</operator> <name><name>loff</name><operator>.</operator><name>fill</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>comp_botline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator>
<operator>~</operator><operator>(</operator><name>VALID_WCOL</name> <operator>|</operator> <name>VALID_CHEIGHT</name> <operator>|</operator> <name>VALID_WROW</name> <operator>|</operator> <name>VALID_CROW</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>loff</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <name><name>loff</name><operator>.</operator><name>fill</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_topfill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_BOTLINE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>foldAdjustCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cursor_correct</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_VIRTCOL</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>check_top_offset</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scroll_cursor_top</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;=</operator> <name>old_topline</name>
<operator>&amp;&amp;</operator> <name>old_topline</name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name>old_topline</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>void</name></type> <name>get_scroll_overlap</name><parameter_list>(<parameter><decl><type><name>lineoff_T</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>min_height</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>fill</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>plines_nofill</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h1</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h1</name> <operator>&gt;</operator> <name>min_height</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>lineoff_T</name></type> <name>loff0</name> <init>= <expr><operator>*</operator><name>lp</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>botline_forw</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>topline_back</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h2</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h2</name> <operator>==</operator> <name>MAXCOL</name> <operator>||</operator> <name>h2</name> <operator>+</operator> <name>h1</name> <operator>&gt;</operator> <name>min_height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lp</name> <operator>=</operator> <name>loff0</name></expr>;</expr_stmt> 
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lineoff_T</name></type> <name>loff1</name> <init>= <expr><operator>*</operator><name>lp</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>botline_forw</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>topline_back</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h3</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h3</name> <operator>==</operator> <name>MAXCOL</name> <operator>||</operator> <name>h3</name> <operator>+</operator> <name>h2</name> <operator>&gt;</operator> <name>min_height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lp</name> <operator>=</operator> <name>loff0</name></expr>;</expr_stmt> 
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lineoff_T</name></type> <name>loff2</name> <init>= <expr><operator>*</operator><name>lp</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>botline_forw</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>topline_back</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h4</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h4</name> <operator>==</operator> <name>MAXCOL</name> <operator>||</operator> <name>h4</name> <operator>+</operator> <name>h3</name> <operator>+</operator> <name>h2</name> <operator>&gt;</operator> <name>min_height</name> <operator>||</operator> <name>h3</name> <operator>+</operator> <name>h2</name> <operator>+</operator> <name>h1</name> <operator>&gt;</operator> <name>min_height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lp</name> <operator>=</operator> <name>loff1</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lp</name> <operator>=</operator> <name>loff2</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<return>return;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>halfpage</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>Prenum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>scrolled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>Prenum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Prenum</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>
</then><else>: <expr><name>Prenum</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>&lt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name></expr>
</then><else>: <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>room</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_empty_rows</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_filler_rows</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>



<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>plines_nofill</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>scrolled</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator>
<operator>~</operator><operator>(</operator><name>VALID_VIRTCOL</name><operator>|</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_WCOL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_WROW</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>scrolled</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>plines</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>room</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>--</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>check_cursor_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&lt;</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>plines_nofill</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>scrolled</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_WROW</name><operator>|</operator>
<name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>scrolled</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_VIRTCOL</name><operator>|</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_WCOL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>--</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>foldAdjustCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_topfill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>!</operator><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cursor_correct</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_check_cursorbind</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>line</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>coladd</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>curswant</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>set_curswant</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>old_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_VIsual_select</name> <init>= <expr><name>VIsual_select</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_VIsual_active</name> <init>= <expr><name>VIsual_active</name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>VIsual_active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>old_curwin</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_crb</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator>
<call><name>diff_get_corresponding_line</name><argument_list>(<argument><expr><name>old_curbuf</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <name>coladd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>curswant</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>set_curswant</name></expr>;</expr_stmt>



<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>restart_edit_save</name> <init>= <expr><name>restart_edit</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_cursorline_standout</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_cuc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <name>restart_edit_save</name></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>mb_adjust_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>




<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>old_VIsual_select</name></expr>;</expr_stmt>
<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>old_VIsual_active</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>old_curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>old_curbuf</name></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
