<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\undo.c">









































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UH_MAGIC</name></cpp:macro> <cpp:value>0x18dade</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UE_MAGIC</name></cpp:macro> <cpp:value>0xabc123</cpp:value></cpp:define> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/change.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/edit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fold.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_updates.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/pos.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/extmark.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os_unix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/sha256.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kvec.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"undo.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>u_newcount</name></decl>, <decl><type ref="prev"/><name>u_oldcount</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>undo_undoes</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lastmark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>




<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>seen_b_u_curhead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>seen_b_u_newhead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>header_count</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>u_check_tree</name><parameter_list>(<parameter><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name></decl></parameter>,
<parameter><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>exp_uh_next</name></decl></parameter>,
<parameter><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>exp_uh_alt_prev</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>uep</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>header_count</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>&amp;&amp;</operator> <operator>++</operator><name>seen_b_u_curhead</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><literal type="string">"b_u_curhead found twice (looping?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>&amp;&amp;</operator> <operator>++</operator><name>seen_b_u_newhead</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><literal type="string">"b_u_newhead found twice (looping?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_magic</name></name> <operator>!=</operator> <name>UH_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><literal type="string">"uh_magic wrong (may be using freed memory)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>exp_uh_next</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><literal type="string">"uh_next wrong"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"expected: 0x%x, actual: 0x%x"</literal></expr></argument>,
<argument><expr><name>exp_uh_next</name></expr></argument>, <argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>exp_uh_alt_prev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><literal type="string">"uh_alt_prev wrong"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"expected: 0x%x, actual: 0x%x"</literal></expr></argument>,
<argument><expr><name>exp_uh_alt_prev</name></expr></argument>, <argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>uep</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_entry</name></name></expr>;</init> <condition><expr><name>uep</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>uep</name> <operator>=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>uep</name><operator>-&gt;</operator><name>ue_magic</name></name> <operator>!=</operator> <name>UE_MAGIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><literal type="string">"ue_magic wrong (may be using freed memory)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>u_check_tree</name><argument_list>(<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>uhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>u_check_tree</name><argument_list>(<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>uhp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>u_check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newhead_may_be_NULL</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>seen_b_u_newhead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seen_b_u_curhead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>header_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u_check_tree</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seen_b_u_newhead</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>newhead_may_be_NULL</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><literal type="string">"b_u_newhead invalid: 0x%x"</literal></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>seen_b_u_curhead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><literal type="string">"b_u_curhead invalid: 0x%x"</literal></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>header_count</name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_numhead</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><literal type="string">"b_u_numhead invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"expected: %"</literal> <name>PRId64</name> <literal type="string">", actual: %"</literal> <name>PRId64</name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>header_count</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_numhead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>int</name></type> <name>u_save_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>cur</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>top</name> <init>= <expr><ternary><condition><expr><name>cur</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>cur</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>bot</name> <init>= <expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>u_save</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>bot</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>u_save</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>bot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&gt;=</operator> <name>bot</name> <operator>||</operator> <name>bot</name> <operator>&gt;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>+</operator> <literal type="number">2</literal> <operator>==</operator> <name>bot</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u_saveline</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>top</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>u_savecommon</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>bot</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>u_savesub</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>u_savecommon</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>u_inssub</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>u_savecommon</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>u_savedel</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nlines</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>u_savecommon</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <name>nlines</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>nlines</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><name>lnum</name></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>undo_allowed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MODIFIABLE</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_modifiable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>sandbox</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_sandbox</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>textlock</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_secure</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>long</name></type> <name>get_undolevel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name> <operator>==</operator> <name>NO_LOCAL_UNDOLEVEL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>p_ul</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>zero_fmark_additional_data</name><parameter_list>(<parameter><decl><type><name>fmark_T</name> <modifier>*</modifier></type><name>fmarks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NMARKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>tv_dict_unref</name><argument_list>(<argument><expr><name><name>fmarks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>additional_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmarks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>additional_data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>u_savecommon</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>bot</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>newbot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reload</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>old_curhead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>uep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>prev_uep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reload</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>undo_allowed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>








<expr_stmt><expr><call><name>change_warning</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bot</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E881: Line count changed unexpectedly"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>u_check</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>bot</name> <operator>-</operator> <name>top</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_synced</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_new_change</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_undolevel</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>uhp</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u_header_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_init</name><argument_list>(<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_extmark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_magic</name></name> <operator>=</operator> <name>UH_MAGIC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>





<expr_stmt><expr><name>old_curhead</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_curhead</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>=</operator> <name><name>old_curhead</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<while>while <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_numhead</name></name> <operator>&gt;</operator> <call><name>get_undolevel</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhfree</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uhfree</name> <operator>==</operator> <name>old_curhead</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>u_freebranch</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>uhfree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_curhead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>uhfree</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>u_freeheader</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>uhfree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_curhead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<while>while <condition>(<expr><name><name>uhfree</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uhfree</name> <operator>=</operator> <name><name>uhfree</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>u_freebranch</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>uhfree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_curhead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>u_check</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>old_curhead</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u_freebranch</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>old_curhead</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_synced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>old_curhead</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_curhead</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>old_curhead</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>uhp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>old_curhead</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>uhp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name> <operator>==</operator> <name>old_curhead</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name> <operator>=</operator> <name>uhp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>uhp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name> <operator>=</operator> <operator>++</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_cur</name></name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_time</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_save_nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_time_cur</name></name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_time</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_getbot_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_cursor</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_cursor_vcol</name></name> <operator>=</operator> <call><name>getviscol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_cursor_vcol</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_flags</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name></expr> ?</condition><then> <expr><name>UH_CHANGED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name><operator>)</operator></expr> ?</condition><then> <expr><name>UH_EMPTYBUF</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>zero_fmark_additional_data</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_namedm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_namedm</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_namedm</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_namedm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NMARKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_visual</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>=</operator> <name>uhp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name> <operator>=</operator> <name>uhp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_numhead</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_undolevel</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uep</name> <operator>=</operator> <call><name>u_get_headentry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_uep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>uep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name><operator>-&gt;</operator><name>uh_getbot_entry</name></name> <operator>!=</operator> <name>uep</name></expr>
?</condition><then> <expr><operator>(</operator><name><name>uep</name><operator>-&gt;</operator><name>ue_top</name></name> <operator>+</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name> <operator>+</operator> <literal type="number">1</literal>
<operator>!=</operator> <operator>(</operator><ternary><condition><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>
</then><else>: <expr><name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name></expr></else></ternary><operator>)</operator><operator>)</operator></expr>
</then><else>: <expr><name><name>uep</name><operator>-&gt;</operator><name>ue_lcount</name></name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></else></ternary><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>top</name> <operator>&gt;=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_top</name></name>
<operator>&amp;&amp;</operator> <name>top</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_top</name></name> <operator>+</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_top</name></name> <operator>==</operator> <name>top</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>u_getbot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_synced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>







<expr_stmt><expr><name><name>prev_uep</name><operator>-&gt;</operator><name>ue_next</name></name> <operator>=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_next</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name><operator>-&gt;</operator><name>uh_entry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name><operator>-&gt;</operator><name>uh_entry</name></name> <operator>=</operator> <name>uep</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>newbot</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name> <operator>=</operator> <name>newbot</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>bot</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_lcount</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name><operator>-&gt;</operator><name>uh_getbot_entry</name></name> <operator>=</operator> <name>uep</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev_uep</name> <operator>=</operator> <name>uep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uep</name> <operator>=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>u_getbot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><name>uep</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u_entry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>uep</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u_entry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_magic</name></name> <operator>=</operator> <name>UE_MAGIC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_top</name></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newbot</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name> <operator>=</operator> <name>newbot</name></expr>;</expr_stmt></block_content></block></if>




<if type="elseif">else if <condition>(<expr><name>bot</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_lcount</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name><operator>-&gt;</operator><name>uh_getbot_entry</name></name> <operator>=</operator> <name>uep</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>lnum</name> <operator>=</operator> <name>top</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fast_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>u_freeentry</name><argument_list>(<argument><expr><name>uep</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>u_save_line</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_next</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name><operator>-&gt;</operator><name>uh_entry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name><operator>-&gt;</operator><name>uh_entry</name></name> <operator>=</operator> <name>uep</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_synced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>undo_undoes</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>u_check</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UF_START_MAGIC</name></cpp:macro> <cpp:value>"Vim\237UnDo\345"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UF_START_MAGIC_LEN</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UF_HEADER_MAGIC</name></cpp:macro> <cpp:value>0x5fd0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UF_HEADER_END_MAGIC</name></cpp:macro> <cpp:value>0xe7aa</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UF_ENTRY_MAGIC</name></cpp:macro> <cpp:value>0xf518</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UF_ENTRY_END_MAGIC</name></cpp:macro> <cpp:value>0x3581</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UF_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UF_LAST_SAVE_NR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UHP_SAVE_NR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_not_open</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E828: Cannot open undo file for writing: %s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<function><type><name>void</name></type> <name>u_compute_hash</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>context_sha256_T</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sha256_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sha256_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><name>char</name> <modifier>*</modifier></type><name>u_get_undo_file_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf_ffname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>reading</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dirp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dir_name</name><index>[<expr><name>MAXPATHL</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>munged_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>undo_file_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ffname</name> <init>= <expr><name>buf_ffname</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_READLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>fname_buf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ffname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_READLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>resolve_symlink</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>ffname</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>fname_buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ffname</name> <operator>=</operator> <name>fname_buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>dirp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p_udir</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>dirp</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>dir_len</name> <init>= <expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dirp</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dir_name</name></expr></argument>,
<argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dir_len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>dir_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ffname_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>undo_file_name</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>ffname_len</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>undo_file_name</name></expr></argument>, <argument><expr><name>ffname</name></expr></argument>, <argument><expr><name>ffname_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tail</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>path_tail</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <name>undo_file_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>tail_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>tail</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name>tail_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>tail</name> <operator>+</operator> <name>tail_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">".un~"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">".un~"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dir_name</name><index>[<expr><name>dir_len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_directory</name> <init>= <expr><call><name>os_isdir</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dir_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_directory</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dirp</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>reading</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>failed_dir</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>os_mkdir_recurse</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>failed_dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG3</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E5003: Unable to create directory \"%s\" for undo file: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>failed_dir</name></expr></argument>, <argument><expr><call><name>os_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>failed_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>has_directory</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_directory</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>munged_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>munged_name</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>munged_name</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>undo_file_name</name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name>munged_name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>undo_file_name</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>reading</name> <operator>||</operator> <call><name>os_path_exists</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>undo_file_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>undo_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>munged_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>undo_file_name</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>corruption_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mesg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>file_name</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>EMSG3</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E825: Corrupted undo file (%s): %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mesg</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>u_free_uhp</name><parameter_list>(<parameter><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>nuep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>uep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>uep</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_entry</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>uep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nuep</name> <operator>=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u_freeentry</name><argument_list>(<argument><expr><name>uep</name></expr></argument>, <argument><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uep</name> <operator>=</operator> <name>nuep</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>uhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>bool</name></type> <name>serialize_header</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>bi</name><operator>-&gt;</operator><name>bi_buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>bi</name><operator>-&gt;</operator><name>bi_fp</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>UF_START_MAGIC</name></expr></argument>, <argument><expr><name>UF_START_MAGIC_LEN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name>UF_VERSION</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>undo_write</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>UNDO_HASH_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_line_ptr</name></name></expr> ?</condition><then> <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_line_ptr</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>undo_write</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_line_ptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_u_line_lnum</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_u_line_colnr</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>put_header_ptr</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_header_ptr</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_header_ptr</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_u_numhead</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_u_seq_last</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_u_seq_cur</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>time_buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>time_to_bytes</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_time_cur</name></name></expr></argument>, <argument><expr><name>time_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name>time_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name>UF_LAST_SAVE_NR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_u_save_nr_last</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>bool</name></type> <name>serialize_uhp</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>, <parameter><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>UF_HEADER_MAGIC</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_header_ptr</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_header_ptr</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_header_ptr</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_header_ptr</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serialize_pos</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_cursor_vcol</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_flags</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>NMARKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>serialize_pos</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_namedm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>serialize_visualinfo</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_visual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>time_buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>time_to_bytes</name><argument_list>(<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_time</name></name></expr></argument>, <argument><expr><name>time_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name>time_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name>UHP_SAVE_NR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_save_nr</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>uep</name> <init>= <expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_entry</name></name></expr></init></decl>;</init> <condition><expr><name>uep</name></expr>;</condition> <incr><expr><name>uep</name> <operator>=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>UF_ENTRY_MAGIC</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>serialize_uep</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name>uep</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>UF_ENTRY_END_MAGIC</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u_header_T</name> <modifier>*</modifier></type><name>unserialize_uhp</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u_header_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>uhp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u_header_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_magic</name></name> <operator>=</operator> <name>UH_MAGIC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>corruption_error</name><argument_list>(<argument><expr><literal type="string">"uh_seq"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>uhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>unserialize_pos</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_cursor_vcol</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_flags</name></name> <operator>=</operator> <call><name>undo_read_2c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Timestamp</name></type> <name>cur_timestamp</name> <init>= <expr><call><name>os_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>NMARKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>unserialize_pos</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_namedm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_namedm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>timestamp</name> <operator>=</operator> <name>cur_timestamp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_namedm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>unserialize_visualinfo</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_visual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_time</name></name> <operator>=</operator> <call><name>undo_read_time</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>undo_read_byte</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>what</name> <init>= <expr><call><name>undo_read_byte</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>what</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UHP_SAVE_NR</name></expr>:</case>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_save_nr</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<while>while <condition>(<expr><operator>--</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>undo_read_byte</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></switch>
</block_content>}</block></for>


<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>last_uep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>undo_read_2c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>UF_ENTRY_MAGIC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>uep</name> <init>= <expr><call><name>unserialize_uep</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>last_uep</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_entry</name></name> <operator>=</operator> <name>uep</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>last_uep</name><operator>-&gt;</operator><name>ue_next</name></name> <operator>=</operator> <name>uep</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>last_uep</name> <operator>=</operator> <name>uep</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uep</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>u_free_uhp</name><argument_list>(<argument><expr><name>uhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>UF_ENTRY_END_MAGIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>corruption_error</name><argument_list>(<argument><expr><literal type="string">"entry end"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u_free_uhp</name><argument_list>(<argument><expr><name>uhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>uhp</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>bool</name></type> <name>serialize_uep</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>, <parameter><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>uep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>uep</name><operator>-&gt;</operator><name>ue_top</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>uep</name><operator>-&gt;</operator><name>ue_lcount</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>undo_write</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u_entry_T</name> <modifier>*</modifier></type><name>unserialize_uep</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type> <name>bi</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>error</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>uep</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u_entry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>uep</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u_entry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_magic</name></name> <operator>=</operator> <name>UE_MAGIC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_top</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_lcount</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name> <operator>&lt;</operator> <name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name></name> <operator>=</operator> <name>array</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>line_len</name> <init>= <expr><call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>line_len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>undo_read_string</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>corruption_error</name><argument_list>(<argument><expr><literal type="string">"line length"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>uep</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>uep</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>serialize_pos</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>, <parameter><decl><type><name>pos_T</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>pos</name><operator>.</operator><name>coladd</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>unserialize_pos</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>coladd</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>coladd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>serialize_visualinfo</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>, <parameter><decl><type><name>visualinfo_T</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>serialize_pos</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>vi_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serialize_pos</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>vi_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>vi_mode</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>vi_curswant</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>unserialize_visualinfo</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>, <parameter><decl><type><name>visualinfo_T</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>unserialize_pos</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>vi_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unserialize_pos</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>vi_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vi_mode</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>vi_curswant</name></name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>u_write_undo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>forceit</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>hash</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>3<operator>,</operator> 4</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mark</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>headers_written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>write_ok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bufinfo_T</name></type> <name>bi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>file_name</name> <operator>=</operator> <call><name>u_get_undo_file_name</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot write undo file in any directory in 'undodir'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>file_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>






<expr_stmt><expr><name>perm</name> <operator>=</operator> <literal type="number">0600</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <call><name>os_getperm</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>perm</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <literal type="number">0600</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>perm</name> <operator>=</operator> <name>perm</name> <operator>&amp;</operator> <literal type="number">0666</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>os_path_exists</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>file_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name>forceit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>os_open</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Will not overwrite with undo file, cannot read: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>mbuf</name><index>[<expr><name>UF_START_MAGIC_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>read_eintr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mbuf</name></expr></argument>, <argument><expr><name>UF_START_MAGIC_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>UF_START_MAGIC_LEN</name>
<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>mbuf</name></expr></argument>, <argument><expr><name>UF_START_MAGIC</name></expr></argument>, <argument><expr><name>UF_START_MAGIC_LEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Will not overwrite, this is not an undo file: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>os_remove</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_numhead</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_line_ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>verb_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Skipping undo file write, nothing to undo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>os_open</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><name>O_CREAT</name><operator>|</operator><name>O_WRONLY</name><operator>|</operator><name>O_EXCL</name><operator>|</operator><name>O_NOFOLLOW</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_not_open</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>os_setperm</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Writing undo file: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>u_check</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>





<decl_stmt><decl><type><name>FileInfo</name></type> <name>file_info_old</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileInfo</name></type> <name>file_info_new</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>os_fileinfo</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_info_old</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>os_fileinfo</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_info_new</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>file_info_old</name><operator>.</operator><name>stat</name><operator>.</operator><name>st_gid</name></name> <operator>!=</operator> <name><name>file_info_new</name><operator>.</operator><name>stat</name><operator>.</operator><name>st_gid</name></name>
<operator>&amp;&amp;</operator> <call><name>os_fchown</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_uid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>uv_gid_t</name><operator>)</operator><name><name>file_info_old</name><operator>.</operator><name>stat</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_setperm</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><operator>(</operator><name>perm</name> <operator>&amp;</operator> <literal type="number">0707</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>perm</name> <operator>&amp;</operator> <literal type="number">07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_not_open</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_remove</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bi_buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bi_fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>serialize_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>write_error</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>mark</name> <operator>=</operator> <operator>++</operator><name>lastmark</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>uhp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>mark</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>=</operator> <name>mark</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>++</operator><name>headers_written</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>serialize_uhp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>, <argument><expr><name>uhp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>write_error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>mark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>mark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>mark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>UF_HEADER_END_MAGIC</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>write_ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>headers_written</name> <operator>!=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_numhead</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><literal type="string">"Written %"</literal> <name>PRId64</name> <literal type="string">" headers, ..."</literal></expr></argument>, <argument><expr><name>headers_written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><literal type="string">"... but numhead is %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_numhead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>write_error</name>:</label>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>write_ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E829: write error in undo file: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>vim_acl_T</name></type> <name>acl</name></decl>;</decl_stmt>


<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>mch_get_acl</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_set_acl</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>file_name</name></expr></argument>, <argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_free_acl</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>theend</name>:</label>
<if_stmt><if>if <condition>(<expr><name>file_name</name> <operator>!=</operator> <name>name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>






<function><type><name>void</name></type> <name>u_read_undo</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>orig_name</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>uhp_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_name</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>file_name</name> <operator>=</operator> <call><name>u_get_undo_file_name</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><name>FileInfo</name></type> <name>file_info_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileInfo</name></type> <name>file_info_undo</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>os_fileinfo</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>orig_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_info_orig</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>os_fileinfo</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>file_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_info_undo</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>file_info_orig</name><operator>.</operator><name>stat</name><operator>.</operator><name>st_uid</name></name> <operator>!=</operator> <name><name>file_info_undo</name><operator>.</operator><name>stat</name><operator>.</operator><name>st_uid</name></name>
<operator>&amp;&amp;</operator> <name><name>file_info_undo</name><operator>.</operator><name>stat</name><operator>.</operator><name>st_uid</name></name> <operator>!=</operator> <call><name>getuid</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Not reading undo file, owner differs: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>file_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Reading undo file: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>os_fopen</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E822: Cannot open undo file for reading: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bufinfo_T</name></type> <name>bi</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bi_buf</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>.</operator><name>bi_fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char_u</name></type> <name><name>magic_buf</name><index>[<expr><name>UF_START_MAGIC_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>magic_buf</name></expr></argument>, <argument><expr><name>UF_START_MAGIC_LEN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal>
<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>magic_buf</name></expr></argument>, <argument><expr><name>UF_START_MAGIC</name></expr></argument>, <argument><expr><name>UF_START_MAGIC_LEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E823: Not an undo file: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name>get2c</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <name>UF_VERSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E824: Incompatible undo file: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>read_hash</name><index>[<expr><name>UNDO_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>undo_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>, <argument><expr><name>read_hash</name></expr></argument>, <argument><expr><name>UNDO_HASH_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>corruption_error</name><argument_list>(<argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>line_count</name> <init>= <expr><operator>(</operator><name>linenr_T</name><operator>)</operator><call><name>undo_read_4c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>read_hash</name></expr></argument>, <argument><expr><name>UNDO_HASH_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>
<operator>||</operator> <name>line_count</name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>give_warning</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator>
<call><name>_</name><argument_list>(<argument><expr><literal type="string">"File contents changed, cannot use undo info"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>str_len</name> <init>= <expr><call><name>undo_read_4c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_ptr</name> <operator>=</operator> <call><name>undo_read_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>line_lnum</name> <init>= <expr><operator>(</operator><name>linenr_T</name><operator>)</operator><call><name>undo_read_4c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>line_colnr</name> <init>= <expr><operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>undo_read_4c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>line_lnum</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>line_colnr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>corruption_error</name><argument_list>(<argument><expr><literal type="string">"line lnum/col"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>old_header_seq</name> <init>= <expr><call><name>undo_read_4c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_header_seq</name> <init>= <expr><call><name>undo_read_4c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_header_seq</name> <init>= <expr><call><name>undo_read_4c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_head</name> <init>= <expr><call><name>undo_read_4c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seq_last</name> <init>= <expr><call><name>undo_read_4c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seq_cur</name> <init>= <expr><call><name>undo_read_4c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>seq_time</name> <init>= <expr><call><name>undo_read_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>long</name></type> <name>last_save_nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>undo_read_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>what</name> <init>= <expr><call><name>undo_read_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>what</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UF_LAST_SAVE_NR</name></expr>:</case>
<expr_stmt><expr><name>last_save_nr</name> <operator>=</operator> <call><name>undo_read_4c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>

<while>while <condition>(<expr><operator>--</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>undo_read_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></switch>
</block_content>}</block></for>





<if_stmt><if>if <condition>(<expr><name>num_head</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>num_head</name> <operator>&lt;</operator> <name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>uhp_table</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>uhp_table</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>num_head</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>uhp_table</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>num_read_uhps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>undo_read_2c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>UF_HEADER_MAGIC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num_read_uhps</name> <operator>&gt;=</operator> <name>num_head</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>corruption_error</name><argument_list>(<argument><expr><literal type="string">"num_head too small"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name> <init>= <expr><call><name>unserialize_uhp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>uhp_table</name><index>[<expr><name>num_read_uhps</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>uhp</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>num_read_uhps</name> <operator>!=</operator> <name>num_head</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>corruption_error</name><argument_list>(<argument><expr><literal type="string">"num_head"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>UF_HEADER_END_MAGIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>corruption_error</name><argument_list>(<argument><expr><literal type="string">"end marker"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>amount</name> <init>= <expr><name>num_head</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>uhp_table_used</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>uhp_table_used</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FLAG</name><parameter_list>(<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>++ uhp_table_used[j]</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FLAG</name><parameter_list>(<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><name>short</name></type> <name>old_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>new_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_head</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name> <init>= <expr><name><name>uhp_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_head</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>uhp_table</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>j</name>
<operator>&amp;&amp;</operator> <name><name>uhp_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>uh_seq</name> <operator>==</operator> <name><name>uhp_table</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>uh_seq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>corruption_error</name><argument_list>(<argument><expr><literal type="string">"duplicate uh_seq"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_head</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>uhp_table</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>uhp_table</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>uh_seq</name> <operator>==</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>seq</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>uhp_table</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_FLAG</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_head</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>uhp_table</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>uhp_table</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>uh_seq</name> <operator>==</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>seq</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>uhp_table</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_FLAG</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_head</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>uhp_table</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>uhp_table</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>uh_seq</name> <operator>==</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>seq</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>uhp_table</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_FLAG</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_head</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>uhp_table</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>uhp_table</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>uh_seq</name> <operator>==</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>seq</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>uhp_table</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_FLAG</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>old_header_seq</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>old_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name> <operator>==</operator> <name>old_header_seq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;=</operator> <name>SHRT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_idx</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_FLAG</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_header_seq</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name> <operator>==</operator> <name>new_header_seq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;=</operator> <name>SHRT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_idx</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_FLAG</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_header_seq</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cur_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name> <operator>==</operator> <name>cur_header_seq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;=</operator> <name>SHRT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_idx</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_FLAG</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<expr_stmt><expr><call><name>u_blockfree</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name> <operator>=</operator> <ternary><condition><expr><name>old_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>uhp_table</name><index>[<expr><name>old_idx</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>=</operator> <ternary><condition><expr><name>new_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>uhp_table</name><index>[<expr><name>new_idx</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>=</operator> <ternary><condition><expr><name>cur_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>uhp_table</name><index>[<expr><name>cur_idx</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_ptr</name></name> <operator>=</operator> <name>line_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_lnum</name></name> <operator>=</operator> <name>line_lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_colnr</name></name> <operator>=</operator> <name>line_colnr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_numhead</name></name> <operator>=</operator> <name>num_head</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_last</name></name> <operator>=</operator> <name>seq_last</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_cur</name></name> <operator>=</operator> <name>seq_cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_time_cur</name></name> <operator>=</operator> <name>seq_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_save_nr_last</name></name> <operator>=</operator> <name>last_save_nr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_save_nr_cur</name></name> <operator>=</operator> <name>last_save_nr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_synced</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>uhp_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_head</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>uhp_table_used</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><literal type="string">"uhp_table entry %"</literal> <name>PRId64</name> <literal type="string">" not used, leaking memory"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>uhp_table_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u_check</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Finished reading undo file %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>theend</name>;</goto>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>line_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp_table</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_read_uhps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>uhp_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>u_free_uhp</name><argument_list>(<argument><expr><name><name>uhp_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>uhp_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>file_name</name> <operator>!=</operator> <name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>








<function><type><specifier>static</specifier> <name>bool</name></type> <name>undo_write</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<return>return <expr><call><name>fwrite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_fp</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block>










<function><type><specifier>static</specifier> <name>bool</name></type> <name>undo_write_bytes</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>, <parameter><decl><type><name>uintmax_t</name></type> <name>nr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>bufi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>bufi</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>bufi</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>bufi</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>nr</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>undo_write</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>put_header_ptr</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>, <parameter><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>uhp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undo_write_bytes</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>uhp</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>undo_read_4c</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get4c</name><argument_list>(<argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_fp</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>undo_read_2c</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get2c</name><argument_list>(<argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_fp</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>undo_read_byte</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>getc</name><argument_list>(<argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_fp</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>time_t</name></type> <name>undo_read_time</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get8ctime</name><argument_list>(<argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_fp</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>bool</name></type> <name>undo_read</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>retval</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bi</name><operator>-&gt;</operator><name>bi_fp</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>retval</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block>






<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>undo_read_string</name><parameter_list>(<parameter><decl><type><name>bufinfo_T</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>xmallocz</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>undo_read</name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>u_undo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_synced</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_UNDO</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>undo_undoes</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>undo_undoes</name> <operator>=</operator> <operator>!</operator><name>undo_undoes</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>u_doit</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>u_redo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_UNDO</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>undo_undoes</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>u_doit</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>u_undo_and_forget</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_synced</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>undo_undoes</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u_doit</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>to_forget</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>=</operator> <name><name>to_forget</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>=</operator> <name><name>to_forget</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>to_forget</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>to_forget</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_cur</name></name> <operator>=</operator> <ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr> ?</condition><then>
<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_seq</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_cur</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name><operator>-&gt;</operator><name>uh_seq</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>to_forget</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>to_forget</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_last</name></name> <operator>==</operator> <name><name>to_forget</name><operator>-&gt;</operator><name>uh_seq</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_last</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>u_freebranch</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>to_forget</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>u_doit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startcount</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>quiet</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>do_buf_event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name>startcount</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>undo_allowed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>u_newcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u_oldcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>u_oldcount</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>change_warning</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>undo_undoes</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>get_undolevel</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_numhead</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>startcount</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Already at oldest change"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>u_undoredo</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>do_buf_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>get_undolevel</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>startcount</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Already at newest change"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>u_undoredo</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>do_buf_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>u_undo_end</name><argument_list>(<argument><expr><name>undo_undoes</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>quiet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>undo_time</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>absolute</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>closest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>closest_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>closest_seq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nomark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dosec</name> <init>= <expr><name>sec</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dofile</name> <init>= <expr><name>file</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>above</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>did_undo</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_synced</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>u_newcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u_oldcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>u_oldcount</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>absolute</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>step</name></expr>;</expr_stmt>
<expr_stmt><expr><name>closest</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dosec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_time_cur</name></name><operator>)</operator> <operator>+</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dofile</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_save_nr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_save_nr_cur</name></name> <operator>+</operator> <name>step</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_save_nr_cur</name></name> <operator>+</operator> <name>step</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>dofile</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_save_nr_cur</name></name> <operator>+</operator> <name>step</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_save_nr_last</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_last</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dofile</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_cur</name></name> <operator>+</operator> <name>step</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>closest</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dosec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>closest</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><call><name>os_time</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dofile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>closest</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_save_nr_last</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>closest</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_last</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&gt;=</operator> <name>closest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>closest</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>closest_start</name> <operator>=</operator> <name>closest</name></expr>;</expr_stmt>
<expr_stmt><expr><name>closest_seq</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_cur</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mark</name> <operator>=</operator> <name>lastmark</name></expr>;</expr_stmt> 
<goto>goto <name>target_zero</name>;</goto>
</block_content>}</block></if></if_stmt>









<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control> <block>{<block_content>




<expr_stmt><expr><name>mark</name> <operator>=</operator> <operator>++</operator><name>lastmark</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nomark</name> <operator>=</operator> <operator>++</operator><name>lastmark</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>uhp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>=</operator> <name>mark</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dosec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_time</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dofile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_save_nr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>dofile</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_cur</name></name></expr>
</then><else>: <expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_cur</name></name></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>dosec</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>==</operator> <name>closest</name><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name> <operator>&lt;</operator> <name>closest_seq</name></expr>
</then><else>: <expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name> <operator>&gt;</operator> <name>closest_seq</name></expr></else></ternary><operator>)</operator></expr>
</then><else>: <expr><name>closest</name> <operator>==</operator> <name>closest_start</name>
<operator>||</operator> <operator>(</operator><ternary><condition><expr><name>val</name> <operator>&gt;</operator> <name>target</name></expr>
?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>closest</name> <operator>&gt;</operator> <name>target</name></expr>
?</condition><then> <expr><name>val</name> <operator>-</operator> <name>target</name> <operator>&lt;=</operator> <name>closest</name> <operator>-</operator> <name>target</name></expr>
</then><else>: <expr><name>val</name> <operator>-</operator> <name>target</name> <operator>&lt;=</operator> <name>target</name> <operator>-</operator> <name>closest</name></expr></else></ternary><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>closest</name> <operator>&gt;</operator> <name>target</name></expr>
?</condition><then> <expr><name>target</name> <operator>-</operator> <name>val</name> <operator>&lt;=</operator> <name>closest</name> <operator>-</operator> <name>target</name></expr>
</then><else>: <expr><name>target</name> <operator>-</operator> <name>val</name> <operator>&lt;=</operator> <name>target</name> <operator>-</operator> <name>closest</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>closest</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>closest_seq</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dosec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>nomark</name>
<operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>mark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if>


<if type="elseif">else if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>nomark</name>
<operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>mark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if>



<if type="elseif">else if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>nomark</name>
<operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>mark</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>=</operator> <name>nomark</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>=</operator> <name>nomark</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>absolute</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E830: Undo number %"</literal> <name>PRId64</name> <literal type="string">" not found"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>closest</name> <operator>==</operator> <name>closest_start</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Already at oldest change"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Already at newest change"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <name>closest_seq</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dosec</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dofile</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>above</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>target_zero</name>:</label>

<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>target</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>change_warning</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><name>target</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>mark</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name> <operator>==</operator> <name>target</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>above</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>=</operator> <name>uhp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u_undoredo</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>=</operator> <name>nomark</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>change_warning</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>==</operator> <name>mark</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>last</name> <operator>=</operator> <name>uhp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>last</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>last</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>==</operator> <name>mark</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>!=</operator> <name>uhp</name></expr>)</condition> <block>{<block_content>


<while>while <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>last</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>uhp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name> <operator>==</operator> <name>uhp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>uhp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>=</operator> <name>uhp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>mark</name></expr>)</condition> <block>{<block_content>
<break>break;</break> 
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name> <operator>==</operator> <name>target</name> <operator>&amp;&amp;</operator> <name>above</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_cur</name></name> <operator>=</operator> <name>target</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>u_undoredo</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>=</operator> <name>uhp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_undo</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content> 
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>mark</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"undo_time()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>u_undo_end</name><argument_list>(<argument><expr><name>did_undo</name></expr></argument>, <argument><expr><name>absolute</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>u_undoredo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>undo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>do_buf_event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>newarray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>oldsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>newsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>top</name></decl>, <decl><type ref="prev"/><name>bot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>newlnum</name> <init>= <expr><name>MAXLNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>uep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nuep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>newlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fmark_T</name></type> <name><name>namedm</name><index>[<expr><name>NMARKS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>visualinfo_T</name></type> <name>visualinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>empty_buffer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>curhead</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>u_check</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>old_flags</name> <operator>=</operator> <name><name>curhead</name><operator>-&gt;</operator><name>uh_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_flags</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name></expr> ?</condition><then> <expr><name>UH_CHANGED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name><operator>)</operator></expr> ?</condition><then> <expr><name>UH_EMPTYBUF</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>zero_fmark_additional_data</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_namedm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>namedm</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_namedm</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_namedm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NMARKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>visualinfo</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>uep</name> <operator>=</operator> <name><name>curhead</name><operator>-&gt;</operator><name>uh_entry</name></name></expr>;</init> <condition><expr><name>uep</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>uep</name> <operator>=</operator> <name>nuep</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bot</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>||</operator> <name>top</name> <operator>&gt;=</operator> <name>bot</name>
<operator>||</operator> <name>bot</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IEMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E438: u_undo: line numbers wrong"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oldsize</name> <operator>=</operator> <name>bot</name> <operator>-</operator> <name>top</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&lt;</operator> <name>newlnum</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>curhead</name><operator>-&gt;</operator><name>uh_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name>top</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name>top</name> <operator>+</operator> <name>newsize</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>curhead</name><operator>-&gt;</operator><name>uh_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>newlnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>newsize</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>oldsize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>newsize</name> <operator>&amp;&amp;</operator> <name>newlnum</name> <operator>==</operator> <name>MAXLNUM</name> <operator>&amp;&amp;</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newlnum</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>newlnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>newsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newlnum</name> <operator>=</operator> <name>top</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>newlnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>empty_buffer</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>oldsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newarray</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>oldsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name>bot</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name>oldsize</name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>lnum</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>newarray</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>u_save_line</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>empty_buffer</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>newarray</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>newsize</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name>top</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>newsize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>lnum</name></expr></incr>)</control> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>empty_buffer</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>oldsize</name> <operator>!=</operator> <name>newsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mark_adjust</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>top</name> <operator>+</operator> <name>oldsize</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>MAXLNUM</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>newsize</name> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><name>oldsize</name></expr></argument>, <argument><expr><name>kExtmarkNOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>top</name> <operator>+</operator> <name>oldsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>+=</operator> <name>newsize</name> <operator>-</operator> <name>oldsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>top</name> <operator>+</operator> <name>oldsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>+=</operator> <name>newsize</name> <operator>-</operator> <name>oldsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bot</name></expr></argument>, <argument><expr><name>newsize</name> <operator>-</operator> <name>oldsize</name></expr></argument>, <argument><expr><name>do_buf_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>top</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>top</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>newsize</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>top</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>top</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>top</name> <operator>+</operator> <name>newsize</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>top</name> <operator>+</operator> <name>newsize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>u_newcount</name> <operator>+=</operator> <name>newsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u_oldcount</name> <operator>+=</operator> <name>oldsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name> <operator>=</operator> <name>oldsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name></name> <operator>=</operator> <name>newarray</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name> <operator>=</operator> <name>top</name> <operator>+</operator> <name>newsize</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>nuep</name> <operator>=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_next</name></name> <operator>=</operator> <name>newlist</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newlist</name> <operator>=</operator> <name>uep</name></expr>;</expr_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><name>ExtmarkUndoObject</name></type> <name>undo_info</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>undo</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>kv_size</name><argument_list>(<argument><expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_extmark</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>undo_info</name> <operator>=</operator> <call><name>kv_A</name><argument_list>(<argument><expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_extmark</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extmark_apply_undo</name><argument_list>(<argument><expr><name>undo_info</name></expr></argument>, <argument><expr><name>undo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>kv_size</name><argument_list>(<argument><expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_extmark</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>undo_info</name> <operator>=</operator> <call><name>kv_A</name><argument_list>(<argument><expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_extmark</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extmark_apply_undo</name><argument_list>(<argument><expr><name>undo_info</name></expr></argument>, <argument><expr><name>undo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_entry</name></name> <operator>=</operator> <name>newlist</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_flags</name></name> <operator>=</operator> <name>new_flags</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>old_flags</name> <operator>&amp;</operator> <name>UH_EMPTYBUF</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>BUFEMPTY</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <name>ML_EMPTY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>old_flags</name> <operator>&amp;</operator> <name>UH_CHANGED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>unchanged</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>do_buf_event</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>buf_updates_changedtick</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NMARKS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_namedm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_fmark</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_namedm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_namedm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>curhead</name><operator>-&gt;</operator><name>uh_namedm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>namedm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_namedm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>namedm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_namedm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_visual</name><operator>.</operator><name>vi_start</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name></name> <operator>=</operator> <name><name>curhead</name><operator>-&gt;</operator><name>uh_visual</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_visual</name></name> <operator>=</operator> <name>visualinfo</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>curhead</name><operator>-&gt;</operator><name>uh_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curhead</name><operator>-&gt;</operator><name>uh_cursor_vcol</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>curhead</name><operator>-&gt;</operator><name>uh_cursor_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_cur</name></name> <operator>=</operator> <name><name>curhead</name><operator>-&gt;</operator><name>uh_seq</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>undo</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_cur</name></name> <operator>=</operator> <ternary><condition><expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr> ?</condition><then>
<expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_seq</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curhead</name><operator>-&gt;</operator><name>uh_save_nr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>undo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_save_nr_cur</name></name> <operator>=</operator> <name><name>curhead</name><operator>-&gt;</operator><name>uh_save_nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_save_nr_cur</name></name> <operator>=</operator> <name><name>curhead</name><operator>-&gt;</operator><name>uh_save_nr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_time_cur</name></name> <operator>=</operator> <name><name>curhead</name><operator>-&gt;</operator><name>uh_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>u_check</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>u_undo_end</name><parameter_list>(
<parameter><decl><type><name>bool</name></type> <name>did_undo</name></decl></parameter>, 
<parameter><decl><type><name>bool</name></type> <name>absolute</name></decl></parameter>, 
<parameter><decl><type><name>bool</name></type> <name>quiet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msgstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>msgbuf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_UNDO</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>quiet</name>
<operator>||</operator> <name>global_busy</name> 
<operator>||</operator> <operator>!</operator><call><name>messaging</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> 
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>u_newcount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>u_oldcount</name> <operator>-=</operator> <name>u_newcount</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>u_oldcount</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msgstr</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"more line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>u_oldcount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msgstr</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"more lines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>u_oldcount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msgstr</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"line less"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>u_oldcount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msgstr</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"fewer lines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>u_oldcount</name> <operator>=</operator> <name>u_newcount</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>u_newcount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msgstr</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>msgstr</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"changes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>absolute</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_undo</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>did_undo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>msgbuf</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u_add_time</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msgbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<block>{<block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>curbuf</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block>

<expr_stmt><expr><call><name>smsg_attr_keep</name><argument_list>(
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" %s; %s #%"</literal> <name>PRId64</name> <literal type="string">" %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>u_oldcount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>-</operator><name>u_oldcount</name></expr> </then><else>: <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>u_oldcount</name></expr></else></ternary></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>msgstr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>did_undo</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"before"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>uhp</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">0L</literal></expr> </then><else>: <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>u_sync</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_synced</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <name>no_u_sync</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_undolevel</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_synced</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if> 
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>u_getbot</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>ex_undolist</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nomark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><name>mark</name> <operator>=</operator> <operator>++</operator><name>lastmark</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nomark</name> <operator>=</operator> <operator>++</operator><name>lastmark</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>uhp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>nomark</name>
<operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>mark</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><literal type="string">"%6ld %7d "</literal></expr></argument>,
<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name></expr></argument>, <argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u_add_time</name><argument_list>(<argument><expr><name>IObuff</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_save_nr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">33</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>vim_snprintf_add</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,
<argument><expr><literal type="string">" %3ld"</literal></expr></argument>, <argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_save_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GA_APPEND</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>=</operator> <name>mark</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>nomark</name>
<operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>mark</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>changes</name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>nomark</name>
<operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>mark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if>



<if type="elseif">else if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>nomark</name>
<operator>&amp;&amp;</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>!=</operator> <name>mark</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>changes</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_walk</name></name> <operator>=</operator> <name>nomark</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>changes</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Nothing to undo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>sort_strings</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"number changes when saved"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>msg_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear_strings</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>u_add_time</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>tt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>curtime</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>tt</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>tt</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">60L</literal> <operator>*</operator> <literal type="number">60L</literal> <operator>*</operator> <literal type="number">12L</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strftime</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>curtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strftime</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%Y/%m/%d %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>curtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>seconds</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>tt</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>,
<argument><expr><call><name>NGETTEXT</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" second ago"</literal></expr></argument>,
<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" seconds ago"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>seconds</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>ex_undojoin</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E790: undojoin is not allowed after undo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_synced</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_undolevel</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_synced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>u_unchanged</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>u_unch_branch</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_did_warn</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>u_find_first_changed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>uep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>uhp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 


<expr_stmt><expr><name>uep</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_entry</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uep</name><operator>-&gt;</operator><name>ue_top</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name><index>[<expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clearpos</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_cursor</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>!=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clearpos</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_cursor</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>u_update_save_nr</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name><name>buf</name><operator>-&gt;</operator><name>b_u_save_nr_last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_save_nr_cur</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_save_nr_last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_save_nr</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_save_nr_last</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>u_unch_branch</name><parameter_list>(<parameter><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uh</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>uh</name> <operator>=</operator> <name>uhp</name></expr>;</init> <condition><expr><name>uh</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>uh</name> <operator>=</operator> <name><name>uh</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>uh</name><operator>-&gt;</operator><name>uh_flags</name></name> <operator>|=</operator> <name>UH_CHANGED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uh</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u_unch_branch</name><argument_list>(<argument><expr><name><name>uh</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>u_entry_T</name> <modifier>*</modifier></type><name>u_get_headentry</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name><operator>-&gt;</operator><name>uh_entry</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>IEMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E439: undo list corrupt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name><operator>-&gt;</operator><name>uh_entry</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>u_getbot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>uep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>extra</name></decl>;</decl_stmt>

<expr_stmt><expr><name>uep</name> <operator>=</operator> <call><name>u_get_headentry</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>uep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>uep</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name><operator>-&gt;</operator><name>uh_getbot_entry</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>extra</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_lcount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name> <operator>=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_top</name></name> <operator>+</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>extra</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>IEMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E440: undo line missing"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_bot</name></name> <operator>=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 



</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name><operator>-&gt;</operator><name>uh_getbot_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_synced</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>u_freeheader</name><parameter_list>(
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name></decl></parameter>,
<parameter><decl><type><name>u_header_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>uhpp</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhap</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u_freebranch</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>uhpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>uhap</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name></expr>;</init> <condition><expr><name>uhap</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>uhap</name> <operator>=</operator> <name><name>uhap</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uhap</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_next</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>u_freeentries</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>uhp</name></expr></argument>, <argument><expr><name>uhpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>u_freebranch</name><parameter_list>(
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name></decl></parameter>,
<parameter><decl><type><name>u_header_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>uhpp</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>tofree</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u_freeheader</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name></expr></argument>, <argument><expr><name>uhpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_prev</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>uhp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tofree</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tofree</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u_freebranch</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>tofree</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>uhpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>tofree</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u_freeentries</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tofree</name></expr></argument>, <argument><expr><name>uhpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>u_freeentries</name><parameter_list>(
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name></decl></parameter>,
<parameter><decl><type><name>u_header_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>uhpp</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>uep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nuep</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>==</operator> <name>uhp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>==</operator> <name>uhp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>uhpp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>uhp</name> <operator>==</operator> <operator>*</operator><name>uhpp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>uhpp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>uep</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_entry</name></name></expr>;</init> <condition><expr><name>uep</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>uep</name> <operator>=</operator> <name>nuep</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nuep</name> <operator>=</operator> <name><name>uep</name><operator>-&gt;</operator><name>ue_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u_freeentry</name><argument_list>(<argument><expr><name>uep</name></expr></argument>, <argument><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_extmark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_magic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>uhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>buf</name><operator>-&gt;</operator><name>b_u_numhead</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>u_freeentry</name><parameter_list>(<parameter><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>uep</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name><index>[<expr><operator>--</operator><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>uep</name><operator>-&gt;</operator><name>ue_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>uep</name><operator>-&gt;</operator><name>ue_magic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>uep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>u_clearall</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_newhead</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_synced</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_numhead</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_line_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_line_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>u_saveline</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_lnum</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lnum</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>lnum</name></expr></argument> &gt;</argument_list></name> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>u_clearline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_colnr</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_colnr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_ptr</name></name> <operator>=</operator> <call><name>u_save_line</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>u_clearline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>u_undoline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_ptr</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>u_savecommon</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>oldp</name> <operator>=</operator> <call><name>u_save_line</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_lnum</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_ptr</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed_bytes</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_lnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_ptr</name></name> <operator>=</operator> <name>oldp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_colnr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_colnr</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_line_lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>u_blockfree</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>previous_oldhead</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>u_freeheader</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_oldhead</name></name> <operator>!=</operator> <name>previous_oldhead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_line_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>u_save_line</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>bool</name></type> <name>bufIsChanged</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>


<return>return <expr><operator>(</operator><operator>!</operator><call><name>bt_dontwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>bt_prompt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_changed</name></name> <operator>||</operator> <call><name>file_ff_differs</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>anyBufIsChanged</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>curbufIsChanged</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<return>return <expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>list_T</name> <modifier>*</modifier></type><name>u_eval_tree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u_header_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>first_uhp</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><name>kListLenMayKnow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name> <init>= <expr><name>first_uhp</name></expr></init></decl>;</init> <condition><expr><name>uhp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>uhp</name> <operator>=</operator> <name><name>uhp</name><operator>-&gt;</operator><name>uh_prev</name><operator>.</operator><name>ptr</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dict</name> <init>= <expr><call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"seq"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"newhead"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"curhead"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_save_nr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"save"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>uhp</name><operator>-&gt;</operator><name>uh_save_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_add_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"alt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>u_eval_tree</name><argument_list>(<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_alt_next</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_list_append_dict</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>u_header_T</name> <modifier>*</modifier></type><name>u_force_get_undo_header</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uhp</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>save_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u_savecommon</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>save_curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uhp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_undolevel</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>uhp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>uhp</name></expr>;</return>
</block_content>}</block></function>
</unit>
