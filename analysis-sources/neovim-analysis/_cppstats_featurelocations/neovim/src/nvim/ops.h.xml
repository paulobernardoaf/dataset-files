<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\ops.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_OPS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_OPS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/normal.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds_defs.h"</cpp:file></cpp:include> 

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>Indenter</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_FIXINDENT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_CURSEND</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_CURSLINE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_LINE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_LINE_SPLIT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_LINE_FORWARD</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELETION_REGISTER</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_SAVED_REGISTERS</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAR_REGISTER</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLUS_REGISTER</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_REGISTERS</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_NOP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_DELETE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_YANK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_CHANGE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_LSHIFT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_RSHIFT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_FILTER</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_TILDE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_INDENT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_FORMAT</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_COLON</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_UPPER</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_LOWER</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_JOIN</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_JOIN_NS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_ROT13</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_REPLACE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_INSERT</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_APPEND</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_FOLD</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_FOLDOPEN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_FOLDOPENREC</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_FOLDCLOSE</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_FOLDCLOSEREC</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_FOLDDEL</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_FOLDDELREC</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_FORMAT2</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_FUNCTION</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_NR_ADD</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_NR_SUB</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define> 



<enum>enum <name>GRegFlags</name> <block>{
<decl><name>kGRegNoExpr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>kGRegExprSrc</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>kGRegList</name> <init>= <expr><literal type="number">4</literal></expr></init></decl> 
}</block>;</enum>


<typedef>typedef <type><struct>struct <name>yankreg</name> <block>{
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>y_array</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>y_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>MotionType</name></type> <name>y_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>colnr_T</name></type> <name>y_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Timestamp</name></type> <name>timestamp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>additional_data</name></decl>;</decl_stmt> 
}</block></struct></type> <name>yankreg_T</name>;</typedef>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>op_reg_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>regname</name></decl></parameter>)</parameter_list>
FUNC_ATTR_CONST
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>regname</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ASCII_ISLOWER</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>CharOrdLow</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ASCII_ISUPPER</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>CharOrdUp</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>DELETION_REGISTER</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>STAR_REGISTER</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>PLUS_REGISTER</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ops.h.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
