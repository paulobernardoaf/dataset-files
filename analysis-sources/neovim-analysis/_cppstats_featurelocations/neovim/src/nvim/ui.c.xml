<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\ui.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/aucmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_getln.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fold.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/normal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os_unix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/signal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/popupmnu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui_compositor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor_shape.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/tui/tui.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/server.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_UI_COUNT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>UI</name> <modifier>*</modifier></type><name><name>uis</name><index>[<expr><name>MAX_UI_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name><name>ui_ext</name><index>[<expr><name>kUIExtCount</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>ui_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ui_mode_idx</name> <init>= <expr><name>SHAPE_IDX_N</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cursor_row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cursor_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pending_cursor_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>busy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pending_mode_info_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pending_mode_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>handle_T</name></type> <name>cursor_grid_handle</name> <init>= <expr><name>DEFAULT_GRID_HANDLE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MIN_LOG_LEVEL</name> <operator>&gt;</operator> <name>DEBUG_LOG_LEVEL</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_LOG</name><parameter_list>(<parameter><type><name>funname</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>uilog_seen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>uilog_last_event</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_LOG</name><parameter_list>(<parameter><type><name>funname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (strequal(uilog_last_event, STR(funname))) { uilog_seen++; } else { if (uilog_seen &gt; 0) { logmsg(DEBUG_LOG_LEVEL, "UI: ", NULL, -1, true, "%s (+%zu times...)", uilog_last_event, uilog_seen); } logmsg(DEBUG_LOG_LEVEL, "UI: ", NULL, -1, true, STR(funname)); uilog_seen = 0; xstrlcpy(uilog_last_event, STR(funname), sizeof(uilog_last_event)); } } while (0)</cpp:value></cpp:define>













<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_CALL</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>funname</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { bool any_call = false; for (size_t i = 0; i &lt; ui_count; i++) { UI *ui = uis[i]; if (ui-&gt;funname &amp;&amp; (cond)) { ui-&gt;funname(__VA_ARGS__); any_call = true; } } if (any_call) { UI_LOG(funname); } } while (0)</cpp:value></cpp:define>














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui_events_call.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>ui_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>default_grid</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_comp_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_builtin_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>tui_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Nvim headless-mode started.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>addrs</name> <init>= <expr><call><name>server_address_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>addrs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Listening on:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t%s\n"</literal></expr></argument>, <argument><expr><name><name>addrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Press CTRL+C to exit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ui_rgb_attached</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>headless_mode</name> <operator>&amp;&amp;</operator> <name>p_tgc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ui_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>uis</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>rgb</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>ui_override</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ui_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>uis</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>override</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ui_active</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>ui_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_event</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>args_consumed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ui_call_event</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args_consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>args_consumed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ui_refresh</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_active</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>updating_screen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>deferred_refresh_event</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>ext_widgets</name><index>[<expr><name>kUIExtCount</name></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>UIExtension</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name> <operator>&lt;</operator> <name>kUIExtCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ext_widgets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>bool</name></type> <name>inclusive</name> <init>= <expr><call><name>ui_override</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ui_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><name><name>uis</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>UIExtension</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>int</name><operator>)</operator><name>j</name> <operator>&lt;</operator> <name>kUIExtCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ext_widgets</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;=</operator> <operator>(</operator><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>j</name></expr>]</index></name> <operator>||</operator> <name>inclusive</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>cursor_row</name> <operator>=</operator> <name>cursor_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pending_cursor_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>UIExtension</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name> <operator>&lt;</operator> <name>kUIExtCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ui_ext</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ext_widgets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>kUIGlobalCount</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_option_set</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ui_ext_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name><name>ext_widgets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ui_default_colors_set</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_p_lz</name> <init>= <expr><name>p_lz</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_lz</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>screen_resize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_lz</name> <operator>=</operator> <name>save_p_lz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ext_widgets</name><index>[<expr><name>kUIMessages</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>command_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ui_mode_info_set</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pending_mode_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ui_pum_get_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pum_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ui_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ui_pum_height</name> <init>= <expr><name><name>uis</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pum_height</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ui_pum_height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_height</name> <operator>=</operator>
<ternary><condition><expr><name>pum_height</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>MIN</name><argument_list>(<argument><expr><name>pum_height</name></expr></argument>, <argument><expr><name>ui_pum_height</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ui_pum_height</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>pum_height</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_refresh_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ui_refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_schedule_refresh</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>loop_schedule_fast</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><call><name>event_create</name><argument_list>(<argument><expr><name>deferred_refresh_event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>deferred_refresh_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>multiqueue_put</name><argument_list>(<argument><expr><name>resize_events</name></expr></argument>, <argument><expr><name>ui_refresh_event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_default_colors_set</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ui_call_default_colors_set</name><argument_list>(<argument><expr><name>normal_fg</name></expr></argument>, <argument><expr><name>normal_bg</name></expr></argument>, <argument><expr><name>normal_sp</name></expr></argument>,
<argument><expr><name>cterm_normal_fg_color</name></expr></argument>, <argument><expr><name>cterm_normal_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_busy_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>busy</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_busy_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_busy_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>--</operator><name>busy</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_busy_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_attach_impl</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>chanid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ui_count</name> <operator>==</operator> <name>MAX_UI_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUIMultigrid</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUIFloatDebug</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_comp_attach</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>uis</name><index>[<expr><name>ui_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ui</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_refresh_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>UIExtension</name></type> <name>i</name> <init>= <expr><name>kUIGlobalCount</name></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name> <operator>&lt;</operator> <name>kUIExtCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ui_set_ext_option</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>bool</name></type> <name>sent</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUIHlState</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sent</name> <operator>=</operator> <call><name>highlight_use_hlstate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_send_all_hls</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ui_refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_compositor</name> <init>= <expr><operator>(</operator><name>ui</name> <operator>==</operator> <name><name>uis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_compositor</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_autocmd_uienter</name><argument_list>(<argument><expr><name>chanid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_detach_impl</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>chanid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>shift_index</name> <init>= <expr><name>MAX_UI_COUNT</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ui_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>uis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>ui</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shift_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>shift_index</name> <operator>==</operator> <name>MAX_UI_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name>shift_index</name> <operator>&lt;</operator> <name>ui_count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uis</name><index>[<expr><name>shift_index</name></expr>]</index></name> <operator>=</operator> <name><name>uis</name><index>[<expr><name>shift_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift_index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>ui_count</name>


<operator>&amp;&amp;</operator> <operator>!</operator><name>exiting</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_schedule_refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUIMultigrid</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUIFloatDebug</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_comp_detach</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>do_autocmd_uienter</name><argument_list>(<argument><expr><name>chanid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_set_ext_option</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>UIExtension</name></type> <name>ext</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>&lt;</operator> <name>kUIGlobalCount</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>option_set</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ui_ext_names</name><index>[<expr><name>ext</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>||</operator> <name>active</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>option_set</name></name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ui_ext_names</name><index>[<expr><name>ext</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>active</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>==</operator> <name>kUITermColors</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_default_colors_set</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_line</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startcol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endcol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clearcol</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>clearattr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wrap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>row</name> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>LineFlags</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>wrap</name></expr> ?</condition><then> <expr><name>kLineFlagWrap</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>startcol</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>startcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>kLineFlagInvalid</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>off</name> <init>= <expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>startcol</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ui_call_raw_line</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>startcol</name></expr></argument>, <argument><expr><name>endcol</name></expr></argument>, <argument><expr><name>clearcol</name></expr></argument>, <argument><expr><name>clearattr</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>schar_T</name> <operator>*</operator><operator>)</operator><name><name>grid</name><operator>-&gt;</operator><name>chars</name></name> <operator>+</operator> <name>off</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>sattr_T</name> <operator>*</operator><operator>)</operator><name><name>grid</name><operator>-&gt;</operator><name>attrs</name></name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>p_wd</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>rdb_flags</name> <operator>&amp;</operator> <name>RDB_COMPOSITOR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_call_grid_cursor_goto</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>,
<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>clearcol</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_call_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>wd</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>labs</name><argument_list>(<argument><expr><name>p_wd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>os_microdelay</name><argument_list>(<argument><expr><name>wd</name> <operator>*</operator> <literal type="number">1000u</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pending_cursor_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_cursor_goto</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>new_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ui_grid_cursor_goto</name><argument_list>(<argument><expr><name>DEFAULT_GRID_HANDLE</name></expr></argument>, <argument><expr><name>new_row</name></expr></argument>, <argument><expr><name>new_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_grid_cursor_goto</name><parameter_list>(<parameter><decl><type><name>handle_T</name></type> <name>grid_handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_row</name> <operator>==</operator> <name>cursor_row</name>
<operator>&amp;&amp;</operator> <name>new_col</name> <operator>==</operator> <name>cursor_col</name>
<operator>&amp;&amp;</operator> <name>grid_handle</name> <operator>==</operator> <name>cursor_grid_handle</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cursor_row</name> <operator>=</operator> <name>new_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cursor_col</name> <operator>=</operator> <name>new_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cursor_grid_handle</name> <operator>=</operator> <name>grid_handle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pending_cursor_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ui_check_cursor_grid</name><parameter_list>(<parameter><decl><type><name>handle_T</name></type> <name>grid_handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cursor_grid_handle</name> <operator>==</operator> <name>grid_handle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pending_cursor_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_mode_info_set</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>pending_mode_info_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ui_current_row</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>cursor_row</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ui_current_col</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>cursor_col</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cmdline_ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_ext_ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_scroll_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pending_cursor_update</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_grid_cursor_goto</name><argument_list>(<argument><expr><name>cursor_grid_handle</name></expr></argument>, <argument><expr><name>cursor_row</name></expr></argument>, <argument><expr><name>cursor_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pending_cursor_update</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pending_mode_info_update</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>style</name> <init>= <expr><call><name>mode_style_array</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name> <init>= <expr><operator>(</operator><operator>*</operator><name>p_guicursor</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ui_call_mode_info_set</name><argument_list>(<argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pending_mode_info_update</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pending_mode_update</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>full_name</name> <init>= <expr><name><name>shape_table</name><index>[<expr><name>ui_mode_idx</name></expr>]</index></name><operator>.</operator><name>full_name</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ui_call_mode_change</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name>full_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ui_mode_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pending_mode_update</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ui_call_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ui_cursor_shape</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>full_screen</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_mode_idx</name> <init>= <expr><call><name>cursor_get_mode_idx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_mode_idx</name> <operator>!=</operator> <name>ui_mode_idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ui_mode_idx</name> <operator>=</operator> <name>new_mode_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pending_mode_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>conceal_check_cursor_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>ui_has</name><parameter_list>(<parameter><decl><type><name>UIExtension</name></type> <name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ui_ext</name><index>[<expr><name>ext</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Array</name></type> <name>ui_array</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>all_uis</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ui_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><name><name>uis</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>info</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"rgb"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"override"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>override</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>UIExtension</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>kUIExtCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ui_ext_names</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>||</operator> <name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>ui_ext_names</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>inspect</name></name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>all_uis</name></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>all_uis</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_grid_resize</name><parameter_list>(<parameter><decl><type><name>handle_T</name></type> <name>grid_handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>grid_handle</name> <operator>==</operator> <name>DEFAULT_GRID_HANDLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>screen_resize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>get_win_by_grid_handle</name><argument_list>(<argument><expr><name>grid_handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"No window with the given handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_floating</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>||</operator> <name>height</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_float_config</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_float_config</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_config_float</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_float_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height_request</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>MAX</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width_request</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>MAX</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_set_inner_size</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
