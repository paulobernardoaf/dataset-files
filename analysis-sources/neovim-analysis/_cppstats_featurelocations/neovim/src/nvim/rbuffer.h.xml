<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\rbuffer.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_RBUFFER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_RBUFFER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBUFFER_UNTIL_EMPTY</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>rptr</name></type></parameter>, <parameter><type><name>rcnt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (size_t rcnt = 0, _r = 1; _r; _r = 0) for ( char *rptr = rbuffer_read_ptr(buf, &amp;rcnt); buf-&gt;size; rptr = rbuffer_read_ptr(buf, &amp;rcnt))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBUFFER_UNTIL_FULL</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>wptr</name></type></parameter>, <parameter><type><name>wcnt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (size_t wcnt = 0, _r = 1; _r; _r = 0) for ( char *wptr = rbuffer_write_ptr(buf, &amp;wcnt); rbuffer_space(buf); wptr = rbuffer_write_ptr(buf, &amp;wcnt))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBUFFER_EACH</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (size_t i = 0; i &lt; buf-&gt;size; i = buf-&gt;size) for (char c = 0; i &lt; buf-&gt;size ? ((int)(c = *rbuffer_get(buf, i))) || 1 : 0; i++)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBUFFER_EACH_REVERSE</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (size_t i = buf-&gt;size; i != SIZE_MAX; i = SIZE_MAX) for (char c = 0; i-- &gt; 0 ? ((int)(c = *rbuffer_get(buf, i))) || 1 : 0; )</cpp:value></cpp:define>







<typedef>typedef <type><name><name>struct</name> <name>rbuffer</name></name></type> <name>RBuffer</name>;</typedef>



<typedef>typedef <function_decl><type><name>void</name></type>(<modifier>*</modifier><name>rbuffer_callback</name>)<parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>rbuffer</name> <block>{
<decl_stmt><decl><type><name>rbuffer_callback</name></type> <name>full_cb</name></decl>, <decl><type ref="prev"/><name>nonfull_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>read_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>write_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>start_ptr</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rbuffer.h.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
