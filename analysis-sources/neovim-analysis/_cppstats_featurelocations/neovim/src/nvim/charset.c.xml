<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\charset.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/indent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os_unix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"charset.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>chartab_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_CHARTAB</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(buf)-&gt;b_chartab[(unsigned)(c) &gt;&gt; 6] |= (1ull &lt;&lt; ((c) &amp; 0x3f))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET_CHARTAB</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(buf)-&gt;b_chartab[(unsigned)(c) &gt;&gt; 6] &amp;= ~(1ull &lt;&lt; ((c) &amp; 0x3f))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CHARTAB_TAB</name><parameter_list>(<parameter><type><name>chartab</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((chartab)[(unsigned)(c) &gt;&gt; 6] &amp; (1ull &lt;&lt; ((c) &amp; 0x3f)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CHARTAB</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_CHARTAB_TAB((buf)-&gt;b_chartab, c)</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>g_chartab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_CELL_MASK</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_PRINT_CHAR</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_ID_CHAR</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_FNAME_CHAR</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 





















<function><type><name>int</name></type> <name>init_chartab</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>buf_init_chartab</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>buf_init_chartab</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>global</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>tilde</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>do_isalpha</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>global</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dy_flags</name> <operator>&amp;</operator> <name>DY_UHEX</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>CT_PRINT_CHAR</name></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xa0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CT_PRINT_CHAR</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dy_flags</name> <operator>&amp;</operator> <name>DY_UHEX</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xa0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>|=</operator> <name>CT_FNAME_CHAR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_lisp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SET_CHARTAB</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>global</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_isi</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_isp</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_isf</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_isk</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tilde</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_isalpha</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tilde</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getdigits_int</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>getdigits_int</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">256</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>c2</name> <operator>&lt;</operator> <name>c</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c2</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>c2</name> <operator>&gt;=</operator> <literal type="number">256</literal><operator>)</operator>
<operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> 




<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>do_isalpha</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>c2</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_isalpha</name>
<operator>||</operator> <call><name>mb_islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>mb_isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tilde</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>~</operator><name>CT_ID_CHAR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>|=</operator> <name>CT_ID_CHAR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;</operator> <literal type="char">'~'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tilde</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><name>CT_CELL_MASK</name><operator>)</operator>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>dy_flags</name> <operator>&amp;</operator> <name>DY_UHEX</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>~</operator><name>CT_PRINT_CHAR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><name>CT_CELL_MASK</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>|=</operator> <name>CT_PRINT_CHAR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tilde</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>~</operator><name>CT_FNAME_CHAR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>|=</operator> <name>CT_FNAME_CHAR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>tilde</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RESET_CHARTAB</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>SET_CHARTAB</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>c</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skip_to_option_part</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><name>chartab_initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>trans_characters</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>room</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>trs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>trs_len</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>room</name> <operator>=</operator> <name>bufsize</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>buf</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>trs_len</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>trs_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>trs</name> <operator>=</operator> <call><name>transchar_byte</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>trs_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>trs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trs_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>-=</operator> <name>trs_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>room</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>trs_len</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>trs</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>trs_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>trs_len</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>










<function><type><name>size_t</name></type> <name>transstr_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_PURE
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>pcc</name><index>[<expr><name>MAX_MCO</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pcc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_isprintc</name><argument_list>(<argument><expr><name><name>pcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pcc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pcc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>hexbuf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>transchar_hex</name><argument_list>(<argument><expr><name>hexbuf</name></expr></argument>, <argument><expr><name><name>pcc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b2c_l</name> <init>= <expr><call><name>byte2cells</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>b2c_l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>b2c_l</name></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>size_t</name></type> <name>transstr_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf_p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf_e</name> <init>= <expr><name>buf_p</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>buf_p</name> <operator>&lt;</operator> <name>buf_e</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf_p</name> <operator>+</operator> <name>l</name> <operator>&gt;</operator> <name>buf_e</name></expr>)</condition> <block>{<block_content>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pcc</name><index>[<expr><name>MAX_MCO</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pcc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_isprintc</name><argument_list>(<argument><expr><name><name>pcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf_p</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pcc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pcc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>hexbuf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>hexlen</name> <init>= <expr><call><name>transchar_hex</name><argument_list>(<argument><expr><name>hexbuf</name></expr></argument>, <argument><expr><name><name>pcc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_p</name> <operator>+</operator> <name>hexlen</name> <operator>&gt;</operator> <name>buf_e</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf_p</name></expr></argument>, <argument><expr><name>hexbuf</name></expr></argument>, <argument><expr><name>hexlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_p</name> <operator>+=</operator> <name>hexlen</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tb</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>transchar_byte</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>tb_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_p</name> <operator>+</operator> <name>tb_len</name> <operator>&gt;</operator> <name>buf_e</name></expr>)</condition> <block>{<block_content>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf_p</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>, <argument><expr><name>tb_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_p</name> <operator>+=</operator> <name>tb_len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>buf_p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf_p</name> <operator>&lt;=</operator> <name>buf_e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>buf_p</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>char</name> <modifier>*</modifier></type><name>transstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_RET
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>transstr_len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>transstr_buf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name><modifier>*</modifier></type> <name>str_foldcase</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orglen</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>orglen</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GA_CHAR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char_u *)ga.ga_data)[i]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GA_PTR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char_u *)ga.ga_data + i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_CHAR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(buf == NULL ? GA_CHAR(i) : buf[i])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_PTR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(buf == NULL ? GA_PTR(i) : buf + i)</cpp:value></cpp:define>


<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GA_CHAR</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>STR_CHAR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><call><name>STR_PTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>olen</name> <init>= <expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><call><name>STR_PTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lc</name> <init>= <expr><call><name>mb_tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>olen</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>lc</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nlen</name> <init>= <expr><call><name>utf_char2len</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>olen</name> <operator>!=</operator> <name>nlen</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>&gt;</operator> <name>olen</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>nlen</name> <operator>-</operator> <name>olen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <name>nlen</name> <operator>-</operator> <name>olen</name> <operator>&gt;=</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name>olen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>olen</name> <operator>!=</operator> <name>nlen</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><call><name>GA_PTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>nlen</name></expr></argument>, <argument><expr><call><name>GA_PTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>nlen</name> <operator>-</operator> <name>olen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>nlen</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>nlen</name> <operator>-</operator> <name>olen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>lc</name></expr></argument>, <argument><expr><call><name>STR_PTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><call><name>STR_PTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>







<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>transchar_buf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>








<function><type><name>char_u</name> <modifier>*</modifier></type><name>transchar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>transchar_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'~'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transchar_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'@'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>chartab_initialized</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'~'</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>vim_isprintc_strict</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>transchar_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transchar_buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>transchar_nonprint</name><argument_list>(<argument><expr><name>transchar_buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>transchar_hex</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>transchar_buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>transchar_buf</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>char_u</name> <modifier>*</modifier></type><name>transchar_byte</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>transchar_nonprint</name><argument_list>(<argument><expr><name>transchar_buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>transchar_buf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>transchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>transchar_nonprint</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <name>CAR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>get_fileformat</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOL_MAC</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dy_flags</name> <operator>&amp;</operator> <name>DY_UHEX</name> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>transchar_hex</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>c</name> <operator>^</operator> <literal type="number">0x40</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><name>size_t</name></type> <name>transchar_hex</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>*</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>nr2hex</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>nr2hex</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>nr2hex</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>nr2hex</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><call><name>nr2hex</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><call><name>nr2hex</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>nr2hex</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>)</parameter_list>
FUNC_ATTR_CONST FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="char">'0'</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>-</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'a'</literal></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type> <name>byte2cells</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>g_chartab</name><index>[<expr><name>b</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_CELL_MASK</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>char2cells</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>char2cells</name><argument_list>(<argument><expr><call><name>K_SECOND</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>utf_char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>g_chartab</name><index>[<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>&amp;</operator> <name>CT_CELL_MASK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>ptr2cells</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><name><name>g_chartab</name><index>[<expr><operator>*</operator><name>p</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_CELL_MASK</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>vim_strsize</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vim_strnsize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>vim_strnsize</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET_WIN_BUF_CHARTABSIZE</name><parameter_list>(<parameter><type><name>wp</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>col</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (*(p) == TAB &amp;&amp; (!(wp)-&gt;w_p_list || wp-&gt;w_p_lcs_chars.tab1)) { const int ts = (int)(buf)-&gt;b_p_ts; return (ts - (int)(col % ts)); } else { return ptr2cells(p); }</cpp:value></cpp:define>







<function><type><name>int</name></type> <name>chartabsize</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>RET_WIN_BUF_CHARTABSIZE</name><argument_list>(<argument>curwin</argument>, <argument>curbuf</argument>, <argument>p</argument>, <argument>col</argument>)</argument_list></macro>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>win_chartabsize</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>RET_WIN_BUF_CHARTABSIZE</name><argument_list>(<argument>wp</argument>, <argument>wp-&gt;w_buffer</argument>, <argument>p</argument>, <argument>col</argument>)</argument_list></macro>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>linetabsize</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>linetabsize_col</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>linetabsize_col</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startcol</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><name>startcol</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt> 

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>lbr_chartabsize_adv</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>col</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>unsigned</name> <name>int</name></type> <name>win_linetabsize</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>line</name></expr></init></decl>;</init>
<condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>==</operator> <name>MAXCOL</name> <operator>||</operator> <name>s</name> <operator>&lt;</operator> <name>line</name> <operator>+</operator> <name>len</name><operator>)</operator></expr>;</condition>
<incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>win_lbr_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>col</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>vim_isIDc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<return>return <expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0x100</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_ID_CHAR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>vim_iswordc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<return>return <expr><call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>vim_iswordc_tab</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>chartab</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>
?</condition><then> <expr><operator>(</operator><call><name>utf_class_tab</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>chartab</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>GET_CHARTAB_TAB</name><argument_list>(<argument><expr><name>chartab</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<decl_stmt><decl><type><name>bool</name></type> <name>vim_iswordc_buf</name><argument_list>(<argument><expr><specifier>const</specifier> <name>int</name> <name>c</name></expr></argument>, <argument><expr><name>buf_T</name> <operator>*</operator><specifier>const</specifier> <name>buf</name></expr></argument>)</argument_list>
<name>FUNC_ATTR_PURE</name> <name>FUNC_ATTR_WARN_UNUSED_RESULT</name> <name>FUNC_ATTR_NONNULL_ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>vim_iswordc_tab</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<function><type><name>bool</name></type> <name>vim_iswordp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<return>return <expr><call><name>vim_iswordp_buf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>bool</name></type> <name>vim_iswordp_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>vim_isfilec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<return>return <expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_FNAME_CHAR</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>vim_isfilec_or_wc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<return>return <expr><call><name>vim_isfilec</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">']'</literal> <operator>||</operator> <call><name>path_has_wildcard</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>vim_isprintc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>utf_printable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_PRINT_CHAR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>vim_isprintc_strict</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>utf_printable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_PRINT_CHAR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>lbr_chartabsize</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p_sbr</name> <operator>==</operator> <name>NUL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_bri</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>win_nolbr_chartabsize</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>RET_WIN_BUF_CHARTABSIZE</name><argument_list>(<argument>curwin</argument>, <argument>curbuf</argument>, <argument>s</argument>, <argument>col</argument>)</argument_list></macro>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>win_lbr_chartabsize</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><ternary><condition><expr><name>line</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>s</name></expr></then><else>: <expr><name>line</name></expr></else></ternary></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>lbr_chartabsize_adv</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>lbr_chartabsize</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type> <name>win_lbr_chartabsize</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>headp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col_adj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>colnr_T</name></type> <name>colmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>added</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numberextra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_bri</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p_sbr</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>win_nolbr_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>headp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>RET_WIN_BUF_CHARTABSIZE</name><argument_list>(<argument>wp</argument>, <argument>wp-&gt;w_buffer</argument>, <argument>s</argument>, <argument>col</argument>)</argument_list></macro>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>win_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>s</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col_adj</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name>
<operator>&amp;&amp;</operator> <call><name>vim_isbreak</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isbreak</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>numberextra</name> <operator>=</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col2</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>colmax</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <name>numberextra</name> <operator>-</operator> <name>col_adj</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>colmax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>colmax</name> <operator>+=</operator> <name>col_adj</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>colmax</name> <operator>+</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>colmax</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>col</name> <operator>-</operator> <name>colmax</name><operator>)</operator> <operator>/</operator> <name>n</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>n</name> <operator>-</operator> <name>col_adj</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>ps</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_isbreak</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>col2</name> <operator>==</operator> <name>col</name> <operator>||</operator> <operator>!</operator><call><name>vim_isbreak</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>ps</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col2</name> <operator>+=</operator> <call><name>win_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>col2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col2</name> <operator>&gt;=</operator> <name>colmax</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>colmax</name> <operator>-</operator> <name>col</name> <operator>+</operator> <name>col_adj</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name>
<operator>&amp;&amp;</operator> <call><name>in_win_border</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_added</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>added</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p_sbr</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_bri</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>col</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>sbrlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numberwidth</name> <init>= <expr><call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>numberextra</name> <operator>=</operator> <name>numberwidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>numberextra</name> <operator>+</operator> <name>mb_added</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>numberextra</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <operator>(</operator><name>numberextra</name> <operator>-</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>numberextra</name> <operator>&amp;&amp;</operator> <name>numberextra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>%=</operator> <name>numberextra</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sbr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sbrlen</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>MB_CHARLEN</name><argument_list>(<argument><expr><name>p_sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>sbrlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>sbrlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>numberextra</name> <operator>&amp;&amp;</operator> <name>numberextra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>%=</operator> <name>numberextra</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>numberextra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>numberwidth</name> <operator>-</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>numberwidth</name> <operator>-=</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>col</name> <operator>+</operator> <name>size</name> <operator>+</operator> <name>sbrlen</name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sbr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>+</operator> <name>sbrlen</name> <operator>+</operator> <name>numberwidth</name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <name>sbrlen</name> <operator>-</operator> <name>numberwidth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_width</name> <init>= <expr><ternary><condition><expr><name>col</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <operator>(</operator><name>sbrlen</name> <operator>+</operator> <name>col</name><operator>)</operator><operator>)</operator></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>added</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>-</operator> <name>prev_width</name><operator>)</operator> <operator>/</operator> <name>width</name><operator>)</operator> <operator>*</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>p_sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>-</operator> <name>prev_width</name><operator>)</operator> <operator>%</operator> <name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>added</name> <operator>+=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>p_sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>added</name> <operator>+=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>p_sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_bri</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>added</name> <operator>+=</operator> <call><name>get_breakindent_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>added</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>added</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>headp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>headp</name> <operator>=</operator> <name>added</name> <operator>+</operator> <name>mb_added</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>win_nolbr_chartabsize</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>headp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <name>TAB</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab1</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr>;</expr_stmt>
<return>return <expr><name>n</name> <operator>-</operator> <operator>(</operator><name>col</name> <operator>%</operator> <name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>in_win_border</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>headp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>headp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><name>bool</name></type> <name>in_win_border</name><argument_list>(<argument><expr><name>win_T</name> <operator>*</operator><name>wp</name></expr></argument>, <argument><expr><name>colnr_T</name> <name>vcol</name></expr></argument>)</argument_list>
<name>FUNC_ATTR_PURE</name> <name>FUNC_ATTR_WARN_UNUSED_RESULT</name> <name>FUNC_ATTR_NONNULL_ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>width2</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>width1</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>vcol</name> <operator>&lt;</operator> <name>width1</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>vcol</name> <operator>==</operator> <name>width1</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>width2</name> <operator>=</operator> <name>width1</name> <operator>+</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width2</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>vcol</name> <operator>-</operator> <name>width1</name><operator>)</operator> <operator>%</operator> <name>width2</name> <operator>==</operator> <name>width2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>













<function><type><name>void</name></type> <name>getvcol</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>vcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>posptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>incr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ts</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>posptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>posptr</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>posptr</name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>posptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab1</name></name> <operator>!=</operator> <name>NUL</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p_sbr</name> <operator>==</operator> <name>NUL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_bri</name></name></expr> )</condition> <block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>head</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <name>ts</name> <operator>-</operator> <operator>(</operator><name>vcol</name> <operator>%</operator> <name>ts</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <name><name>g_chartab</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>CT_CELL_MASK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>incr</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>in_win_border</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>vcol</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>incr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>head</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>posptr</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ptr</name> <operator>&gt;=</operator> <name>posptr</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>head</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>win_lbr_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>vcol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>posptr</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ptr</name> <operator>&gt;=</operator> <name>posptr</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <name>vcol</name> <operator>+</operator> <name>head</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>vcol</name> <operator>+</operator> <name>incr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <name>TAB</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>NORMAL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>virtual_active</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator> <operator>||</operator> <call><name>ltoreq</name><argument_list>(<argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <name>vcol</name> <operator>+</operator> <name>incr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <name>vcol</name> <operator>+</operator> <name>head</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>colnr_T</name></type> <name>getvcol_nolist</name><parameter_list>(<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>posp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>list_save</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>vcol</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>posp</name><operator>-&gt;</operator><name>coladd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>posp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>posp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>=</operator> <name>list_save</name></expr>;</expr_stmt>
<return>return <expr><name>vcol</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>getvvcol</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>coladd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>endadd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coladd</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>coladd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>endadd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>!=</operator> <name>TAB</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>vim_isprintc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>endadd</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><call><name>char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coladd</name> <operator>&gt;</operator> <name>endadd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>endadd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>coladd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>coladd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>col</name> <operator>+</operator> <name>endadd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>getvcols</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos1</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos2</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>left</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>from1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>from2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>to1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>to2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><operator>*</operator><name>pos1</name></expr></argument>, <argument><expr><operator>*</operator><name>pos2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>pos1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>pos2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>pos2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>pos1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>from2</name> <operator>&lt;</operator> <name>from1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name>from2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name>from1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>to2</name> <operator>&gt;</operator> <name>to1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>from2</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>to1</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <name>from2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <name>to2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <name>to1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type><name>skipwhite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>intptr_t</name></type> <name>getwhitecols_curline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>getwhitecols</name><argument_list>(<argument><expr><call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>intptr_t</name></type> <name>getwhitecols</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>p</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type><name>skipdigits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>skipbin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE
FUNC_ATTR_NONNULL_ALL
FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>ascii_isbdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>char_u</name><modifier>*</modifier></type> <name>skiphex</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>ascii_isxdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name><modifier>*</modifier></type> <name>skiptodigit</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>skiptobin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE
FUNC_ATTR_NONNULL_ALL
FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_isbdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name><modifier>*</modifier></type> <name>skiptohex</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_isxdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type><name>skiptowhite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name><modifier>*</modifier></type> <name>skiptowhite_esc</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>Ctrl_V</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>bool</name></type> <name>try_getdigits</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>intmax_t</name> <modifier>*</modifier></type><name>nr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nr</name> <operator>=</operator> <call><name>strtoimax</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>nr</name> <operator>==</operator> <name>INTMAX_MIN</name> <operator>||</operator> <operator>*</operator><name>nr</name> <operator>==</operator> <name>INTMAX_MAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>intmax_t</name></type> <name>getdigits</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>, <parameter><decl><type><name>intmax_t</name></type> <name>def</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><call><name>try_getdigits</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>number</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>ok</name></expr> ?</condition><then> <expr><name>number</name></expr> </then><else>: <expr><name>def</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>getdigits_int</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>number</name> <init>= <expr><call><name>getdigits</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INTMAX_T</name> <operator>&gt;</operator> <name>SIZEOF_INT</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>strict</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>number</name> <operator>&gt;=</operator> <name>INT_MIN</name> <operator>&amp;&amp;</operator> <name>number</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>number</name> <operator>&gt;=</operator> <name>INT_MIN</name> <operator>&amp;&amp;</operator> <name>number</name> <operator>&lt;=</operator> <name>INT_MAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>def</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>number</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>long</name></type> <name>getdigits_long</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>def</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>number</name> <init>= <expr><call><name>getdigits</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INTMAX_T</name> <operator>&gt;</operator> <name>SIZEOF_LONG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>strict</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>number</name> <operator>&gt;=</operator> <name>LONG_MIN</name> <operator>&amp;&amp;</operator> <name>number</name> <operator>&lt;=</operator> <name>LONG_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>number</name> <operator>&gt;=</operator> <name>LONG_MIN</name> <operator>&amp;&amp;</operator> <name>number</name> <operator>&lt;=</operator> <name>LONG_MAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>def</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><name>number</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>vim_isblankline</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>lbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>;</return>
</block_content>}</block></function>




























<function><type><name>void</name></type> <name>vim_str2nr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>prep</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>varnumber_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>nptr</name></decl></parameter>,
<parameter><decl><type><name>uvarnumber_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>unptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>start</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_ENDED</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(maxlen == 0 || (int)((ptr) - (const char *)start) &lt; maxlen))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>pre</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>negative</name> <init>= <expr><operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uvarnumber_T</name></type> <name>un</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>STR2NR_FORCE</name></expr>)</condition> <block>{<block_content>


<switch>switch <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>what</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>STR2NR_FORCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STR2NR_HEX</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_ENDED</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>ascii_isxdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>vim_str2nr_hex</name>;</goto>
</block_content>}</block>
<case>case <expr><name>STR2NR_BIN</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_ENDED</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>ascii_isbdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>vim_str2nr_bin</name>;</goto>
</block_content>}</block>
<case>case <expr><name>STR2NR_OCT</name></expr>:</case> <block>{<block_content>
<goto>goto <name>vim_str2nr_oct</name>;</goto>
</block_content>}</block>
<case>case <expr><literal type="number">0</literal></expr>:</case> <block>{<block_content>
<goto>goto <name>vim_str2nr_dec</name>;</goto>
</block_content>}</block>
<default>default:</default> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <operator>(</operator><name>STR2NR_HEX</name><operator>|</operator><name>STR2NR_OCT</name><operator>|</operator><name>STR2NR_BIN</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>STRING_ENDED</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'8'</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pre</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_HEX</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>STRING_ENDED</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>pre</name> <operator>==</operator> <literal type="char">'X'</literal> <operator>||</operator> <name>pre</name> <operator>==</operator> <literal type="char">'x'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>ascii_isxdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>vim_str2nr_hex</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_BIN</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>STRING_ENDED</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>pre</name> <operator>==</operator> <literal type="char">'B'</literal> <operator>||</operator> <name>pre</name> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>ascii_isbdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>vim_str2nr_bin</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pre</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_OCT</name><operator>)</operator>
<operator>||</operator> <operator>!</operator><operator>(</operator><literal type="char">'0'</literal> <operator>&lt;=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'7'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>vim_str2nr_dec</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><operator>!</operator><call><name>STRING_ENDED</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'7'</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>vim_str2nr_dec</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>pre</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<goto>goto <name>vim_str2nr_oct</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>vim_str2nr_dec</name>;</goto>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_NUMBER</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>cond</name></type></parameter>, <parameter><type><name>conv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { while (!STRING_ENDED(ptr) &amp;&amp; (cond)) { const uvarnumber_T digit = (uvarnumber_T)(conv); if (un &lt; UVARNUMBER_MAX / base || (un == UVARNUMBER_MAX / base &amp;&amp; (base != 10 || digit &lt;= UVARNUMBER_MAX % 10))) { un = base * un + digit; } else { un = UVARNUMBER_MAX; } ptr++; } } while (0)</cpp:value></cpp:define>














<label><name>vim_str2nr_bin</name>:</label>
<expr_stmt><expr><call><name>PARSE_NUMBER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'1'</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>vim_str2nr_proceed</name>;</goto>
<label><name>vim_str2nr_oct</name>:</label>
<expr_stmt><expr><call><name>PARSE_NUMBER</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="char">'0'</literal> <operator>&lt;=</operator> <operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>&lt;=</operator> <literal type="char">'7'</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>vim_str2nr_proceed</name>;</goto>
<label><name>vim_str2nr_dec</name>:</label>
<expr_stmt><expr><call><name>PARSE_NUMBER</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>vim_str2nr_proceed</name>;</goto>
<label><name>vim_str2nr_hex</name>:</label>
<expr_stmt><expr><call><name>PARSE_NUMBER</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>ascii_isxdigit</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><call><name>hex2nr</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>vim_str2nr_proceed</name>;</goto>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PARSE_NUMBER</name></cpp:undef>

<label><name>vim_str2nr_proceed</name>:</label>
<if_stmt><if>if <condition>(<expr><name>prep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>prep</name> <operator>=</operator> <name>pre</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>start</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>un</name> <operator>&gt;</operator> <name>VARNUMBER_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nptr</name> <operator>=</operator> <name>VARNUMBER_MIN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nptr</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>un</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>un</name> <operator>&gt;</operator> <name>VARNUMBER_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>un</name> <operator>=</operator> <name>VARNUMBER_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>nptr</name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name>un</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>unptr</name> <operator>=</operator> <name>un</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STRING_ENDED</name></cpp:undef>
</block_content>}</block>







<function><type><name>int</name></type> <name>hex2nr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return>
</block_content>}</block></function>














<function><type><name>bool</name></type> <name>rem_backslash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal>
<operator>||</operator> <operator>(</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal>
<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'?'</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isfilec</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<return>return <expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>




<function><type><name>void</name></type> <name>backslash_halve</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rem_backslash</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type><name>backslash_halve_save</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_NONNULL_RET
<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>backslash_halve</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
