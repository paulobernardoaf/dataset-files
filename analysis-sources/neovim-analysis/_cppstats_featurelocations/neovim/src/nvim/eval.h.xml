<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\eval.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_EVAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_EVAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/channel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/funcs.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/time.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds_defs.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/fileio.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/stdpaths_defs.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPYID_INC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPYID_MASK</name></cpp:macro> <cpp:value>(~0x1)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>extern</specifier> <name>hashtab_T</name></type> <name>func_hashtab</name></decl>;</decl_stmt>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>fd_dict</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fd_newkey</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>fd_di</name></decl>;</decl_stmt> 
}</block></struct></type> <name>funcdict_T</name>;</typedef>


<decl_stmt><decl><type><name>EXTERN</name> <name>ufunc_T</name></type> <name>dumuf</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UF2HIKEY</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fp)-&gt;uf_name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIKEY2UF</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ufunc_T *)(p - offsetof(ufunc_T, uf_name)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI2UF</name><parameter_list>(<parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HIKEY2UF((hi)-&gt;hi_key)</cpp:value></cpp:define>




























<typedef>typedef <type><struct>struct <name>lval_S</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ll_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>ll_name_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ll_exp_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>ll_tv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>ll_li</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>ll_list</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ll_range</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ll_n1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ll_n2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ll_empty2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>ll_dict</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>ll_di</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ll_newkey</name></decl>;</decl_stmt> 
}</block></struct></type> <name>lval_T</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>VAR_FLAVOUR_DEFAULT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>VAR_FLAVOUR_SESSION</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>VAR_FLAVOUR_SHADA</name> <init>= <expr><literal type="number">4</literal></expr></init></decl> 
}</block></enum></type> <name>var_flavour_T</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>VV_COUNT</name></decl>,
<decl><name>VV_COUNT1</name></decl>,
<decl><name>VV_PREVCOUNT</name></decl>,
<decl><name>VV_ERRMSG</name></decl>,
<decl><name>VV_WARNINGMSG</name></decl>,
<decl><name>VV_STATUSMSG</name></decl>,
<decl><name>VV_SHELL_ERROR</name></decl>,
<decl><name>VV_THIS_SESSION</name></decl>,
<decl><name>VV_VERSION</name></decl>,
<decl><name>VV_LNUM</name></decl>,
<decl><name>VV_TERMRESPONSE</name></decl>,
<decl><name>VV_FNAME</name></decl>,
<decl><name>VV_LANG</name></decl>,
<decl><name>VV_LC_TIME</name></decl>,
<decl><name>VV_CTYPE</name></decl>,
<decl><name>VV_CC_FROM</name></decl>,
<decl><name>VV_CC_TO</name></decl>,
<decl><name>VV_FNAME_IN</name></decl>,
<decl><name>VV_FNAME_OUT</name></decl>,
<decl><name>VV_FNAME_NEW</name></decl>,
<decl><name>VV_FNAME_DIFF</name></decl>,
<decl><name>VV_CMDARG</name></decl>,
<decl><name>VV_FOLDSTART</name></decl>,
<decl><name>VV_FOLDEND</name></decl>,
<decl><name>VV_FOLDDASHES</name></decl>,
<decl><name>VV_FOLDLEVEL</name></decl>,
<decl><name>VV_PROGNAME</name></decl>,
<decl><name>VV_SEND_SERVER</name></decl>,
<decl><name>VV_DYING</name></decl>,
<decl><name>VV_EXCEPTION</name></decl>,
<decl><name>VV_THROWPOINT</name></decl>,
<decl><name>VV_STDERR</name></decl>,
<decl><name>VV_REG</name></decl>,
<decl><name>VV_CMDBANG</name></decl>,
<decl><name>VV_INSERTMODE</name></decl>,
<decl><name>VV_VAL</name></decl>,
<decl><name>VV_KEY</name></decl>,
<decl><name>VV_PROFILING</name></decl>,
<decl><name>VV_FCS_REASON</name></decl>,
<decl><name>VV_FCS_CHOICE</name></decl>,
<decl><name>VV_BEVAL_BUFNR</name></decl>,
<decl><name>VV_BEVAL_WINNR</name></decl>,
<decl><name>VV_BEVAL_WINID</name></decl>,
<decl><name>VV_BEVAL_LNUM</name></decl>,
<decl><name>VV_BEVAL_COL</name></decl>,
<decl><name>VV_BEVAL_TEXT</name></decl>,
<decl><name>VV_SCROLLSTART</name></decl>,
<decl><name>VV_SWAPNAME</name></decl>,
<decl><name>VV_SWAPCHOICE</name></decl>,
<decl><name>VV_SWAPCOMMAND</name></decl>,
<decl><name>VV_CHAR</name></decl>,
<decl><name>VV_MOUSE_WIN</name></decl>,
<decl><name>VV_MOUSE_WINID</name></decl>,
<decl><name>VV_MOUSE_LNUM</name></decl>,
<decl><name>VV_MOUSE_COL</name></decl>,
<decl><name>VV_OP</name></decl>,
<decl><name>VV_SEARCHFORWARD</name></decl>,
<decl><name>VV_HLSEARCH</name></decl>,
<decl><name>VV_OLDFILES</name></decl>,
<decl><name>VV_WINDOWID</name></decl>,
<decl><name>VV_PROGPATH</name></decl>,
<decl><name>VV_COMPLETED_ITEM</name></decl>,
<decl><name>VV_OPTION_NEW</name></decl>,
<decl><name>VV_OPTION_OLD</name></decl>,
<decl><name>VV_OPTION_TYPE</name></decl>,
<decl><name>VV_ERRORS</name></decl>,
<decl><name>VV_MSGPACK_TYPES</name></decl>,
<decl><name>VV_EVENT</name></decl>,
<decl><name>VV_FALSE</name></decl>,
<decl><name>VV_TRUE</name></decl>,
<decl><name>VV_NULL</name></decl>,
<decl><name>VV__NULL_LIST</name></decl>, 
<decl><name>VV__NULL_DICT</name></decl>, 
<decl><name>VV_VIM_DID_ENTER</name></decl>,
<decl><name>VV_TESTING</name></decl>,
<decl><name>VV_TYPE_NUMBER</name></decl>,
<decl><name>VV_TYPE_STRING</name></decl>,
<decl><name>VV_TYPE_FUNC</name></decl>,
<decl><name>VV_TYPE_LIST</name></decl>,
<decl><name>VV_TYPE_DICT</name></decl>,
<decl><name>VV_TYPE_FLOAT</name></decl>,
<decl><name>VV_TYPE_BOOL</name></decl>,
<decl><name>VV_ECHOSPACE</name></decl>,
<decl><name>VV_EXITING</name></decl>,
<decl><name>VV_LUA</name></decl>,
}</block></enum></type> <name>VimVarIndex</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>kMPNil</name></decl>,
<decl><name>kMPBoolean</name></decl>,
<decl><name>kMPInteger</name></decl>,
<decl><name>kMPFloat</name></decl>,
<decl><name>kMPString</name></decl>,
<decl><name>kMPBinary</name></decl>,
<decl><name>kMPArray</name></decl>,
<decl><name>kMPMap</name></decl>,
<decl><name>kMPExt</name></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAST_MSGPACK_TYPE</name></cpp:macro> <cpp:value>kMPExt</cpp:value></cpp:define>
}</block></enum></type> <name>MessagePackType</name>;</typedef>


<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>list_T</name> <modifier>*</modifier></type><name><name>eval_msgpack_type_lists</name><index>[<expr><name>LAST_MSGPACK_TYPE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LAST_MSGPACK_TYPE</name></cpp:undef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ArgvFunc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>current_argcount</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>called_func_argcount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>TFN_INT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>TFN_QUIET</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>TFN_NO_AUTOLOAD</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 
<decl><name>TFN_NO_DEREF</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 
<decl><name>TFN_READ_ONLY</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, 
}</block></enum></type> <name>TransFunctionNameFlags</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>GLV_QUIET</name> <init>= <expr><name>TFN_QUIET</name></expr></init></decl>, 
<decl><name>GLV_NO_AUTOLOAD</name> <init>= <expr><name>TFN_NO_AUTOLOAD</name></expr></init></decl>, 
<decl><name>GLV_READ_ONLY</name> <init>= <expr><name>TFN_READ_ONLY</name></expr></init></decl>, 

}</block></enum></type> <name>GetLvalFlags</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNE_INCL_BR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNE_CHECK_START</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>TimeWatcher</name></type> <name>tw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timer_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>repeat_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emsg_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>stopped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>paused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Callback</name></type> <name>callback</name></decl>;</decl_stmt>
}</block></struct></type> <name>timer_T</name>;</typedef>


<typedef>typedef <type><enum>enum
<block>{
<decl><name>ASSERT_EQUAL</name></decl>,
<decl><name>ASSERT_NOTEQUAL</name></decl>,
<decl><name>ASSERT_MATCH</name></decl>,
<decl><name>ASSERT_NOTMATCH</name></decl>,
<decl><name>ASSERT_INRANGE</name></decl>,
<decl><name>ASSERT_OTHER</name></decl>,
}</block></enum></type> <name>assert_type_T</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>kDictListKeys</name></decl>, 
<decl><name>kDictListValues</name></decl>, 
<decl><name>kDictListItems</name></decl>, 
}</block></enum></type> <name>DictListType</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval.h.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
