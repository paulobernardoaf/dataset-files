<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\xdiff\xpatience.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xinclude.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xtypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff.h"</cpp:file></cpp:include>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NON_UNIQUE</name></cpp:macro> <cpp:value>ULONG_MAX</cpp:value></cpp:define>





<struct>struct <name>hashmap</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>, <decl><type ref="prev"/><name>alloc</name></decl>;</decl_stmt>
<struct>struct <name>entry</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hash</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>line1</name></decl>, <decl><type ref="prev"/><name>line2</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>anchor</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>entries</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>first</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>;</struct>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>has_matches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>file1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>file2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_anchor</name><parameter_list>(<parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xpp</name><operator>-&gt;</operator><name>anchors_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>anchors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>anchors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>insert_record</name><parameter_list>(<parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xrecord_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>records</name> <init>= <expr><ternary><condition><expr><name>pass</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then>
<expr><name><name>map</name><operator>-&gt;</operator><name>env</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>recs</name></name></expr> </then><else>: <expr><name><name>map</name><operator>-&gt;</operator><name>env</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xrecord_t</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><name><name>records</name><index>[<expr><name>line</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>










<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>ha</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>map</name><operator>-&gt;</operator><name>alloc</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>line1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>other</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>env</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>recs</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>line1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>hash</name> <operator>!=</operator> <name><name>record</name><operator>-&gt;</operator><name>ha</name></name> <operator>||</operator>
<operator>!</operator><call><name>xdl_recmatch</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>record</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name><name>other</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name><name>map</name><operator>-&gt;</operator><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>index</name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>alloc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>has_matches</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>line2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>line2</name> <operator>=</operator> <name>NON_UNIQUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>line2</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>line1</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>hash</name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>ha</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>anchor</name> <operator>=</operator> <call><name>is_anchor</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>env</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>recs</name><index>[<expr><name>line</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>map</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <name>index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>previous</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_hashmap</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>file1</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>file2</name></decl></parameter>,
<parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>, <parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>file1</name></name> <operator>=</operator> <name>file1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>file2</name></name> <operator>=</operator> <name>file2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>xpp</name></name> <operator>=</operator> <name>xpp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>env</name></name> <operator>=</operator> <name>env</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>count1</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <operator>(</operator>struct <name>entry</name> <operator>*</operator><operator>)</operator>
<call><name>xdl_malloc</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>alloc</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>result</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>alloc</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name>count1</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_record</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><name>line1</name><operator>++</operator></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>


<while>while <condition>(<expr><name>count2</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_record</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><name>line2</name><operator>++</operator></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>binary_search</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sequence</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>longest</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>right</name> <init>= <expr><name>longest</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>left</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>right</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>middle</name> <init>= <expr><name>left</name> <operator>+</operator> <operator>(</operator><name>right</name> <operator>-</operator> <name>left</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sequence</name><index>[<expr><name>middle</name></expr>]</index></name><operator>-&gt;</operator><name>line2</name> <operator>&gt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>line2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>right</name> <operator>=</operator> <name>middle</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>left</name> <operator>=</operator> <name>middle</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>left</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type><name>find_longest_common_sequence</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sequence</name> <init>= <expr><operator>(</operator>struct <name>entry</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>xdl_malloc</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>nr</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>entry</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>longest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>anchor_i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>sequence</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>map</name><operator>-&gt;</operator><name>first</name></name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>entry</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>entry</name></expr>;</condition> <incr><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>entry</name><operator>-&gt;</operator><name>line2</name></name> <operator>||</operator> <name><name>entry</name><operator>-&gt;</operator><name>line2</name></name> <operator>==</operator> <name>NON_UNIQUE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>binary_search</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>, <argument><expr><name>longest</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>sequence</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>anchor_i</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sequence</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>anchor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>anchor_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>longest</name> <operator>=</operator> <name>anchor_i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>longest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>longest</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>longest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>sequence</name><index>[<expr><name>longest</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>previous</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>previous</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>previous</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xrecord_t</name> <modifier>*</modifier></type><name>record1</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>env</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>recs</name><index>[<expr><name>line1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xrecord_t</name> <modifier>*</modifier></type><name>record2</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>env</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name><index>[<expr><name>line2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>xdl_recmatch</name><argument_list>(<argument><expr><name><name>record1</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>record1</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name><name>record2</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>record2</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>patience_diff</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>file1</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>file2</name></decl></parameter>,
<parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>, <parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count2</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>walk_common_sequence</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type><name>first</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>end1</name> <init>= <expr><name>line1</name> <operator>+</operator> <name>count1</name></expr></init></decl>, <decl><type ref="prev"/><name>end2</name> <init>= <expr><name>line2</name> <operator>+</operator> <name>count2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next1</name></decl>, <decl><type ref="prev"/><name>next2</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next1</name> <operator>=</operator> <name><name>first</name><operator>-&gt;</operator><name>line1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>next2</name> <operator>=</operator> <name><name>first</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>next1</name> <operator>&gt;</operator> <name>line1</name> <operator>&amp;&amp;</operator> <name>next2</name> <operator>&gt;</operator> <name>line2</name> <operator>&amp;&amp;</operator>
<call><name>match</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>next1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>next2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next1</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>next2</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>next1</name> <operator>=</operator> <name>end1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next2</name> <operator>=</operator> <name>end2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<while>while <condition>(<expr><name>line1</name> <operator>&lt;</operator> <name>next1</name> <operator>&amp;&amp;</operator> <name>line2</name> <operator>&lt;</operator> <name>next2</name> <operator>&amp;&amp;</operator>
<call><name>match</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>line2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>next1</name> <operator>&gt;</operator> <name>line1</name> <operator>||</operator> <name>next2</name> <operator>&gt;</operator> <name>line2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name></type> <name>submap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>submap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>submap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>patience_diff</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>file1</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>file2</name></name></expr></argument>,
<argument><expr><name><name>map</name><operator>-&gt;</operator><name>xpp</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>env</name></name></expr></argument>,
<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>next1</name> <operator>-</operator> <name>line1</name></expr></argument>,
<argument><expr><name>line2</name></expr></argument>, <argument><expr><name>next2</name> <operator>-</operator> <name>line2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>first</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator>
<name><name>first</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>line1</name></name> <operator>==</operator> <name><name>first</name><operator>-&gt;</operator><name>line1</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>first</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>line2</name></name> <operator>==</operator> <name><name>first</name><operator>-&gt;</operator><name>line2</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>first</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>line1</name> <operator>=</operator> <name><name>first</name><operator>-&gt;</operator><name>line1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>line2</name> <operator>=</operator> <name><name>first</name><operator>-&gt;</operator><name>line2</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>first</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fall_back_to_classic_diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xpparam_t</name></type> <name>xpp</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>xpp</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>xpp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>XDF_DIFF_ALGORITHM_MASK</name></expr>;</expr_stmt>

<return>return <expr><call><name>xdl_fall_back_diff</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>,
<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>count1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>count2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>patience_diff</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>file1</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>file2</name></decl></parameter>,
<parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>, <parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name></type> <name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count1</name></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name>count2</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>rchg</name><index>[<expr><name>line2</name><operator>++</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>count2</name></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name>count1</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>rchg</name><index>[<expr><name>line1</name><operator>++</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fill_hashmap</name><argument_list>(<argument><expr><name>file1</name></expr></argument>, <argument><expr><name>file2</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>map</name></expr></argument>,
<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>count1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>count2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>map</name><operator>.</operator><name>has_matches</name></name></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name>count1</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>rchg</name><index>[<expr><name>line1</name><operator>++</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
<while>while<condition>(<expr><name>count2</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>rchg</name><index>[<expr><name>line2</name><operator>++</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name><name>map</name><operator>.</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>find_longest_common_sequence</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>walk_common_sequence</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><name>first</name></expr></argument>,
<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>count1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>count2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>fall_back_to_classic_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>,
<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>count1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>count2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name><name>map</name><operator>.</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>xdl_do_patience_diff</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>file1</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>file2</name></decl></parameter>,
<parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>, <parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>xdl_prepare_env</name><argument_list>(<argument><expr><name>file1</name></expr></argument>, <argument><expr><name>file2</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>patience_diff</name><argument_list>(<argument><expr><name>file1</name></expr></argument>, <argument><expr><name>file2</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><name>env</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>env</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>nrec</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>env</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>nrec</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
