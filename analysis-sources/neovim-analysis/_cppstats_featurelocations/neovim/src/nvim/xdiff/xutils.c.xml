<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\xdiff\xutils.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xinclude.h"</cpp:file></cpp:include>




<function><type><name>long</name></type> <name>xdl_bogosqrt</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>xdl_emit_diffrec</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>rec</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pre</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>psize</name></decl></parameter>,
<parameter><decl><type><name>xdemitcb_t</name> <modifier>*</modifier></type><name>ecb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mmbuffer_t</name></type> <name><name>mb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>pre</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>psize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rec</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"\n\\ No newline at end of file\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>mb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>ecb</name><operator>-&gt;</operator><name>outf</name></name><argument_list>(<argument><expr><name><name>ecb</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>xdl_mmfile_first</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mmf</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>mmf</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>mmf</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>long</name></type> <name>xdl_mmfile_size</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mmf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>mmf</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>xdl_cha_init</name><parameter_list>(<parameter><decl><type><name>chastore_t</name> <modifier>*</modifier></type><name>cha</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>isize</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>icount</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>cha</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>cha</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cha</name><operator>-&gt;</operator><name>isize</name></name> <operator>=</operator> <name>isize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cha</name><operator>-&gt;</operator><name>nsize</name></name> <operator>=</operator> <name>icount</name> <operator>*</operator> <name>isize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cha</name><operator>-&gt;</operator><name>ancur</name></name> <operator>=</operator> <name><name>cha</name><operator>-&gt;</operator><name>sncur</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cha</name><operator>-&gt;</operator><name>scurr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>xdl_cha_free</name><parameter_list>(<parameter><decl><type><name>chastore_t</name> <modifier>*</modifier></type><name>cha</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>chanode_t</name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name><name>cha</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><operator>(</operator><name>tmp</name> <operator>=</operator> <name>cur</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>xdl_cha_alloc</name><parameter_list>(<parameter><decl><type><name>chastore_t</name> <modifier>*</modifier></type><name>cha</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>chanode_t</name> <modifier>*</modifier></type><name>ancur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ancur</name> <operator>=</operator> <name><name>cha</name><operator>-&gt;</operator><name>ancur</name></name><operator>)</operator> <operator>||</operator> <name><name>ancur</name><operator>-&gt;</operator><name>icurr</name></name> <operator>==</operator> <name><name>cha</name><operator>-&gt;</operator><name>nsize</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ancur</name> <operator>=</operator> <operator>(</operator><name>chanode_t</name> <operator>*</operator><operator>)</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chanode_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>cha</name><operator>-&gt;</operator><name>nsize</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ancur</name><operator>-&gt;</operator><name>icurr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ancur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cha</name><operator>-&gt;</operator><name>tail</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cha</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ancur</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cha</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cha</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>ancur</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cha</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>ancur</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cha</name><operator>-&gt;</operator><name>ancur</name></name> <operator>=</operator> <name>ancur</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ancur</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>chanode_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>ancur</name><operator>-&gt;</operator><name>icurr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ancur</name><operator>-&gt;</operator><name>icurr</name></name> <operator>+=</operator> <name><name>cha</name><operator>-&gt;</operator><name>isize</name></name></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type> <name>xdl_guess_lines</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>sample</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>nl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>tsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <name>data</name> <operator>=</operator> <call><name>xdl_mmfile_first</name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>top</name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>size</name></expr>;</init> <condition><expr><name>nl</name> <operator>&lt;</operator> <name>sample</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>&lt;</operator> <name>top</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>nl</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cur</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>top</name> <operator>-</operator> <name>cur</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>tsize</name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>cur</name> <operator>-</operator> <name>data</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nl</name> <operator>&amp;&amp;</operator> <name>tsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nl</name> <operator>=</operator> <call><name>xdl_mmfile_size</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>tsize</name> <operator>/</operator> <name>nl</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>nl</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>xdl_blankline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XDF_WHITESPACE_FLAGS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>size</name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>i</name> <operator>==</operator> <name>size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>ends_with_optional_cr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>complete</name> <init>= <expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>l</name><index>[<expr><name>s</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>complete</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>complete</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>==</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>xdl_recmatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i1</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>==</operator> <name>s2</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XDF_WHITESPACE_FLAGS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>









<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XDF_IGNORE_WHITESPACE</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>skip_ws</name>;</goto>
<while>while <condition>(<expr><name>i1</name> <operator>&lt;</operator> <name>s1</name> <operator>&amp;&amp;</operator> <name>i2</name> <operator>&lt;</operator> <name>s2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>l1</name><index>[<expr><name>i1</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <name><name>l2</name><index>[<expr><name>i2</name><operator>++</operator></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<label><name>skip_ws</name>:</label>
<while>while <condition>(<expr><name>i1</name> <operator>&lt;</operator> <name>s1</name> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>l1</name><index>[<expr><name>i1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name>i2</name> <operator>&lt;</operator> <name>s2</name> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>l2</name><index>[<expr><name>i2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XDF_IGNORE_WHITESPACE_CHANGE</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>i1</name> <operator>&lt;</operator> <name>s1</name> <operator>&amp;&amp;</operator> <name>i2</name> <operator>&lt;</operator> <name>s2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>l1</name><index>[<expr><name>i1</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>l2</name><index>[<expr><name>i2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>i1</name> <operator>&lt;</operator> <name>s1</name> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>l1</name><index>[<expr><name>i1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name>i2</name> <operator>&lt;</operator> <name>s2</name> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>l2</name><index>[<expr><name>i2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l1</name><index>[<expr><name>i1</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <name><name>l2</name><index>[<expr><name>i2</name><operator>++</operator></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XDF_IGNORE_WHITESPACE_AT_EOL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>i1</name> <operator>&lt;</operator> <name>s1</name> <operator>&amp;&amp;</operator> <name>i2</name> <operator>&lt;</operator> <name>s2</name> <operator>&amp;&amp;</operator> <name><name>l1</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>==</operator> <name><name>l2</name><index>[<expr><name>i2</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XDF_IGNORE_CR_AT_EOL</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>i1</name> <operator>&lt;</operator> <name>s1</name> <operator>&amp;&amp;</operator> <name>i2</name> <operator>&lt;</operator> <name>s2</name> <operator>&amp;&amp;</operator> <name><name>l1</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>==</operator> <name><name>l2</name><index>[<expr><name>i2</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><call><name>ends_with_optional_cr</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>ends_with_optional_cr</name><argument_list>(<argument><expr><name>l2</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>i1</name> <operator>&lt;</operator> <name>s1</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>i1</name> <operator>&lt;</operator> <name>s1</name> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>l1</name><index>[<expr><name>i1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>i1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i2</name> <operator>&lt;</operator> <name>s2</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>i2</name> <operator>&lt;</operator> <name>s2</name> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>l2</name><index>[<expr><name>i2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><name>s2</name> <operator>==</operator> <name>i2</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>xdl_hash_record_with_whitespace</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ha</name> <init>= <expr><literal type="number">5381</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>*</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cr_at_eol_only</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XDF_WHITESPACE_FLAGS</name><operator>)</operator> <operator>==</operator> <name>XDF_IGNORE_CR_AT_EOL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>ptr</name> <operator>&lt;</operator> <name>top</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cr_at_eol_only</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>top</name> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr2</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>at_eol</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>top</name> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>at_eol</name> <operator>=</operator> <operator>(</operator><name>top</name> <operator>&lt;=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XDF_IGNORE_WHITESPACE</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XDF_IGNORE_WHITESPACE_CHANGE</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name>at_eol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ha</name> <operator>+=</operator> <operator>(</operator><name>ha</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ha</name> <operator>^=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XDF_IGNORE_WHITESPACE_AT_EOL</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name>at_eol</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>ptr2</name> <operator>!=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ha</name> <operator>+=</operator> <operator>(</operator><name>ha</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ha</name> <operator>^=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>*</operator><name>ptr2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ha</name> <operator>+=</operator> <operator>(</operator><name>ha</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ha</name> <operator>^=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <ternary><condition><expr><name>ptr</name> <operator>&lt;</operator> <name>top</name></expr> ?</condition><then> <expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></then><else>: <expr><name>ptr</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>ha</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>xdl_hash_record</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ha</name> <init>= <expr><literal type="number">5381</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>*</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XDF_WHITESPACE_FLAGS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>xdl_hash_record_with_whitespace</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>ptr</name> <operator>&lt;</operator> <name>top</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ha</name> <operator>+=</operator> <operator>(</operator><name>ha</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ha</name> <operator>^=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <ternary><condition><expr><name>ptr</name> <operator>&lt;</operator> <name>top</name></expr> ?</condition><then> <expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></then><else>: <expr><name>ptr</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>ha</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>xdl_hashbits</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>val</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>bits</name> <operator>&lt;</operator> <name>CHAR_BIT</name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr>;</condition> <incr><expr><name>val</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>bits</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<return>return <expr><ternary><condition><expr><name>bits</name></expr> ?</condition><then> <expr><name>bits</name></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>xdl_num_out</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name> <init>= <expr><name>out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>ptr</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><name>val</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>val</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&gt;</operator> <name>buf</name></expr>;</condition> <incr><expr><name>val</name> <operator>/=</operator> <literal type="number">10</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>ptr</name> <operator>=</operator> <literal type="string">"0123456789"</literal><index>[<expr><name>val</name> <operator>%</operator> <literal type="number">10</literal></expr>]</index></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr><operator>,</operator> <expr><name>str</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>str</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>str</name> <operator>-</operator> <name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>xdl_emit_hunk_hdr</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>c2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>funclen</name></decl></parameter>, <parameter><decl><type><name>xdemitcb_t</name> <modifier>*</modifier></type><name>ecb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mmbuffer_t</name></type> <name>mb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"@@ -"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nb</name> <operator>+=</operator> <call><name>xdl_num_out</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>nb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>c1</name></expr> ?</condition><then> <expr><name>s1</name></expr></then><else>: <expr><name>s1</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>nb</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nb</name> <operator>+=</operator> <call><name>xdl_num_out</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>nb</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>nb</name></expr></argument>, <argument><expr><literal type="string">" +"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nb</name> <operator>+=</operator> <call><name>xdl_num_out</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>nb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>c2</name></expr> ?</condition><then> <expr><name>s2</name></expr></then><else>: <expr><name>s2</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>nb</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nb</name> <operator>+=</operator> <call><name>xdl_num_out</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>nb</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>nb</name></expr></argument>, <argument><expr><literal type="string">" @@"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>func</name> <operator>&amp;&amp;</operator> <name>funclen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>nb</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>funclen</name> <operator>&gt;</operator> <operator>(</operator><name>long</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>nb</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>funclen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>nb</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>nb</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>funclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb</name> <operator>+=</operator> <name>funclen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>nb</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>nb</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>ecb</name><operator>-&gt;</operator><name>outf</name></name><argument_list>(<argument><expr><name><name>ecb</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>xdl_fall_back_diff</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>diff_env</name></decl></parameter>, <parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count2</name></decl></parameter>)</parameter_list>
<block>{<block_content>








<decl_stmt><decl><type><name>mmfile_t</name></type> <name>subfile1</name></decl>, <decl><type ref="prev"/><name>subfile2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xdfenv_t</name></type> <name>env</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>subfile1</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>diff_env</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>recs</name><index>[<expr><name>line1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subfile1</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>diff_env</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>recs</name><index>[<expr><name>line1</name> <operator>+</operator> <name>count1</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name> <operator>+</operator>
<name><name>diff_env</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>recs</name><index>[<expr><name>line1</name> <operator>+</operator> <name>count1</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>-</operator> <name><name>subfile1</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subfile2</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>diff_env</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name><index>[<expr><name>line2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subfile2</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>diff_env</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name><index>[<expr><name>line2</name> <operator>+</operator> <name>count2</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name> <operator>+</operator>
<name><name>diff_env</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name><index>[<expr><name>line2</name> <operator>+</operator> <name>count2</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>-</operator> <name><name>subfile2</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>xdl_do_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subfile1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subfile2</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>env</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>diff_env</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>rchg</name></name> <operator>+</operator> <name>line1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>env</name><operator>.</operator><name>xdf1</name><operator>.</operator><name>rchg</name></name></expr></argument>, <argument><expr><name>count1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>diff_env</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>rchg</name></name> <operator>+</operator> <name>line2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>env</name><operator>.</operator><name>xdf2</name><operator>.</operator><name>rchg</name></name></expr></argument>, <argument><expr><name>count2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
