<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\ex_getln.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/arabic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_getln.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/digraph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/edit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/if_cscope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/indent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/menu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor_shape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/keymap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mouse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os_unix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/popupmnu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/regexp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/search.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/sign.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/tag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kvec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/viml/parser/parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/viml/parser/expressions.h"</cpp:file></cpp:include>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt> 
}</block></struct></type> <name>CmdlineColorChunk</name>;</typedef>




<typedef>typedef <macro><name>kvec_t</name><argument_list>(<argument>CmdlineColorChunk</argument>)</argument_list></macro> <expr_stmt><expr><name>CmdlineColors</name></expr>;</expr_stmt></typedef>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>prompt_id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdbuff</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>CmdlineColors</name></type> <name>colors</name></decl>;</decl_stmt> 
}</block></struct></type> <name>ColoredCmdline</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>kCmdRedrawNone</name></decl>,
<decl><name>kCmdRedrawPos</name></decl>,
<decl><name>kCmdRedrawAll</name></decl>,
}</block></enum></type> <name>CmdRedraw</name>;</typedef>






<struct>struct <name>cmdline_info</name> <block>{
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmdbuff</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cmdbufflen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cmdlen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cmdpos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cmdspos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cmdfirstc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cmdindent</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmdprompt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cmdattr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>overstrike</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xpc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>xp_context</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>xp_arg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>input_fn</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>prompt_id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Callback</name></type> <name>highlight_callback</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ColoredCmdline</name></type> <name>last_colors</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>cmdline_info</name></name> <modifier>*</modifier></type><name>prev_ccline</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>special_char</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>special_shift</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>CmdRedraw</name></type> <name>redraw_state</name></decl>;</decl_stmt> 
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>last_prompt_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>colnr_T</name></type> <name>vs_curswant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>vs_leftcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>vs_topline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vs_topfill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>vs_botline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vs_empty_rows</name></decl>;</decl_stmt>
}</block></struct></type> <name>viewstate_T</name>;</typedef>

<typedef>typedef <type><struct>struct <name>command_line_state</name> <block>{
<decl_stmt><decl><type><name>VimState</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>firstc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gotesc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>do_abbr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lookfor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>hiscnt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>save_hiscnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>histype</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pos_T</name></type> <name>search_start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pos_T</name></type> <name>save_cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>viewstate_T</name></type> <name>init_viewstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>viewstate_T</name></type> <name>old_viewstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>match_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>match_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_incsearch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>incsearch_postponed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_wild_list</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>wim_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_msg_scroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_State</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_p_icm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>some_key_typed</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>ignore_drag_release</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>break_ctrl_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expand_T</name></type> <name>xpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>b_im_ptr</name></decl>;</decl_stmt>
}</block></struct></type> <name>CommandLineState</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>cmdline_info</name></name></type> <name>CmdlineInfo</name>;</typedef>





<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>cmdline_info</name></name></type> <name>ccline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cmd_showtail</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>new_cmdpos</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><specifier>static</specifier> <name>Array</name></type> <name>cmdline_block</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>




<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>user_expand_func_T</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<expr_stmt><expr><specifier>static</specifier> <name>histentry_T</name> <operator>*</operator><operator>(</operator><name><name>history</name><index>[<expr><name>HIST_COUNT</name></expr>]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>hisidx</name><index>[<expr><name>HIST_COUNT</name></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>hisnum</name><index>[<expr><name>HIST_COUNT</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hislen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 





<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>getln_interrupted_highlight</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>pumitem_T</name> <modifier>*</modifier></type><name>compl_match_array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_match_arraysize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_startcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_selected</name></decl>;</decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ex_getln.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cmd_hkmap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>save_viewstate</name><parameter_list>(<parameter><decl><type><name>viewstate_T</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vs_curswant</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vs_leftcol</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vs_topline</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vs_topfill</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vs_botline</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vs_empty_rows</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_empty_rows</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_viewstate</name><parameter_list>(<parameter><decl><type><name>viewstate_T</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vs_curswant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vs_leftcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vs_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vs_topfill</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vs_botline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_empty_rows</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vs_empty_rows</name></name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>command_line_enter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>firstc</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cmdline_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cmdline_level</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CommandLineState</name></type> <name>state</name> <init>= <expr><block>{
<expr><operator>.</operator><name>firstc</name> <operator>=</operator> <name>firstc</name></expr>,
<expr><operator>.</operator><name>count</name> <operator>=</operator> <name>count</name></expr>,
<expr><operator>.</operator><name>indent</name> <operator>=</operator> <name>indent</name></expr>,
<expr><operator>.</operator><name>save_msg_scroll</name> <operator>=</operator> <name>msg_scroll</name></expr>,
<expr><operator>.</operator><name>save_State</name> <operator>=</operator> <name>State</name></expr>,
<expr><operator>.</operator><name>ignore_drag_release</name> <operator>=</operator> <name>true</name></expr>,
<expr><operator>.</operator><name>match_start</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CommandLineState</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name>state</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_p_icm</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_icm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>save_viewstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>init_viewstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>break_ctrl_c</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmd_hkmap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>prompt_id</name></name> <operator>=</operator> <name>last_prompt_id</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name>cmdline_level</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>overstrike</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>clearpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>match_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_cursor</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>save_viewstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>old_viewstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>indent</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'@'</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdindent</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>indent</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>alloc_cmdbuff</name><argument_list>(<argument><expr><ternary><condition><expr><name>exmode_active</name></expr> ?</condition><then> <expr><literal type="number">250</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>indent</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>last_colors</name></name> <operator>=</operator> <operator>(</operator><name>ColoredCmdline</name><operator>)</operator><block>{ <expr><operator>.</operator><name>cmdbuff</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>colors</name> <operator>=</operator> <name>KV_INITIAL_VALUE</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sb_text_start_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>indent</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>indent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>indent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>indent</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ExpandInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>xpc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rlc</name></name> <operator>==</operator> <literal type="char">'s'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmdmsg_rl</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cmdmsg_rl</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_grid_validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redir_off</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd_silent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gotocmdline</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmdprompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>=</operator> <call><name>cmd_startcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg_scroll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_ext_clear</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_backslash</name></name> <operator>=</operator> <name>XP_BS_NONE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_shell</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>input_fn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>xp_context</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_pattern</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_arg</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>xp_arg</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>CMDLINE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>==</operator> <name>B_IMODE_USE_INSERT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_im_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_im_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b_im_ptr</name></name> <operator>==</operator> <name>B_IMODE_LMAP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>State</name> <operator>|=</operator> <name>LANGMAP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>init_history</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>=</operator> <name>hislen</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>histype</name></name> <operator>=</operator> <call><name>hist_char2type</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_digraph</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<if_stmt><if>if <condition>(<expr><name>did_emsg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd_silent</name> <operator>&amp;&amp;</operator> <name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_statuslines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>check</name></name> <operator>=</operator> <name>command_line_check</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>execute</name></name> <operator>=</operator> <name>command_line_execute</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TryState</name></type> <name>tstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>tl_ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><call><name>get_vim_var_dict</name><argument_list>(<argument><expr><name>VV_EVENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>firstcbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>firstcbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>firstc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>firstc</name></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>firstcbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_event</name><argument_list>(<argument><expr><name>EVENT_CMDLINEENTER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_add_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"cmdtype"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>firstcbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"cmdlevel"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_set_keys_readonly</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_enter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_CMDLINEENTER</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>firstcbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>firstcbuf</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_clear</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>tl_ret</name> <operator>=</operator> <call><name>try_leave</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tstate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tl_ret</name> <operator>&amp;&amp;</operator> <call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_printf_attr</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_E</name></expr></argument>)</argument_list></call><operator>|</operator><name>MSG_HIST</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_autocmd_err</name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tl_ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state_enter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_event</name><argument_list>(<argument><expr><name>EVENT_CMDLINELEAVE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tv_dict_add_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"cmdtype"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>firstcbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"cmdlevel"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_set_keys_readonly</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_special</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"abort"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>gotesc</name></name></expr> ?</condition><then> <expr><name>kSpecialVarTrue</name></expr> </then><else>: <expr><name>kSpecialVarFalse</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_enter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_CMDLINELEAVE</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>firstcbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>firstcbuf</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tl_ret</name> <operator>=</operator> <call><name>try_leave</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tstate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>tv_dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"abort"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gotesc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>tv_dict_clear</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmdmsg_rl</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExpandCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>xpc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>did_incsearch</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>gotesc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_cursor</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equalpos</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>save_cursor</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>search_start</name></name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>restore_viewstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>old_viewstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>highlight_match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>histype</name></name> <operator>!=</operator> <name>HIST_INVALID</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>some_key_typed</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>histype</name></name> <operator>==</operator> <name>HIST_SEARCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_to_history</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>histype</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>histype</name></name> <operator>==</operator> <name>HIST_SEARCH</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name></expr> </then><else>: <expr><name>NUL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>new_last_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_last_cmdline</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>gotesc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abandon_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>msg_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_msg_scroll</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>redir_off</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tl_ret</name> <operator>&amp;&amp;</operator> <call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_printf_attr</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_E</name></expr></argument>)</argument_list></call><operator>|</operator><name>MSG_HIST</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_autocmd_err</name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>some_key_typed</name></name> <operator>&amp;&amp;</operator> <name>tl_ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"icm"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>save_p_icm</name></name></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>,
<argument><expr><name>SID_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>State</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_State</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>save_p_icm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>last_colors</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>last_colors</name><operator>.</operator><name>colors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sb_text_end_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_cmdline_hide</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_ext_clear_later</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmdline_level</name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>command_line_check</name><parameter_list>(<parameter><decl><type><name>VimState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>redir_off</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 


<expr_stmt><expr><name>quit_more</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 



<expr_stmt><expr><call><name>cursorcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>command_line_execute</name><parameter_list>(<parameter><decl><type><name>VimState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>K_IGNORE</name> <operator>||</operator> <name>key</name> <operator>==</operator> <name>K_NOP</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CommandLineState</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>CommandLineState</name> <operator>*</operator><operator>)</operator><name>state</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_EVENT</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_COMMAND</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_EVENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>multiqueue_process_events</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>do_cmdline</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>getcmdkeycmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DOCMD_NOWAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmdline_was_last_drawn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redrawcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>KeyTyped</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>some_key_typed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd_hkmap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>hkmap</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyStuffed</name></expr>)</condition> <block>{<block_content>



<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>K_RIGHT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>K_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_S_RIGHT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>K_S_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_C_RIGHT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>K_C_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_LEFT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>K_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_S_LEFT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>K_S_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_C_LEFT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>K_C_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>Ctrl_C</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>break_ctrl_c</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name>global_busy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lookfor</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>K_S_DOWN</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>K_S_UP</name>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>K_DOWN</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>K_UP</name>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>K_PAGEDOWN</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>K_PAGEUP</name>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>K_KPAGEDOWN</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>K_KPAGEUP</name>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>K_LEFT</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>K_RIGHT</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>Ctrl_P</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>Ctrl_N</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lookfor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>p_wc</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_S_TAB</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>Ctrl_P</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>did_wild_list</name></name> <operator>&amp;&amp;</operator> <name>p_wmnu</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_LEFT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>Ctrl_P</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_RIGHT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>Ctrl_N</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>compl_match_array</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>did_wild_list</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>Ctrl_E</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>WILD_CANCEL</name></expr></argument>, <argument><expr><name>WILD_NO_BEEP</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>Ctrl_Y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>WILD_APPLY</name></expr></argument>, <argument><expr><name>WILD_NO_BEEP</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>Ctrl_E</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUNAMES</name> <operator>&amp;&amp;</operator> <name>p_wmnu</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_KENTER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>K_DOWN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>p_wc</name> <operator>&amp;&amp;</operator> <name>KeyTyped</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>p_wcm</name>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>Ctrl_N</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>Ctrl_P</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>Ctrl_A</name>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>Ctrl_L</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>compl_match_array</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pum_undisplay</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>compl_match_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ExpandOne</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WILD_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>did_wild_list</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_wmnu</name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>K_UP</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>K_DOWN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_wmnu</name> <operator>&amp;&amp;</operator> <name>wild_menu_showing</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>skt</name> <init>= <expr><name>KeyTyped</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_RedrawingDisabled</name> <init>= <expr><name>RedrawingDisabled</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>input_fn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wild_menu_showing</name> <operator>==</operator> <name>WM_SCROLLED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmdline_row</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wild_menu_showing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>save_p_ls</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_ls</name> <operator>=</operator> <name>save_p_ls</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wmh</name> <operator>=</operator> <name>save_p_wmh</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>last_status</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>save_p_ls</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wild_menu_showing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>wild_menu_showing</name> <operator>!=</operator> <name>WM_LIST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>win_redraw_last_status</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wild_menu_showing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>redraw_statuslines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>wild_menu_showing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>skt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>input_fn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <name>old_RedrawingDisabled</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUNAMES</name> <operator>&amp;&amp;</operator> <name>p_wmnu</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_DOWN</name> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_wc</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_UP</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_pattern</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>--</operator><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cmdline_del</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_wc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FILES</name>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_DIRECTORIES</name>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_SHELLCMD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>p_wmnu</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>upseg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>upseg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>PATHSEP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>upseg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>upseg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>upseg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>PATHSEP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>upseg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_DOWN</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>PATHSEP</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&lt;</operator> <literal type="number">3</literal>
<operator>||</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal>
<operator>||</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_wc</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_pattern</name></name></expr></argument>, <argument><expr><name>upseg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_DOWN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_pattern</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>--</operator><name>j</name> <operator>&gt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>found</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>j</name> <operator>==</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cmdline_del</name><argument_list>(<argument><expr><name>j</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_wc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_UP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_pattern</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>--</operator><name>j</name> <operator>&gt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" *?[{`$%#"</literal></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>NULL</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>upseg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>upseg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>cmdline_del</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_on_cmdline</name><argument_list>(<argument><expr><name>upseg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cmdline_del</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_wc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>Ctrl_BSL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>no_mapping</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_mapping</name><operator>--</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>Ctrl_N</name>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>Ctrl_G</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <literal type="char">'e'</literal>
<operator>||</operator> <operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name>KeyTyped</name><operator>)</operator>
<operator>||</operator> <name>cmdline_star</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vungetc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>Ctrl_BSL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>==</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_cmdpos</name> <operator>=</operator> <literal type="number">99999</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>new_cmdpos</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>get_expr_register</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>CmdlineInfo</name></type> <name>save_ccline</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>save_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>textlock</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_expr_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>textlock</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restore_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>realloc_cmdbuff</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>new_cmdpos</name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name>new_cmdpos</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>emsg_on_display</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>Ctrl_G</name> <operator>&amp;&amp;</operator> <name>p_im</name> <operator>&amp;&amp;</operator> <name>restart_edit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gotesc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>cedit_key</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_CMDWIN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_CMDWIN</name> <operator>||</operator> <name>ex_normal_busy</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name>got_int</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>open_cmdwin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>some_key_typed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>do_digraph</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <literal type="char">'\n'</literal>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <literal type="char">'\r'</literal>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_KENTER</name>
<operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>ESC</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>KeyTyped</name> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_ESC</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exmode_active</name>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>ESC</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>==</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_KENTER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gotesc</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>ccheck_abbr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <name>ABBR_OFF</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd_silent</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cmd_cursor_goto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>p_wc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>gotesc</name></name> <operator>&amp;&amp;</operator> <name>KeyTyped</name><operator>)</operator> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>p_wcm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>did_wild_list</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>wim_flags</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LIST</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>p_wmnu</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wim_flags</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_FULL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>showmatches</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>p_wmnu</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>wim_flags</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LIST</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>did_wild_list</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wim_flags</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LONGEST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>WILD_LONGEST</name></expr></argument>, <argument><expr><name>WILD_NO_BEEP</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>wim_flags</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_FULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>WILD_NEXT</name></expr></argument>, <argument><expr><name>WILD_NO_BEEP</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wim_flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LONGEST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>WILD_LONGEST</name></expr></argument>, <argument><expr><name>WILD_NO_BEEP</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>WILD_EXPAND_KEEP</name></expr></argument>, <argument><expr><name>WILD_NO_BEEP</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vpeekc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ExpandOne</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WILD_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>res</name></name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>wim_flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>WIM_LONGEST</name> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>==</operator> <name>j</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wim_flags</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LIST</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>p_wmnu</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wim_flags</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_FULL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>wim_flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LONGEST</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p_wmnu_save</name> <init>= <expr><name>p_wmnu</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_wmnu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>WILD_PREV</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wmnu</name> <operator>=</operator> <name>p_wmnu_save</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>showmatches</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>p_wmnu</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>wim_flags</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LIST</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>did_wild_list</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wim_flags</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LONGEST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>WILD_LONGEST</name></expr></argument>, <argument><expr><name>WILD_NO_BEEP</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>wim_flags</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_FULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>WILD_NEXT</name></expr></argument>, <argument><expr><name>WILD_NO_BEEP</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_WILD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>ESC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gotesc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>res</name></name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gotesc</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_S_TAB</name> <operator>&amp;&amp;</operator> <name>KeyTyped</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>WILD_EXPAND_KEEP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>showmatches</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>p_wmnu</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>wim_flags</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>wim_index</name></name></expr>]</index></name> <operator>&amp;</operator> <name>WIM_LIST</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>WILD_PREV</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>WILD_PREV</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_ZERO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_abbr</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<return>return <expr><call><name>command_line_handle_key</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>command_line_next_incsearch</name><parameter_list>(<parameter><decl><type><name>CommandLineState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>next_match</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ui_busy_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>search_flags</name> <init>= <expr><name>SEARCH_NOOF</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pat</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>save_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next_match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>match_end</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>match_start</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>match_end</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>search_flags</name> <operator>+=</operator> <name>SEARCH_COL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>match_start</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_hls</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>search_flags</name> <operator>+=</operator> <name>SEARCH_KEEP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>emsg_off</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><call><name>searchit</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>next_match</name></expr> ?</condition><then> <expr><name>FORWARD</name></expr> </then><else>: <expr><name>BACKWARD</name></expr></else></ternary></expr></argument>,
<argument><expr><name>pat</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>,
<argument><expr><name>RE_SEARCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>emsg_off</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_busy_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>match_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>match_end</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>match_start</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_match</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>next_match</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>next_match</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_search_match</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>match_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>match_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed_cline_bef_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>highlight_match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>save_viewstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>old_viewstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>restore_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>command_line_next_histidx</name><parameter_list>(<parameter><decl><type><name>CommandLineState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>next_match</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lookfor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_match</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>==</operator> <name>hislen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>=</operator> <name><name>hisidx</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>histype</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>hisidx</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>histype</name></name></expr>]</index></name> <operator>!=</operator> <name>hislen</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>=</operator> <name>hislen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>!=</operator> <name><name>hisidx</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>histype</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_hiscnt</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>==</operator> <name><name>hisidx</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>histype</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>=</operator> <name>hislen</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>==</operator> <name>hislen</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>==</operator> <name>hislen</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>history</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>histype</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_hiscnt</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>K_UP</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>K_DOWN</name><operator>)</operator>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>save_hiscnt</name></name>
<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>histype</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lookfor</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>command_line_handle_key</name><parameter_list>(<parameter><decl><type><name>CommandLineState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>K_BS</name></expr>:</case>
<case>case <expr><name>Ctrl_H</name></expr>:</case>
<case>case <expr><name>K_DEL</name></expr>:</case>
<case>case <expr><name>K_KDEL</name></expr>:</case>
<case>case <expr><name>Ctrl_W</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_KDEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>K_DEL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_DEL</name> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>!=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_DEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+=</operator> <call><name>mb_off_next</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>,
<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mb_prevptr</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>Ctrl_W</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>&amp;&amp;</operator> <call><name>ascii_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mb_prevptr</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>mb_get_class</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>&amp;&amp;</operator> <call><name>mb_get_class</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mb_prevptr</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>mb_get_class</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-=</operator> <name>j</name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_cursor</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>old_viewstate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>init_viewstate</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>Ctrl_W</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdprompt</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>indent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exmode_active</name> <operator>||</operator> <name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd_silent</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_INS</name></expr>:</case>
<case>case <expr><name>K_KINS</name></expr>:</case>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>overstrike</name></name> <operator>=</operator> <operator>!</operator><name><name>ccline</name><operator>.</operator><name>overstrike</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>Ctrl_HAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>map_to_exists_mode</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>LANGMAP</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>State</name> <operator>^=</operator> <name>LANGMAP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>b_im_ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>LANGMAP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b_im_ptr</name></name> <operator>=</operator> <name>B_IMODE_LMAP</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b_im_ptr</name></name> <operator>=</operator> <name>B_IMODE_NONE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>b_im_ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>b_im_ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_iminsert_global</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>set_imsearch_global</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>status_redraw_curbuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>Ctrl_U</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-=</operator> <name>j</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_cursor</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ESC</name></expr>:</case> 
<case>case <expr><name>Ctrl_C</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>exmode_active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ex_normal_busy</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>getln_interrupted_highlight</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>Ctrl_C</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>getln_interrupted_highlight</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gotesc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return> 

<case>case <expr><name>Ctrl_R</name></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><call><name>putcmdline</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_mapping</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>Ctrl_O</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>Ctrl_R</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>Ctrl_R</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>



<expr_stmt><expr><name>new_cmdpos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>==</operator> <literal type="char">'='</literal> 
<operator>||</operator> <name>cmdline_star</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>CmdlineInfo</name></type> <name>save_ccline</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>save_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>get_expr_register</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restore_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>ESC</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>cmdline_paste</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>i</name> <operator>==</operator> <name>Ctrl_R</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gotesc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>new_cmdpos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_cmdpos</name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name>new_cmdpos</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>special_char</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<case>case <expr><name>Ctrl_D</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>showmatches</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EXPAND_NOTHING</name></expr>)</condition> <block>{<block_content>
<break>break;</break> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wild_menu_showing</name> <operator>=</operator> <name>WM_LIST</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return> 

<case>case <expr><name>K_RIGHT</name></expr>:</case>
<case>case <expr><name>K_S_RIGHT</name></expr>:</case>
<case>case <expr><name>K_C_RIGHT</name></expr>:</case>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cells</name> <init>= <expr><call><name>cmdline_charsize</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>KeyTyped</name> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>+</operator> <name>cells</name> <operator>&gt;=</operator> <name>Columns</name> <operator>*</operator> <name>Rows</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>+=</operator> <name>cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_S_RIGHT</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_C_RIGHT</name>
<operator>||</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name><operator>|</operator><name>MOD_MASK_CTRL</name><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition>;</do>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>=</operator> <call><name>cmd_screencol</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_LEFT</name></expr>:</case>
<case>case <expr><name>K_S_LEFT</name></expr>:</case>
<case>case <expr><name>K_C_LEFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>,
<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>-=</operator> <call><name>cmdline_charsize</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_S_LEFT</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_C_LEFT</name>
<operator>||</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name><operator>|</operator><name>MOD_MASK_CTRL</name><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition>;</do>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>=</operator> <call><name>cmd_screencol</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>special_char</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>putcmdline</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>special_char</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>special_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_IGNORE</name></expr>:</case>

<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>


<case>case <expr><name>K_MIDDLEDRAG</name></expr>:</case>
<case>case <expr><name>K_MIDDLERELEASE</name></expr>:</case>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return> 

<case>case <expr><name>K_MIDDLEMOUSE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mouse_has</name><argument_list>(<argument><expr><name>MOUSE_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cmdline_paste</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>eval_has_provider</name><argument_list>(<argument><expr><literal type="string">"clipboard"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'*'</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>


<case>case <expr><name>K_LEFTDRAG</name></expr>:</case>
<case>case <expr><name>K_LEFTRELEASE</name></expr>:</case>
<case>case <expr><name>K_RIGHTDRAG</name></expr>:</case>
<case>case <expr><name>K_RIGHTRELEASE</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ignore_drag_release</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>
<case>case <expr><name>K_LEFTMOUSE</name></expr>:</case>
<case>case <expr><name>K_RIGHTMOUSE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_LEFTRELEASE</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_RIGHTRELEASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ignore_drag_release</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ignore_drag_release</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mouse_has</name><argument_list>(<argument><expr><name>MOUSE_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>=</operator> <call><name>cmd_startcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>;</condition>
<incr><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cells</name> <init>= <expr><call><name>cmdline_charsize</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mouse_row</name> <operator>&lt;=</operator> <name>cmdline_row</name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>/</operator> <name>Columns</name>
<operator>&amp;&amp;</operator> <name>mouse_col</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>%</operator> <name>Columns</name> <operator>+</operator> <name>cells</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>correct_screencol</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name>cells</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>+=</operator> <name>cells</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>


<case>case <expr><name>K_MOUSEDOWN</name></expr>:</case>
<case>case <expr><name>K_MOUSEUP</name></expr>:</case>
<case>case <expr><name>K_MOUSELEFT</name></expr>:</case>
<case>case <expr><name>K_MOUSERIGHT</name></expr>:</case>

<case>case <expr><name>K_X1MOUSE</name></expr>:</case>
<case>case <expr><name>K_X1DRAG</name></expr>:</case>
<case>case <expr><name>K_X1RELEASE</name></expr>:</case>
<case>case <expr><name>K_X2MOUSE</name></expr>:</case>
<case>case <expr><name>K_X2DRAG</name></expr>:</case>
<case>case <expr><name>K_X2RELEASE</name></expr>:</case>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>



<case>case <expr><name>K_SELECT</name></expr>:</case> 
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>Ctrl_B</name></expr>:</case> 
<case>case <expr><name>K_HOME</name></expr>:</case>
<case>case <expr><name>K_KHOME</name></expr>:</case>
<case>case <expr><name>K_S_HOME</name></expr>:</case>
<case>case <expr><name>K_C_HOME</name></expr>:</case>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>=</operator> <call><name>cmd_startcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>Ctrl_E</name></expr>:</case> 
<case>case <expr><name>K_END</name></expr>:</case>
<case>case <expr><name>K_KEND</name></expr>:</case>
<case>case <expr><name>K_S_END</name></expr>:</case>
<case>case <expr><name>K_C_END</name></expr>:</case>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>=</operator> <call><name>cmd_screencol</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>Ctrl_A</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>WILD_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>Ctrl_L</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>p_is</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cmd_silent</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>did_incsearch</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>match_end</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equalpos</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>p_ic</name> <operator>&amp;&amp;</operator> <name>p_scs</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>pat_has_uppercase</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name>
<operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>p_magic</name></expr> ?</condition><then> <expr><literal type="string">"\\~^$.*["</literal></expr> </then><else>: <expr><literal type="string">"\\^$"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><name>WILD_LONGEST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>Ctrl_N</name></expr>:</case> 
<case>case <expr><name>Ctrl_P</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>nextwild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>xpc</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>Ctrl_P</name><operator>)</operator></expr> ?</condition><then> <expr><name>WILD_PREV</name></expr> </then><else>: <expr><name>WILD_NEXT</name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>!=</operator> <literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_UP</name></expr>:</case>
<case>case <expr><name>K_DOWN</name></expr>:</case>
<case>case <expr><name>K_S_UP</name></expr>:</case>
<case>case <expr><name>K_S_DOWN</name></expr>:</case>
<case>case <expr><name>K_PAGEUP</name></expr>:</case>
<case>case <expr><name>K_KPAGEUP</name></expr>:</case>
<case>case <expr><name>K_PAGEDOWN</name></expr>:</case>
<case>case <expr><name>K_KPAGEDOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>histype</name></name> <operator>==</operator> <name>HIST_INVALID</name> <operator>||</operator> <name>hislen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_hiscnt</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lookfor</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lookfor</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lookfor</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>next_match</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_DOWN</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_S_DOWN</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>Ctrl_N</name>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_PAGEDOWN</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>K_KPAGEDOWN</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>command_line_next_histidx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>next_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_hiscnt</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_firstc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name> <operator>==</operator> <name>hislen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lookfor</name></name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>history</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>histype</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>hiscnt</name></name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>histype</name></name> <operator>==</operator> <name>HIST_SEARCH</name>
<operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>lookfor</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>old_firstc</name> <operator>=</operator> <name><name>p</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name></expr>)</condition> <block>{<block_content>




<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>old_firstc</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>alloc_cmdbuff</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>alloc_cmdbuff</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>Ctrl_G</name></expr>:</case> 
<case>case <expr><name>Ctrl_T</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>p_is</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cmd_silent</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>command_line_next_incsearch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>Ctrl_G</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>Ctrl_V</name></expr>:</case>
<case>case <expr><name>Ctrl_Q</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ignore_drag_release</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putcmdline</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>get_literal</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_abbr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>special_char</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>cmd_silent</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unputcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>draw_cmdline</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cursorcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>Ctrl_K</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ignore_drag_release</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putcmdline</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>get_digraph</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>special_char</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>Ctrl__</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_ari</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cmd_hkmap</name> <operator>=</operator> <operator>!</operator><name>cmd_hkmap</name></expr>;</expr_stmt>
<return>return <expr><call><name>command_line_not_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>



<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>do_abbr</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call><operator>)</operator>


<operator>&amp;&amp;</operator> <operator>(</operator><call><name>ccheck_abbr</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;=</operator> <literal type="number">0x100</literal><operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <name>ABBR_OFF</name><operator>)</operator></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></else></ternary></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>Ctrl_RSB</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>mod_mask</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_on_cmdline</name><argument_list>(<argument><expr><call><name>get_special_key_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>mod_mask</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_on_cmdline</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>command_line_not_changed</name><parameter_list>(<parameter><decl><type><name>CommandLineState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>incsearch_postponed</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>command_line_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>empty_pattern</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"mMvVcCZ"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>command_line_changed</name><parameter_list>(<parameter><decl><type><name>CommandLineState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>has_event</name><argument_list>(<argument><expr><name>EVENT_CMDLINECHANGED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>TryState</name></type> <name>tstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><call><name>get_vim_var_dict</name><argument_list>(<argument><expr><name>VV_EVENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>firstcbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>firstcbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>firstcbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tv_dict_add_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"cmdtype"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>firstcbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"cmdlevel"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_set_keys_readonly</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_enter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_CMDLINECHANGED</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>firstcbuf</name></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>firstcbuf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_clear</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>tl_ret</name> <init>= <expr><call><name>try_leave</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tstate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tl_ret</name> <operator>&amp;&amp;</operator> <call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_printf_attr</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_E</name></expr></argument>)</argument_list></call><operator>|</operator><name>MSG_HIST</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_autocmd_err</name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>p_is</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cmd_silent</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name></type> <name>end_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proftime_T</name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>searchit_arg_T</name></type> <name>sia</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>char_avail</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>incsearch_postponed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>incsearch_postponed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>search_start</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>save_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_no_hlsearch</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>search_flags</name> <init>= <expr><name>SEARCH_OPT</name> <operator>+</operator> <name>SEARCH_NOOF</name> <operator>+</operator> <name>SEARCH_PEEK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ui_busy_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>profile_setlimit</name><argument_list>(<argument><expr><literal type="number">500L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_hls</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>search_flags</name> <operator>+=</operator> <name>SEARCH_KEEP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sia</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sia</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sia</name><operator>.</operator><name>sa_tm</name></name> <operator>=</operator> <operator>&amp;</operator><name>tm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>do_search</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>count</name></name></expr></argument>,
<argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>emsg_off</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vpeekc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>char_avail</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>incsearch_postponed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ui_busy_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>highlight_match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>highlight_match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><call><name>restore_viewstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>old_viewstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed_cline_bef_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name></type> <name>save_pos</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>match_start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_search_match</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>match_end</name></name> <operator>=</operator> <name>end_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_pos</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>empty_pattern</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_no_hlsearch</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ru</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restore_last_search_pattern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>end_pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_starthere</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>did_incsearch</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>firstc</name></name> <operator>==</operator> <literal type="char">':'</literal>
<operator>&amp;&amp;</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>==</operator> <literal type="number">0</literal> 
<operator>&amp;&amp;</operator> <operator>*</operator><name>p_icm</name> <operator>!=</operator> <name>NUL</name> 
<operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> 
<operator>&amp;&amp;</operator> <name>cmdline_star</name> <operator>==</operator> <literal type="number">0</literal> 
<operator>&amp;&amp;</operator> <call><name>cmd_can_preview</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vpeekc_any</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>State</name> <operator>|=</operator> <name>CMDPREVIEW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>emsg_silent</name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>msg_silent</name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>do_cmdline</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DOCMD_KEEPLINE</name><operator>|</operator><name>DOCMD_NOWAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_silent</name><operator>--</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>emsg_silent</name><operator>--</operator></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restore_viewstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>old_viewstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redrawcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDPREVIEW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>State</name> <operator>=</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>~</operator><name>CMDPREVIEW</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name> <operator>||</operator> <operator>(</operator><name>p_arshape</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_tbidi</name> <operator>&amp;&amp;</operator> <name>enc_utf8</name><operator>)</operator></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>vpeekc</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>abandon_cmdline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>redraw_state</name></name> <operator>=</operator> <name>kCmdRedrawNone</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>compute_cmdrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>




















<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>getcmdline</name> <parameter_list>(
<parameter><decl><type><name>int</name></type> <name>firstc</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>, 
<parameter><decl><type><name>bool</name> <name>do_concat</name></type> <name>FUNC_ATTR_UNUSED</name></decl></parameter>
)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>CmdlineInfo</name></type> <name>save_ccline</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>save_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><call><name>command_line_enter</name><argument_list>(<argument><expr><name>firstc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>restore_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>char</name> <modifier>*</modifier></type><name>getcmdline_prompt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>firstc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>prompt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>xp_context</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>xp_arg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Callback</name></type> <name>highlight_callback</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_MALLOC
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>msg_col_save</name> <init>= <expr><name>msg_col</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CmdlineInfo</name></type> <name>save_ccline</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>save_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>prompt_id</name></name> <operator>=</operator> <name>last_prompt_id</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdprompt</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>prompt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdattr</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>xp_context</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>xp_arg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>xp_arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>input_fn</name></name> <operator>=</operator> <operator>(</operator><name>firstc</name> <operator>==</operator> <literal type="char">'@'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>highlight_callback</name></name> <operator>=</operator> <name>highlight_callback</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>msg_silent_saved</name> <init>= <expr><name>msg_silent</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>command_line_enter</name><argument_list>(<argument><expr><name>firstc</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>restore_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>msg_silent_saved</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>msg_col_save</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>text_locked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>textlock</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>text_locked_msg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><call><name>get_text_locked_msg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type> <name>get_text_locked_msg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>e_cmdwin</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>e_secure</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>curbuf_locked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>curbuf_lock</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E788: Not allowed to edit another buffer now"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>allbuf_locked</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>allbuf_locked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>allbuf_lock</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E811: Not allowed to change buffer information now"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmdline_charsize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmdline_star</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ptr2cells</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_startcol</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ccline</name><operator>.</operator><name>cmdindent</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_screencol</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bytepos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><call><name>cmd_startcol</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>KeyTyped</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>Columns</name> <operator>*</operator> <name>Rows</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>bytepos</name></expr>;</condition>
<incr><expr><name>i</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>cmdline_charsize</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>correct_screencol</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>col</name> <operator>+=</operator> <name>c</name><operator>)</operator> <operator>&gt;=</operator> <name>m</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>c</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>col</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>correct_screencol</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cells</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>col</name><operator>)</operator> <operator>%</operator> <name>Columns</name> <operator>+</operator> <name>cells</name> <operator>&gt;</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>col</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>getexline</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, 
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>, 
<parameter><decl><type><name>bool</name></type> <name>do_concat</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exec_from_reg</name> <operator>&amp;&amp;</operator> <call><name>vpeekc</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>getcmdline</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>do_concat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>getexmodeline</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>promptc</name></decl></parameter>, 

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>, 
<parameter><decl><type><name>bool</name></type> <name>do_concat</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>line_ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>startcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>escaped</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>vcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>compute_cmdrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msg_col</name> <operator>||</operator> <name>msg_didout</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>promptc</name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>promptc</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_prompt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>indent</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>startcol</name> <operator>=</operator> <name>msg_col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>promptc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vcol</name> <operator>=</operator> <name>indent</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>indent</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><name>TAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>indent</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>indent</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>no_mapping</name><operator>++</operator></expr>;</expr_stmt>




<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>prev_char</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ex_normal_busy</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>






<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>escaped</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>BS</name> <operator>||</operator> <name>c1</name> <operator>==</operator> <name>K_BS</name> <operator>||</operator> <name>c1</name> <operator>==</operator> <name>DEL</name> <operator>||</operator> <name>c1</name> <operator>==</operator> <name>K_DEL</name> <operator>||</operator> <name>c1</name> <operator>==</operator> <name>K_KDEL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<goto>goto <name>redraw</name>;</goto>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>Ctrl_U</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>redraw</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_spaces</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>Ctrl_T</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sw</name> <init>= <expr><call><name>get_sw_value</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>indent</name> <operator>=</operator> <call><name>get_indent_str</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_spaces</name> <operator>=</operator> <name>sw</name> <operator>-</operator> <name>indent</name> <operator>%</operator> <name>sw</name></expr>;</expr_stmt>
<label><name>add_indent</name>:</label>
<if_stmt><if>if <condition>(<expr><name>num_spaces</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><name>num_spaces</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>long</name></type> <name>move_len</name> <init>= <expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>move_len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>num_spaces</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>move_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>num_spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>num_spaces</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>redraw</name>:</label>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>++</operator><name>vcol</name> <operator>%</operator> <literal type="number">8</literal></expr>)</condition>;</do>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmd_cursor_goto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>Ctrl_D</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_char</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>prev_char</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prev_char</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ex_keep_indent</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>indent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><operator>--</operator><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>indent</name> <operator>=</operator> <call><name>get_indent_str</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>indent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>indent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>indent</name> <operator>-=</operator> <name>indent</name> <operator>%</operator> <call><name>get_sw_value</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name> <init>= <expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name> <init>= <expr><name>from</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_indent</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>old_indent</name> <operator>=</operator> <call><name>get_indent_str</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>indent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>to</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></while>
<decl_stmt><decl><type><name>long</name></type> <name>move_len</name> <init>= <expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <operator>(</operator><name>from</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>move_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>move_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>from</name> <operator>-</operator> <name>to</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>num_spaces</name> <operator>=</operator> <name>indent</name> <operator>-</operator> <name>old_indent</name></expr>;</expr_stmt>
<goto>goto <name>add_indent</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>Ctrl_V</name> <operator>||</operator> <name>c1</name> <operator>==</operator> <name>Ctrl_Q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>escaped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>++</operator><name>vcol</name> <operator>%</operator> <literal type="number">8</literal></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <call><name>char2cells</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>escaped</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cmd_cursor_goto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pend</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pend</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>bcount</name> <operator>&amp;&amp;</operator> <name><name>pend</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>-</operator> <name>bcount</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>bcount</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>bcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <operator>(</operator><name>bcount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pend</name> <operator>-=</operator> <operator>(</operator><name>bcount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pend</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bcount</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>line_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>pend</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pend</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>no_mapping</name><operator>--</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_row</name> <operator>&lt;</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>msg_row</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>emsg_on_display</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cmdline_overstrike</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ccline</name><operator>.</operator><name>overstrike</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>cmdline_at_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>alloc_cmdbuff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbufflen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>realloc_cmdbuff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbufflen</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return> 
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>alloc_cmdbuff</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>xpc</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>xpc</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>xpc</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_NOTHING</name>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>xpc</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_UNSUCCESSFUL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>ccline</name><operator>.</operator><name>xpc</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>-</operator> <name>p</name><operator>)</operator></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>xpc</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>arshape_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>free_arshape_buf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>arshape_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <block>{ <decl><name>MAX_CB_ERRORS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block>;</enum>







<function><type><specifier>static</specifier> <name>void</name></type> <name>color_expr_cmdline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CmdlineInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>colored_ccline</name></decl></parameter>,
<parameter><decl><type><name>ColoredCmdline</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret_ccline_colors</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>ParserLine</name></type> <name><name>plines</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdbuff</name></name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>allocated</name> <operator>=</operator> <name>false</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ParserLine</name> <modifier>*</modifier></type><name>plines_p</name> <init>= <expr><name>plines</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ParserHighlight</name></type> <name>colors</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>kvi_init</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ParserState</name></type> <name>pstate</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>viml_parser_init</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>pstate</name></expr></argument>, <argument><expr><name>parser_simple_get_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plines_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ExprAST</name></type> <name>east</name> <init>= <expr><call><name>viml_pexpr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pstate</name></expr></argument>, <argument><expr><name>kExprFlagsDisallowEOC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>viml_pexpr_free_ast</name><argument_list>(<argument><expr><name>east</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>viml_parser_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_resize</name><argument_list>(<argument><expr><name><name>ret_ccline_colors</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>, <argument><expr><call><name>kv_size</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>prev_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ParserHighlightChunk</name></type> <name>chunk</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name>colors</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>chunk</name><operator>.</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>chunk</name><operator>.</operator><name>end_col</name></name> <operator>&lt;</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>.</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name>prev_end</name></expr>)</condition> <block>{<block_content>
<macro><name>kv_push</name><argument_list>(<argument>ret_ccline_colors-&gt;colors</argument>, <argument>((CmdlineColorChunk) {
.start = (int)prev_end,
.end = (int)chunk.start.col,
.attr = <literal type="number">0</literal>,
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name> <init>= <expr><call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name><name>chunk</name><operator>.</operator><name>group</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>attr</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<macro><name>kv_push</name><argument_list>(<argument>ret_ccline_colors-&gt;colors</argument>, <argument>((CmdlineColorChunk) {
.start = (int)chunk.start.col,
.end = (int)chunk.end_col,
.attr = attr,
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>prev_end</name> <operator>=</operator> <name><name>chunk</name><operator>.</operator><name>end_col</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>prev_end</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdlen</name></name></expr>)</condition> <block>{<block_content>
<macro><name>kv_push</name><argument_list>(<argument>ret_ccline_colors-&gt;colors</argument>, <argument>((CmdlineColorChunk) {
.start = (int)prev_end,
.end = colored_ccline-&gt;cmdlen,
.attr = <literal type="number">0</literal>,
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>kvi_destroy</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>bool</name></type> <name>color_cmdline</name><parameter_list>(<parameter><decl><type><name>CmdlineInfo</name> <modifier>*</modifier></type><name>colored_ccline</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>printed_errmsg</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_ERRMSG</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { msg_putchar('\n'); msg_printf_attr(HL_ATTR(HLF_E)|MSG_HIST, __VA_ARGS__); printed_errmsg = true; } while (0)</cpp:value></cpp:define>





<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ColoredCmdline</name> <modifier>*</modifier></type><name>ccline_colors</name> <init>= <expr><operator>&amp;</operator><name><name>colored_ccline</name><operator>-&gt;</operator><name>last_colors</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ccline_colors</name><operator>-&gt;</operator><name>prompt_id</name></name> <operator>==</operator> <name><name>colored_ccline</name><operator>-&gt;</operator><name>prompt_id</name></name>
<operator>&amp;&amp;</operator> <name><name>ccline_colors</name><operator>-&gt;</operator><name>cmdbuff</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>ccline_colors</name><operator>-&gt;</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>ccline_colors</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdbuff</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdbuff</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>ccline_colors</name><operator>-&gt;</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>arg_allocated</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>arg</name> <init>= <expr><block>{
<expr><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>,
<expr><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdbuff</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name> <init>= <expr><block>{ <expr><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>prev_prompt_id</name> <init>= <expr><name>UINT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_prompt_errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Callback</name></type> <name>color_cb</name> <init>= <expr><name>CALLBACK_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>can_free_cb</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TryState</name></type> <name>tstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_errmsg</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>e_intern2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dgc_ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>tl_ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>colored_ccline</name><operator>-&gt;</operator><name>prompt_id</name></name> <operator>!=</operator> <name>prev_prompt_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev_prompt_errors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_prompt_id</name> <operator>=</operator> <name><name>colored_ccline</name><operator>-&gt;</operator><name>prompt_id</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>prev_prompt_errors</name> <operator>&gt;=</operator> <name>MAX_CB_ERRORS</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>color_cmdline_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>colored_ccline</name><operator>-&gt;</operator><name>highlight_callback</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>kCallbackNone</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>colored_ccline</name><operator>-&gt;</operator><name>input_fn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>color_cb</name> <operator>=</operator> <name><name>colored_ccline</name><operator>-&gt;</operator><name>highlight_callback</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdfirstc</name></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>try_enter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(
<argument><expr><literal type="string">"E5408: Unable to get g:Nvim_color_cmdline callback: %s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dgc_ret</name> <operator>=</operator> <call><name>tv_dict_get_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvardict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"Nvim_color_cmdline"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>color_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tl_ret</name> <operator>=</operator> <call><name>try_leave</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tstate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>can_free_cb</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdfirstc</name></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>color_expr_cmdline</name><argument_list>(<argument><expr><name>colored_ccline</name></expr></argument>, <argument><expr><name>ccline_colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tl_ret</name> <operator>||</operator> <operator>!</operator><name>dgc_ret</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>color_cmdline_error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>color_cb</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kCallbackNone</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>color_cmdline_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdbuff</name><index>[<expr><name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdlen</name></name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg_allocated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdbuff</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>












<expr_stmt><expr><name>getln_interrupted_highlight</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_enter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E5407: Callback has thrown an exception: %s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>saved_msg_col</name> <init>= <expr><name>msg_col</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>msg_silent</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>cbcall_ret</name> <init>= <expr><call><name>callback_call</name><argument_list>(<argument><expr><operator>&amp;</operator><name>color_cb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>msg_silent</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>saved_msg_col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>getln_interrupted_highlight</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_leave</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tstate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>cbcall_ret</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>color_cmdline_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PRINT_ERRMSG</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E5400: Callback should return list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>color_cmdline_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>color_cmdline_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>prev_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>TV_LIST_ITER_CONST</name><argument_list>(<argument>tv.vval.v_list</argument>, <argument>li</argument>, <argument>{
if (TV_LIST_ITEM_TV(li)-&gt;v_type != VAR_LIST) {
PRINT_ERRMSG(_(<literal type="string">"E5401: List item %i is not a List"</literal>), i);
goto color_cmdline_error;
}
const list_T *const l = TV_LIST_ITEM_TV(li)-&gt;vval.v_list;
if (tv_list_len(l) != <literal type="number">3</literal>) {
PRINT_ERRMSG(_(<literal type="string">"E5402: List item %i has incorrect length: %d /= 3"</literal>),
i, tv_list_len(l));
goto color_cmdline_error;
}
bool error = false;
const varnumber_T start = (
tv_get_number_chk(TV_LIST_ITEM_TV(tv_list_first(l)), &amp;error));
if (error) {
goto color_cmdline_error;
} else if (!(prev_end &lt;= start &amp;&amp; start &lt; colored_ccline-&gt;cmdlen)) {
PRINT_ERRMSG(_(<literal type="string">"E5403: Chunk %i start %"</literal> PRIdVARNUMBER <literal type="string">" not in range "</literal>
<literal type="string">"[%"</literal> PRIdVARNUMBER <literal type="string">", %i)"</literal>),
i, start, prev_end, colored_ccline-&gt;cmdlen);
goto color_cmdline_error;
} else if (utf8len_tab_zero[(uint8_t)colored_ccline-&gt;cmdbuff[start]] == <literal type="number">0</literal>) {
PRINT_ERRMSG(_(<literal type="string">"E5405: Chunk %i start %"</literal> PRIdVARNUMBER <literal type="string">" splits "</literal>
<literal type="string">"multibyte character"</literal>), i, start);
goto color_cmdline_error;
}
if (start != prev_end) {
kv_push(ccline_colors-&gt;colors, ((CmdlineColorChunk) {
.start = (int)prev_end,
.end = (int)start,
.attr = <literal type="number">0</literal>,
}));
}
const varnumber_T end = tv_get_number_chk(
TV_LIST_ITEM_TV(TV_LIST_ITEM_NEXT(l, tv_list_first(l))), &amp;error);
if (error) {
goto color_cmdline_error;
} else if (!(start &lt; end &amp;&amp; end &lt;= colored_ccline-&gt;cmdlen)) {
PRINT_ERRMSG(_(<literal type="string">"E5404: Chunk %i end %"</literal> PRIdVARNUMBER <literal type="string">" not in range "</literal>
<literal type="string">"(%"</literal> PRIdVARNUMBER <literal type="string">", %i]"</literal>),
i, end, start, colored_ccline-&gt;cmdlen);
goto color_cmdline_error;
} else if (end &lt; colored_ccline-&gt;cmdlen
&amp;&amp; (utf8len_tab_zero[(uint8_t)colored_ccline-&gt;cmdbuff[end]]
== <literal type="number">0</literal>)) {
PRINT_ERRMSG(_(<literal type="string">"E5406: Chunk %i end %"</literal> PRIdVARNUMBER <literal type="string">" splits multibyte "</literal>
<literal type="string">"character"</literal>), i, end);
goto color_cmdline_error;
}
prev_end = end;
const char *const group = tv_get_string_chk(
TV_LIST_ITEM_TV(tv_list_last(l)));
if (group == NULL) {
goto color_cmdline_error;
}
const int id = syn_name2id((char_u *)group);
const int attr = (id == <literal type="number">0</literal> ? <literal type="number">0</literal> : syn_id2attr(id));
kv_push(ccline_colors-&gt;colors, ((CmdlineColorChunk) {
.start = (int)start,
.end = (int)end,
.attr = attr,
}));
i++;
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_end</name> <operator>&lt;</operator> <name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdlen</name></name></expr>)</condition> <block>{<block_content>
<macro><name>kv_push</name><argument_list>(<argument>ccline_colors-&gt;colors</argument>, <argument>((CmdlineColorChunk) {
.start = (int)prev_end,
.end = colored_ccline-&gt;cmdlen,
.attr = <literal type="number">0</literal>,
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev_prompt_errors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>color_cmdline_end</name>:</label>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>can_free_cb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>callback_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>color_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ccline_colors</name><operator>-&gt;</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ccline_colors</name><operator>-&gt;</operator><name>prompt_id</name></name> <operator>=</operator> <name><name>colored_ccline</name><operator>-&gt;</operator><name>prompt_id</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arg_allocated</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline_colors</name><operator>-&gt;</operator><name>cmdbuff</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>arg</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ccline_colors</name><operator>-&gt;</operator><name>cmdbuff</name></name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdbuff</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>colored_ccline</name><operator>-&gt;</operator><name>cmdlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<label><name>color_cmdline_error</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PRINT_ERRMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>err_errmsg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>printed_errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>printed_errmsg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_prompt_errors</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>ccline_colors</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<goto>goto <name>color_cmdline_end</name>;</goto>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRINT_ERRMSG</name></cpp:undef>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_cmdline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>color_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ccline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>special_char</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>redraw_state</name></name> <operator>=</operator> <name>kCmdRedrawAll</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdline_star</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>start</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p_arshape</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_tbidi</name> <operator>&amp;&amp;</operator> <name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>do_arabicshape</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_l</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>mb_l</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>u8cc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>u8c</name> <init>= <expr><call><name>utfc_ptr2char_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <call><name>utfc_ptr2len_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>arabic_char</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>do_arabicshape</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_arabicshape</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>draw_cmdline_no_arabicshape</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>buflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>arshape_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>arshape_buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>newlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_iscomposing</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>arshape_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>newlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>mb_l</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>u8cc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>u8c</name> <init>= <expr><call><name>utfc_ptr2char_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <call><name>utfc_ptr2len_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>arabic_char</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pc1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>prev_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pc1</name> <operator>=</operator> <name>prev_c1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_c1</name> <operator>=</operator> <name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>mb_l</name> <operator>&gt;=</operator> <name>start</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>mb_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>mb_l</name> <operator>&gt;=</operator> <name>start</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>pcc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>utfc_ptr2char_len</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>mb_l</name></expr></argument>, <argument><expr><name>pcc</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <name>mb_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pc1</name> <operator>=</operator> <name><name>pcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>prev_c</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u8c</name> <operator>=</operator> <call><name>arabic_shape</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>pc1</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>, <argument><expr><name>arshape_buf</name> <operator>+</operator> <name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>arshape_buf</name> <operator>+</operator> <name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u8cc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>u8cc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>arshape_buf</name> <operator>+</operator> <name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>arshape_buf</name> <operator>+</operator> <name>newlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>mb_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <name>mb_l</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(<argument><expr><name>arshape_buf</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<label><name>draw_cmdline_no_arabicshape</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>last_colors</name><operator>.</operator><name>colors</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>last_colors</name><operator>.</operator><name>colors</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CmdlineColorChunk</name></type> <name>chunk</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>last_colors</name><operator>.</operator><name>colors</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>.</operator><name>end</name></name> <operator>&lt;=</operator> <name>start</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chunk_start</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>chunk</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_outtrans_len_attr</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>chunk_start</name></expr></argument>,
<argument><expr><name><name>chunk</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name>chunk_start</name></expr></argument>,
<argument><expr><name><name>chunk</name><operator>.</operator><name>attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_ext_cmdline_show</name><parameter_list>(<parameter><decl><type><name>CmdlineInfo</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>content</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdline_star</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>xmallocz</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>item</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ADD</name><argument_list>(<argument>item</argument>, <argument>STRING_OBJ(((String) { .data = buf, .size = len }))</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>last_colors</name><operator>.</operator><name>colors</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>last_colors</name><operator>.</operator><name>colors</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CmdlineColorChunk</name></type> <name>chunk</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>last_colors</name><operator>.</operator><name>colors</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>item</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>chunk</name><operator>.</operator><name>attr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>chunk</name><operator>.</operator><name>end</name></name> <operator>&gt;=</operator> <name><name>chunk</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cbuf_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>line</name><operator>-&gt;</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>chunk</name><operator>.</operator><name>start</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>chunk</name><operator>.</operator><name>end</name></name><operator>-</operator><name><name>chunk</name><operator>.</operator><name>start</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>item</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>line</name><operator>-&gt;</operator><name>cmdbuff</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ui_call_cmdline_show</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>cmdpos</name></name></expr></argument>,
<argument><expr><call><name>cchar_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name><name>line</name><operator>-&gt;</operator><name>cmdfirstc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>line</name><operator>-&gt;</operator><name>cmdprompt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>line</name><operator>-&gt;</operator><name>cmdindent</name></name></expr></argument>,
<argument><expr><name><name>line</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>special_char</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_cmdline_special_char</name><argument_list>(<argument><expr><call><name>cchar_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name><name>line</name><operator>-&gt;</operator><name>special_char</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>line</name><operator>-&gt;</operator><name>special_shift</name></name></expr></argument>,
<argument><expr><name><name>line</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_ext_cmdline_block_append</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>indent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>xmallocz</name><argument_list>(<argument><expr><name>indent</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>indent</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Array</name></type> <name>item</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>content</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>cmdline_block</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmdline_block</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_cmdline_block_append</name><argument_list>(<argument><expr><call><name>copy_array</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_cmdline_block_show</name><argument_list>(<argument><expr><call><name>copy_array</name><argument_list>(<argument><expr><name>cmdline_block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_ext_cmdline_block_leave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>cmdline_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdline_block</name> <operator>=</operator> <operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_call_cmdline_block_hide</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>cmdline_screen_cleared</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmdline_block</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_cmdline_block_show</name><argument_list>(<argument><expr><call><name>copy_array</name><argument_list>(<argument><expr><name>cmdline_block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_level</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CmdlineInfo</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>prev_ccline</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>prev_level</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>line</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name>prev_level</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev_level</name> <operator>!=</operator> <name>cmdwin_level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>redraw_state</name></name> <operator>=</operator> <name>kCmdRedrawAll</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev_level</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>prev_ccline</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>cmdline_ui_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>ccline</name><operator>.</operator><name>level</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CmdlineInfo</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><operator>&amp;</operator><name>ccline</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>line</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name>level</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>redraw_state</name></name> <operator>==</operator> <name>kCmdRedrawAll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_ext_cmdline_show</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>redraw_state</name></name> <operator>==</operator> <name>kCmdRedrawPos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_cmdline_pos</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>redraw_state</name></name> <operator>=</operator> <name>kCmdRedrawNone</name></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>prev_ccline</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>putcmdline</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd_silent</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_cmdline</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>redraw_state</name></name> <operator>!=</operator> <name>kCmdRedrawAll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_cmdline_special_char</name><argument_list>(<argument><expr><call><name>cchar_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>shift</name></expr></argument>,
<argument><expr><name><name>ccline</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cursorcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>special_char</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>special_shift</name></name> <operator>=</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>unputcmdline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd_silent</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>==</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>draw_cmdline</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><call><name>mb_ptr2len</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cursorcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>special_char</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>put_on_cmdline</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>redraw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>realloc_cmdbuff</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ccline</name><operator>.</operator><name>overstrike</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <name>len</name></expr></argument>,
<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>&amp;&amp;</operator> <name>m</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition>
<incr><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>m</name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <name>len</name></expr></argument>,
<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>+=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>arabic_maycombine</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>arabic_combine</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>+=</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>msg_row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cmd_silent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>cmdline_row</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cursorcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_cmdline</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdline_row</name> <operator>!=</operator> <name>i</name> <operator>||</operator> <name><name>ccline</name><operator>.</operator><name>overstrike</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>KeyTyped</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>Columns</name> <operator>*</operator> <name>Rows</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cmdline_charsize</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>correct_screencol</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>+</operator> <name>c</name> <operator>&lt;</operator> <name>m</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>redraw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>save_cmdline</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cmdline_info</name></name> <modifier>*</modifier></type><name>ccp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ccp</name> <operator>=</operator> <name>ccline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>prev_ccline</name></name> <operator>=</operator> <name>ccp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdprompt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>xpc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>special_char</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_cmdline</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cmdline_info</name></name> <modifier>*</modifier></type><name>ccp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>ccline</name> <operator>=</operator> <operator>*</operator><name>ccp</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type><name>save_cmdline_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmdline_info</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cmdline_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>save_cmdline</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>restore_cmdline_alloc</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>restore_cmdline</name><argument_list>(<argument><expr><operator>(</operator>struct <name>cmdline_info</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>bool</name></type> <name>cmdline_paste</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>literally</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>remcr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cmdline_info</name></name></type> <name>save_ccline</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>!=</operator> <name>Ctrl_F</name> <operator>&amp;&amp;</operator> <name>regname</name> <operator>!=</operator> <name>Ctrl_P</name> <operator>&amp;&amp;</operator> <name>regname</name> <operator>!=</operator> <name>Ctrl_W</name>
<operator>&amp;&amp;</operator> <name>regname</name> <operator>!=</operator> <name>Ctrl_A</name> <operator>&amp;&amp;</operator> <name>regname</name> <operator>!=</operator> <name>Ctrl_L</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>valid_yank_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>save_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>textlock</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>i</name> <init>= <expr><call><name>get_spec_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allocated</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>textlock</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restore_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_is</name> <operator>&amp;&amp;</operator> <name>regname</name> <operator>==</operator> <name>Ctrl_W</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</init> <condition><expr><name>w</name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_iswordc</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>w</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>w</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name><operator>)</operator> <operator>-</operator> <name>w</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>p_ic</name></expr> ?</condition><then> <expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> </then><else>: <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cmdline_paste_str</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>literally</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>allocated</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>cmdline_paste_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>literally</name></expr></argument>, <argument><expr><name>remcr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>cmdline_paste_str</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>literally</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>cv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>literally</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_on_cmdline</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cv</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cv</name> <operator>==</operator> <name>Ctrl_V</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_cptr2char_adv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cv</name> <operator>==</operator> <name>Ctrl_V</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>ESC</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_C</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>CAR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_L</name>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_BSL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>Ctrl_N</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>Ctrl_V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>cmdline_del</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&lt;=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>from</name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>redrawcmdline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd_silent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compute_cmdrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cursorcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redrawcmdprompt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd_silent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>redraw_state</name></name> <operator>=</operator> <name>kCmdRedrawAll</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdprompt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>ccline</name><operator>.</operator><name>cmdprompt</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdattr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdindent</name></name> <operator>=</operator> <name>msg_col</name> <operator>+</operator> <operator>(</operator><name>msg_row</name> <operator>-</operator> <name>cmdline_row</name><operator>)</operator> <operator>*</operator> <name>Columns</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdindent</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdindent</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>redrawcmd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd_silent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_cmdline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cmd_cursor_goto</name><argument_list>(<argument><expr><name>cmdline_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>redrawing_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmdprompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_cmdline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>=</operator> <call><name>cmd_screencol</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>special_char</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>putcmdline</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>special_char</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>special_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 



<expr_stmt><expr><name>skip_redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>redrawing_cmdline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>compute_cmdrow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exmode_active</name> <operator>||</operator> <name>msg_scrolled</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>lastwin_nofloating</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name>
<operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>lines_left</name> <operator>=</operator> <name>cmdline_row</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cursorcmd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd_silent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>redraw_state</name></name> <operator>&lt;</operator> <name>kCmdRedrawPos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>redraw_state</name></name> <operator>=</operator> <name>kCmdRedrawPos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>cmdline_row</name> <operator>+</operator> <operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>/</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>%</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_row</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>cmdline_row</name> <operator>+</operator> <operator>(</operator><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>/</operator> <name>Columns</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>%</operator> <name>Columns</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_row</name> <operator>&gt;=</operator> <name>Rows</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>cmd_cursor_goto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cmd_cursor_goto</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>screen_adjust_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>grid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_grid_cursor_goto</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gotocmdline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>clr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>clr</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_cursor_goto</name><argument_list>(<argument><expr><name>cmdline_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>ccheck_abbr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>spos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_paste</name> <operator>||</operator> <name>no_abbr</name></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<while>while <condition>(<expr><name>spos</name> <operator>&lt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>&amp;&amp;</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>spos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>spos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <name>spos</name> <operator>&gt;</operator> <literal type="number">5</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>spos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>spos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>spos</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>spos</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>spos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>check_abbr</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name>spos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sort_func_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s2</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p1</name> <operator>!=</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p2</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p2</name> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> 
<name>nextwild</name> <parameter_list>(
<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>escape</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>difflen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_expand_context</name><argument_list>(<argument><expr><name>xp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_showtail</name> <operator>=</operator> <call><name>expand_showtail</name><argument_list>(<argument><expr><name>xp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_UNSUCCESSFUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_NOTHING</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ui_has</name><argument_list>(<argument><expr><name>kUIWildmenu</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;=</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern_len</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>WILD_NEXT</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>WILD_PREV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>ExpandOne</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>addstar</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern_len</name></name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>use_options</name> <init>= <expr><operator>(</operator>
<name>options</name>
<operator>|</operator> <name>WILD_HOME_REPLACE</name>
<operator>|</operator> <name>WILD_ADD_SLASH</name>
<operator>|</operator> <name>WILD_SILENT</name>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name>escape</name></expr> ?</condition><then> <expr><name>WILD_ESCAPE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name>p_wic</name></expr> ?</condition><then> <expr><name>WILD_ICASE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>ExpandOne</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><call><name>vim_strnsave</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern_len</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>use_options</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>WILD_LONGEST</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>j</name> <operator>&lt;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_pattern_len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal>
<operator>||</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>j</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>difflen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>+</operator> <name>difflen</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdbufflen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>realloc_cmdbuff</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>+</operator> <name>difflen</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&lt;=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <name>difflen</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>+=</operator> <name>difflen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>+=</operator> <name>difflen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cursorcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MAPPINGS</name> <operator>&amp;&amp;</operator> <name>p2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ExpandOne</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WILD_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>



































<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>ExpandOne</name> <parameter_list>(
<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>findex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>orig_save</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>orig_saved</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>non_suf_match</name></decl>;</decl_stmt> 




<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>WILD_NEXT</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>WILD_PREV</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>WILD_PREV</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>findex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>findex</name> <operator>=</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>findex</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>findex</name></expr>;</expr_stmt></block_content></block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name>findex</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>orig_save</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>findex</name> <operator>=</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>findex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>findex</name> <operator>&gt;=</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>orig_save</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>findex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>findex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>compl_match_array</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>compl_selected</name> <operator>=</operator> <name>findex</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdline_pum_display</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p_wmnu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>win_redr_status_matches</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name></name></expr></argument>,
<argument><expr><name>findex</name></expr></argument>, <argument><expr><name>cmd_showtail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>findex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>orig_save</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name><index>[<expr><name>findex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>WILD_CANCEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>orig_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>WILD_APPLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><ternary><condition><expr><name>findex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>orig_save</name></expr> </then><else>: <expr><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name><index>[<expr><name>findex</name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>WILD_ALL</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>WILD_LONGEST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>orig_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>findex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>WILD_FREE</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>WILD_APPLY</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>WILD_CANCEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>orig_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>orig_save</name> <operator>=</operator> <name>orig</name></expr>;</expr_stmt>
<expr_stmt><expr><name>orig_saved</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ExpandFromContext</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name></name></expr></argument>,
<argument><expr><name>options</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FNAME_ILLEGAL</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>WILD_SILENT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>WILD_LIST_NOTFOUND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nomatch2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>WILD_SILENT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nomatch2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ExpandEscape</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>WILD_ALL</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>WILD_ALL_KEEP</name>
<operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>WILD_LONGEST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>non_suf_match</name> <operator>=</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>non_suf_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FILES</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_DIRECTORIES</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>non_suf_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>match_suffix</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>non_suf_match</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>non_suf_match</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>WILD_SILENT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_toomany</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>WILD_NO_BEEP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>non_suf_match</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>==</operator> <name>WILD_EXPAND_FREE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>WILD_LONGEST</name> <operator>&amp;&amp;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>mb_len</name></decl>;</init> <condition><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>len</name></expr>]</index></name></expr>;</condition> <incr><expr><name>len</name> <operator>+=</operator> <name>mb_len</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>mb_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c0</name> <init>= <expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ci</name> <init>= <expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_fic</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_DIRECTORIES</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FILES</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_SHELLCMD</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_BUFFERS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mb_tolower</name><argument_list>(<argument><expr><name>c0</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c0</name> <operator>!=</operator> <name>ci</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>WILD_NO_BEEP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_WILD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ss</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xstrndup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>findex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>WILD_ALL</name> <operator>&amp;&amp;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ss</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>WILD_USE_NL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>WILD_EXPAND_FREE</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>WILD_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ExpandCleanup</name><argument_list>(<argument><expr><name>xp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>orig_saved</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ss</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>ExpandInit</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>=</operator> <name>XP_BS_NONE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_shell</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_line</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>ExpandCleanup</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExpandEscape</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numfiles</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>WILD_HOME_REPLACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tilde_replace</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>numfiles</name></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>WILD_ESCAPE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FILES</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FILES_IN_PATH</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_SHELLCMD</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_BUFFERS</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_DIRECTORIES</name></expr>)</condition> <block>{<block_content>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numfiles</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>==</operator> <name>XP_BS_THREE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave_fnameescape</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave_fnameescape</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_shell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <name><name>files</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>escape_fname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>=</operator> <name>XP_BS_NONE</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>escape_fname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_TAGS</name></expr>)</condition> <block>{<block_content>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numfiles</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\|\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><name>char</name> <modifier>*</modifier></type><name>vim_strsave_fnameescape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>shell</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_RET FUNC_ATTR_MALLOC FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_ESC_CHARS</name></cpp:macro> <cpp:value>" \t\n*?[{`%#'\"|!&lt;"</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PATH_ESC_CHARS</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>PATH_ESC_CHARS</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'!'</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>vim_isfilec</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_ESC_CHARS</name></cpp:macro> <cpp:value>((char_u *)" \t\n*?[{`$\\%#'\"|!&lt;")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_ESC_CHARS</name></cpp:macro> <cpp:value>((char_u *)" \t\n*?[{`$\\%#'\"|!&lt;&gt;();&amp;")</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave_escaped</name><argument_list>(
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>shell</name></expr> ?</condition><then> <expr><name>SHELL_ESC_CHARS</name></expr> </then><else>: <expr><name>PATH_ESC_CHARS</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>shell</name> <operator>&amp;&amp;</operator> <call><name>csh_like_shell</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>escape_fname</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>escape_fname</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>tilde_replace</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>orig_pat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_files</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>orig_pat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>orig_pat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>home_replace_save</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cmdline_pum_display</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>changed_array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pum_display</name><argument_list>(<argument><expr><name>compl_match_array</name></expr></argument>, <argument><expr><name>compl_match_arraysize</name></expr></argument>, <argument><expr><name>compl_selected</name></expr></argument>,
<argument><expr><name>changed_array</name></expr></argument>, <argument><expr><name>compl_startcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>showmatches</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wildmenu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_SHOWFILE</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(showtail ? sm_gettail(files_found[m], false) : files_found[m])</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>num_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>files_found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lastlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>showtail</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_expand_context</name><argument_list>(<argument><expr><name>xp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>expand_cmdline</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>num_files</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>files_found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>showtail</name> <operator>=</operator> <call><name>expand_showtail</name><argument_list>(<argument><expr><name>xp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>EXPAND_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>num_files</name> <operator>=</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>files_found</name> <operator>=</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_files</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>showtail</name> <operator>=</operator> <name>cmd_showtail</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>compl_use_pum</name> <init>= <expr><operator>(</operator><ternary><condition><expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIPopupmenu</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>wildmenu</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>wop_flags</name> <operator>&amp;</operator> <name>WOP_PUM</name><operator>)</operator></expr></else></ternary><operator>)</operator>
<operator>||</operator> <call><name>ui_has</name><argument_list>(<argument><expr><name>kUIWildmenu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_use_pum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num_files</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>compl_match_arraysize</name> <operator>=</operator> <name>num_files</name></expr>;</expr_stmt>
<expr_stmt><expr><name>compl_match_array</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>compl_match_arraysize</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pumitem_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>compl_match_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_text</name> <operator>=</operator> <call><name>L_SHOWFILE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>endpos</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>showtail</name></expr>
?</condition><then> <expr><call><name>sm_gettail</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>compl_startcol</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>endpos</name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>compl_startcol</name> <operator>=</operator> <call><name>cmd_screencol</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>endpos</name> <operator>-</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>compl_selected</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdline_pum_display</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXPAND_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wildmenu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_didany</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_didany</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>wildmenu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>win_redr_status_matches</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>num_files</name></expr></argument>, <argument><expr><name>files_found</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>showtail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>showtail</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FILES</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_SHELLCMD</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_BUFFERS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>files_found</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><call><name>L_SHOWFILE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_TAGS_LISTFILES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <name>num_files</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>maxlen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>columns</name> <operator>=</operator> <operator>(</operator><name>Columns</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>maxlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>columns</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>columns</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <operator>(</operator><name>num_files</name> <operator>+</operator> <name>columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>columns</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_TAGS_LISTFILES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"tagname"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><name>maxlen</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" kind file\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>lastlen</name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <name>lines</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_TAGS_LISTFILES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_outtrans_attr</name><argument_list>(<argument><expr><name><name>files_found</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>files_found</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>files_found</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><name>maxlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><name>maxlen</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts_long_attr</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>maxlen</name> <operator>-</operator> <name>lastlen</name></expr>;</init> <condition><expr><operator>--</operator><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FILES</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_SHELLCMD</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_BUFFERS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>exp_path</name> <init>= <expr><call><name>expand_env_save_opt</name><argument_list>(<argument><expr><name><name>files_found</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><ternary><condition><expr><name>exp_path</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>exp_path</name></expr> </then><else>: <expr><name><name>files_found</name><index>[<expr><name>k</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>halved_slash</name> <init>= <expr><call><name>backslash_halve_save</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>os_isdir</name><argument_list>(<argument><expr><name>halved_slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>exp_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>halved_slash</name> <operator>!=</operator> <name>path</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>halved_slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>os_isdir</name><argument_list>(<argument><expr><name><name>files_found</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>showtail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>L_SHOWFILE</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>files_found</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NameBuff</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>L_SHOWFILE</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>lastlen</name> <operator>=</operator> <call><name>msg_outtrans_attr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><name>j</name></expr> ?</condition><then> <expr><name>attr</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>





<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_numfiles</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name>num_files</name></expr></argument>, <argument><expr><name>files_found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>EXPAND_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type><name>sm_gettail</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>eager</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>had_sep</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>rem_backslash</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>eager</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>had_sep</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>had_sep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>had_sep</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>expand_showtail</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_FILES</name>
<operator>&amp;&amp;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_SHELLCMD</name>
<operator>&amp;&amp;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_DIRECTORIES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>path_tail</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>rem_backslash</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"*?["</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>char_u</name> <modifier>*</modifier></type><name>addstar</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>context</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ends_in_star</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>context</name> <operator>!=</operator> <name>EXPAND_FILES</name>
<operator>&amp;&amp;</operator> <name>context</name> <operator>!=</operator> <name>EXPAND_FILES_IN_PATH</name>
<operator>&amp;&amp;</operator> <name>context</name> <operator>!=</operator> <name>EXPAND_SHELLCMD</name>
<operator>&amp;&amp;</operator> <name>context</name> <operator>!=</operator> <name>EXPAND_DIRECTORIES</name></expr>)</condition> <block>{<block_content>








<if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name>EXPAND_HELP</name>
<operator>||</operator> <name>context</name> <operator>==</operator> <name>EXPAND_CHECKHEALTH</name>
<operator>||</operator> <name>context</name> <operator>==</operator> <name>EXPAND_COLORS</name>
<operator>||</operator> <name>context</name> <operator>==</operator> <name>EXPAND_COMPILER</name>
<operator>||</operator> <name>context</name> <operator>==</operator> <name>EXPAND_OWNSYNTAX</name>
<operator>||</operator> <name>context</name> <operator>==</operator> <name>EXPAND_FILETYPE</name>
<operator>||</operator> <name>context</name> <operator>==</operator> <name>EXPAND_PACKADD</name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>context</name> <operator>==</operator> <name>EXPAND_TAGS_LISTFILES</name> <operator>||</operator> <name>context</name> <operator>==</operator> <name>EXPAND_TAGS</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>new_len</name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <name><name>fname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 



<if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name>EXPAND_BUFFERS</name> <operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>context</name> <operator>==</operator> <name>EXPAND_USER_DEFINED</name>
<operator>||</operator> <name>context</name> <operator>==</operator> <name>EXPAND_USER_LIST</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></for>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>retval</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>context</name> <operator>!=</operator> <name>EXPAND_USER_DEFINED</name>
<operator>&amp;&amp;</operator> <name>context</name> <operator>!=</operator> <name>EXPAND_USER_LIST</name>
<operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <operator>++</operator><name>i</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>fname</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'*'</literal></expr>:</case> <expr_stmt><expr><name><name>retval</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'~'</literal></expr>:</case> <expr_stmt><expr><name><name>retval</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'?'</literal></expr>:</case> <expr_stmt><expr><name><name>retval</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'.'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name>EXPAND_BUFFERS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>retval</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name>EXPAND_USER_DEFINED</name>
<operator>||</operator> <name>context</name> <operator>==</operator> <name>EXPAND_USER_LIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>retval</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>retval</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>fname</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>retval</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>path_tail</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ends_in_star</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>retval</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>retval</name><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ends_in_star</name> <operator>=</operator> <operator>!</operator><name>ends_in_star</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>retval</name> <operator>!=</operator> <literal type="char">'~'</literal> <operator>||</operator> <name>tail</name> <operator>!=</operator> <name>retval</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name>ends_in_star</name>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>retval</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>retval</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>retval</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>












































<function><type><specifier>static</specifier> <name>void</name></type> <name>set_expand_context</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>!=</operator> <literal type="char">':'</literal>
<operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>!=</operator> <literal type="char">'&gt;'</literal> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>!=</operator> <literal type="char">'='</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>ccline</name><operator>.</operator><name>input_fn</name></name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>set_cmd_context</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> 
<name>set_cmd_context</name> <parameter_list>(
<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>use_ccline</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name>old_char</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>old_char</name> <operator>=</operator> <name><name>str</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nextcomm</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>use_ccline</name> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_context_for_expression</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>CMD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>use_ccline</name> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>input_fn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>xp_context</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_arg</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>xp_arg</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><name>nextcomm</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nextcomm</name> <operator>=</operator> <call><name>set_one_cmd_context</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>nextcomm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_line</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <name>old_char</name></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><name>int</name></type> 
<name>expand_cmdline</name> <parameter_list>(
<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>matchcount</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>file_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>options</name> <init>= <expr><name>WILD_ADD_SLASH</name><operator>|</operator><name>WILD_SILENT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_UNSUCCESSFUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXPAND_UNSUCCESSFUL</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_NOTHING</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>EXPAND_NOTHING</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>str</name> <operator>+</operator> <name>col</name><operator>)</operator> <operator>-</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern_len</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>col</name><operator>)</operator> <operator>-</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>file_str</name> <operator>=</operator> <call><name>addstar</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern_len</name></name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_wic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>options</name> <operator>+=</operator> <name>WILD_ICASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ExpandFromContext</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>file_str</name></expr></argument>, <argument><expr><name>matchcount</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>matchcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>matches</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>file_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EXPAND_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_help_tags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num_file</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_hlg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_hlg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'e'</literal> <operator>||</operator> <name><name>p_hlg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'n'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'@'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>p_hlg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>p_hlg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_file</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>file</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"@en"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_file</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>i</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>file</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name> <operator>+</operator> <literal type="number">3</literal>
<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>file</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>num_file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_file</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>file</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>file</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>char_u</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>ExpandFunc</name>)<parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




<function><type><specifier>static</specifier> <name>int</name></type> 
<name>ExpandFromContext</name> <parameter_list>(
<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>EW_DIR</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>WILD_LIST_NOTFOUND</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EW_NOTFOUND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>WILD_ADD_SLASH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EW_ADDSLASH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>WILD_KEEP_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EW_KEEPALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>WILD_SILENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EW_SILENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>WILD_NOERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EW_NOERROR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>WILD_ALLLINKS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EW_ALLLINKS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FILES</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_DIRECTORIES</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FILES_IN_PATH</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>free_pat</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>!=</operator> <name>XP_BS_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>free_pat</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pat</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>pat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>==</operator> <name>XP_BS_THREE</name>
<operator>&amp;&amp;</operator> <name><name>pat</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <name><name>pat</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <name><name>pat</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>pat</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>pat</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>==</operator> <name>XP_BS_ONE</name>
<operator>&amp;&amp;</operator> <name><name>pat</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>pat</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>pat</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FILES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EW_FILE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FILES_IN_PATH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><name>EW_FILE</name> <operator>|</operator> <name>EW_PATH</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>|</operator> <name>EW_DIR</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>EW_FILE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>WILD_ICASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EW_ICASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>expand_wildcards_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pat</name></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>free_pat</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_HELP</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>find_help_tags</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>pat</name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"help"</literal></expr> </then><else>: <expr><name>pat</name></expr></else></ternary></expr></argument>,
<argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cleanup_help_tags</name><argument_list>(<argument><expr><operator>*</operator><name>num_file</name></expr></argument>, <argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_SHELLCMD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>expand_shellcmd</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_OLD_SETTING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ExpandOldSetting</name><argument_list>(<argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_BUFFERS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ExpandBufnames</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_TAGS</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_TAGS_LISTFILES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>expand_tags</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_TAGS</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_COLORS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>directories</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"colors"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ExpandRTDir</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>DIP_START</name> <operator>+</operator> <name>DIP_OPT</name></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>directories</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_COMPILER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>directories</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"compiler"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ExpandRTDir</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>directories</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_OWNSYNTAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>directories</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"syntax"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ExpandRTDir</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>directories</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FILETYPE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>directories</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"syntax"</literal></expr>, <expr><literal type="string">"indent"</literal></expr>, <expr><literal type="string">"ftplugin"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ExpandRTDir</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>directories</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_CHECKHEALTH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>directories</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"autoload/health"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ExpandRTDir</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>directories</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_USER_LIST</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ExpandUserList</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_PACKADD</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ExpandPackAddDir</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><ternary><condition><expr><name>p_magic</name></expr> ?</condition><then> <expr><name>RE_MAGIC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <call><name>ignorecase</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_SETTINGS</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_BOOL_SETTINGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ExpandSettings</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MAPPINGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ExpandMappings</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_USER_DEFINED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ExpandUserDefined</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<struct><specifier>static</specifier> struct <name>expgen</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExpandFunc</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>escaped</name></decl>;</decl_stmt>
}</block> <decl><name><name>tab</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>EXPAND_COMMANDS</name></expr>, <expr><name>get_command_name</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_BEHAVE</name></expr>, <expr><name>get_behave_arg</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_MAPCLEAR</name></expr>, <expr><name>get_mapclear_arg</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_MESSAGES</name></expr>, <expr><name>get_messages_arg</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_HISTORY</name></expr>, <expr><name>get_history_arg</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_USER_COMMANDS</name></expr>, <expr><name>get_user_commands</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_USER_ADDR_TYPE</name></expr>, <expr><name>get_user_cmd_addr_type</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_USER_CMD_FLAGS</name></expr>, <expr><name>get_user_cmd_flags</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_USER_NARGS</name></expr>, <expr><name>get_user_cmd_nargs</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_USER_COMPLETE</name></expr>, <expr><name>get_user_cmd_complete</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_USER_VARS</name></expr>, <expr><name>get_user_var_name</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_FUNCTIONS</name></expr>, <expr><name>get_function_name</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_USER_FUNC</name></expr>, <expr><name>get_user_func_name</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_EXPRESSION</name></expr>, <expr><name>get_expr_name</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_MENUS</name></expr>, <expr><name>get_menu_name</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_MENUNAMES</name></expr>, <expr><name>get_menu_names</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_SYNTAX</name></expr>, <expr><name>get_syntax_name</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_SYNTIME</name></expr>, <expr><name>get_syntime_arg</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_HIGHLIGHT</name></expr>, <expr><operator>(</operator><name>ExpandFunc</name><operator>)</operator><name>get_highlight_name</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_EVENTS</name></expr>, <expr><name>get_event_name</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_AUGROUP</name></expr>, <expr><name>get_augroup_name</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_CSCOPE</name></expr>, <expr><name>get_cscope_name</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_SIGN</name></expr>, <expr><name>get_sign_name</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_PROFILE</name></expr>, <expr><name>get_profile_name</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WORKING_LIBINTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>EXPAND_LANGUAGE</name></expr>, <expr><name>get_lang_arg</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_LOCALES</name></expr>, <expr><name>get_locales</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>EXPAND_ENV_VARS</name></expr>, <expr><name>get_env_name</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_USER</name></expr>, <expr><name>get_users</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXPAND_ARGLIST</name></expr>, <expr><name>get_arglist_name</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>





<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>context</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ic</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ExpandGeneric</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>func</name></expr></argument>,
<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>ExpandGeneric</name><parameter_list>(
<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,
<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>CompleteListItemGetter</name></type> <name>func</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>escaped</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>&lt;</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>escaped</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" \t\\."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>file</name><operator>)</operator><index>[<expr><name>count</name><operator>++</operator></expr>]</index> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>get_menu_names</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\001'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_MENUNAMES</name> <operator>&amp;&amp;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_MENUS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_EXPRESSION</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_FUNCTIONS</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_USER_FUNC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>file</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>*</operator><name>num_file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>sort_func_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sort_strings</name><argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>, <argument><expr><operator>*</operator><name>num_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>reset_expand_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>expand_shellcmd</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>filepat</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flagsarg</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>flagsarg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>did_curdir</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>filepat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pat</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>pat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>pat</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>pat</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>pat</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EW_FILE</name> <operator>|</operator> <name>EW_EXEC</name> <operator>|</operator> <name>EW_SHELLCMD</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>mustfree</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>pat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>pat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name><name>pat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>pat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"."</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>path_is_absolute</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>vim_getenv</name><argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mustfree</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>






<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>hashtab_T</name></type> <name>found_ht</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>found_ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>path</name></expr>;</init> <condition>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name>e</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ENV_SEPCHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>s</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>did_curdir</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_curdir</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EW_DIR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>did_curdir</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EW_DIR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>EW_DIR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>MAXPATHL</name> <operator>-</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>l</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>MAXPATHL</name> <operator>-</operator> <name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>expand_wildcards</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>*</operator><name>num_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>num_file</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><operator>(</operator><operator>*</operator><name>file</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>l</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>hash_T</name></type> <name>hash</name> <init>= <expr><call><name>hash_hash</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name> <init>=
<expr><call><name>hash_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>found_ht</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>name</name> <operator>+</operator> <name>l</name><operator>)</operator></expr></argument>,
<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hash_add_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>found_ht</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>e</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>e</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mustfree</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>hash_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>found_ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>call_user_expand_func</name><parameter_list>(<parameter><decl><type><name>user_expand_func_T</name></type> <name>user_expand_func</name></decl></parameter>,
<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name>keep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>sctx_T</name></type> <name>save_current_sctx</name> <init>= <expr><name>current_sctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cmdline_info</name></name></type> <name>save_ccline</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_arg</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_line</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keep</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>, <argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>pat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_col</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>save_ccline</name> <operator>=</operator> <name>ccline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdprompt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_sctx</name> <operator>=</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_script_ctx</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret</name> <init>= <expr><call><name>user_expand_func</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_arg</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ccline</name> <operator>=</operator> <name>save_ccline</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_sctx</name> <operator>=</operator> <name>save_current_sctx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name><index>[<expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>]</index></name> <operator>=</operator> <name>keep</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ExpandUserDefined</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>retstr</name> <init>= <expr><call><name>call_user_expand_func</name><argument_list>(
<argument><expr><operator>(</operator><name>user_expand_func_T</name><operator>)</operator><name>call_func_retstr</name></expr></argument>, <argument><expr><name>xp</name></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>retstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>retstr</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name>e</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>s</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name></type> <name>keep</name> <init>= <expr><operator>*</operator><name>e</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>skip</name> <init>= <expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>&amp;&amp;</operator> <call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>keep</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GA_APPEND</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><call><name>vim_strnsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>e</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>retstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ExpandUserList</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>retlist</name> <init>= <expr><call><name>call_user_expand_func</name><argument_list>(
<argument><expr><operator>(</operator><name>user_expand_func_T</name><operator>)</operator><name>call_func_retlist</name></expr></argument>, <argument><expr><name>xp</name></expr></argument>, <argument><expr><name>num_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retlist</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TV_LIST_ITER_CONST</name><argument_list>(<argument>retlist</argument>, <argument>li</argument>, <argument>{
if (TV_LIST_ITEM_TV(li)-&gt;v_type != VAR_STRING
|| TV_LIST_ITEM_TV(li)-&gt;vval.v_string == NULL) {
continue; 
}

GA_APPEND(char *, &amp;ga, xstrdup(
(const char *)TV_LIST_ITEM_TV(li)-&gt;vval.v_string));
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>tv_list_unref</name><argument_list>(<argument><expr><name>retlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>ExpandRTDir</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>dirnames</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pat_len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>dirnames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>dirnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pat_len</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s/%s*.vim"</literal></expr></argument>, <argument><expr><name><name>dirnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>globpath</name><argument_list>(<argument><expr><name>p_rtp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DIP_START</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>dirnames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>dirnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pat_len</name> <operator>+</operator> <literal type="number">22</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"pack/*/start/*/%s/%s*.vim"</literal></expr></argument>, <argument><expr><name><name>dirnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>globpath</name><argument_list>(<argument><expr><name>p_pp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DIP_OPT</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>dirnames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>dirnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pat_len</name> <operator>+</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"pack/*/opt/*/%s/%s*.vim"</literal></expr></argument>, <argument><expr><name><name>dirnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>globpath</name><argument_list>(<argument><expr><name>p_pp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>match</name> <init>= <expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>match</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>s</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>-</operator> <name>s</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>e</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">".vim"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>e</name></expr>;</init> <condition><expr><name>s</name> <operator>&gt;</operator> <name>match</name></expr>;</condition> <incr><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>ga_remove_duplicate_strings</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>ExpandPackAddDir</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pat_len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name> <init>= <expr><name>pat_len</name> <operator>+</operator> <literal type="number">26</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"pack/*/opt/%s*"</literal></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>globpath</name><argument_list>(<argument><expr><name>p_pp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>match</name> <init>= <expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>path_tail</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>ga_remove_duplicate_strings</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>globpath</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>ga</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expand_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>expand_T</name></type> <name>xpc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ExpandInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_FILES</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><operator>*</operator><name>path</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ExpandFromContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>,
<argument><expr><name>WILD_SILENT</name> <operator>|</operator> <name>expand_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ExpandEscape</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>num_p</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>WILD_SILENT</name> <operator>|</operator> <name>expand_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>ga</name></expr></argument>, <argument><expr><name>num_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_p</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>ga</name><operator>-&gt;</operator><name>ga_len</name></name></expr>]</index> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ga</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name>num_p</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>HistoryType</name></type> <name>hist_char2type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
FUNC_ATTR_CONST FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">':'</literal></expr>:</case> <block>{<block_content>
<return>return <expr><name>HIST_CMD</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="char">'='</literal></expr>:</case> <block>{<block_content>
<return>return <expr><name>HIST_EXPR</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="char">'@'</literal></expr>:</case> <block>{<block_content>
<return>return <expr><name>HIST_INPUT</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <block>{<block_content>
<return>return <expr><name>HIST_DEBUG</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>NUL</name></expr>:</case>
<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<case>case <expr><literal type="char">'?'</literal></expr>:</case> <block>{<block_content>
<return>return <expr><name>HIST_SEARCH</name></expr>;</return>
</block_content>}</block>
<default>default:</default> <block>{<block_content>
<return>return <expr><name>HIST_INVALID</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>history_names</name><index>[]</index></name><operator>)</operator> <operator>=</operator>
<block>{
<expr><literal type="string">"cmd"</literal></expr>,
<expr><literal type="string">"search"</literal></expr>,
<expr><literal type="string">"expr"</literal></expr>,
<expr><literal type="string">"input"</literal></expr>,
<expr><literal type="string">"debug"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>;</expr_stmt>





<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>get_history_arg</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>compl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NUL</name></expr>, <expr><name>NUL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>short_names</name> <init>= <expr><literal type="string">":=@&gt;?/"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>short_names_count</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>short_names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>history_name_count</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>history_names</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>short_names_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>compl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name><name>short_names</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>compl</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>short_names_count</name> <operator>+</operator> <name>history_name_count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>history_names</name><index>[<expr><name>idx</name> <operator>-</operator> <name>short_names_count</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>short_names_count</name> <operator>+</operator> <name>history_name_count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"all"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>init_history</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_hi</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_hi</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>newlen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>p_hi</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oldlen</name> <init>= <expr><name>hislen</name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>!=</operator> <name>oldlen</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <name>HIST_COUNT</name></expr>;</condition> <incr><expr><name>type</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>newlen</name></expr>
?</condition><then> <expr><call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>newlen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>int</name></type> <name>l1</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>l2</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>newlen</name></expr></argument>, <argument><expr><name>oldlen</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>l1</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>l1</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>oldlen</name> <operator>-</operator> <name>newlen</name> <operator>+</operator> <name>l1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 


<if_stmt><if>if <condition>(<expr><name>newlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i2</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>l2</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><index>[<expr><name>l2</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>l1</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>hist_free_entry</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>i1</name> <operator>+</operator> <name>l1</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>hist_free_entry</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>l3</name> <init>= <expr><ternary><condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>MIN</name><argument_list>(<argument><expr><name>newlen</name></expr></argument>, <argument><expr><name>oldlen</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name>newlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>temp</name> <operator>+</operator> <name>l3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>newlen</name> <operator>-</operator> <name>l3</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <name>l3</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>hislen</name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hist_free_entry</name><parameter_list>(<parameter><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hisptr</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_list_unref</name><argument_list>(<argument><expr><name><name>hisptr</name><operator>-&gt;</operator><name>additional_elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_hist_entry</name><argument_list>(<argument><expr><name>hisptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>clear_hist_entry</name><parameter_list>(<parameter><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hisptr</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hisptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hisptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> 
<name>in_history</name> <parameter_list>(
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>move_to_front</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>sep</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>!=</operator> <name>HIST_SEARCH</name> <operator>||</operator> <name>sep</name> <operator>==</operator> <name><name>p</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>move_to_front</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>hislen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>last_i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name> <init>= <expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>additional_elements</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <name>hislen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>last_i</name></expr>]</index></name> <operator>=</operator> <name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>tv_list_unref</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>=</operator> <operator>++</operator><name><name>hisnum</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>timestamp</name> <operator>=</operator> <call><name>os_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>additional_elements</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>HistoryType</name></type> <name>get_histtype</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>return_default</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>return_default</name></expr> ?</condition><then> <expr><name>HIST_DEFAULT</name></expr> </then><else>: <expr><call><name>hist_char2type</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdfirstc</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>HistoryType</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>history_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>history_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":=@&gt;?/"</literal></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>hist_char2type</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>HIST_INVALID</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_maptick</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 






<function><type><name>void</name></type> 
<name>add_to_history</name> <parameter_list>(
<parameter><decl><type><name>int</name></type> <name>histype</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_entry</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>in_map</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>sep</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hisptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hislen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>histype</name> <operator>==</operator> <name>HIST_INVALID</name></expr>)</condition> <block>{<block_content> 
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>histype</name> <operator>!=</operator> <name>HIST_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>keeppatterns</name></name> <operator>&amp;&amp;</operator> <name>histype</name> <operator>==</operator> <name>HIST_SEARCH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>histype</name> <operator>==</operator> <name>HIST_SEARCH</name> <operator>&amp;&amp;</operator> <name>in_map</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>maptick</name> <operator>==</operator> <name>last_maptick</name> <operator>&amp;&amp;</operator> <name><name>hisidx</name><index>[<expr><name>HIST_SEARCH</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hisptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>history</name><index>[<expr><name>HIST_SEARCH</name></expr>]</index><index>[<expr><name><name>hisidx</name><index>[<expr><name>HIST_SEARCH</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hist_free_entry</name><argument_list>(<argument><expr><name>hisptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>hisnum</name><index>[<expr><name>histype</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>hisidx</name><index>[<expr><name>HIST_SEARCH</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hisidx</name><index>[<expr><name>HIST_SEARCH</name></expr>]</index></name> <operator>=</operator> <name>hislen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last_maptick</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>in_history</name><argument_list>(<argument><expr><name>histype</name></expr></argument>, <argument><expr><name>new_entry</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name> <operator>==</operator> <name>hislen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hisptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hist_free_entry</name><argument_list>(<argument><expr><name>hisptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>new_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>new_entry</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hisptr</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <call><name>os_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hisptr</name><operator>-&gt;</operator><name>additional_elements</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>sep</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisnum</name></name> <operator>=</operator> <operator>++</operator><name><name>hisnum</name><index>[<expr><name>histype</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>histype</name> <operator>==</operator> <name>HIST_SEARCH</name> <operator>&amp;&amp;</operator> <name>in_map</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_maptick</name> <operator>=</operator> <name>maptick</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>get_history_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>histype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hislen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>histype</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>histype</name> <operator>&gt;=</operator> <name>HIST_COUNT</name>
<operator>||</operator> <name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>hisnum</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name><name>struct</name> <name>cmdline_info</name></name> <modifier>*</modifier></type><name>get_ccline_ptr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>ccline</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>prev_ccline</name></name> <operator>&amp;&amp;</operator> <name><name>ccline</name><operator>.</operator><name>prev_ccline</name><operator>-&gt;</operator><name>cmdbuff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>ccline</name><operator>.</operator><name>prev_ccline</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_cmdline_str</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmdline_star</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cmdline_info</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_ccline_ptr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>vim_strnsave</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>cmdlen</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>get_cmdline_pos</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmdline_info</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_ccline_ptr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>cmdpos</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>set_cmdline_pos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmdline_info</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_ccline_ptr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_cmdpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_cmdpos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>get_cmdline_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmdline_info</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_ccline_ptr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NUL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cmdfirstc</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>input_fn</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'@'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>cmdfirstc</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>calc_hist_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>histype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wrapped</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hislen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>histype</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>histype</name> <operator>&gt;=</operator> <name>HIST_COUNT</name>
<operator>||</operator> <operator>(</operator><name>i</name> <operator>=</operator> <name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hist</name> <operator>=</operator> <name><name>history</name><index>[<expr><name>histype</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>&gt;</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wrapped</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>hislen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wrapped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>==</operator> <name>num</name> <operator>&amp;&amp;</operator> <name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>-</operator><name>num</name> <operator>&lt;=</operator> <name>hislen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>num</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>hislen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_history_entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>histype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>calc_hist_idx</name><argument_list>(<argument><expr><name>histype</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>clr_history</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>histype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hislen</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>histype</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>histype</name> <operator>&lt;</operator> <name>HIST_COUNT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hisptr</name> <init>= <expr><name><name>history</name><index>[<expr><name>histype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>hislen</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr><expr><name>hisptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>hist_free_entry</name><argument_list>(<argument><expr><name>hisptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hisnum</name><index>[<expr><name>histype</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>del_history_entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>histype</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hisptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>hislen</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>histype</name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>histype</name> <operator>&lt;</operator> <name>HIST_COUNT</name>
<operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>idx</name> <operator>=</operator> <name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>RE_MAGIC</name> <operator>+</operator> <name>RE_STRING</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>last</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>hisptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name><name>hisptr</name><operator>-&gt;</operator><name>hisstr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hist_free_entry</name><argument_list>(<argument><expr><name>hisptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>hisptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_hist_entry</name><argument_list>(<argument><expr><name>hisptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>last</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last</name> <operator>+=</operator> <name>hislen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>hislen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>i</name> <operator>!=</operator> <name>idx</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>del_history_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>histype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>calc_hist_idx</name><argument_list>(<argument><expr><name>histype</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hist_free_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>histype</name> <operator>==</operator> <name>HIST_SEARCH</name> <operator>&amp;&amp;</operator> <name>maptick</name> <operator>==</operator> <name>last_maptick</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_maptick</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>!=</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>hislen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>clear_hist_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>history</name><index>[<expr><name>histype</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>hislen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>hisidx</name><index>[<expr><name>histype</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>get_list_range</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>vim_str2nr</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_str2nr</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num2</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>str</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>num2</name> <operator>=</operator> <operator>*</operator><name>num1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>ex_history</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>histype1</name> <init>= <expr><name>HIST_CMD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>histype2</name> <init>= <expr><name>HIST_CMD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hisidx1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hisidx2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hislen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'history' option is zero"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":=@&gt;/?"</literal></expr></argument>, <argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>histype1</name> <operator>=</operator> <call><name>get_histtype</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>histype1</name> <operator>==</operator> <name>HIST_INVALID</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>histype1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>histype2</name> <operator>=</operator> <name>HIST_COUNT</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>histype2</name> <operator>=</operator> <name>histype1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_list_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hisidx1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hisidx2</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name>got_int</name> <operator>&amp;&amp;</operator> <name>histype1</name> <operator>&lt;=</operator> <name>histype2</name></expr>;</condition> <incr><expr><operator>++</operator><name>histype1</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">"\n #"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>history_names</name><index>[<expr><name>histype1</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name><name>history_names</name><index>[<expr><name>histype1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSG_PUTS_TITLE</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>hisidx</name><index>[<expr><name>histype1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hist</name> <operator>=</operator> <name><name>history</name><index>[<expr><name>histype1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>hisidx1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>hisidx2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>-</operator><name>j</name> <operator>&gt;</operator> <name>hislen</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>hist</name><index>[<expr><operator>(</operator><name>hislen</name><operator>+</operator><name>j</name><operator>+</operator><name>idx</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>hislen</name></expr>]</index></name><operator>.</operator><name>hisnum</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>-</operator><name>k</name> <operator>&gt;</operator> <name>hislen</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>hist</name><index>[<expr><operator>(</operator><name>hislen</name><operator>+</operator><name>k</name><operator>+</operator><name>idx</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>hislen</name></expr>]</index></name><operator>.</operator><name>hisnum</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>hislen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>&gt;=</operator> <name>j</name> <operator>&amp;&amp;</operator> <name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><literal type="string">"%c%6d "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <name>idx</name></expr> ?</condition><then> <expr><literal type="char">'&gt;'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strsize</name><argument_list>(<argument><expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>Columns</name> <operator>-</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>trunc_string</name><argument_list>(<argument><expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></argument>, <argument><expr><name>IObuff</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Columns</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>hist_type2char</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
FUNC_ATTR_CONST
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HIST_CMD</name></expr>:</case> <block>{<block_content>
<return>return <expr><literal type="char">':'</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>HIST_SEARCH</name></expr>:</case> <block>{<block_content>
<return>return <expr><literal type="char">'/'</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>HIST_EXPR</name></expr>:</case> <block>{<block_content>
<return>return <expr><literal type="char">'='</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>HIST_INPUT</name></expr>:</case> <block>{<block_content>
<return>return <expr><literal type="char">'@'</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>HIST_DEBUG</name></expr>:</case> <block>{<block_content>
<return>return <expr><literal type="char">'&gt;'</literal></expr>;</return>
</block_content>}</block>
<default>default:</default> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>
<return>return <expr><name>NUL</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>open_cmdwin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmdline_info</name></name></type> <name>save_ccline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>old_curbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>winsizes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>typestr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_restart_edit</name> <init>= <expr><name>restart_edit</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_exmode</name> <init>= <expr><name>exmode_active</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_cmdmsg_rl</name> <init>= <expr><name>cmdmsg_rl</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>||</operator> <name>cmdline_star</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>K_IGNORE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_curbuf</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>win_size_save</name><argument_list>(<argument><expr><operator>&amp;</operator><name>winsizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>pum_undisplay</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>tab</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>noswapfile</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>win_split</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>p_cwh</name></expr></argument>, <argument><expr><name>WSP_BOT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>K_IGNORE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cmdwin_type</name> <operator>=</operator> <call><name>get_cmdline_type</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdwin_level</name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>level</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>buf_open_scratch</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"[Command Line]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"bh"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="string">"wipe"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>=</operator> <name>cmdmsg_rl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdmsg_rl</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><name>curbuf_lock</name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>histtype</name> <init>= <expr><call><name>hist_char2type</name><argument_list>(<argument><expr><name>cmdwin_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>histtype</name> <operator>==</operator> <name>HIST_CMD</name> <operator>||</operator> <name>histtype</name> <operator>==</operator> <name>HIST_DEBUG</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_wc</name> <operator>==</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_map</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;buffer&gt; &lt;Tab&gt; &lt;C-X&gt;&lt;C-V&gt;"</literal></expr></argument>, <argument><expr><name>INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_map</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;buffer&gt; &lt;Tab&gt; a&lt;C-X&gt;&lt;C-V&gt;"</literal></expr></argument>, <argument><expr><name>NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"ft"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="string">"vim"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curbuf_lock</name><operator>--</operator></expr>;</expr_stmt>



<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>init_history</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hislen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>histtype</name> <operator>!=</operator> <name>HIST_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>hisidx</name><index>[<expr><name>histtype</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <name>hislen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>history</name><index>[<expr><name>histtype</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>, <argument><expr><name><name>history</name><index>[<expr><name>histtype</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>hisidx</name><index>[<expr><name>histtype</name></expr>]</index></name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed_line_abv_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invalidate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>redraw_state</name></name> <operator>=</operator> <name>kCmdRedrawNone</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_call_cmdline_hide</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>save_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>exmode_active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>typestr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>cmdwin_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typestr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_CMDWINENTER</name></expr></argument>, <argument><expr><name>typestr</name></expr></argument>, <argument><expr><name>typestr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>K_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>RedrawingDisabled</name></expr>;</expr_stmt>
<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_count</name> <init>= <expr><call><name>save_batch_count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>normal_enter</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restore_batch_count</name><argument_list>(<argument><expr><name>save_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>save_KeyTyped</name> <init>= <expr><name>KeyTyped</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_CMDWINLEAVE</name></expr></argument>, <argument><expr><name>typestr</name></expr></argument>, <argument><expr><name>typestr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>save_KeyTyped</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>restore_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_ccline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdwin_type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdwin_level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>exmode_active</name> <operator>=</operator> <name>save_exmode</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>old_curwin</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_curbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E199: Active window or buffer deleted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>cmdwin_result</name> <operator>!=</operator> <name>K_IGNORE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdwin_result</name> <operator>==</operator> <name>K_XF1</name> <operator>||</operator> <name>cmdwin_result</name> <operator>==</operator> <name>K_XF2</name></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cmdwin_result</name> <operator>==</operator> <name>K_XF2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"qa"</literal></expr> </then><else>: <expr><literal type="string">"qa!"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>histtype</name> <operator>==</operator> <name>HIST_CMD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>CAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmdwin_result</name> <operator>==</operator> <name>Ctrl_C</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbufflen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdbufflen</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>&gt;</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name> <operator>=</operator> <name><name>ccline</name><operator>.</operator><name>cmdlen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdwin_result</name> <operator>==</operator> <name>K_IGNORE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ccline</name><operator>.</operator><name>cmdspos</name></name> <operator>=</operator> <call><name>cmd_screencol</name><argument_list>(<argument><expr><name><name>ccline</name><operator>.</operator><name>cmdpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_goto</name><argument_list>(<argument><expr><name>old_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_close</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_buffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>bufref</name><operator>.</operator><name>br_buf</name></name></expr></argument>, <argument><expr><name>DOBUF_WIPE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>win_size_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>winsizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>winsizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <name>save_restart_edit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdmsg_rl</name> <operator>=</operator> <name>save_cmdmsg_rl</name></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cmdwin_result</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>char</name> <modifier>*</modifier></type><name>script_get</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>eap</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lenp</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_MALLOC
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmd</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>getline</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>xmemdupz</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>*</operator><name>lenp</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name> <init>= <expr><block>{ <expr><operator>.</operator><name>ga_data</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>ga_len</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>end_pattern</name> <init>= <expr><operator>(</operator>
<ternary><condition><expr><name><name>cmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>cmd</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><literal type="string">"."</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>theline</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name><argument_list>(
<argument><expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name><operator>-&gt;</operator><name>cs_looplevel</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>:
<expr><name>NUL</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>theline</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>end_pattern</name></expr></argument>, <argument><expr><name>theline</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>theline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>theline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>theline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</return>
</block_content>}</block></function>






















<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hist_iter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><specifier>const</specifier> <name>iter</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <name>history_type</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>bool</name> <name>zero</name></expr></argument>, <argument><expr><name>histentry_T</name> <operator>*</operator><specifier>const</specifier> <name>hist</name></expr></argument>)</argument_list>
<name>FUNC_ATTR_WARN_UNUSED_RESULT</name> <name>FUNC_ATTR_NONNULL_ARG</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>hist</name> <operator>=</operator> <operator>(</operator><name>histentry_T</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>hisstr</name> <operator>=</operator> <name>NULL</name></expr>
}</block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hisidx</name><index>[<expr><name>history_type</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>hstart</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>history</name><index>[<expr><name>history_type</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>hlast</name> <init>= <expr><operator>(</operator>
<operator>&amp;</operator><operator>(</operator><name><name>history</name><index>[<expr><name>history_type</name></expr>]</index><index>[<expr><name><name>hisidx</name><index>[<expr><name>history_type</name></expr>]</index></name></expr>]</index></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>histentry_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>hend</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>history</name><index>[<expr><name>history_type</name></expr>]</index><index>[<expr><name>hislen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hiter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>hfirst</name> <init>= <expr><name>hlast</name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>hfirst</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hfirst</name> <operator>&gt;</operator> <name>hend</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hfirst</name> <operator>=</operator> <name>hstart</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hfirst</name><operator>-&gt;</operator><name>hisstr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>hfirst</name> <operator>!=</operator> <name>hlast</name></expr>)</condition>;</do>
<expr_stmt><expr><name>hiter</name> <operator>=</operator> <name>hfirst</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>hiter</name> <operator>=</operator> <operator>(</operator><name>histentry_T</name> <operator>*</operator><operator>)</operator> <name>iter</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hiter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>hist</name> <operator>=</operator> <operator>*</operator><name>hiter</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zero</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hiter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hiter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hiter</name> <operator>==</operator> <name>hlast</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hiter</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>hiter</name> <operator>&gt;</operator> <name>hend</name><operator>)</operator></expr> ?</condition><then> <expr><name>hstart</name></expr> </then><else>: <expr><name>hiter</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>










<function><type><name>histentry_T</name> <modifier>*</modifier></type><name>hist_get_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>history_type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>new_hisidx</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>new_hisnum</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>init_history</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>new_hisidx</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>hisidx</name><index>[<expr><name>history_type</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>new_hisnum</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>hisnum</name><index>[<expr><name>history_type</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name><name>history</name><index>[<expr><name>history_type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_search_match</name><parameter_list>(<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+=</operator> <name>search_match_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>search_match_endcol</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
