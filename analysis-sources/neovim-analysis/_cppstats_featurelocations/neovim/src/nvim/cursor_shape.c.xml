<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\cursor_shape.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor_shape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_getln.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><name>cursorentry_T</name></type> <name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_COUNT</name></expr>]</index></name> <init>=
<expr><block>{


<expr><block>{ <expr><literal type="string">"normal"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">700L</literal></expr>, <expr><literal type="number">400L</literal></expr>, <expr><literal type="number">250L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"n"</literal></expr>, <expr><name>SHAPE_CURSOR</name><operator>+</operator><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"visual"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">700L</literal></expr>, <expr><literal type="number">400L</literal></expr>, <expr><literal type="number">250L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"v"</literal></expr>, <expr><name>SHAPE_CURSOR</name><operator>+</operator><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"insert"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">700L</literal></expr>, <expr><literal type="number">400L</literal></expr>, <expr><literal type="number">250L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><name>SHAPE_CURSOR</name><operator>+</operator><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"replace"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">700L</literal></expr>, <expr><literal type="number">400L</literal></expr>, <expr><literal type="number">250L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"r"</literal></expr>, <expr><name>SHAPE_CURSOR</name><operator>+</operator><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cmdline_normal"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">700L</literal></expr>, <expr><literal type="number">400L</literal></expr>, <expr><literal type="number">250L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><name>SHAPE_CURSOR</name><operator>+</operator><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cmdline_insert"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">700L</literal></expr>, <expr><literal type="number">400L</literal></expr>, <expr><literal type="number">250L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ci"</literal></expr>, <expr><name>SHAPE_CURSOR</name><operator>+</operator><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cmdline_replace"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">700L</literal></expr>, <expr><literal type="number">400L</literal></expr>, <expr><literal type="number">250L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"cr"</literal></expr>, <expr><name>SHAPE_CURSOR</name><operator>+</operator><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"operator"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">700L</literal></expr>, <expr><literal type="number">400L</literal></expr>, <expr><literal type="number">250L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"o"</literal></expr>, <expr><name>SHAPE_CURSOR</name><operator>+</operator><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"visual_select"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">700L</literal></expr>, <expr><literal type="number">400L</literal></expr>, <expr><literal type="number">250L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ve"</literal></expr>, <expr><name>SHAPE_CURSOR</name><operator>+</operator><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cmdline_hover"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"statusline_hover"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"statusline_drag"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"sd"</literal></expr>, <expr><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vsep_hover"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"vs"</literal></expr>, <expr><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vsep_drag"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"vd"</literal></expr>, <expr><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"more"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"m"</literal></expr>, <expr><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"more_lastline"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ml"</literal></expr>, <expr><name>SHAPE_MOUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"showmatch"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100L</literal></expr>, <expr><literal type="number">100L</literal></expr>, <expr><literal type="number">100L</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"sm"</literal></expr>, <expr><name>SHAPE_CURSOR</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>



<function><type><name>Array</name></type> <name>mode_style_array</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>all</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SHAPE_IDX_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>dic</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cursorentry_T</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><name><name>shape_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>used_for</name></name> <operator>&amp;</operator> <name>SHAPE_MOUSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>dic</name></expr></argument>, <argument><expr><literal type="string">"mouse_shape"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>mshape</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>used_for</name></name> <operator>&amp;</operator> <name>SHAPE_CURSOR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>shape_str</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>shape</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SHAPE_BLOCK</name></expr>:</case> <expr_stmt><expr><name>shape_str</name> <operator>=</operator> <call><name>cstr_to_string</name><argument_list>(<argument><expr><literal type="string">"block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SHAPE_VER</name></expr>:</case> <expr_stmt><expr><name>shape_str</name> <operator>=</operator> <call><name>cstr_to_string</name><argument_list>(<argument><expr><literal type="string">"vertical"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SHAPE_HOR</name></expr>:</case> <expr_stmt><expr><name>shape_str</name> <operator>=</operator> <call><name>cstr_to_string</name><argument_list>(<argument><expr><literal type="string">"horizontal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>shape_str</name> <operator>=</operator> <call><name>cstr_to_string</name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>dic</name></expr></argument>, <argument><expr><literal type="string">"cursor_shape"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><name>shape_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>dic</name></expr></argument>, <argument><expr><literal type="string">"cell_percentage"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>percentage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>dic</name></expr></argument>, <argument><expr><literal type="string">"blinkwait"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>blinkwait</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>dic</name></expr></argument>, <argument><expr><literal type="string">"blinkon"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>blinkon</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>dic</name></expr></argument>, <argument><expr><literal type="string">"blinkoff"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>blinkoff</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>dic</name></expr></argument>, <argument><expr><literal type="string">"hl_id"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>dic</name></expr></argument>, <argument><expr><literal type="string">"id_lm"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>id_lm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>dic</name></expr></argument>, <argument><expr><literal type="string">"attr_id"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name></expr> ?</condition><then> <expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>dic</name></expr></argument>, <argument><expr><literal type="string">"attr_id_lm"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>cur</name><operator>-&gt;</operator><name>id_lm</name></name></expr> ?</condition><then> <expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>id_lm</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>dic</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>full_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>dic</name></expr></argument>, <argument><expr><literal type="string">"short_name"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>all</name></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><name>dic</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>all</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type><name>parse_shape_opt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>modep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>colonp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>commap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>slashp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>all_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_ve</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>round</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>modep</name> <operator>=</operator> <name>p_guicursor</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_guicursor</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>modep</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"a:block-blinkon0"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>modep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>modep</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>colonp</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>modep</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>commap</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>modep</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>colonp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>commap</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>commap</name> <operator>&lt;</operator> <name>colonp</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E545: Missing colon"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>colonp</name> <operator>==</operator> <name>modep</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E546: Illegal mode"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>all_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>modep</name> <operator>&lt;</operator> <name>colonp</name> <operator>||</operator> <name>all_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>all_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>modep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name><name>modep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>modep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>all_idx</name> <operator>=</operator> <name>SHAPE_IDX_COUNT</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>SHAPE_IDX_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>modep</name></expr></argument>, <argument><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>SHAPE_IDX_COUNT</name>
<operator>||</operator> <operator>(</operator><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>used_for</name> <operator>&amp;</operator> <name>what</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E546: Illegal mode"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>modep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal> <operator>&amp;&amp;</operator> <name><name>modep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found_ve</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>modep</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>all_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>all_idx</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<block>{<block_content>

<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>shape</name> <operator>=</operator> <name>SHAPE_BLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>blinkwait</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>blinkon</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>blinkoff</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>colonp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<block>{<block_content>



<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ver"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"hor"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"blinkwait"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"blinkon"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"blinkoff"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E548: digit expected"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>getdigits_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E549: Illegal percentage"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>shape</name> <operator>=</operator> <name>SHAPE_VER</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>shape</name> <operator>=</operator> <name>SHAPE_HOR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>percentage</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>blinkwait</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>blinkon</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>blinkoff</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"block"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>shape</name> <operator>=</operator> <name>SHAPE_BLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>endp</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>commap</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>endp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>p</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>endp</name> <operator>&gt;</operator> <name>commap</name> <operator>||</operator> <name>endp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>commap</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>slashp</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slashp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>slashp</name> <operator>&lt;</operator> <name>endp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>slashp</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>slashp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>endp</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>id_lm</name> <operator>=</operator> <name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slashp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>slashp</name> <operator>&lt;</operator> <name>endp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>endp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<expr_stmt><expr><name>modep</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>modep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>modep</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>modep</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_ve</name></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_VE</name></expr>]</index></name><operator>.</operator><name>shape</name> <operator>=</operator> <name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_V</name></expr>]</index></name><operator>.</operator><name>shape</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_VE</name></expr>]</index></name><operator>.</operator><name>percentage</name> <operator>=</operator>
<name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_V</name></expr>]</index></name><operator>.</operator><name>percentage</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_VE</name></expr>]</index></name><operator>.</operator><name>blinkwait</name> <operator>=</operator>
<name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_V</name></expr>]</index></name><operator>.</operator><name>blinkwait</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_VE</name></expr>]</index></name><operator>.</operator><name>blinkon</name> <operator>=</operator>
<name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_V</name></expr>]</index></name><operator>.</operator><name>blinkon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_VE</name></expr>]</index></name><operator>.</operator><name>blinkoff</name> <operator>=</operator>
<name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_V</name></expr>]</index></name><operator>.</operator><name>blinkoff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_VE</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_V</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_VE</name></expr>]</index></name><operator>.</operator><name>id_lm</name> <operator>=</operator> <name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_V</name></expr>]</index></name><operator>.</operator><name>id_lm</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ui_mode_info_set</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>cursor_is_block_during_visual</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>exclusive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mode_idx</name> <init>= <expr><ternary><condition><expr><name>exclusive</name></expr> ?</condition><then> <expr><name>SHAPE_IDX_VE</name></expr> </then><else>: <expr><name>SHAPE_IDX_V</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>SHAPE_BLOCK</name> <operator>==</operator> <name><name>shape_table</name><index>[<expr><name>mode_idx</name></expr>]</index></name><operator>.</operator><name>shape</name>
<operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>shape_table</name><index>[<expr><name>mode_idx</name></expr>]</index></name><operator>.</operator><name>blinkon</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>cursor_mode_str2int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>mode_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mode_idx</name> <operator>&lt;</operator> <name>SHAPE_IDX_COUNT</name></expr>;</condition> <incr><expr><name>mode_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>shape_table</name><index>[<expr><name>mode_idx</name></expr>]</index></name><operator>.</operator><name>full_name</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>mode_idx</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>WLOG</name><argument_list>(<argument><expr><literal type="string">"Unknown mode %s"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>cursor_mode_uses_syn_id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>syn_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_guicursor</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>mode_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mode_idx</name> <operator>&lt;</operator> <name>SHAPE_IDX_COUNT</name></expr>;</condition> <incr><expr><name>mode_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>shape_table</name><index>[<expr><name>mode_idx</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>syn_id</name>
<operator>||</operator> <name><name>shape_table</name><index>[<expr><name>mode_idx</name></expr>]</index></name><operator>.</operator><name>id_lm</name> <operator>==</operator> <name>syn_id</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>cursor_get_mode_idx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>==</operator> <name>SHOWMATCH</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>SHAPE_IDX_SM</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>VREPLACE_FLAG</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>SHAPE_IDX_R</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>REPLACE_FLAG</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>SHAPE_IDX_R</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>SHAPE_IDX_I</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cmdline_at_end</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>SHAPE_IDX_C</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cmdline_overstrike</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>SHAPE_IDX_CR</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>SHAPE_IDX_CI</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>finish_op</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>SHAPE_IDX_O</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>SHAPE_IDX_VE</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>SHAPE_IDX_V</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>SHAPE_IDX_N</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
