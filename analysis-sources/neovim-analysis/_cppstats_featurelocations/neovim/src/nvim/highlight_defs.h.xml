<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\highlight_defs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_HIGHLIGHT_DEFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_HIGHLIGHT_DEFS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>int32_t</name></type> <name>RgbValue</name>;</typedef>




<typedef>typedef <type><enum>enum <block>{
<decl><name>HL_INVERSE</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>HL_BOLD</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>HL_ITALIC</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>HL_UNDERLINE</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>HL_UNDERCURL</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>HL_STANDOUT</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>HL_STRIKETHROUGH</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,
<decl><name>HL_NOCOMBINE</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>,
<decl><name>HL_BG_INDEXED</name> <init>= <expr><literal type="number">0x0100</literal></expr></init></decl>,
<decl><name>HL_FG_INDEXED</name> <init>= <expr><literal type="number">0x0200</literal></expr></init></decl>,
}</block></enum></type> <name>HlAttrFlags</name>;</typedef>



<typedef>typedef <type><struct>struct <name>attr_entry</name> <block>{
<decl_stmt><decl><type><name>int16_t</name></type> <name>rgb_ae_attr</name></decl>, <name>cterm_ae_attr</name>;</decl_stmt> 
<decl_stmt><decl><type><name>RgbValue</name></type> <name>rgb_fg_color</name></decl>, <name>rgb_bg_color</name>, <name>rgb_sp_color</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cterm_fg_color</name></decl>, <name>cterm_bg_color</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hl_blend</name></decl>;</decl_stmt>
}</block></struct></type> <name>HlAttrs</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HLATTRS_INIT</name></cpp:macro> <cpp:value>(HlAttrs) { .rgb_ae_attr = 0, .cterm_ae_attr = 0, .rgb_fg_color = -1, .rgb_bg_color = -1, .rgb_sp_color = -1, .cterm_fg_color = 0, .cterm_bg_color = 0, .hl_blend = -1, }</cpp:value></cpp:define>












<typedef>typedef <type><enum>enum <block>{
<decl><name>HLF_8</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> 

, <decl><name>HLF_EOB</name></decl> 
, <decl><name>HLF_TERM</name></decl> 
, <decl><name>HLF_TERMNC</name></decl> 
, <decl><name>HLF_AT</name></decl> 

, <decl><name>HLF_D</name></decl> 
, <decl><name>HLF_E</name></decl> 
, <decl><name>HLF_I</name></decl> 
, <decl><name>HLF_L</name></decl> 
, <decl><name>HLF_M</name></decl> 
, <decl><name>HLF_CM</name></decl> 
, <decl><name>HLF_N</name></decl> 
, <decl><name>HLF_CLN</name></decl> 
, <decl><name>HLF_R</name></decl> 
, <decl><name>HLF_S</name></decl> 
, <decl><name>HLF_SNC</name></decl> 
, <decl><name>HLF_C</name></decl> 
, <decl><name>HLF_T</name></decl> 
, <decl><name>HLF_V</name></decl> 
, <decl><name>HLF_VNC</name></decl> 
, <decl><name>HLF_W</name></decl> 
, <decl><name>HLF_WM</name></decl> 
, <decl><name>HLF_FL</name></decl> 
, <decl><name>HLF_FC</name></decl> 
, <decl><name>HLF_ADD</name></decl> 
, <decl><name>HLF_CHD</name></decl> 
, <decl><name>HLF_DED</name></decl> 
, <decl><name>HLF_TXD</name></decl> 
, <decl><name>HLF_SC</name></decl> 
, <decl><name>HLF_CONCEAL</name></decl> 
, <decl><name>HLF_SPB</name></decl> 
, <decl><name>HLF_SPC</name></decl> 
, <decl><name>HLF_SPR</name></decl> 
, <decl><name>HLF_SPL</name></decl> 
, <decl><name>HLF_PNI</name></decl> 
, <decl><name>HLF_PSI</name></decl> 
, <decl><name>HLF_PSB</name></decl> 
, <decl><name>HLF_PST</name></decl> 
, <decl><name>HLF_TP</name></decl> 
, <decl><name>HLF_TPS</name></decl> 
, <decl><name>HLF_TPF</name></decl> 
, <decl><name>HLF_CUC</name></decl> 
, <decl><name>HLF_CUL</name></decl> 
, <decl><name>HLF_MC</name></decl> 
, <decl><name>HLF_QFL</name></decl> 
, <decl><name>HLF_0</name></decl> 
, <decl><name>HLF_INACTIVE</name></decl> 
, <decl><name>HLF_MSGSEP</name></decl> 
, <decl><name>HLF_NFLOAT</name></decl> 
, <decl><name>HLF_MSG</name></decl> 
, <decl><name>HLF_COUNT</name></decl> 
}</block></enum></type> <name>hlf_T</name>;</typedef>

<decl_stmt><decl><type><name>EXTERN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><name><name>hlf_names</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <block>{
<expr><index>[<expr><name>HLF_8</name></expr>]</index> <operator>=</operator> <literal type="string">"SpecialKey"</literal></expr>,
<expr><index>[<expr><name>HLF_EOB</name></expr>]</index> <operator>=</operator> <literal type="string">"EndOfBuffer"</literal></expr>,
<expr><index>[<expr><name>HLF_TERM</name></expr>]</index> <operator>=</operator> <literal type="string">"TermCursor"</literal></expr>,
<expr><index>[<expr><name>HLF_TERMNC</name></expr>]</index> <operator>=</operator> <literal type="string">"TermCursorNC"</literal></expr>,
<expr><index>[<expr><name>HLF_AT</name></expr>]</index> <operator>=</operator> <literal type="string">"NonText"</literal></expr>,
<expr><index>[<expr><name>HLF_D</name></expr>]</index> <operator>=</operator> <literal type="string">"Directory"</literal></expr>,
<expr><index>[<expr><name>HLF_E</name></expr>]</index> <operator>=</operator> <literal type="string">"ErrorMsg"</literal></expr>,
<expr><index>[<expr><name>HLF_I</name></expr>]</index> <operator>=</operator> <literal type="string">"IncSearch"</literal></expr>,
<expr><index>[<expr><name>HLF_L</name></expr>]</index> <operator>=</operator> <literal type="string">"Search"</literal></expr>,
<expr><index>[<expr><name>HLF_M</name></expr>]</index> <operator>=</operator> <literal type="string">"MoreMsg"</literal></expr>,
<expr><index>[<expr><name>HLF_CM</name></expr>]</index> <operator>=</operator> <literal type="string">"ModeMsg"</literal></expr>,
<expr><index>[<expr><name>HLF_N</name></expr>]</index> <operator>=</operator> <literal type="string">"LineNr"</literal></expr>,
<expr><index>[<expr><name>HLF_CLN</name></expr>]</index> <operator>=</operator> <literal type="string">"CursorLineNr"</literal></expr>,
<expr><index>[<expr><name>HLF_R</name></expr>]</index> <operator>=</operator> <literal type="string">"Question"</literal></expr>,
<expr><index>[<expr><name>HLF_S</name></expr>]</index> <operator>=</operator> <literal type="string">"StatusLine"</literal></expr>,
<expr><index>[<expr><name>HLF_SNC</name></expr>]</index> <operator>=</operator> <literal type="string">"StatusLineNC"</literal></expr>,
<expr><index>[<expr><name>HLF_C</name></expr>]</index> <operator>=</operator> <literal type="string">"VertSplit"</literal></expr>,
<expr><index>[<expr><name>HLF_T</name></expr>]</index> <operator>=</operator> <literal type="string">"Title"</literal></expr>,
<expr><index>[<expr><name>HLF_V</name></expr>]</index> <operator>=</operator> <literal type="string">"Visual"</literal></expr>,
<expr><index>[<expr><name>HLF_VNC</name></expr>]</index> <operator>=</operator> <literal type="string">"VisualNC"</literal></expr>,
<expr><index>[<expr><name>HLF_W</name></expr>]</index> <operator>=</operator> <literal type="string">"WarningMsg"</literal></expr>,
<expr><index>[<expr><name>HLF_WM</name></expr>]</index> <operator>=</operator> <literal type="string">"WildMenu"</literal></expr>,
<expr><index>[<expr><name>HLF_FL</name></expr>]</index> <operator>=</operator> <literal type="string">"Folded"</literal></expr>,
<expr><index>[<expr><name>HLF_FC</name></expr>]</index> <operator>=</operator> <literal type="string">"FoldColumn"</literal></expr>,
<expr><index>[<expr><name>HLF_ADD</name></expr>]</index> <operator>=</operator> <literal type="string">"DiffAdd"</literal></expr>,
<expr><index>[<expr><name>HLF_CHD</name></expr>]</index> <operator>=</operator> <literal type="string">"DiffChange"</literal></expr>,
<expr><index>[<expr><name>HLF_DED</name></expr>]</index> <operator>=</operator> <literal type="string">"DiffDelete"</literal></expr>,
<expr><index>[<expr><name>HLF_TXD</name></expr>]</index> <operator>=</operator> <literal type="string">"DiffText"</literal></expr>,
<expr><index>[<expr><name>HLF_SC</name></expr>]</index> <operator>=</operator> <literal type="string">"SignColumn"</literal></expr>,
<expr><index>[<expr><name>HLF_CONCEAL</name></expr>]</index> <operator>=</operator> <literal type="string">"Conceal"</literal></expr>,
<expr><index>[<expr><name>HLF_SPB</name></expr>]</index> <operator>=</operator> <literal type="string">"SpellBad"</literal></expr>,
<expr><index>[<expr><name>HLF_SPC</name></expr>]</index> <operator>=</operator> <literal type="string">"SpellCap"</literal></expr>,
<expr><index>[<expr><name>HLF_SPR</name></expr>]</index> <operator>=</operator> <literal type="string">"SpellRare"</literal></expr>,
<expr><index>[<expr><name>HLF_SPL</name></expr>]</index> <operator>=</operator> <literal type="string">"SpellLocal"</literal></expr>,
<expr><index>[<expr><name>HLF_PNI</name></expr>]</index> <operator>=</operator> <literal type="string">"Pmenu"</literal></expr>,
<expr><index>[<expr><name>HLF_PSI</name></expr>]</index> <operator>=</operator> <literal type="string">"PmenuSel"</literal></expr>,
<expr><index>[<expr><name>HLF_PSB</name></expr>]</index> <operator>=</operator> <literal type="string">"PmenuSbar"</literal></expr>,
<expr><index>[<expr><name>HLF_PST</name></expr>]</index> <operator>=</operator> <literal type="string">"PmenuThumb"</literal></expr>,
<expr><index>[<expr><name>HLF_TP</name></expr>]</index> <operator>=</operator> <literal type="string">"TabLine"</literal></expr>,
<expr><index>[<expr><name>HLF_TPS</name></expr>]</index> <operator>=</operator> <literal type="string">"TabLineSel"</literal></expr>,
<expr><index>[<expr><name>HLF_TPF</name></expr>]</index> <operator>=</operator> <literal type="string">"TabLineFill"</literal></expr>,
<expr><index>[<expr><name>HLF_CUC</name></expr>]</index> <operator>=</operator> <literal type="string">"CursorColumn"</literal></expr>,
<expr><index>[<expr><name>HLF_CUL</name></expr>]</index> <operator>=</operator> <literal type="string">"CursorLine"</literal></expr>,
<expr><index>[<expr><name>HLF_MC</name></expr>]</index> <operator>=</operator> <literal type="string">"ColorColumn"</literal></expr>,
<expr><index>[<expr><name>HLF_QFL</name></expr>]</index> <operator>=</operator> <literal type="string">"QuickFixLine"</literal></expr>,
<expr><index>[<expr><name>HLF_0</name></expr>]</index> <operator>=</operator> <literal type="string">"Whitespace"</literal></expr>,
<expr><index>[<expr><name>HLF_INACTIVE</name></expr>]</index> <operator>=</operator> <literal type="string">"NormalNC"</literal></expr>,
<expr><index>[<expr><name>HLF_MSGSEP</name></expr>]</index> <operator>=</operator> <literal type="string">"MsgSeparator"</literal></expr>,
<expr><index>[<expr><name>HLF_NFLOAT</name></expr>]</index> <operator>=</operator> <literal type="string">"NormalFloat"</literal></expr>,
<expr><index>[<expr><name>HLF_MSG</name></expr>]</index> <operator>=</operator> <literal type="string">"MsgArea"</literal></expr>,
}</block></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name><name>highlight_attr</name><index>[<expr><name>HLF_COUNT</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name><name>highlight_attr_last</name><index>[<expr><name>HLF_COUNT</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name><name>highlight_user</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name><name>highlight_stlnc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cterm_normal_fg_color</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cterm_normal_bg_color</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EXTERN</name> <name>RgbValue</name> <name>normal_fg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EXTERN</name> <name>RgbValue</name> <name>normal_bg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EXTERN</name> <name>RgbValue</name> <name>normal_sp</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <block>{
<decl><name>kHlUnknown</name></decl>,
<decl><name>kHlUI</name></decl>,
<decl><name>kHlSyntax</name></decl>,
<decl><name>kHlTerminal</name></decl>,
<decl><name>kHlCombine</name></decl>,
<decl><name>kHlBlend</name></decl>,
<decl><name>kHlBlendThrough</name></decl>,
}</block></enum></type> <name>HlKind</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>HlAttrs</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HlKind</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id2</name></decl>;</decl_stmt>
}</block></struct></type> <name>HlEntry</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
