<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\os\fs.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"auto/config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os/fs.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_UV_FS_FUNC</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { bool did_try_to_free = false; uv_call_start: {} uv_fs_t req; ret = func(&amp;fs_loop, &amp;req, __VA_ARGS__); uv_fs_req_cleanup(&amp;req); if (ret == UV_ENOMEM &amp;&amp; !did_try_to_free) { try_to_free_memory(); did_try_to_free = true; goto uv_call_start; } } while (0)</cpp:value></cpp:define>














<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kLibuvSuccess</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uv_loop_t</name></type> <name>fs_loop</name></decl>;</decl_stmt>



<function><type><name>void</name></type> <name>fs_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>uv_loop_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>os_chdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"chdir(%s)"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>uv_chdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>os_dirname</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error_number</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>error_number</name> <operator>=</operator> <call><name>uv_cwd</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>kLibuvSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>error_number</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>os_isrealdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>uv_fs_t</name></type> <name>request</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>uv_fs_lstat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>kLibuvSuccess</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>os_isdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>mode</name> <init>= <expr><call><name>os_getperm</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>os_isdir_executable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>mode</name> <init>= <expr><call><name>os_getperm</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>S_IXUSR</name> <operator>&amp;</operator> <name>mode</name><operator>)</operator><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>os_nodetype</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uv_stat_t</name></type> <name>statbuf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>os_stat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NODE_NORMAL</name></expr>;</return> 
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NODE_NORMAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISBLK</name><argument_list>(<argument><expr><name><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>NODE_OTHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><name>NODE_WRITABLE</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 



<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"\\\\.\\"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NODE_WRITABLE</name></expr>;</return>
</block_content>}</block></if></if_stmt>









<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>os_open</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>O_RDONLY</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>O_NONBLOCK</name></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>NODE_NORMAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>guess</name> <init>= <expr><call><name>uv_guess_handle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"close(%d) failed. name='%s'"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>guess</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UV_TTY</name></expr>:</case> 
<return>return <expr><name>NODE_WRITABLE</name></expr>;</return>
<case>case <expr><name>UV_FILE</name></expr>:</case> 
<return>return <expr><name>NODE_NORMAL</name></expr>;</return>
<case>case <expr><name>UV_NAMED_PIPE</name></expr>:</case> 
<case>case <expr><name>UV_UDP</name></expr>:</case> 
<case>case <expr><name>UV_TCP</name></expr>:</case> 
<case>case <expr><name>UV_UNKNOWN_HANDLE</name></expr>:</case>
<default>default:</default>
<return>return <expr><name>NODE_OTHER</name></expr>;</return> 
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>os_exepath</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<return>return <expr><call><name>uv_exepath</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><name>bool</name></type> <name>os_can_exe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>abspath</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_path</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_path</name> <operator>||</operator> <call><name>gettail_dir</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>name</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>is_executable_ext</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>abspath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>use_path</name> <operator>||</operator> <call><name>gettail_dir</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>name</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>is_executable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>abspath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>is_executable_in_path</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>abspath</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_executable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>abspath</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)</block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>mode</name> <init>= <expr><call><name>os_getperm</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ok</name> <init>= <expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_access</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>X_OK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ok</name> <init>= <expr><operator>(</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>&amp;&amp;</operator> <name>abspath</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>abspath</name> <operator>=</operator> <call><name>save_abs_path</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>



static bool is_executable_ext(const char *name</block><operator>,</operator> <expr_stmt><expr><name>char</name> <operator>*</operator><operator>*</operator><name>abspath</name></expr></expr_stmt>)
<macro><name>FUNC_ATTR_NONNULL_ARG</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_unix_shell</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail</name><argument_list>(<argument><expr><name>p_sh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sh"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nameext</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nameext_len</name> <init>= <expr><ternary><condition><expr><name>nameext</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>nameext</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><name>os_buf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>os_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf_end</name> <init>= <expr><call><name>xstrchrnul</name><argument_list>(<argument><expr><name>os_buf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathext</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"PATHEXT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pathext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pathext</name> <operator>=</operator> <literal type="string">".com;.exe;.bat;.cmd"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><name>pathext</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>ext</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ext</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>ext</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>ENV_SEPCHAR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_executable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>abspath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ext</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ext</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext_end</name> <init>= <expr><name>ext</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ext_len</name> <init>=
<expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ext_end</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf_end</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>os_buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>buf_end</name> <operator>-</operator> <name>os_buf</name><operator>)</operator></expr></argument>, <argument><expr><name>ENV_SEPSTR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ext_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>in_pathext</name> <init>= <expr><name>nameext_len</name> <operator>==</operator> <name>ext_len</name>
<operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>mb_strnicmp</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>nameext</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>ext</name></expr></argument>, <argument><expr><name>ext_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>in_pathext</name> <operator>||</operator> <name>is_unix_shell</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_executable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>abspath</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <call><name>is_executable</name><argument_list>(<argument><expr><name>os_buf</name></expr></argument>, <argument><expr><name>abspath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ext</name> <operator>=</operator> <name>ext_end</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_executable_in_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>abspath</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_env</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>path_env</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>size_t</name></type> <name>pathlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path_env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>xmallocz</name><argument_list>(<argument><expr><name>pathlen</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"."</literal> <name>ENV_SEPSTR</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>path</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>path_env</name></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>path_env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>size_t</name></type> <name>buf_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>path</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rv</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>xstrchrnul</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ENV_SEPCHAR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_path</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>is_executable_ext</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>abspath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>is_executable</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>abspath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>e</name> <operator>!=</operator> <name>ENV_SEPCHAR</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></for>











<function><type><name>int</name></type> <name>os_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>UV_EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_open</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>FILE</name> <modifier>*</modifier></type><name>os_fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>flags</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>flags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>iflags</name> <operator>=</operator> <name>O_RDONLY</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><name>iflags</name> <operator>=</operator> <name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>iflags</name> <operator>=</operator> <name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_APPEND</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>flags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iflags</name> <operator>|=</operator> <name>O_BINARY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>flags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>iflags</name> <operator>=</operator> <name>O_RDWR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><name>iflags</name> <operator>=</operator> <name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>iflags</name> <operator>=</operator> <name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_APPEND</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>iflags</name><operator>|</operator><name>O_RDONLY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>iflags</name><operator>|</operator><name>O_WRONLY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>iflags</name><operator>|</operator><name>O_RDWR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>os_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>iflags</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>os_set_cloexec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fdflags</name> <init>= <expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fdflags</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"Failed to get flags on descriptor %d: %s"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdflags</name> <operator>&amp;</operator> <name>FD_CLOEXEC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>fdflags</name> <operator>|</operator> <name>FD_CLOEXEC</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"Failed to set CLOEXEC on descriptor %d: %s"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>os_close</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_close</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>os_dup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<label><name>os_dup_dup</name>:</label>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>error</name> <init>= <expr><call><name>os_translate_sys_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>UV_EINTR</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>os_dup_dup</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>ptrdiff_t</name></type> <name>os_read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret_eof</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret_buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>non_blocking</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret_eof</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret_buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>read_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>did_try_to_free</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>read_bytes</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <name>read_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>cur_read_bytes</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ret_buf</name> <operator>+</operator> <name>read_bytes</name></expr></argument>,
<argument><expr><call><name>IO_COUNT</name><argument_list>(<argument><expr><name>size</name> <operator>-</operator> <name>read_bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_read_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>read_bytes</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>cur_read_bytes</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_read_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>error</name> <init>= <expr><call><name>os_translate_sys_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>non_blocking</name> <operator>&amp;&amp;</operator> <name>error</name> <operator>==</operator> <name>UV_EAGAIN</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error</name> <operator>==</operator> <name>UV_EINTR</name> <operator>||</operator> <name>error</name> <operator>==</operator> <name>UV_EAGAIN</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error</name> <operator>==</operator> <name>UV_ENOMEM</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_try_to_free</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>try_to_free_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_try_to_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>error</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_read_bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret_eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>read_bytes</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_READV</name></expr></argument>)</argument_list></call></expr></cpp:if>














<function><type><name>ptrdiff_t</name></type> <name>os_readv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret_eof</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>iov_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>non_blocking</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret_eof</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>read_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>did_try_to_free</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>toread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iov_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>toread</name> <operator>&lt;=</operator> <name>SIZE_MAX</name> <operator>-</operator> <name><name>iov</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>toread</name> <operator>+=</operator> <name><name>iov</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
</block_content>}</block></for>
<while>while <condition>(<expr><name>read_bytes</name> <operator>&lt;</operator> <name>toread</name> <operator>&amp;&amp;</operator> <name>iov_size</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>ret_eof</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>cur_read_bytes</name> <init>= <expr><call><name>readv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iov_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_read_bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret_eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_read_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>read_bytes</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>cur_read_bytes</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>iov_size</name> <operator>&amp;&amp;</operator> <name>cur_read_bytes</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cur_read_bytes</name> <operator>&lt;</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>cur_read_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_base</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>iov</name><operator>-&gt;</operator><name>iov_base</name></name> <operator>+</operator> <name>cur_read_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_read_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cur_read_bytes</name> <operator>-=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iov_size</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>iov</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cur_read_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>error</name> <init>= <expr><call><name>os_translate_sys_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>non_blocking</name> <operator>&amp;&amp;</operator> <name>error</name> <operator>==</operator> <name>UV_EAGAIN</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error</name> <operator>==</operator> <name>UV_EINTR</name> <operator>||</operator> <name>error</name> <operator>==</operator> <name>UV_EAGAIN</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error</name> <operator>==</operator> <name>UV_ENOMEM</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_try_to_free</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>try_to_free_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_try_to_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>error</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>read_bytes</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 









<function><type><name>ptrdiff_t</name></type> <name>os_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>non_blocking</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>written_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>written_bytes</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <name>written_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>cur_written_bytes</name> <init>= <expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>written_bytes</name></expr></argument>,
<argument><expr><call><name>IO_COUNT</name><argument_list>(<argument><expr><name>size</name> <operator>-</operator> <name>written_bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_written_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>written_bytes</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>cur_written_bytes</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_written_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>error</name> <init>= <expr><call><name>os_translate_sys_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>non_blocking</name> <operator>&amp;&amp;</operator> <name>error</name> <operator>==</operator> <name>UV_EAGAIN</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error</name> <operator>==</operator> <name>UV_EINTR</name> <operator>||</operator> <name>error</name> <operator>==</operator> <name>UV_EAGAIN</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_written_bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>UV_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>written_bytes</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>os_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_copyfile</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>new_path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>os_fsync</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_fsync</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_stats</name><operator>.</operator><name>fsync</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>os_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uv_stat_t</name> <modifier>*</modifier></type><name>statbuf</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2</function>)</block_content>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>UV_EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uv_fs_t</name></type> <name>request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>uv_fs_stat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>statbuf</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>statbuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uv_fs_req_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>




int32_t os_getperm(const char *name</block>)
<block>{<block_content>
<decl_stmt><decl><type><name>uv_stat_t</name></type> <name>statbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stat_result</name> <init>= <expr><call><name>os_stat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>stat_result</name> <operator>==</operator> <name>kLibuvSuccess</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>stat_result</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block>




<function><type><name>int</name></type> <name>os_setperm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_chmod</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>r</name> <operator>==</operator> <name>kLibuvSuccess</name></expr> ?</condition><then> <expr><name>OK</name></expr> </then><else>: <expr><name>FAIL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>os_chown</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>uv_uid_t</name></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>uv_gid_t</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_chown</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>os_fchown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uv_uid_t</name></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>uv_gid_t</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_fchown</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>os_path_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uv_stat_t</name></type> <name>statbuf</name></decl>;</decl_stmt>
<return>return <expr><call><name>os_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>kLibuvSuccess</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>os_file_settime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>atime</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>mtime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_utime</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>atime</name></expr></argument>, <argument><expr><name>mtime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>os_file_is_readable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_access</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>os_file_is_writable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_access</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>W_OK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>os_isdir</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>os_rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>new_path</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_rename</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>path</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>new_path</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>r</name> <operator>==</operator> <name>kLibuvSuccess</name></expr> ?</condition><then> <expr><name>OK</name></expr> </then><else>: <expr><name>FAIL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>os_mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_mkdir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type> <name>os_mkdir_recurse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>failed_dir</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dirlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>curdir</name> <init>= <expr><call><name>xmemdupz</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dirlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>past_head</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>get_past_head</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>curdir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>curdir</name> <operator>+</operator> <name>dirlen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>real_end</name> <init>= <expr><name>e</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>past_head_save</name> <init>= <expr><operator>*</operator><name>past_head</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>os_isdir</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>curdir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail_with_sep</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>curdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;=</operator> <name>past_head</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>past_head</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>e</name> <operator>!=</operator> <name>real_end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <name>past_head</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>PATHSEP</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>past_head</name> <operator>=</operator> <name>past_head_save</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>component_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>e</name> <operator>+=</operator> <name>component_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>real_end</name>
<operator>&amp;&amp;</operator> <call><name>memcnt</name><argument_list>(<argument><expr><name>e</name> <operator>-</operator> <name>component_len</name></expr></argument>, <argument><expr><name>PATHSEP</name></expr></argument>, <argument><expr><name>component_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>component_len</name></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>os_mkdir</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>failed_dir</name> <operator>=</operator> <name>curdir</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>os_mkdtemp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>template</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>uv_fs_t</name></type> <name>request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>uv_fs_mkdtemp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><name>template</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>kLibuvSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>TEMP_FILE_PATH_MAXLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>uv_fs_req_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>os_rmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_rmdir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>os_scandir</name><parameter_list>(<parameter><decl><type><name>Directory</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>uv_fs_scandir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>os_scandir_next</name><parameter_list>(<parameter><decl><type><name>Directory</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>uv_fs_scandir_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>err</name> <operator>!=</operator> <name>UV_EOF</name></expr> ?</condition><then> <expr><name><name>dir</name><operator>-&gt;</operator><name>ent</name><operator>.</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>os_closedir</name><parameter_list>(<parameter><decl><type><name>Directory</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>uv_fs_req_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>os_remove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RUN_UV_FS_FUNC</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uv_fs_unlink</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>os_fileinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>FileInfo</name> <modifier>*</modifier></type><name>file_info</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2</function>)
<block>{<block_content>
<return>return <expr><call><name>os_stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>file_info</name><operator>-&gt;</operator><name>stat</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>kLibuvSuccess</name></expr>;</return>
</block_content>}</block>






<function><type><name>bool</name></type> <name>os_fileinfo_link</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>FileInfo</name> <modifier>*</modifier></type><name>file_info</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2</function>)
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uv_fs_t</name></type> <name>request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>uv_fs_lstat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>file_info</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>statbuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uv_fs_req_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>result</name> <operator>==</operator> <name>kLibuvSuccess</name><operator>)</operator></expr>;</return>
</block_content>}</block>






<function><type><name>bool</name></type> <name>os_fileinfo_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file_descriptor</name></decl></parameter>, <parameter><decl><type><name>FileInfo</name> <modifier>*</modifier></type><name>file_info</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>uv_fs_t</name></type> <name>request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>uv_fs_fstat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><name>file_descriptor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>file_info</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>statbuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uv_fs_req_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>result</name> <operator>==</operator> <name>kLibuvSuccess</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>os_fileinfo_id_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileInfo</name> <modifier>*</modifier></type><name>file_info_1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FileInfo</name> <modifier>*</modifier></type><name>file_info_2</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<return>return <expr><name><name>file_info_1</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>st_ino</name></name> <operator>==</operator> <name><name>file_info_2</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>st_ino</name></name>
<operator>&amp;&amp;</operator> <name><name>file_info_1</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>st_dev</name></name> <operator>==</operator> <name><name>file_info_2</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>st_dev</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>os_fileinfo_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileInfo</name> <modifier>*</modifier></type><name>file_info</name></decl></parameter>, <parameter><decl><type><name>FileID</name> <modifier>*</modifier></type><name>file_id</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><name><name>file_id</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <name><name>file_info</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>st_ino</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_id</name><operator>-&gt;</operator><name>device_id</name></name> <operator>=</operator> <name><name>file_info</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>st_dev</name></name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>uint64_t</name></type> <name>os_fileinfo_inode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileInfo</name> <modifier>*</modifier></type><name>file_info</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<return>return <expr><name><name>file_info</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>st_ino</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>uint64_t</name></type> <name>os_fileinfo_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileInfo</name> <modifier>*</modifier></type><name>file_info</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<return>return <expr><name><name>file_info</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>st_size</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>uint64_t</name></type> <name>os_fileinfo_hardlinks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileInfo</name> <modifier>*</modifier></type><name>file_info</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<return>return <expr><name><name>file_info</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>st_nlink</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>uint64_t</name></type> <name>os_fileinfo_blocksize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileInfo</name> <modifier>*</modifier></type><name>file_info</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<return>return <expr><name><name>file_info</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>st_blksize</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>os_fileid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>FileID</name> <modifier>*</modifier></type><name>file_id</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>uv_stat_t</name></type> <name>statbuf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>os_stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>kLibuvSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>file_id</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_ino</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_id</name><operator>-&gt;</operator><name>device_id</name></name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_dev</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>os_fileid_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileID</name> <modifier>*</modifier></type><name>file_id_1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FileID</name> <modifier>*</modifier></type><name>file_id_2</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<return>return <expr><name><name>file_id_1</name><operator>-&gt;</operator><name>inode</name></name> <operator>==</operator> <name><name>file_id_2</name><operator>-&gt;</operator><name>inode</name></name>
<operator>&amp;&amp;</operator> <name><name>file_id_1</name><operator>-&gt;</operator><name>device_id</name></name> <operator>==</operator> <name><name>file_id_2</name><operator>-&gt;</operator><name>device_id</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>os_fileid_equal_fileinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileID</name> <modifier>*</modifier></type><name>file_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FileInfo</name> <modifier>*</modifier></type><name>file_info</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<return>return <expr><name><name>file_id</name><operator>-&gt;</operator><name>inode</name></name> <operator>==</operator> <name><name>file_info</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>st_ino</name></name>
<operator>&amp;&amp;</operator> <name><name>file_id</name><operator>-&gt;</operator><name>device_id</name></name> <operator>==</operator> <name><name>file_info</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>st_dev</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>




<function><type><name>char</name> <modifier>*</modifier></type><name>os_resolve_shortcut</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_MALLOC
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IPersistFile</name> <modifier>*</modifier></type><name>ppf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OLECHAR</name></type> <name><name>wsz</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rfname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IShellLinkW</name> <modifier>*</modifier></type><name>pslw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>ffdw</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rfname</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">4</literal> <operator>||</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>fname</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">".lnk"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rfname</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CoInitialize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CLSID_ShellLink</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>IID_IShellLinkW</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pslw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r</name> <init>= <expr><call><name>utf8_to_utf16</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><literal type="string">"utf8_to_utf16 failed: %d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pslw</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(
<argument><expr><name>pslw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IPersistFile</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ppf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>shortcut_errorw</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>ppf</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Load</name></name><argument_list>(<argument><expr><name>ppf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>STGM_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>shortcut_errorw</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
hr = pslw-&gt;lpVtbl-&gt;Resolve(pslw, NULL, SLR_NO_UI);
if (hr != S_OK) {
goto shortcut_errorw;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><name>wsz</name></expr></argument>, <argument><expr><name>MAX_PATH</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pslw</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetPath</name></name><argument_list>(<argument><expr><name>pslw</name></expr></argument>, <argument><expr><name>wsz</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ffdw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>S_OK</name> <operator>&amp;&amp;</operator> <name><name>wsz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r2</name> <init>= <expr><call><name>utf16_to_utf8</name><argument_list>(<argument><expr><name>wsz</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><literal type="string">"utf16_to_utf8 failed: %d"</literal></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>shortcut_errorw</name>:</label>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>shortcut_end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>shortcut_end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ppf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ppf</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>ppf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pslw</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>pslw</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>pslw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rfname</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
