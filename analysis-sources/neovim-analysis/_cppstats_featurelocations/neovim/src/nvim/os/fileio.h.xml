<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\os\fileio.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_OS_FILEIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_OS_FILEIO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/rbuffer.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>_error</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>rv</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>wr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>eof</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>non_blocking</name></decl>;</decl_stmt> 
}</block></struct></type> <name>FileDescriptor</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>kFileReadOnly</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>kFileCreate</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>kFileWriteOnly</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 

<decl><name>kFileNoSymlink</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 
<decl><name>kFileCreateOnly</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, 


<decl><name>kFileTruncate</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>, 


<decl><name>kFileAppend</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>, 

<decl><name>kFileNonBlocking</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>, 

}</block></enum></type> <name>FileOpenFlags</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>file_eof</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileDescriptor</name> <operator>*</operator><specifier>const</specifier> <name>fp</name></expr></argument>)</argument_list>
<name>REAL_FATTR_PURE</name> <name>REAL_FATTR_WARN_UNUSED_RESULT</name> <name>REAL_FATTR_NONNULL_ALL</name></decl>;</decl_stmt>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>file_eof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>fp</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <call><name>rbuffer_size</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>rv</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>file_fd</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileDescriptor</name> <operator>*</operator><specifier>const</specifier> <name>fp</name></expr></argument>)</argument_list>
<name>REAL_FATTR_PURE</name> <name>REAL_FATTR_WARN_UNUSED_RESULT</name> <name>REAL_FATTR_NONNULL_ALL</name></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>file_fd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>fp</name><operator>-&gt;</operator><name>fd</name></name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{



<decl><name>kRWBufferSize</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>
}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os/fileio.h.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
