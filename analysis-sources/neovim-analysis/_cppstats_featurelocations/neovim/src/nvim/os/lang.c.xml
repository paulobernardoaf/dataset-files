<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\os\lang.c">


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Boolean</name></cpp:macro> <cpp:value>CFBoolean</cpp:value></cpp:define> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CFLocale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CFString.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Boolean</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/lang.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>lang_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"LANG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang_region</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFTypeRef</name></type> <name>cf_lang_region</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFLocaleRef</name></type> <name>cf_locale</name> <init>= <expr><call><name>CFLocaleCopyCurrent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cf_locale</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cf_lang_region</name> <operator>=</operator> <call><name>CFLocaleGetValue</name><argument_list>(<argument><expr><name>cf_locale</name></expr></argument>, <argument><expr><name>kCFLocaleIdentifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRetain</name><argument_list>(<argument><expr><name>cf_lang_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lang_region</name> <operator>=</operator> <call><name>CFStringGetCStringPtr</name><argument_list>(<argument><expr><name>cf_lang_region</name></expr></argument>,
<argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cf_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>cf_langs</name> <init>= <expr><call><name>CFLocaleCopyPreferredLanguages</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cf_langs</name> <operator>&amp;&amp;</operator> <call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>cf_langs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cf_lang_region</name> <operator>=</operator> <call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>cf_langs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRetain</name><argument_list>(<argument><expr><name>cf_lang_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cf_langs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lang_region</name> <operator>=</operator> <call><name>CFStringGetCStringPtr</name><argument_list>(<argument><expr><name>cf_lang_region</name></expr></argument>,
<argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"$LANG is empty and your primary language cannot be inferred."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lang_region</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_setenv</name><argument_list>(<argument><expr><literal type="string">"LANG"</literal></expr></argument>, <argument><expr><name>lang_region</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CFStringGetCString</name><argument_list>(<argument><expr><name>cf_lang_region</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>,
<argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_setenv</name><argument_list>(<argument><expr><literal type="string">"LANG"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cf_lang_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
