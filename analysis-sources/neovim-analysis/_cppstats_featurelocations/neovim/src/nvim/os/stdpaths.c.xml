<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\os\stdpaths.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/stdpaths_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>xdg_env_vars</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>kXDGConfigHome</name></expr>]</index> <operator>=</operator> <literal type="string">"XDG_CONFIG_HOME"</literal></expr>,
<expr><index>[<expr><name>kXDGDataHome</name></expr>]</index> <operator>=</operator> <literal type="string">"XDG_DATA_HOME"</literal></expr>,
<expr><index>[<expr><name>kXDGCacheHome</name></expr>]</index> <operator>=</operator> <literal type="string">"XDG_CACHE_HOME"</literal></expr>,
<expr><index>[<expr><name>kXDGRuntimeDir</name></expr>]</index> <operator>=</operator> <literal type="string">"XDG_RUNTIME_DIR"</literal></expr>,
<expr><index>[<expr><name>kXDGConfigDirs</name></expr>]</index> <operator>=</operator> <literal type="string">"XDG_CONFIG_DIRS"</literal></expr>,
<expr><index>[<expr><name>kXDGDataDirs</name></expr>]</index> <operator>=</operator> <literal type="string">"XDG_DATA_DIRS"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>xdg_defaults_env_vars</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>kXDGConfigHome</name></expr>]</index> <operator>=</operator> <literal type="string">"LOCALAPPDATA"</literal></expr>,
<expr><index>[<expr><name>kXDGDataHome</name></expr>]</index> <operator>=</operator> <literal type="string">"LOCALAPPDATA"</literal></expr>,
<expr><index>[<expr><name>kXDGCacheHome</name></expr>]</index> <operator>=</operator> <literal type="string">"TEMP"</literal></expr>,
<expr><index>[<expr><name>kXDGRuntimeDir</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,
<expr><index>[<expr><name>kXDGConfigDirs</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,
<expr><index>[<expr><name>kXDGDataDirs</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>xdg_defaults</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><index>[<expr><name>kXDGConfigHome</name></expr>]</index> <operator>=</operator> <literal type="string">"~\\AppData\\Local"</literal></expr>,
<expr><index>[<expr><name>kXDGDataHome</name></expr>]</index> <operator>=</operator> <literal type="string">"~\\AppData\\Local"</literal></expr>,
<expr><index>[<expr><name>kXDGCacheHome</name></expr>]</index> <operator>=</operator> <literal type="string">"~\\AppData\\Local\\Temp"</literal></expr>,
<expr><index>[<expr><name>kXDGRuntimeDir</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,
<expr><index>[<expr><name>kXDGConfigDirs</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,
<expr><index>[<expr><name>kXDGDataDirs</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><index>[<expr><name>kXDGConfigHome</name></expr>]</index> <operator>=</operator> <literal type="string">"~/.config"</literal></expr>,
<expr><index>[<expr><name>kXDGDataHome</name></expr>]</index> <operator>=</operator> <literal type="string">"~/.local/share"</literal></expr>,
<expr><index>[<expr><name>kXDGCacheHome</name></expr>]</index> <operator>=</operator> <literal type="string">"~/.cache"</literal></expr>,
<expr><index>[<expr><name>kXDGRuntimeDir</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>,
<expr><index>[<expr><name>kXDGConfigDirs</name></expr>]</index> <operator>=</operator> <literal type="string">"/etc/xdg/"</literal></expr>,
<expr><index>[<expr><name>kXDGDataDirs</name></expr>]</index> <operator>=</operator> <literal type="string">"/usr/local/share/:/usr/share/"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>






<function><type><name>char</name> <modifier>*</modifier></type><name>stdpaths_get_xdg_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XDGVarType</name></type> <name>idx</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>env</name> <init>= <expr><name><name>xdg_env_vars</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fallback</name> <init>= <expr><name><name>xdg_defaults</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env_val</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>env_val</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>xdg_defaults_env_vars</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>env_val</name> <operator>=</operator> <call><name>os_getenv</name><argument_list>(<argument><expr><name><name>xdg_defaults_env_vars</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>env_val</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>os_env_exists</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>env_val</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>env_val</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>env_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fallback</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>expand_env_save</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>fallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>char</name> <modifier>*</modifier></type><name>get_xdg_home</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XDGVarType</name></type> <name>idx</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>stdpaths_get_xdg_var</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>concat_fnames_realloc</name><argument_list>(<argument><expr><name>dir</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>idx</name> <operator>==</operator> <name>kXDGDataHome</name></expr> ?</condition><then> <expr><literal type="string">"nvim-data"</literal></expr> </then><else>: <expr><literal type="string">"nvim"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>concat_fnames_realloc</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"nvim"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dir</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char</name> <modifier>*</modifier></type><name>stdpaths_user_conf_subpath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<return>return <expr><call><name>concat_fnames_realloc</name><argument_list>(<argument><expr><call><name>get_xdg_home</name><argument_list>(<argument><expr><name>kXDGConfigHome</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>char</name> <modifier>*</modifier></type><name>stdpaths_user_data_subpath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>trailing_pathseps</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>escape_commas</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>concat_fnames_realloc</name><argument_list>(<argument><expr><call><name>get_xdg_home</name><argument_list>(<argument><expr><name>kXDGDataHome</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>numcommas</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>escape_commas</name></expr> ?</condition><then> <expr><call><name>memcnt</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>numcommas</name> <operator>||</operator> <name>trailing_pathseps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>trailing_pathseps</name> <operator>+</operator> <name>numcommas</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>+</operator> <name>numcommas</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ret</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ret</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>i</name> <operator>+</operator> <name>numcommas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>trailing_pathseps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name>numcommas</name></expr></argument>, <argument><expr><name>PATHSEP</name></expr></argument>, <argument><expr><name>trailing_pathseps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>len</name> <operator>+</operator> <name>trailing_pathseps</name> <operator>+</operator> <name>numcommas</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
