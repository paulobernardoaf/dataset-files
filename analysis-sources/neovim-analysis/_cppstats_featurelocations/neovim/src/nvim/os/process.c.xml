<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\os\process.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tlhelp32.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/user.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/globals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os/process.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>os_proc_tree_kill_rec</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>process</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>PROCESSENTRY32</name></type> <name>pe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>pid</name> <init>= <expr><call><name>GetProcessId</name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>CreateToolhelp32Snapshot</name><argument_list>(<argument><expr><name>TH32CS_SNAPPROCESS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pe</name><operator>.</operator><name>dwSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PROCESSENTRY32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Process32First</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>.</operator><name>th32ParentProcessID</name></name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>ph</name> <init>= <expr><call><name>OpenProcess</name><argument_list>(<argument><expr><name>PROCESS_ALL_ACCESS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>pe</name><operator>.</operator><name>th32ProcessID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ph</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_proc_tree_kill_rec</name><argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>Process32Next</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>
<return>return <expr><operator>(</operator><name>bool</name><operator>)</operator><call><name>TerminateProcess</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>sig</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>os_proc_tree_kill</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sig</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sig</name> <operator>==</operator> <name>SIGTERM</name> <operator>||</operator> <name>sig</name> <operator>==</operator> <name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ILOG</name><argument_list>(<argument><expr><literal type="string">"terminating process tree: %d"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>OpenProcess</name><argument_list>(<argument><expr><name>PROCESS_ALL_ACCESS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>os_proc_tree_kill_rec</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid pid: %d"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>bool</name></type> <name>os_proc_tree_kill</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sig</name> <operator>==</operator> <name>SIGTERM</name> <operator>||</operator> <name>sig</name> <operator>==</operator> <name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ILOG</name><argument_list>(<argument><expr><literal type="string">"sending %s to PID %d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>sig</name> <operator>==</operator> <name>SIGTERM</name></expr> ?</condition><then> <expr><literal type="string">"SIGTERM"</literal></expr> </then><else>: <expr><literal type="string">"SIGKILL"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>-</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>uv_kill</name><argument_list>(<argument><expr><operator>-</operator><name>pid</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>int</name></type> <name>os_proc_children</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ppid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>proc_list</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>proc_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ppid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>proc_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>proc_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PROCESSENTRY32</name></type> <name>pe</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>CreateToolhelp32Snapshot</name><argument_list>(<argument><expr><name>TH32CS_SNAPPROCESS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pe</name><operator>.</operator><name>dwSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PROCESSENTRY32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Process32First</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>.</operator><name>th32ParentProcessID</name></name> <operator>==</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>ppid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>proc_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><operator>*</operator><name>proc_count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pe</name><operator>.</operator><name>th32ProcessID</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>proc_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>Process32Next</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BSD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_PID</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o.kp_proc.p_pid</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_PPID</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o.kp_eproc.e_ppid</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_PID</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o.ki_pid</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_PPID</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o.ki_ppid</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_PID</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o.p_pid</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KP_PPID</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o.p_ppid</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>name</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>CTL_KERN</name></expr>, <expr><name>KERN_PROC2</name></expr>, <expr><name>KERN_PROC_ALL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>kinfo_proc2</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>name</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>CTL_KERN</name></expr>, <expr><name>KERN_PROC</name></expr>, <expr><name>KERN_PROC_ALL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>sysctl</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_proc2</name></name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sysctl</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>exists</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>p_count</name> <init>= <expr><name>len</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_list</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>p_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>exists</name> <operator>=</operator> <name>exists</name> <operator>||</operator> <call><name>KP_PID</name><argument_list>(<argument><expr><name><name>p_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ppid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>KP_PPID</name><argument_list>(<argument><expr><name><name>p_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ppid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>proc_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><operator>*</operator><name>proc_count</name></expr>]</index></name> <operator>=</operator> <call><name>KP_PID</name><argument_list>(<argument><expr><name><name>p_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>proc_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exists</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>char</name></type> <name><name>proc_p</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>proc_p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proc_p</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/proc/%d/task/%d/children"</literal></expr></argument>, <argument><expr><name>ppid</name></expr></argument>, <argument><expr><name>ppid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>proc_p</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match_pid</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>fscanf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>match_pid</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>proc_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><operator>*</operator><name>proc_count</name></expr>]</index></name> <operator>=</operator> <name>match_pid</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>proc_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>proc_list</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>Dictionary</name></type> <name>os_proc_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>pinfo</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PROCESSENTRY32</name></type> <name>pe</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>CreateToolhelp32Snapshot</name><argument_list>(<argument><expr><name>TH32CS_SNAPPROCESS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>pinfo</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pe</name><operator>.</operator><name>dwSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PROCESSENTRY32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Process32First</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pinfo</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>.</operator><name>th32ProcessID</name></name> <operator>==</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>pid</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>Process32Next</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>.</operator><name>th32ProcessID</name></name> <operator>==</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>pid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>pinfo</name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>pinfo</name></expr></argument>, <argument><expr><literal type="string">"ppid"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pe</name><operator>.</operator><name>th32ParentProcessID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>pinfo</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name><name>pe</name><operator>.</operator><name>szExeFile</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>pinfo</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>bool</name></type> <name>os_proc_running</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>uv_kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
