<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\os\pty_process_unix.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libutil.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pty.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/klist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/rstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/wstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/pty_process_unix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os/pty_process_unix.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>termios</name></name></type> <name>termios_default</name></decl>;</decl_stmt>




<function><type><name>void</name></type> <name>pty_process_save_termios</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tty_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"tty_fd=%d"</literal></expr></argument>, <argument><expr><name>tty_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tty_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <call><name>tcgetattr</name><argument_list>(<argument><expr><name>tty_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>termios_default</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>pty_process_spawn</name><parameter_list>(<parameter><decl><type><name>PtyProcess</name> <modifier>*</modifier></type><name>ptyproc</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>termios_default</name><operator>.</operator><name>c_cflag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_termios</name><argument_list>(<argument><expr><operator>&amp;</operator><name>termios_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>(</operator><name>Process</name> <operator>*</operator><operator>)</operator><name>ptyproc</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>err</name><operator>.</operator><name>closed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uv_signal_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>loop</name><operator>-&gt;</operator><name>children_watcher</name></name></expr></argument>, <argument><expr><name>chld_handler</name></expr></argument>, <argument><expr><name>SIGCHLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>winsize</name></name> <operator>=</operator> <operator>(</operator>struct <name>winsize</name><operator>)</operator><block>{ <expr><name><name>ptyproc</name><operator>-&gt;</operator><name>height</name></name></expr>, <expr><name><name>ptyproc</name><operator>-&gt;</operator><name>width</name></name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uv_disable_stdio_inheritance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>master</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><call><name>forkpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>master</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>termios_default</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptyproc</name><operator>-&gt;</operator><name>winsize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"forkpty failed: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_child</name><argument_list>(<argument><expr><name>ptyproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>master_status_flags</name> <init>= <expr><call><name>fcntl</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>master_status_flags</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"Failed to get master descriptor status flags: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>master_status_flags</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"Failed to make master descriptor non-blocking: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>os_set_cloexec</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"Failed to set CLOEXEC on ptmx file descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>closed</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>=</operator> <call><name>set_duplicating_descriptor</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>closed</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>=</operator> <call><name>set_duplicating_descriptor</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>tty_fd</name></name> <operator>=</operator> <name>master</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waitpid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pty_process_tty_name</name><parameter_list>(<parameter><decl><type><name>PtyProcess</name> <modifier>*</modifier></type><name>ptyproc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ptsname</name><argument_list>(<argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>tty_fd</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pty_process_resize</name><parameter_list>(<parameter><decl><type><name>PtyProcess</name> <modifier>*</modifier></type><name>ptyproc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>winsize</name></name> <operator>=</operator> <operator>(</operator>struct <name>winsize</name><operator>)</operator><block>{ <expr><name>height</name></expr>, <expr><name>width</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>tty_fd</name></name></expr></argument>, <argument><expr><name>TIOCSWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptyproc</name><operator>-&gt;</operator><name>winsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pty_process_close</name><parameter_list>(<parameter><decl><type><name>PtyProcess</name> <modifier>*</modifier></type><name>ptyproc</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>pty_process_close_master</name><argument_list>(<argument><expr><name>ptyproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>(</operator><name>Process</name> <operator>*</operator><operator>)</operator><name>ptyproc</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>internal_close_cb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>proc</name><operator>-&gt;</operator><name>internal_close_cb</name></name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pty_process_close_master</name><parameter_list>(<parameter><decl><type><name>PtyProcess</name> <modifier>*</modifier></type><name>ptyproc</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ptyproc</name><operator>-&gt;</operator><name>tty_fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>tty_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>tty_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pty_process_teardown</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>uv_signal_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>children_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_child</name><parameter_list>(<parameter><decl><type><name>PtyProcess</name> <modifier>*</modifier></type><name>ptyproc</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>

<expr_stmt><expr><call><name>setsid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_unsetenv</name><argument_list>(<argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_unsetenv</name><argument_list>(<argument><expr><literal type="string">"LINES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_unsetenv</name><argument_list>(<argument><expr><literal type="string">"TERMCAP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_unsetenv</name><argument_list>(<argument><expr><literal type="string">"COLORTERM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_unsetenv</name><argument_list>(<argument><expr><literal type="string">"COLORFGBG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>(</operator><name>Process</name> <operator>*</operator><operator>)</operator><name>ptyproc</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>cwd</name></name> <operator>&amp;&amp;</operator> <call><name>os_chdir</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>cwd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"chdir failed: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prog</name> <init>= <expr><name><name>ptyproc</name><operator>-&gt;</operator><name>process</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>os_setenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>term_name</name></name></expr> ?</condition><then> <expr><name><name>ptyproc</name><operator>-&gt;</operator><name>term_name</name></name></expr> </then><else>: <expr><literal type="string">"ansi"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>execvp</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>process</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"execvp failed: %s: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">122</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_termios</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type><name>termios</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL
<block>{<block_content>

<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_iflag</name></name> <operator>=</operator> <name>ICRNL</name><operator>|</operator><name>IXON</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_oflag</name></name> <operator>=</operator> <name>OPOST</name><operator>|</operator><name>ONLCR</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TAB0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_oflag</name></name> <operator>|=</operator> <name>TAB0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cflag</name></name> <operator>=</operator> <name>CS8</name><operator>|</operator><name>CREAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_lflag</name></name> <operator>=</operator> <name>ISIG</name><operator>|</operator><name>ICANON</name><operator>|</operator><name>IEXTEN</name><operator>|</operator><name>ECHO</name><operator>|</operator><name>ECHOE</name><operator>|</operator><name>ECHOK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cfsetspeed</name><argument_list>(<argument><expr><name>termios</name></expr></argument>, <argument><expr><literal type="number">38400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IUTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_iflag</name></name> <operator>|=</operator> <name>IUTF8</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NL0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_oflag</name></name> <operator>|=</operator> <name>NL0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CR0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_oflag</name></name> <operator>|=</operator> <name>CR0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BS0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_oflag</name></name> <operator>|=</operator> <name>BS0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VT0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_oflag</name></name> <operator>|=</operator> <name>VT0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FF0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_oflag</name></name> <operator>|=</operator> <name>FF0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHOCTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_lflag</name></name> <operator>|=</operator> <name>ECHOCTL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHOKE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_lflag</name></name> <operator>|=</operator> <name>ECHOKE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VINTR</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x1f</literal> <operator>&amp;</operator> <literal type="char">'C'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VQUIT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x1f</literal> <operator>&amp;</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VERASE</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VKILL</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x1f</literal> <operator>&amp;</operator> <literal type="char">'U'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VEOF</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x1f</literal> <operator>&amp;</operator> <literal type="char">'D'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VEOL</name></expr>]</index></name> <operator>=</operator> <name>_POSIX_VDISABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VEOL2</name></expr>]</index></name> <operator>=</operator> <name>_POSIX_VDISABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VSTART</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x1f</literal> <operator>&amp;</operator> <literal type="char">'Q'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VSTOP</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x1f</literal> <operator>&amp;</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VSUSP</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x1f</literal> <operator>&amp;</operator> <literal type="char">'Z'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VREPRINT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x1f</literal> <operator>&amp;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VWERASE</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x1f</literal> <operator>&amp;</operator> <literal type="char">'W'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VLNEXT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x1f</literal> <operator>&amp;</operator> <literal type="char">'V'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>termios</name><operator>-&gt;</operator><name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_duplicating_descriptor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uv_pipe_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fd_dup</name> <init>= <expr><call><name>dup</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fd_dup</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"Failed to dup descriptor %d: %s"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_set_cloexec</name><argument_list>(<argument><expr><name>fd_dup</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"Failed to set CLOEXEC on duplicate fd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>uv_pipe_open</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>, <argument><expr><name>fd_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"Failed to set pipe to descriptor %d: %s"</literal></expr></argument>,
<argument><expr><name>fd_dup</name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>status</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>chld_handler</name><parameter_list>(<parameter><decl><type><name>uv_signal_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>stat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>loop</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<macro><name>kl_iter</name><argument_list>(<argument>WatcherPtr</argument>, <argument>loop-&gt;children</argument>, <argument>current</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>current</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>waitpid</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WIFEXITED</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">128</literal> <operator>+</operator> <call><name>WTERMSIG</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>proc</name><operator>-&gt;</operator><name>internal_exit_cb</name></name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>
</unit>
