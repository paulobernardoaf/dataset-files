<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\context.c">




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/encode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/shada.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"context.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>kCtxAll</name> <init>= <expr><operator>(</operator><name>kCtxRegs</name> <operator>|</operator> <name>kCtxJumps</name> <operator>|</operator> <name>kCtxBufs</name> <operator>|</operator> <name>kCtxGVars</name> <operator>|</operator> <name>kCtxSFuncs</name>
<operator>|</operator> <name>kCtxFuncs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ContextVec</name></type> <name>ctx_stack</name> <init>= <expr><name>KV_INITIAL_VALUE</name></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>ctx_free_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>ctx_stack</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ctx_free</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>kv_A</name><argument_list>(<argument><expr><name>ctx_stack</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name>ctx_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>ctx_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>kv_size</name><argument_list>(<argument><expr><name>ctx_stack</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>Context</name> <modifier>*</modifier></type><name>ctx_get</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>ctx_stack</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><call><name>kv_Z</name><argument_list>(<argument><expr><name>ctx_stack</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>ctx_free</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>regs</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_sbuffer_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>jumps</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_sbuffer_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>jumps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>bufs</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_sbuffer_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>gvars</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_sbuffer_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gvars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>items</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>funcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>ctx_save</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name>ctx_stack</name></expr></argument>, <argument><expr><name>CONTEXT_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>&amp;</operator><call><name>kv_last</name><argument_list>(<argument><expr><name>ctx_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kCtxRegs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctx_save_regs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kCtxJumps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctx_save_jumps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kCtxBufs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctx_save_bufs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kCtxGVars</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctx_save_gvars</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kCtxFuncs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctx_save_funcs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kCtxSFuncs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctx_save_funcs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>










<function><type><name>bool</name></type> <name>ctx_restore</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>free_ctx</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx_stack</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>&amp;</operator><call><name>kv_pop</name><argument_list>(<argument><expr><name>ctx_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>free_ctx</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>op_shada</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"shada"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op_shada</name></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"shada"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="string">"!,'100,%"</literal></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kCtxRegs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctx_restore_regs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kCtxJumps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctx_restore_jumps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kCtxBufs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctx_restore_bufs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kCtxGVars</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctx_restore_gvars</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kCtxFuncs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctx_restore_funcs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>free_ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctx_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"shada"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>op_shada</name></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>op_shada</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ctx_save_regs</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>msgpack_sbuffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shada_encode_regs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ctx_restore_regs</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>shada_read_sbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>, <argument><expr><name>kShaDaWantInfo</name> <operator>|</operator> <name>kShaDaForceit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ctx_save_jumps</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>msgpack_sbuffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>jumps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shada_encode_jumps</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>jumps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ctx_restore_jumps</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>shada_read_sbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>jumps</name></name></expr></argument>, <argument><expr><name>kShaDaWantInfo</name> <operator>|</operator> <name>kShaDaForceit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ctx_save_bufs</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>msgpack_sbuffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shada_encode_buflist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ctx_restore_bufs</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>shada_read_sbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bufs</name></name></expr></argument>, <argument><expr><name>kShaDaWantInfo</name> <operator>|</operator> <name>kShaDaForceit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ctx_save_gvars</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>msgpack_sbuffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gvars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shada_encode_gvars</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gvars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ctx_restore_gvars</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>shada_read_sbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gvars</name></name></expr></argument>, <argument><expr><name>kShaDaWantInfo</name> <operator>|</operator> <name>kShaDaForceit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ctx_save_funcs</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>scriptonly</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>funcs</name></name> <operator>=</operator> <operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>

<macro><name>HASHTAB_ITER</name><argument_list>(<argument>&amp;func_hashtab</argument>, <argument>hi</argument>, <argument>{
const char_u *const name = hi-&gt;hi_key;
bool islambda = (STRNCMP(name, <literal type="string">"&lt;lambda&gt;"</literal>, <literal type="number">8</literal>) == <literal type="number">0</literal>);
bool isscript = (name[<literal type="number">0</literal>] == K_SPECIAL);

if (!islambda &amp;&amp; (!scriptonly || isscript)) {
size_t cmd_len = sizeof(<literal type="string">"func! "</literal>) + STRLEN(name);
char *cmd = xmalloc(cmd_len);
snprintf(cmd, cmd_len, <literal type="string">"func! %s"</literal>, name);
String func_body = nvim_exec(cstr_as_string(cmd), true, &amp;err);
xfree(cmd);
if (!ERROR_SET(&amp;err)) {
ADD(ctx-&gt;funcs, STRING_OBJ(func_body));
}
api_clear_error(&amp;err);
}
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ctx_restore_funcs</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>funcs</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Array</name></type> <name>sbuf_to_array</name><parameter_list>(<parameter><decl><type><name>msgpack_sbuffer</name></type> <name>sbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><name>kListLenMayKnow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sbuf</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>encode_list_write</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>sbuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sbuf</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>list_tv</name> <init>= <expr><operator>(</operator><name>typval_T</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>v_lock</name> <operator>=</operator> <name>VAR_UNLOCKED</name></expr>,
<expr><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_LIST</name></expr>,
<expr><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <name>list</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>array</name> <init>= <expr><call><name>vim_to_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list_tv</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>array</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>msgpack_sbuffer</name></type> <name>array_to_sbuf</name><parameter_list>(<parameter><decl><type><name>Array</name></type> <name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>msgpack_sbuffer</name></type> <name>sbuf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msgpack_sbuffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>list_tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>object_to_vim</name><argument_list>(<argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>list_tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>encode_vim_list_to_buf</name><argument_list>(<argument><expr><name><name>list_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbuf</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E474: Failed to convert list to msgpack string buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sbuf</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <name><name>sbuf</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sbuf</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>Dictionary</name></type> <name>ctx_to_dict</name><parameter_list>(<parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Dictionary</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"regs"</literal></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><call><name>sbuf_to_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>regs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"jumps"</literal></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><call><name>sbuf_to_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jumps</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"bufs"</literal></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><call><name>sbuf_to_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bufs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"gvars"</literal></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><call><name>sbuf_to_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gvars</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"funcs"</literal></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><call><name>copy_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>funcs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>ctx_from_dict</name><parameter_list>(<parameter><decl><type><name>Dictionary</name></type> <name>dict</name></decl></parameter>, <parameter><decl><type><name>Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>types</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dict</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>KeyValuePair</name></type> <name>item</name> <init>= <expr><name><name>dict</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>value</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeArray</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>key</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"regs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>types</name> <operator>|=</operator> <name>kCtxRegs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>regs</name></name> <operator>=</operator> <call><name>array_to_sbuf</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>key</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"jumps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>types</name> <operator>|=</operator> <name>kCtxJumps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jumps</name></name> <operator>=</operator> <call><name>array_to_sbuf</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>key</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"bufs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>types</name> <operator>|=</operator> <name>kCtxBufs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bufs</name></name> <operator>=</operator> <call><name>array_to_sbuf</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>key</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"gvars"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>types</name> <operator>|=</operator> <name>kCtxGVars</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gvars</name></name> <operator>=</operator> <call><name>array_to_sbuf</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>key</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"funcs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>types</name> <operator>|=</operator> <name>kCtxFuncs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>funcs</name></name> <operator>=</operator> <call><name>copy_object</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>types</name></expr>;</return>
</block_content>}</block></function>
</unit>
