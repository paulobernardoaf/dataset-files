<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\eval\typval_encode.h">



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_EVAL_TYPVAL_ENCODE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_EVAL_TYPVAL_ENCODE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kvec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>


<typedef>typedef <type><enum>enum <block>{
<decl><name>kMPConvDict</name></decl>, 
<decl><name>kMPConvList</name></decl>, 
<decl><name>kMPConvPairs</name></decl>, 
<decl><name>kMPConvPartial</name></decl>, 
<decl><name>kMPConvPartialList</name></decl>, 
}</block></enum></type> <name>MPConvStackValType</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>kMPConvPartialArgs</name></decl>, 
<decl><name>kMPConvPartialSelf</name></decl>, 
<decl><name>kMPConvPartialEnd</name></decl>, 
}</block></enum></type> <name>MPConvPartialStage</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>MPConvStackValType</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>saved_copyID</name></decl>;</decl_stmt> 
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>dictp</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>todo</name></decl>;</decl_stmt> 
}</block> <decl><name>d</name></decl>;</struct> 
<struct>struct <block>{
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt> 
}</block> <decl><name>l</name></decl>;</struct> 
<struct>struct <block>{
<decl_stmt><decl><type><name>MPConvPartialStage</name></type> <name>stage</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt> 
}</block> <decl><name>p</name></decl>;</struct> 
<struct>struct <block>{
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>todo</name></decl>;</decl_stmt> 
}</block> <decl><name>a</name></decl>;</struct> 
}</block> <decl><name>data</name></decl>;</union> 
}</block></struct></type> <name>MPConvStackVal</name>;</typedef>


<typedef>typedef <macro><name>kvec_withinit_t</name><argument_list>(<argument>MPConvStackVal</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>MPConvStack</name></expr>;</expr_stmt></typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mp_size</name></cpp:macro> <cpp:value>kv_size</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mp_init</name></cpp:macro> <cpp:value>kvi_init</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mp_destroy</name></cpp:macro> <cpp:value>kvi_destroy</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mp_push</name></cpp:macro> <cpp:value>kvi_push</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mp_pop</name></cpp:macro> <cpp:value>kv_pop</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mp_last</name></cpp:macro> <cpp:value>kv_last</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>tv_strlen</name><argument_list>(<argument><expr><specifier>const</specifier> <name>typval_T</name> <operator>*</operator><specifier>const</specifier> <name>tv</name></expr></argument>)</argument_list>
<name>REAL_FATTR_ALWAYS_INLINE</name> <name>REAL_FATTR_PURE</name> <name>REAL_FATTR_WARN_UNUSED_RESULT</name>
<name>REAL_FATTR_NONNULL_ALL</name></decl>;</decl_stmt>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>tv_strlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name></expr>
?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TYPVAL_ENCODE_DO_CHECK_SELF_REFERENCE</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>copyID_attr</name></type></parameter>, <parameter><type><name>copyID</name></type></parameter>, <parameter><type><name>conv_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const int te_csr_ret = _TYPVAL_ENCODE_CHECK_SELF_REFERENCE( TYPVAL_ENCODE_FIRST_ARG_NAME, (val), &amp;(val)-&gt;copyID_attr, mpstack, copyID, conv_type, objname); if (te_csr_ret != NOTDONE) { return te_csr_ret; } } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TYPVAL_ENCODE_FUNC_NAME_INNER_2</name><parameter_list>(<parameter><type><name>pref</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>suf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pref##name##suf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TYPVAL_ENCODE_FUNC_NAME_INNER</name><parameter_list>(<parameter><type><name>pref</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>suf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TYPVAL_ENCODE_FUNC_NAME_INNER_2(pref, name, suf)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TYPVAL_ENCODE_FUNC_NAME</name><parameter_list>(<parameter><type><name>pref</name></type></parameter>, <parameter><type><name>suf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TYPVAL_ENCODE_FUNC_NAME_INNER(pref, TYPVAL_ENCODE_NAME, suf)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TYPVAL_ENCODE_CHECK_SELF_REFERENCE</name></cpp:macro> <cpp:value>_TYPVAL_ENCODE_FUNC_NAME(_typval_encode_, _check_self_reference)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TYPVAL_ENCODE_ENCODE</name></cpp:macro> <cpp:value>_TYPVAL_ENCODE_FUNC_NAME(encode_vim_to_, )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TYPVAL_ENCODE_CONVERT_ONE_VALUE</name></cpp:macro> <cpp:value>_TYPVAL_ENCODE_FUNC_NAME(_typval_encode_, _convert_one_value)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_NODICT_VAR</name></cpp:macro> <cpp:value>_TYPVAL_ENCODE_FUNC_NAME(_typval_encode_, _nodict_var)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
