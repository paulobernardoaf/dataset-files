<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\eval\typval_encode.c.h">










































































































































































































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kvec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/encode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval_encode.h"</cpp:file></cpp:include>





<decl_stmt><decl><type><specifier>const</specifier> <name>dict_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>TYPVAL_ENCODE_NODICT_VAR</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>_TYPVAL_ENCODE_CHECK_SELF_REFERENCE</name><argument_list>(
<argument><expr><name>TYPVAL_ENCODE_FIRST_ARG_TYPE</name> <name>TYPVAL_ENCODE_FIRST_ARG_NAME</name></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><specifier>const</specifier> <name>val</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><specifier>const</specifier> <name>val_copyID</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>MPConvStack</name> <operator>*</operator><specifier>const</specifier> <name>mpstack</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>copyID</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>MPConvStackValType</name> <name>conv_type</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name>objname</name></expr></argument>)</argument_list>
<name>REAL_FATTR_NONNULL_ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list> <name>REAL_FATTR_WARN_UNUSED_RESULT</name>
<name>REAL_FATTR_ALWAYS_INLINE</name></decl>;</decl_stmt>















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>_TYPVAL_ENCODE_CHECK_SELF_REFERENCE</name><parameter_list>(
<parameter><decl><type><name>TYPVAL_ENCODE_FIRST_ARG_TYPE</name></type> <name>TYPVAL_ENCODE_FIRST_ARG_NAME</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>val_copyID</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MPConvStack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mpstack</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>copyID</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MPConvStackValType</name></type> <name>conv_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>objname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>val_copyID</name> <operator>==</operator> <name>copyID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_RECURSE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>conv_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>val_copyID</name> <operator>=</operator> <name>copyID</name></expr>;</expr_stmt>
<return>return <expr><name>NOTDONE</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_TYPVAL_ENCODE_CONVERT_ONE_VALUE</name><argument_list>(
<argument><expr><name>TYPVAL_ENCODE_FIRST_ARG_TYPE</name> <name>TYPVAL_ENCODE_FIRST_ARG_NAME</name></expr></argument>,
<argument><expr><name>MPConvStack</name> <operator>*</operator><specifier>const</specifier> <name>mpstack</name></expr></argument>, <argument><expr><name>MPConvStackVal</name> <operator>*</operator><specifier>const</specifier> <name>cur_mpsv</name></expr></argument>,
<argument><expr><name>typval_T</name> <operator>*</operator><specifier>const</specifier> <name>tv</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>copyID</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name>objname</name></expr></argument>)</argument_list>
<name>REAL_FATTR_NONNULL_ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list> <name>REAL_FATTR_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>


















<function><type><specifier>static</specifier> <name>int</name></type> <name>_TYPVAL_ENCODE_CONVERT_ONE_VALUE</name><parameter_list>(
<parameter><decl><type><name>TYPVAL_ENCODE_FIRST_ARG_TYPE</name></type> <name>TYPVAL_ENCODE_FIRST_ARG_NAME</name></decl></parameter>,
<parameter><decl><type><name>MPConvStack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mpstack</name></decl></parameter>, <parameter><decl><type><name>MPConvStackVal</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cur_mpsv</name></decl></parameter>,
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>copyID</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>objname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VAR_STRING</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_STRING</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>, <argument><expr><call><name>tv_strlen</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VAR_NUMBER</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_NUMBER</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VAR_FLOAT</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_FLOAT</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VAR_FUNC</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_FUNC_START</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_FUNC_BEFORE_ARGS</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_FUNC_BEFORE_SELF</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_FUNC_END</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VAR_PARTIAL</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pt</name> <init>= <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_FUNC_START</name><argument_list>( 
<argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>pt</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>partial_name</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>_mp_push</name><argument_list>(<argument>*mpstack</argument>, <argument>((MPConvStackVal) { 
.type = kMPConvPartial,
.tv = tv,
.saved_copyID = copyID - <literal type="number">1</literal>,
.data = {
.p = {
.stage = kMPConvPartialArgs,
.pt = tv-&gt;vval.v_partial,
},
},
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VAR_LIST</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>tv_list_len</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_EMPTY_LIST</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>saved_copyID</name> <init>= <expr><call><name>tv_list_copyid</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_TYPVAL_ENCODE_DO_CHECK_SELF_REFERENCE</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>lv_copyID</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>,
<argument><expr><name>kMPConvList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_LIST_START</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><call><name>tv_list_len</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>saved_copyID</name> <operator>!=</operator> <name>copyID</name> <operator>&amp;&amp;</operator> <name>saved_copyID</name> <operator>!=</operator> <name>copyID</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>_mp_push</name><argument_list>(<argument>*mpstack</argument>, <argument>((MPConvStackVal) {
.type = kMPConvList,
.tv = tv,
.saved_copyID = saved_copyID,
.data = {
.l = {
.list = tv-&gt;vval.v_list,
.li = tv_list_first(tv-&gt;vval.v_list),
},
},
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_REAL_LIST_AFTER_START</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><call><name>_mp_last</name><argument_list>(<argument><expr><operator>*</operator><name>mpstack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VAR_SPECIAL</name></expr>:</case> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_special</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kSpecialVarNull</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_NIL</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kSpecialVarTrue</name></expr>:</case>
<case>case <expr><name>kSpecialVarFalse</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_BOOL</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_special</name></name> <operator>==</operator> <name>kSpecialVarTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VAR_DICT</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_EMPTY_DICT</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dictitem_T</name> <modifier>*</modifier></type><name>type_di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dictitem_T</name> <modifier>*</modifier></type><name>val_di</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>TYPVAL_ENCODE_ALLOW_SPECIALS</name>
<operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name> <operator>==</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>type_di</name> <operator>=</operator> <call><name>tv_dict_find</name><argument_list>(<argument><expr><operator>(</operator><name>dict_T</name> <operator>*</operator><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>,
<argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"_TYPE"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>type_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>val_di</name> <operator>=</operator> <call><name>tv_dict_find</name><argument_list>(<argument><expr><operator>(</operator><name>dict_T</name> <operator>*</operator><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>,
<argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"_VAL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>eval_msgpack_type_lists</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>type_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name><name>eval_msgpack_type_lists</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>eval_msgpack_type_lists</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>_convert_one_value_regular_dict</name>;</goto>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>(</operator><name>MessagePackType</name><operator>)</operator><name>i</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kMPNil</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_NIL</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kMPBoolean</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_NUMBER</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>_convert_one_value_regular_dict</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_BOOL</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kMPInteger</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>list_T</name> <modifier>*</modifier></type><name>val_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>highest_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>high_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>low_bits</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name>
<operator>||</operator> <call><name>tv_list_len</name><argument_list>(<argument><expr><name>val_list</name> <operator>=</operator> <name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>_convert_one_value_regular_dict</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>listitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>sign_li</name> <init>= <expr><call><name>tv_list_first</name><argument_list>(<argument><expr><name>val_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>sign_li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_type</name> <operator>!=</operator> <name>VAR_NUMBER</name>
<operator>||</operator> <operator>(</operator><name>sign</name> <operator>=</operator> <call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>sign_li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>_convert_one_value_regular_dict</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>listitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>highest_bits_li</name> <init>= <expr><operator>(</operator>
<call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name>val_list</name></expr></argument>, <argument><expr><name>sign_li</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>highest_bits_li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_type</name> <operator>!=</operator> <name>VAR_NUMBER</name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>highest_bits</name>
<operator>=</operator> <call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>highest_bits_li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name><operator>)</operator>
<operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>_convert_one_value_regular_dict</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>listitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>high_bits_li</name> <init>= <expr><operator>(</operator>
<call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name>val_list</name></expr></argument>, <argument><expr><name>highest_bits_li</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>high_bits_li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_type</name> <operator>!=</operator> <name>VAR_NUMBER</name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>high_bits</name> <operator>=</operator> <call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>high_bits_li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name><operator>)</operator>
<operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>_convert_one_value_regular_dict</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>listitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>low_bits_li</name> <init>= <expr><call><name>tv_list_last</name><argument_list>(<argument><expr><name>val_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>low_bits_li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_type</name> <operator>!=</operator> <name>VAR_NUMBER</name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>low_bits</name> <operator>=</operator> <call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>low_bits_li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name><operator>)</operator>
<operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>_convert_one_value_regular_dict</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>number</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>highest_bits</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">62</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>high_bits</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>low_bits</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_UNSIGNED_NUMBER</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_NUMBER</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>-</operator><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kMPFloat</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>_convert_one_value_regular_dict</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_FLOAT</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kMPString</name></expr>:</case>
<case>case <expr><name>kMPBinary</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_string</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MessagePackType</name><operator>)</operator><name>i</name> <operator>==</operator> <name>kMPString</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>_convert_one_value_regular_dict</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>encode_vim_list_to_buf</name><argument_list>(<argument><expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>_convert_one_value_regular_dict</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_string</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_STR_STRING</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_STRING</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kMPArray</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>_convert_one_value_regular_dict</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>saved_copyID</name> <init>= <expr><call><name>tv_list_copyid</name><argument_list>(<argument><expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_TYPVAL_ENCODE_DO_CHECK_SELF_REFERENCE</name><argument_list>(<argument><expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,
<argument><expr><name>lv_copyID</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>,
<argument><expr><name>kMPConvList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_LIST_START</name><argument_list>(
<argument><expr><name>tv</name></expr></argument>, <argument><expr><call><name>tv_list_len</name><argument_list>(<argument><expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>saved_copyID</name> <operator>!=</operator> <name>copyID</name> <operator>&amp;&amp;</operator> <name>saved_copyID</name> <operator>!=</operator> <name>copyID</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>_mp_push</name><argument_list>(<argument>*mpstack</argument>, <argument>((MPConvStackVal) {
.tv = tv,
.type = kMPConvList,
.saved_copyID = saved_copyID,
.data = {
.l = {
.list = val_di-&gt;di_tv.vval.v_list,
.li = tv_list_first(val_di-&gt;di_tv.vval.v_list),
},
},
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kMPMap</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>_convert_one_value_regular_dict</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>val_list</name> <init>= <expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val_list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>tv_list_len</name><argument_list>(<argument><expr><name>val_list</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_EMPTY_DICT</name><argument_list>( 
<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>TYPVAL_ENCODE_NODICT_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<macro><name>TV_LIST_ITER_CONST</name><argument_list>(<argument>val_list</argument>, <argument>li</argument>, <argument>{
if (TV_LIST_ITEM_TV(li)-&gt;v_type != VAR_LIST
|| tv_list_len(TV_LIST_ITEM_TV(li)-&gt;vval.v_list) != <literal type="number">2</literal>) {
goto _convert_one_value_regular_dict;
}
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>saved_copyID</name> <init>= <expr><call><name>tv_list_copyid</name><argument_list>(<argument><expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_TYPVAL_ENCODE_DO_CHECK_SELF_REFERENCE</name><argument_list>(<argument><expr><name>val_list</name></expr></argument>, <argument><expr><name>lv_copyID</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>,
<argument><expr><name>kMPConvPairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_DICT_START</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>TYPVAL_ENCODE_NODICT_VAR</name></expr></argument>,
<argument><expr><call><name>tv_list_len</name><argument_list>(<argument><expr><name>val_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>saved_copyID</name> <operator>!=</operator> <name>copyID</name> <operator>&amp;&amp;</operator> <name>saved_copyID</name> <operator>!=</operator> <name>copyID</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>_mp_push</name><argument_list>(<argument>*mpstack</argument>, <argument>((MPConvStackVal) {
.tv = tv,
.type = kMPConvPairs,
.saved_copyID = saved_copyID,
.data = {
.l = {
.list = val_list,
.li = tv_list_first(val_list),
},
},
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kMPExt</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>list_T</name> <modifier>*</modifier></type><name>val_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>type</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name>
<operator>||</operator> <call><name>tv_list_len</name><argument_list>(<argument><expr><operator>(</operator><name>val_list</name> <operator>=</operator> <name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal>
<operator>||</operator> <operator>(</operator><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_first</name><argument_list>(<argument><expr><name>val_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_type</name>
<operator>!=</operator> <name>VAR_NUMBER</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>type</name>
<operator>=</operator> <call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_first</name><argument_list>(<argument><expr><name>val_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name><operator>)</operator>
<operator>&gt;</operator> <name>INT8_MAX</name><operator>)</operator>
<operator>||</operator> <name>type</name> <operator>&lt;</operator> <name>INT8_MIN</name>
<operator>||</operator> <operator>(</operator><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_last</name><argument_list>(<argument><expr><name>val_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_type</name>
<operator>!=</operator> <name>VAR_LIST</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>_convert_one_value_regular_dict</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator>
<call><name>encode_vim_list_to_buf</name><argument_list>(
<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_last</name><argument_list>(<argument><expr><name>val_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>_convert_one_value_regular_dict</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_EXT_STRING</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<label><name>_convert_one_value_regular_dict</name>:</label> <block>{<block_content/>}</block>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>saved_copyID</name> <init>= <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_copyID</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_TYPVAL_ENCODE_DO_CHECK_SELF_REFERENCE</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><name>dv_copyID</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>,
<argument><expr><name>kMPConvDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_DICT_START</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>,
<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>saved_copyID</name> <operator>!=</operator> <name>copyID</name> <operator>&amp;&amp;</operator> <name>saved_copyID</name> <operator>!=</operator> <name>copyID</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>_mp_push</name><argument_list>(<argument>*mpstack</argument>, <argument>((MPConvStackVal) {
.tv = tv,
.type = kMPConvDict,
.saved_copyID = saved_copyID,
.data = {
.d = {
.dict = tv-&gt;vval.v_dict,
.dictp = &amp;tv-&gt;vval.v_dict,
.hi = tv-&gt;vval.v_dict-&gt;dv_hashtab.ht_array,
.todo = tv-&gt;vval.v_dict-&gt;dv_hashtab.ht_used,
},
},
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_REAL_DICT_AFTER_START</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>,
<argument><expr><call><name>_mp_last</name><argument_list>(<argument><expr><operator>*</operator><name>mpstack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VAR_UNKNOWN</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>_TYPVAL_ENCODE_CONVERT_ONE_VALUE</name></expr></argument>)</argument_list></call> <literal type="string">"()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>
<label><name>typval_encode_stop_converting_one_item</name>:</label>
<return>return <expr><name>OK</name></expr>;</return>

<goto>goto <name>typval_encode_stop_converting_one_item</name>;</goto> 
</block_content>}</block></function>

<decl_stmt><decl><type><name>TYPVAL_ENCODE_SCOPE</name> <name>int</name></type> <name>_TYPVAL_ENCODE_ENCODE</name><argument_list>(
<argument><expr><name>TYPVAL_ENCODE_FIRST_ARG_TYPE</name> <name>TYPVAL_ENCODE_FIRST_ARG_NAME</name></expr></argument>,
<argument><expr><name>typval_T</name> <operator>*</operator><specifier>const</specifier> <name>tv</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name>objname</name></expr></argument>)</argument_list>
<name>REAL_FATTR_NONNULL_ARG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list> <name>REAL_FATTR_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>










<function><type><name>TYPVAL_ENCODE_SCOPE</name> <name>int</name></type> <name>_TYPVAL_ENCODE_ENCODE</name><parameter_list>(
<parameter><decl><type><name>TYPVAL_ENCODE_FIRST_ARG_TYPE</name></type> <name>TYPVAL_ENCODE_FIRST_ARG_NAME</name></decl></parameter>,
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>top_tv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>objname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>copyID</name> <init>= <expr><call><name>get_copyID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MPConvStack</name></type> <name>mpstack</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_mp_init</name><argument_list>(<argument><expr><name>mpstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_TYPVAL_ENCODE_CONVERT_ONE_VALUE</name><argument_list>(<argument><expr><name>TYPVAL_ENCODE_FIRST_ARG_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mpstack</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>top_tv</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>objname</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>encode_vim_to__error_ret</name>;</goto>
</block_content>}</block></if></if_stmt>


<label><name>typval_encode_stop_converting_one_item</name>:</label>
<while>while <condition>(<expr><call><name>_mp_size</name><argument_list>(<argument><expr><name>mpstack</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MPConvStackVal</name> <modifier>*</modifier></type><name>cur_mpsv</name> <init>= <expr><operator>&amp;</operator><call><name>_mp_last</name><argument_list>(<argument><expr><name>mpstack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kMPConvDict</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>d</name><operator>.</operator><name>todo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_mp_pop</name><argument_list>(<argument><expr><name>mpstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>d</name><operator>.</operator><name>dict</name><operator>-&gt;</operator><name>dv_copyID</name></name> <operator>=</operator> <name><name>cur_mpsv</name><operator>-&gt;</operator><name>saved_copyID</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_DICT_END</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>tv</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>d</name><operator>.</operator><name>dictp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>d</name><operator>.</operator><name>todo</name></name>
<operator>!=</operator> <name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>d</name><operator>.</operator><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_DICT_BETWEEN_ITEMS</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>tv</name></name></expr></argument>,
<argument><expr><operator>*</operator><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>d</name><operator>.</operator><name>dictp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>d</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>d</name><operator>.</operator><name>hi</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>di</name> <init>= <expr><call><name>TV_DICT_HI2DI</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>d</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>d</name><operator>.</operator><name>todo</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>d</name><operator>.</operator><name>hi</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_STR_STRING</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_DICT_AFTER_KEY</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>tv</name></name></expr></argument>,
<argument><expr><operator>*</operator><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>d</name><operator>.</operator><name>dictp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kMPConvList</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>li</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_mp_pop</name><argument_list>(<argument><expr><name>mpstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_list_set_copyid</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>saved_copyID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_LIST_END</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>li</name></name>
<operator>!=</operator> <call><name>tv_list_first</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_LIST_BETWEEN_ITEMS</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>li</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>li</name></name> <operator>=</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>list</name></name></expr></argument>,
<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>li</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kMPConvPairs</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>li</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_mp_pop</name><argument_list>(<argument><expr><name>mpstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_list_set_copyid</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>saved_copyID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_DICT_END</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>tv</name></name></expr></argument>, <argument><expr><name>TYPVAL_ENCODE_NODICT_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>li</name></name>
<operator>!=</operator> <call><name>tv_list_first</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_DICT_BETWEEN_ITEMS</name><argument_list>(
<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>tv</name></name></expr></argument>, <argument><expr><name>TYPVAL_ENCODE_NODICT_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>kv_pair</name> <init>= <expr><operator>(</operator>
<call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>li</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_SPECIAL_DICT_KEY_CHECK</name><argument_list>(
<argument><expr><name>encode_vim_to__error_ret</name></expr></argument>, <argument><expr><operator>*</operator><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_first</name><argument_list>(<argument><expr><name>kv_pair</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(
<expr><call><name>_TYPVAL_ENCODE_CONVERT_ONE_VALUE</name><argument_list>(
<argument><expr><name>TYPVAL_ENCODE_FIRST_ARG_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mpstack</name></expr></argument>, <argument><expr><name>cur_mpsv</name></expr></argument>,
<argument><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_first</name><argument_list>(<argument><expr><name>kv_pair</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>objname</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>encode_vim_to__error_ret</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_DICT_AFTER_KEY</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>tv</name></name></expr></argument>,
<argument><expr><name>TYPVAL_ENCODE_NODICT_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_last</name><argument_list>(<argument><expr><name>kv_pair</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>li</name></name> <operator>=</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>list</name></name></expr></argument>,
<argument><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>l</name><operator>.</operator><name>li</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kMPConvPartial</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pt</name> <init>= <expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p</name><operator>.</operator><name>pt</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <name><name>cur_mpsv</name><operator>-&gt;</operator><name>tv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tv</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p</name><operator>.</operator><name>stage</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kMPConvPartialArgs</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_FUNC_BEFORE_ARGS</name><argument_list>(<argument><expr><name>tv</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>pt</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p</name><operator>.</operator><name>stage</name></name> <operator>=</operator> <name>kMPConvPartialSelf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_LIST_START</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>_mp_push</name><argument_list>(<argument>mpstack</argument>, <argument>((MPConvStackVal) {
.type = kMPConvPartialList,
.tv = NULL,
.saved_copyID = copyID - <literal type="number">1</literal>,
.data = {
.a = {
.arg = pt-&gt;pt_argv,
.argv = pt-&gt;pt_argv,
.todo = (size_t)pt-&gt;pt_argc,
},
},
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kMPConvPartialSelf</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p</name><operator>.</operator><name>stage</name></name> <operator>=</operator> <name>kMPConvPartialEnd</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dict</name> <init>= <expr><ternary><condition><expr><name>pt</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_FUNC_BEFORE_SELF</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_EMPTY_DICT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>saved_copyID</name> <init>= <expr><name><name>dict</name><operator>-&gt;</operator><name>dv_copyID</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>te_csr_ret</name> <init>= <expr><call><name>_TYPVAL_ENCODE_CHECK_SELF_REFERENCE</name><argument_list>(
<argument><expr><name>TYPVAL_ENCODE_FIRST_ARG_NAME</name></expr></argument>,
<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_copyID</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mpstack</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>kMPConvDict</name></expr></argument>,
<argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>te_csr_ret</name> <operator>!=</operator> <name>NOTDONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>te_csr_ret</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>encode_vim_to__error_ret</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_DICT_START</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name></expr></argument>,
<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>saved_copyID</name> <operator>!=</operator> <name>copyID</name> <operator>&amp;&amp;</operator> <name>saved_copyID</name> <operator>!=</operator> <name>copyID</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>_mp_push</name><argument_list>(<argument>mpstack</argument>, <argument>((MPConvStackVal) {
.type = kMPConvDict,
.tv = NULL,
.saved_copyID = saved_copyID,
.data = {
.d = {
.dict = dict,
.dictp = &amp;pt-&gt;pt_dict,
.hi = dict-&gt;dv_hashtab.ht_array,
.todo = dict-&gt;dv_hashtab.ht_used,
},
},
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_REAL_DICT_AFTER_START</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name></expr></argument>,
<argument><expr><call><name>_mp_last</name><argument_list>(<argument><expr><name>mpstack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_FUNC_BEFORE_SELF</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kMPConvPartialEnd</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_FUNC_END</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_mp_pop</name><argument_list>(<argument><expr><name>mpstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<continue>continue;</continue>
</block_content>}</block>
<case>case <expr><name>kMPConvPartialList</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>a</name><operator>.</operator><name>todo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>_mp_pop</name><argument_list>(<argument><expr><name>mpstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_LIST_END</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>a</name><operator>.</operator><name>argv</name></name> <operator>!=</operator> <name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>a</name><operator>.</operator><name>arg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TYPVAL_ENCODE_CONV_LIST_BETWEEN_ITEMS</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tv</name> <operator>=</operator> <name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>a</name><operator>.</operator><name>arg</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_mpsv</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>a</name><operator>.</operator><name>todo</name></name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tv</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_TYPVAL_ENCODE_CONVERT_ONE_VALUE</name><argument_list>(<argument><expr><name>TYPVAL_ENCODE_FIRST_ARG_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mpstack</name></expr></argument>,
<argument><expr><name>cur_mpsv</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>objname</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>encode_vim_to__error_ret</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>_mp_destroy</name><argument_list>(<argument><expr><name>mpstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
<label><name>encode_vim_to__error_ret</name>:</label>
<expr_stmt><expr><call><name>_mp_destroy</name><argument_list>(<argument><expr><name>mpstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>

<goto>goto <name>typval_encode_stop_converting_one_item</name>;</goto> 
</block_content>}</block></function>
</unit>
