<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\eval\executor.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/globals.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval/executor.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_letwrong</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E734: Wrong variable type for %s="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e_listidx</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E684: list index out of range: %"</literal> <name>PRId64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>








<function><type><name>int</name></type> <name>eexe_mod_op</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tv1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tv2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>op</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_NO_SANITIZE_UNDEFINED
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_FUNC</name> <operator>&amp;&amp;</operator> <name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VAR_DICT</name></expr>:</case>
<case>case <expr><name>VAR_FUNC</name></expr>:</case>
<case>case <expr><name>VAR_PARTIAL</name></expr>:</case>
<case>case <expr><name>VAR_SPECIAL</name></expr>:</case> <block>{<block_content>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VAR_LIST</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>op</name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tv_list_extend</name><argument_list>(<argument><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VAR_NUMBER</name></expr>:</case>
<case>case <expr><name>VAR_STRING</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"+-*/%"</literal></expr></argument>, <argument><expr><operator>*</operator><name>op</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>n</name> <init>= <expr><call><name>tv_get_number</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><operator>(</operator><name>float_T</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>op</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'+'</literal></expr>:</case> <expr_stmt><expr><name>f</name> <operator>+=</operator> <name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <expr_stmt><expr><name>f</name> <operator>-=</operator> <name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case> <expr_stmt><expr><name>f</name> <operator>*=</operator> <name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'/'</literal></expr>:</case> <expr_stmt><expr><name>f</name> <operator>/=</operator> <name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'+'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>-=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>*=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'/'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>num_divide</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>tv_get_number</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'%'</literal></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>num_modulus</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>tv_get_number</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tvs</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>concat_str</name><argument_list>(
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>tvs</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>,
<argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>tv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VAR_FLOAT</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>op</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>||</operator> <operator>*</operator><name>op</name> <operator>==</operator> <literal type="char">'.'</literal>
<operator>||</operator> <operator>(</operator><name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_FLOAT</name>
<operator>&amp;&amp;</operator> <name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_NUMBER</name>
<operator>&amp;&amp;</operator> <name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_STRING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float_T</name></type> <name>f</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>tv2</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FLOAT</name></expr>
?</condition><then> <expr><name><name>tv2</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr>
</then><else>: <expr><operator>(</operator><name>float_T</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><name>tv2</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'+'</literal></expr>:</case> <expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>-=</operator> <name>f</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case> <expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>*=</operator> <name>f</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'/'</literal></expr>:</case> <expr_stmt><expr><name><name>tv1</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>/=</operator> <name>f</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VAR_UNKNOWN</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_letwrong</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>
</unit>
