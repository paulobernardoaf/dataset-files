<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\api\private\dispatch.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;msgpack.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/dispatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/tabpage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/ui.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/window.h"</cpp:file></cpp:include>

<expr_stmt><expr><specifier>static</specifier> <call><name>Map</name><argument_list>(<argument><expr><name>String</name></expr></argument>, <argument><expr><name>MsgpackRpcRequestHandler</name></expr></argument>)</argument_list></call> <operator>*</operator><name>methods</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msgpack_rpc_add_method_handler</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>method</name></decl></parameter>,
<parameter><decl><type><name>MsgpackRpcRequestHandler</name></type> <name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><call><name>map_put</name><argument_list>(<argument><expr><name>String</name></expr></argument>, <argument><expr><name>MsgpackRpcRequestHandler</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>MsgpackRpcRequestHandler</name></type> <name>msgpack_rpc_get_handler_for</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>m</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <name>name_len</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MsgpackRpcRequestHandler</name></type> <name>rv</name> <init>=
<expr><call><call><name>map_get</name><argument_list>(<argument><expr><name>String</name></expr></argument>, <argument><expr><name>MsgpackRpcRequestHandler</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rv</name><operator>.</operator><name>fn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Invalid method: %.*s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>m</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>m</name><operator>.</operator><name>size</name></name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"&lt;empty&gt;"</literal></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>m</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>m</name><operator>.</operator><name>data</name></name></expr> </then><else>: <expr><literal type="string">"&lt;empty&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"api/private/dispatch_wrappers.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
