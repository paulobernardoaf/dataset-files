<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\api\private\helpers.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_API_PRIVATE_HELPERS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_API_PRIVATE_HELPERS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kvec.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJECT_OBJ</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOLEAN_OBJ</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Object) { .type = kObjectTypeBoolean, .data.boolean = b })</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTEGER_OBJ</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Object) { .type = kObjectTypeInteger, .data.integer = i })</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_OBJ</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Object) { .type = kObjectTypeFloat, .data.floating = f })</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_OBJ</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Object) { .type = kObjectTypeString, .data.string = s })</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_OBJ</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Object) { .type = kObjectTypeBuffer, .data.integer = s })</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOW_OBJ</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Object) { .type = kObjectTypeWindow, .data.integer = s })</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABPAGE_OBJ</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Object) { .type = kObjectTypeTabpage, .data.integer = s })</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_OBJ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Object) { .type = kObjectTypeArray, .data.array = a })</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_OBJ</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Object) { .type = kObjectTypeDictionary, .data.dictionary = d })</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUAREF_OBJ</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Object) { .type = kObjectTypeLuaRef, .data.luaref = r })</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIL</name></cpp:macro> <cpp:value>((Object) {.type = kObjectTypeNil})</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT</name><parameter_list>(<parameter><type><name>dict</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kv_push(dict, ((KeyValuePair) { .key = cstr_to_string(k), .value = v }))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name><parameter_list>(<parameter><type><name>array</name></type></parameter>, <parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kv_push(array, item)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXED_TEMP_ARRAY</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>fixsize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Array name = ARRAY_DICT_INIT; Object name##__items[fixsize]; args.size = fixsize; args.items = name##__items;</cpp:value></cpp:define> 





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATIC_CSTR_AS_STRING</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((String) {.data = s, .size = sizeof(s) - 1})</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATIC_CSTR_TO_STRING</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((String){ .data = xmemdupz(s, sizeof(s) - 1), .size = sizeof(s) - 1 })</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_init_boolean</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_init_integer</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_init_float</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_init_string</name></cpp:macro> <cpp:value>= STRING_INIT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_init_buffer</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_init_window</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_init_tabpage</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_init_object</name></cpp:macro> <cpp:value>= NIL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_init_array</name></cpp:macro> <cpp:value>= ARRAY_DICT_INIT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_init_dictionary</name></cpp:macro> <cpp:value>= ARRAY_DICT_INIT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_free_boolean</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_free_integer</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_free_float</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_free_buffer</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_free_window</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>api_free_tabpage</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>except_T</name> <modifier>*</modifier></type><name>current_exception</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>msglist</name></name> <modifier>*</modifier></type><name>private_msg_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msglist</name></name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>msg_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trylevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_int</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_rethrow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_emsg</name></decl>;</decl_stmt>
}</block></struct></type> <name>TryState</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRY_WRAP</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { struct msglist **saved_msg_list = msg_list; struct msglist *private_msg_list; msg_list = &amp;private_msg_list; private_msg_list = NULL; code msg_list = saved_msg_list; } while (0)</cpp:value></cpp:define>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"api/private/helpers.h.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
