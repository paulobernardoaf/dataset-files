<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\api\vim.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/dispatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/channel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lua/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/file_search.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/popupmnu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/edit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/extmark.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/viml/parser/expressions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/viml/parser/parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_BUFFER_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"api/vim.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>api_vim_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_API_NOEXPORT
<block>{<block_content>
<expr_stmt><expr><name>namespace_ids</name> <operator>=</operator> <call><call><name>map_new</name><argument_list>(<argument><expr><name>String</name></expr></argument>, <argument><expr><name>handle_T</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>api_vim_free_all_mem</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_API_NOEXPORT
<block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>handle_T</name></type> <name>id</name></decl>;</decl_stmt>
<macro><name>map_foreach</name><argument_list>(<argument>namespace_ids</argument>, <argument>name</argument>, <argument>id</argument>, <argument>{
(void)id;
xfree(name.data);
}</argument>)</argument_list></macro>
<expr_stmt><expr><call><call><name>map_free</name><argument_list>(<argument><expr><name>String</name></expr></argument>, <argument><expr><name>handle_T</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>namespace_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

















<function><type><name>String</name></type> <name>nvim_exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>7</function>)
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>save_msg_silent</name> <init>= <expr><name>msg_silent</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>save_capture_ga</name> <init>= <expr><name>capture_ga</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>capture_local</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>capture_local</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>capture_ga</name> <operator>=</operator> <operator>&amp;</operator><name>capture_local</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_silent</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_source_str</name><argument_list>(<argument><expr><name><name>src</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"nvim_exec()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>capture_ga</name> <operator>=</operator> <name>save_capture_ga</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>save_msg_silent</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name> <operator>&amp;&amp;</operator> <name><name>capture_local</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><block>{
<expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>capture_local</name><operator>.</operator><name>ga_data</name></name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>capture_local</name><operator>.</operator><name>ga_len</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>data</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>data</name><index>[<expr><name><name>s</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<label><name>theend</name>:</label>
<if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>capture_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>String</name><operator>)</operator><name>STRING_INIT</name></expr>;</return>
</block_content>}</block>









<function><type><name>void</name></type> <name>nvim_command</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name><name>command</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>








<function><type><name>Dictionary</name></type> <name>nvim_get_hl_by_name</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>rgb</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>3</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>result</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Invalid highlight name: %s"</literal></expr></argument>,
<argument><expr><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nvim_get_hl_by_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>rgb</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>








<function><type><name>Dictionary</name></type> <name>nvim_get_hl_by_id</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>hl_id</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>rgb</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>3</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>dic</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>syn_get_final_id</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hl_id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>,
<argument><expr><literal type="string">"Invalid highlight id: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>hl_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dic</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attrcode</name> <init>= <expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hl_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>hl_get_attr_by_id</name><argument_list>(<argument><expr><name>attrcode</name></expr></argument>, <argument><expr><name>rgb</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>




<function><type><name>Integer</name></type> <name>nvim_get_hl_id_by_name</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>7</function>)
<block>{<block_content>
<return>return <expr><call><name>syn_check_group</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>name</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>











<function><type><name>void</name></type> <name>nvim_feedkeys</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keys</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>escape_csi</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>remap</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>insert</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>typed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>execute</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dangerous</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mode</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>mode</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name>remap</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name>remap</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>typed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><name>insert</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><name>execute</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'!'</literal></expr>:</case> <expr_stmt><expr><name>dangerous</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>keys</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>execute</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keys_esc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>escape_csi</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>keys_esc</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave_escape_csi</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>keys</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>keys_esc</name> <operator>=</operator> <name><name>keys</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ins_typebuf</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>keys_esc</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>remap</name></expr> ?</condition><then> <expr><name>REMAP_YES</name></expr> </then><else>: <expr><name>REMAP_NONE</name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><ternary><condition><expr><name>insert</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr></else></ternary></expr></argument>, <argument><expr><operator>!</operator><name>typed</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vgetc_busy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>typebuf_was_filled</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>escape_csi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>keys_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>execute</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_msg_scroll</name> <init>= <expr><name>msg_scroll</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dangerous</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ex_normal_busy</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>exec_normal</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dangerous</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ex_normal_busy</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msg_scroll</name> <operator>|=</operator> <name>save_msg_scroll</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
















<function><type><name>Integer</name></type> <name>nvim_input</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keys</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>) <macro><name>FUNC_API_FAST</name></macro>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name>input_enqueue</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>























<function><type><name>void</name></type> <name>nvim_input_mouse</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>modifier</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>grid</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>) <macro><name>FUNC_API_FAST</name></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>button</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>action</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>button</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"left"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>KE_LEFTMOUSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>button</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"middle"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>KE_MIDDLEMOUSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>button</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"right"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>KE_RIGHTMOUSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>button</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"wheel"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>KE_MOUSEDOWN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>KE_MOUSEDOWN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>action</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"down"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>KE_MOUSEUP</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>action</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"up"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>action</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"left"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>KE_MOUSERIGHT</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>action</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"right"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>KE_MOUSELEFT</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>action</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"press"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>action</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"drag"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>+=</operator> <name>KE_LEFTDRAG</name> <operator>-</operator> <name>KE_LEFTMOUSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>action</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"release"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>+=</operator> <name>KE_LEFTRELEASE</name> <operator>-</operator> <name>KE_LEFTMOUSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modmask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>modifier</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>byte</name> <init>= <expr><name><name>modifier</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><call><name>name_to_mod_mask</name><argument_list>(<argument><expr><name>byte</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"invalid modifier %c"</literal></expr></argument>, <argument><expr><name>byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>modmask</name> <operator>|=</operator> <name>mod</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>input_enqueue_mouse</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>modmask</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>grid</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>row</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"invalid button or action"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>










<function><type><name>String</name></type> <name>nvim_replace_termcodes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>from_part</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>do_lt</name></decl></parameter>,
<parameter><decl><type><name>Boolean</name></type> <name>special</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>str</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>replace_termcodes</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>str</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>str</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ptr</name></expr></argument>,
<argument><expr><name>from_part</name></expr></argument>, <argument><expr><name>do_lt</name></expr></argument>, <argument><expr><name>special</name></expr></argument>, <argument><expr><name>CPO_TO_CPO_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>



<function><type><name>String</name></type> <name>nvim_command_output</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<macro><name>FUNC_API_DEPRECATED_SINCE</name><argument_list>(<argument><literal type="number">7</literal></argument>)</argument_list></macro>
<block>{<block_content>
<return>return <expr><call><name>nvim_exec</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>









<function><type><name>Object</name></type> <name>nvim_eval</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Object</name></type> <name>rv</name> <init>= <expr><name>OBJECT_INIT</name></expr></init></decl>;</decl_stmt>

<macro><name>TRY_WRAP</name><argument_list>(<argument>{

if (!recursive) {
force_abort = false;
suppress_errthrow = false;
current_exception = NULL;

did_emsg = false;
}
recursive++;
try_start();

typval_T rettv;
int ok = eval0((char_u *)expr.data, &amp;rettv, NULL, true);

if (!try_end(err)) {
if (ok == FAIL) {

api_set_error(err, kErrorTypeException,
<literal type="string">"Failed to evaluate expression: '%.*s'"</literal>, <literal type="number">256</literal>, expr.data);
} else {
rv = vim_to_object(&amp;rettv);
}
}

tv_clear(&amp;rettv);
recursive--;
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>



<function><type><name>Object</name></type> <name>nvim_execute_lua</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>3</function>)
<macro><name>FUNC_API_DEPRECATED_SINCE</name><argument_list>(<argument><literal type="number">7</literal></argument>)</argument_list></macro>
<macro><name>FUNC_API_REMOTE_ONLY</name></macro>
<block>{<block_content>
<return>return <expr><call><name>executor_exec_lua_api</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>













<function><type><name>Object</name></type> <name>nvim_exec_lua</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>7</function>)
<macro><name>FUNC_API_REMOTE_ONLY</name></macro>
<block>{<block_content>
<return>return <expr><call><name>executor_exec_lua_api</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>








<function><type><specifier>static</specifier> <name>Object</name></type> <name>_call_function</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Object</name></type> <name>rv</name> <init>= <expr><name>OBJECT_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <name>MAX_FUNC_ARGS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"Function called with too many arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>typval_T</name></type> <name><name>vim_args</name><index>[<expr><name>MAX_FUNC_ARGS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>object_to_vim</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vim_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>free_vim_args</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<macro><name>TRY_WRAP</name><argument_list>(<argument>{

if (!recursive) {
force_abort = false;
suppress_errthrow = false;
current_exception = NULL;

did_emsg = false;
}
recursive++;
try_start();
typval_T rettv;
int dummy;


(void)call_func((char_u *)fn.data, (int)fn.size, &amp;rettv, (int)args.size,
vim_args, NULL, curwin-&gt;w_cursor.lnum, curwin-&gt;w_cursor.lnum,
&amp;dummy, true, NULL, self);
if (!try_end(err)) {
rv = vim_to_object(&amp;rettv);
}
tv_clear(&amp;rettv);
recursive--;
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<label><name>free_vim_args</name>:</label>
<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vim_args</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>Object</name></type> <name>nvim_call_function</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<return>return <expr><call><name>_call_function</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>










<function><type><name>Object</name></type> <name>nvim_call_dict_function</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>dict</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>4</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Object</name></type> <name>rv</name> <init>= <expr><name>OBJECT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mustfree</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>dict</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kObjectTypeString</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>eval0</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>dict</name><operator>.</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>,
<argument><expr><literal type="string">"Failed to evaluate dict expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>mustfree</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeDictionary</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>object_to_vim</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"dict argument type must be String or Dictionary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>self_dict</name> <init>= <expr><name><name>rettv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name> <operator>||</operator> <operator>!</operator><name>self_dict</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"dict not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fn</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>fn</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dict</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeDictionary</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>di</name> <init>= <expr><call><name>tv_dict_find</name><argument_list>(<argument><expr><name>self_dict</name></expr></argument>, <argument><expr><name><name>fn</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>fn</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Not found: %s"</literal></expr></argument>, <argument><expr><name><name>fn</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"partial function not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_FUNC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Not a function: %s"</literal></expr></argument>, <argument><expr><name><name>fn</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <operator>(</operator><name>String</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fn</name><operator>.</operator><name>data</name></name> <operator>||</operator> <name><name>fn</name><operator>.</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Invalid (empty) function name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>_call_function</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>self_dict</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>mustfree</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>







<function><type><name>Integer</name></type> <name>nvim_strwidth</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>text</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"String is too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name>mb_string2cells</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>text</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>




<macro><name>ArrayOf</name><argument_list>(<argument>String</argument>)</argument_list></macro> <macro><name>nvim_list_runtime_paths</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>FUNC_API_SINCE</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rtp</name> <init>= <expr><name>p_rtp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rtp</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><operator>*</operator><name>rtp</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rtp</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rtp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>rv</name><operator>.</operator><name>items</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>rv</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rtp</name> <operator>=</operator> <name>p_rtp</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rv</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>kObjectTypeString</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rtp</name></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>rv</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name>MAXPATHL</name></expr></argument>,
<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>












<macro><name>ArrayOf</name><argument_list>(<argument>String</argument>)</argument_list></macro> <macro><name>nvim_get_runtime_file</name><argument_list>(<argument>String name</argument>, <argument>Boolean all</argument>)</argument_list></macro>
<macro><name>FUNC_API_SINCE</name><argument_list>(<argument><literal type="number">7</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>name</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>DIP_START</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>all</name></expr> ?</condition><then> <expr><name>DIP_ALL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>do_in_runtimepath</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>find_runtime_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_runtime_cb</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><operator>(</operator><name>Array</name> <operator>*</operator><operator>)</operator><name>cookie</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><operator>*</operator><name>rv</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>String</name></type> <name>nvim__get_lib_dir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><call><name>get_lib_dir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>nvim_set_current_dir</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>.</operator><name>size</name></name> <operator>&gt;=</operator> <name>MAXPATHL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Directory name is too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>string</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name><name>dir</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[<expr><name><name>dir</name><operator>.</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_chdir</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Failed to change directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>post_chdir</name><argument_list>(<argument><expr><name>kCdScopeGlobal</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<function><type><name>String</name></type> <name>nvim_get_current_line</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<return>return <expr><call><name>buffer_get_line</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>





<function><type><name>void</name></type> <name>nvim_set_current_line</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>buffer_set_line</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>




<function><type><name>void</name></type> <name>nvim_del_current_line</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>buffer_del_line</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>






<function><type><name>Object</name></type> <name>nvim_get_var</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<return>return <expr><call><name>dict_get_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvardict</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>






<function><type><name>void</name></type> <name>nvim_set_var</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>dict_set_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvardict</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<function><type><name>void</name></type> <name>nvim_del_var</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>dict_set_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvardict</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>






<function><type><name>Object</name></type> <name>vim_set_var</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>dict_set_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvardict</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>Object</name></type> <name>vim_del_var</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>dict_set_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvardict</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>Object</name></type> <name>nvim_get_vvar</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<return>return <expr><call><name>dict_get_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvardict</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>






<function><type><name>void</name></type> <name>nvim_set_vvar</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>dict_set_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimvardict</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>






<function><type><name>Object</name></type> <name>nvim_get_option</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<return>return <expr><call><name>get_option_from</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SREQ_GLOBAL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>







<function><type><name>void</name></type> <name>nvim_set_option</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>set_option_to</name><argument_list>(<argument><expr><name>channel_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SREQ_GLOBAL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<function><type><name>void</name></type> <name>nvim_out_write</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>write_msg</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<function><type><name>void</name></type> <name>nvim_err_write</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>write_msg</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>






<function><type><name>void</name></type> <name>nvim_err_writeln</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>nvim_err_write</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>nvim_err_write</name><argument_list>(<argument>(String) { .data = <literal type="string">"\n"</literal></argument>, <argument>.size = <literal type="number">1</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block>







<macro><name>ArrayOf</name><argument_list>(<argument>Buffer</argument>)</argument_list></macro> <macro><name>nvim_list_bufs</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>FUNC_API_SINCE</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>b</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Object</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>rv</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>b</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>items</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>BUFFER_OBJ</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>




<function><type><name>Buffer</name></type> <name>nvim_get_current_buf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<return>return <expr><name><name>curbuf</name><operator>-&gt;</operator><name>handle</name></name></expr>;</return>
</block_content>}</block>





<function><type><name>void</name></type> <name>nvim_set_current_buf</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>do_buffer</name><argument_list>(<argument><expr><name>DOBUF_GOTO</name></expr></argument>, <argument><expr><name>DOBUF_FIRST</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kErrorTypeException</name></expr></argument>,
<argument><expr><literal type="string">"Failed to switch to buffer %d"</literal></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>




<macro><name>ArrayOf</name><argument_list>(<argument>Window</argument>)</argument_list></macro> <macro><name>nvim_list_wins</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>FUNC_API_SINCE</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Object</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>rv</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>items</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>WINDOW_OBJ</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>




<function><type><name>Window</name></type> <name>nvim_get_current_win</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<return>return <expr><name><name>curwin</name><operator>-&gt;</operator><name>handle</name></name></expr>;</return>
</block_content>}</block>





<function><type><name>void</name></type> <name>nvim_set_current_win</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>goto_tabpage_win</name><argument_list>(<argument><expr><call><name>win_find_tabpage</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>win</name> <operator>!=</operator> <name>curwin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kErrorTypeException</name></expr></argument>,
<argument><expr><literal type="string">"Failed to switch to window %d"</literal></expr></argument>,
<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>










<function><type><name>Buffer</name></type> <name>nvim_create_buf</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>listed</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>scratch</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>buflist_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>,
<argument><expr><name>BLN_NOOPT</name> <operator>|</operator> <name>BLN_NEW</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>listed</name></expr> ?</condition><then> <expr><name>BLN_LISTED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>ml_open</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scratch</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>aco_save_T</name></type> <name>aco</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>aucmd_prepbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"bh"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="string">"hide"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"bt"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="string">"nofile"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"swf"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aucmd_restbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</return>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Failed to create buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

















































































<function><type><name>Window</name></type> <name>nvim_open_win</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>enter</name></decl></parameter>, <parameter><decl><type><name>Dictionary</name></type> <name>config</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>FloatConfig</name></type> <name>fconfig</name> <init>= <expr><name>FLOAT_CONFIG_INIT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_float_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fconfig</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>win_new_float</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fconfig</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wp</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Window was closed immediately"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nvim_win_set_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fconfig</name><operator>.</operator><name>style</name></name> <operator>==</operator> <name>kWinStyleMinimal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>win_set_minimal_style</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>didset_window_options</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>handle</name></name></expr>;</return>
</block_content>}</block>




<macro><name>ArrayOf</name><argument_list>(<argument>Tabpage</argument>)</argument_list></macro> <macro><name>nvim_list_tabpages</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>FUNC_API_SINCE</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_TABS</name><argument_list>(<argument>tp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Object</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>rv</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_TABS</name><argument_list>(<argument>tp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>items</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>TABPAGE_OBJ</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>




<function><type><name>Tabpage</name></type> <name>nvim_get_current_tabpage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<return>return <expr><name><name>curtab</name><operator>-&gt;</operator><name>handle</name></name></expr>;</return>
</block_content>}</block>





<function><type><name>void</name></type> <name>nvim_set_current_tabpage</name><parameter_list>(<parameter><decl><type><name>Tabpage</name></type> <name>tabpage</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><call><name>find_tab_by_handle</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tp</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>tp</name> <operator>!=</operator> <name>curtab</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kErrorTypeException</name></expr></argument>,
<argument><expr><literal type="string">"Failed to switch to tabpage %d"</literal></expr></argument>,
<argument><expr><name>tabpage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>












<function><type><name>Integer</name></type> <name>nvim_create_namespace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>5</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>handle_T</name></type> <name>id</name> <init>= <expr><call><call><name>map_get</name><argument_list>(<argument><expr><name>String</name></expr></argument>, <argument><expr><name>handle_T</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>namespace_ids</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>next_namespace_id</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>name_alloc</name> <init>= <expr><call><name>copy_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><call><name>map_put</name><argument_list>(<argument><expr><name>String</name></expr></argument>, <argument><expr><name>handle_T</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>namespace_ids</name></expr></argument>, <argument><expr><name>name_alloc</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>Integer</name><operator>)</operator><name>id</name></expr>;</return>
</block_content>}</block>




<function><type><name>Dictionary</name></type> <name>nvim_get_namespaces</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>5</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>retval</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>handle_T</name></type> <name>id</name></decl>;</decl_stmt>

<macro><name>map_foreach</name><argument_list>(<argument>namespace_ids</argument>, <argument>name</argument>, <argument>id</argument>, <argument>{
PUT(retval, name.data, INTEGER_OBJ(id));
}</argument>)</argument_list></macro>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block>























<function><type><name>Boolean</name></type> <name>nvim_paste</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>crlf</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>phase</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>)
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>draining</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>cancel</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>phase</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>phase</name></expr></argument> &gt;</argument_list></name> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Invalid phase: %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Object</name></type> <name>rv</name> <init>= <expr><name>OBJECT_INIT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>phase</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>phase</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>draining</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>draining</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>lines</name> <init>= <expr><call><name>string_to_array</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>crlf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nvim_exec_lua</name><argument_list>(<argument><expr><call><name>STATIC_CSTR_AS_STRING</name><argument_list>(<argument><expr><literal type="string">"return vim.paste(...)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>draining</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>CMDLINE</name> <operator>|</operator> <name>INSERT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>phase</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>phase</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ResetRedobuff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>cancel</name> <operator>=</operator> <operator>(</operator><name><name>rv</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeBoolean</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rv</name><operator>.</operator><name>data</name><operator>.</operator><name>boolean</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cancel</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator></expr>)</condition> <block>{<block_content> 
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lines</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><name><name>lines</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>size</name></name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AppendToRedobuffLit</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>lines</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><name>NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>CMDLINE</name> <operator>|</operator> <name>INSERT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>phase</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>phase</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<label><name>theend</name>:</label>
<expr_stmt><expr><call><name>api_free_object</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cancel</name> <operator>||</operator> <name>phase</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>phase</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>draining</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>!</operator><name>cancel</name></expr>;</return>
</block_content>}</block>














<decl_stmt><decl><type><name>void</name></type> <name>nvim_put</name><argument_list>(<argument><expr><macro><name>ArrayOf</name><argument_list>(<argument>String</argument>)</argument_list></macro> <name>lines</name></expr></argument>, <argument><expr><name>String</name> <name>type</name></expr></argument>, <argument><expr><name>Boolean</name> <name>after</name></expr></argument>,
<argument><expr><name>Boolean</name> <name>follow</name></expr></argument>, <argument><expr><name>Error</name> <operator>*</operator><name>err</name></expr></argument>)</argument_list>
<name>FUNC_API_SINCE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yankreg_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prepare_yankreg_from_object</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>lines</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Invalid type: '%s'"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lines</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>cleanup</name>;</goto> 
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lines</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lines</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>kObjectTypeString</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"Invalid lines (expected array of strings)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>String</name></type> <name>line</name> <init>= <expr><name><name>lines</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmemdupz</name><argument_list>(<argument><expr><name><name>line</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>line</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memchrsub</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>NL</name></expr></argument>, <argument><expr><name><name>line</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>finish_yankreg_from_object</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TRY_WRAP</name><argument_list>(<argument>{
try_start();
bool VIsual_was_active = VIsual_active;
msg_silent++; 
do_put(<literal type="number">0</literal>, reg, after ? FORWARD : BACKWARD, <literal type="number">1</literal>, follow ? PUT_CURSEND : <literal type="number">0</literal>);
msg_silent--;
VIsual_active = VIsual_was_active;
try_end(err);
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>free_register</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>





<function><type><name>void</name></type> <name>nvim_subscribe</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>event</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>) <macro><name>FUNC_API_REMOTE_ONLY</name></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>event</name><operator>.</operator><name>size</name></name> <operator>&lt;</operator> <name>METHOD_MAXLEN</name></expr> ?</condition><then> <expr><name><name>event</name><operator>.</operator><name>size</name></name></expr> </then><else>: <expr><name>METHOD_MAXLEN</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>e</name><index>[<expr><name>METHOD_MAXLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpc_subscribe</name><argument_list>(<argument><expr><name>channel_id</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<function><type><name>void</name></type> <name>nvim_unsubscribe</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>event</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>) <macro><name>FUNC_API_REMOTE_ONLY</name></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>event</name><operator>.</operator><name>size</name></name> <operator>&lt;</operator> <name>METHOD_MAXLEN</name></expr> ?</condition><then>
<expr><name><name>event</name><operator>.</operator><name>size</name></name></expr> </then><else>:
<expr><name>METHOD_MAXLEN</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>e</name><index>[<expr><name>METHOD_MAXLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpc_unsubscribe</name><argument_list>(<argument><expr><name>channel_id</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>












<function><type><name>Integer</name></type> <name>nvim_get_color_by_name</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<return>return <expr><call><name>name_to_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>







<function><type><name>Dictionary</name></type> <name>nvim_get_color_map</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>colors</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>color_name_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>colors</name></expr></argument>, <argument><expr><name><name>color_name_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>color_name_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>colors</name></expr>;</return>
</block_content>}</block>









<function><type><name>Dictionary</name></type> <name>nvim_get_context</name><parameter_list>(<parameter><decl><type><name>Dictionary</name></type> <name>opts</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>types</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opts</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>k</name> <init>= <expr><name><name>opts</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Object</name></type> <name>v</name> <init>= <expr><name><name>opts</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><literal type="string">"types"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeArray</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"invalid value for key: %s"</literal></expr></argument>,
<argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>Dictionary</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>types</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>data</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"unexpected key: %s"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>Dictionary</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>int_types</name> <init>= <expr><ternary><condition><expr><name><name>types</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>kCtxAll</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>types</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>types</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>types</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>kObjectTypeString</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><name><name>types</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"regs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>int_types</name> <operator>|=</operator> <name>kCtxRegs</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"jumps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>int_types</name> <operator>|=</operator> <name>kCtxJumps</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"bufs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>int_types</name> <operator>|=</operator> <name>kCtxBufs</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"gvars"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>int_types</name> <operator>|=</operator> <name>kCtxGVars</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"sfuncs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>int_types</name> <operator>|=</operator> <name>kCtxSFuncs</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"funcs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>int_types</name> <operator>|=</operator> <name>kCtxFuncs</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"unexpected type: %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>Dictionary</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Context</name></type> <name>ctx</name> <init>= <expr><name>CONTEXT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ctx_save</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>int_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>dict</name> <init>= <expr><call><name>ctx_to_dict</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ctx_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dict</name></expr>;</return>
</block_content>}</block>




<function><type><name>Object</name></type> <name>nvim_load_context</name><parameter_list>(<parameter><decl><type><name>Dictionary</name></type> <name>dict</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Context</name></type> <name>ctx</name> <init>= <expr><name>CONTEXT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_did_emsg</name> <init>= <expr><name>did_emsg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ctx_from_dict</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_emsg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctx_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>kCtxAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ctx_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>save_did_emsg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>Object</name><operator>)</operator><name>OBJECT_INIT</name></expr>;</return>
</block_content>}</block>





<function><type><name>Dictionary</name></type> <name>nvim_get_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>2</function>) <macro><name>FUNC_API_FAST</name></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>modestr</name> <init>= <expr><call><name>get_mode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>blocked</name> <init>= <expr><call><name>input_blocking</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name>modestr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"blocking"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>blocked</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>






<macro><name>ArrayOf</name><argument_list>(<argument>Dictionary</argument>)</argument_list></macro> <macro><name>nvim_get_keymap</name><argument_list>(<argument>String mode</argument>)</argument_list></macro>
<macro><name>FUNC_API_SINCE</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro>
<block>{<block_content>
<return>return <expr><call><name>keymap_array</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>


























<function><type><name>void</name></type> <name>nvim_set_keymap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rhs</name></decl></parameter>,
<parameter><decl><type><name>Dictionary</name></type> <name>opts</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>modify_keymap</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>






<function><type><name>void</name></type> <name>nvim_del_keymap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>nvim_buf_del_keymap</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>










<function><type><name>Dictionary</name></type> <name>nvim_get_commands</name><parameter_list>(<parameter><decl><type><name>Dictionary</name></type> <name>opts</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>4</function>)
<block>{<block_content>
<return>return <expr><call><name>nvim_buf_get_commands</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>





<function><type><name>Array</name></type> <name>nvim_get_api_info</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>) <decl_stmt><decl><type><name>FUNC_API_FAST</name></type> <name>FUNC_API_REMOTE_ONLY</name>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>channel_id</name> <operator>&lt;=</operator> <name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>channel_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><call><name>api_metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


















































<function><type><name>void</name></type> <name>nvim_set_client_info</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>,
<parameter><decl><type><name>Dictionary</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>Dictionary</name></type> <name>methods</name></decl></parameter>, <parameter><decl><type><name>Dictionary</name></type> <name>attributes</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>4</function>) <macro><name>FUNC_API_REMOTE_ONLY</name></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>info</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name>copy_object</name><argument_list>(<argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>copy_dictionary</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_major</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>version</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>version</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>key</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"major"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_major</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_major</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="string">"major"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name>copy_object</name><argument_list>(<argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"methods"</literal></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><call><name>copy_dictionary</name><argument_list>(<argument><expr><name>methods</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"attributes"</literal></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><call><name>copy_dictionary</name><argument_list>(<argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rpc_set_client_info</name><argument_list>(<argument><expr><name>channel_id</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>























<function><type><name>Dictionary</name></type> <name>nvim_get_chan_info</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>chan</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>4</function>)
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chan</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Dictionary</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>channel_info</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>chan</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>





<function><type><name>Array</name></type> <name>nvim_list_chans</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>4</function>)
<block>{<block_content>
<return>return <expr><call><name>channel_all_info</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block>





















<function><type><name>Array</name></type> <name>nvim_call_atomic</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>calls</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>) <macro><name>FUNC_API_REMOTE_ONLY</name></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>results</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Error</name></type> <name>nested_error</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>calls</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>calls</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>kObjectTypeArray</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"Items in calls array must be arrays"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>validation_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>call</name> <init>= <expr><name><name>calls</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>call</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"Items in calls array must be arrays of size 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>validation_error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>call</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>kObjectTypeString</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"Name must be String"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>validation_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><name><name>call</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>call</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>kObjectTypeArray</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"Args must be Array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>validation_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name><name>call</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MsgpackRpcRequestHandler</name></type> <name>handler</name> <init>=
<expr><call><name>msgpack_rpc_get_handler_for</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>name</name><operator>.</operator><name>size</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nested_error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nested_error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Object</name></type> <name>result</name> <init>= <expr><call><name><name>handler</name><operator>.</operator><name>fn</name></name><argument_list>(<argument><expr><name>channel_id</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nested_error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nested_error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nested_error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>errval</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>errval</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>errval</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>nested_error</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>errval</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name><name>nested_error</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>errval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<goto>goto <name>theend</name>;</goto>

<label><name>validation_error</name>:</label>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>theend</name>:</label>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nested_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ExprASTNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>node_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Object</name> <modifier>*</modifier></type><name>ret_node_p</name></decl>;</decl_stmt>
}</block></struct></type> <name>ExprASTConvStackItem</name>;</typedef>


<typedef>typedef <macro><name>kvec_withinit_t</name><argument_list>(<argument>ExprASTConvStackItem</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>ExprASTConvStack</name></expr>;</expr_stmt></typedef>












































































<function><type><name>Dictionary</name></type> <name>nvim_parse_expression</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>highlight</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>4</function>) <macro><name>FUNC_API_FAST</name></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>flags</name><operator>.</operator><name>size</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>flags</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'m'</literal></expr>:</case> <block>{<block_content> <expr_stmt><expr><name>pflags</name> <operator>|=</operator> <name>kExprFlagsMulti</name></expr>;</expr_stmt> <break>break;</break> </block_content>}</block>
<case>case <expr><literal type="char">'E'</literal></expr>:</case> <block>{<block_content> <expr_stmt><expr><name>pflags</name> <operator>|=</operator> <name>kExprFlagsDisallowEOC</name></expr>;</expr_stmt> <break>break;</break> </block_content>}</block>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> <block>{<block_content> <expr_stmt><expr><name>pflags</name> <operator>|=</operator> <name>kExprFlagsParseLet</name></expr>;</expr_stmt> <break>break;</break> </block_content>}</block>
<case>case <expr><name>NUL</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Invalid flag: '\\0' (%u)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>flags</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>Dictionary</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</return>
</block_content>}</block>
<default>default:</default> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Invalid flag: '%c' (%u)"</literal></expr></argument>,
<argument><expr><name><name>flags</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>flags</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>Dictionary</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></for>
<decl_stmt><decl><type><name>ParserLine</name></type> <name><name>plines</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>expr</name><operator>.</operator><name>data</name></name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>expr</name><operator>.</operator><name>size</name></name></expr>,
<expr><operator>.</operator><name>allocated</name> <operator>=</operator> <name>false</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ParserLine</name> <modifier>*</modifier></type><name>plines_p</name> <init>= <expr><name>plines</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ParserHighlight</name></type> <name>colors</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>kvi_init</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ParserHighlight</name> <modifier>*</modifier><specifier>const</specifier></type> <name>colors_p</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>highlight</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>colors</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ParserState</name></type> <name>pstate</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>viml_parser_init</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>pstate</name></expr></argument>, <argument><expr><name>parser_simple_get_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plines_p</name></expr></argument>, <argument><expr><name>colors_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ExprAST</name></type> <name>east</name> <init>= <expr><call><name>viml_pexpr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pstate</name></expr></argument>, <argument><expr><name>pflags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ret_size</name> <init>= <expr><operator>(</operator>
<literal type="number">2</literal> 
<operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>east</name><operator>.</operator><name>err</name><operator>.</operator><name>msg</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> 
<operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>highlight</name> 
<operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>ret</name> <init>= <expr><block>{
<expr><operator>.</operator><name>items</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>ret_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ret</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>capacity</name> <operator>=</operator> <name>ret_size</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>items</name><index>[<expr><name><name>ret</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"ast"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <name>NIL</name></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>items</name><index>[<expr><name><name>ret</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"len"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><operator>(</operator><name><name>pstate</name><operator>.</operator><name>pos</name><operator>.</operator><name>line</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>?</operator> <name><name>plines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name>
<operator>:</operator> <name><name>pstate</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>east</name><operator>.</operator><name>err</name><operator>.</operator><name>msg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>err_dict</name> <init>= <expr><block>{
<expr><operator>.</operator><name>items</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>err_dict</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">2</literal></expr>,
<expr><operator>.</operator><name>capacity</name> <operator>=</operator> <literal type="number">2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>err_dict</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name><name>east</name><operator>.</operator><name>err</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>east</name><operator>.</operator><name>err</name><operator>.</operator><name>arg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>err_dict</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"arg"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>STRING_OBJ</name><argument_list>(<argument><expr><name>STRING_INIT</name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>err_dict</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"arg"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <macro><name>STRING_OBJ</name><argument_list>(<argument>((String) {
.data = xmemdupz(east.err.arg, (size_t)east.err.arg_len),
.size = (size_t)east.err.arg_len,
})</argument>)</argument_list></macro></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>items</name><index>[<expr><name><name>ret</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><name>err_dict</name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>highlight</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>hl</name> <init>= <expr><operator>(</operator><name>Array</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>items</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>kv_size</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>hl</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>capacity</name> <operator>=</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ParserHighlightChunk</name></type> <name>chunk</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name>colors</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>chunk_arr</name> <init>= <expr><operator>(</operator><name>Array</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>items</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>chunk_arr</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>capacity</name> <operator>=</operator> <literal type="number">4</literal></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">4</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>chunk_arr</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name><name>chunk</name><operator>.</operator><name>start</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk_arr</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name><name>chunk</name><operator>.</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk_arr</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name><name>chunk</name><operator>.</operator><name>end_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk_arr</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name><name>chunk</name><operator>.</operator><name>group</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hl</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>chunk_arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>items</name><index>[<expr><name><name>ret</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"highlight"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>kvi_destroy</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ExprASTConvStack</name></type> <name>ast_conv_stack</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>kvi_init</name><argument_list>(<argument><expr><name>ast_conv_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>kvi_push</name><argument_list>(<argument>ast_conv_stack</argument>, <argument>((ExprASTConvStackItem) {
.node_p = &amp;east.root,
.ret_node_p = &amp;ret.items[<literal type="number">0</literal>].value,
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<while>while <condition>(<expr><call><name>kv_size</name><argument_list>(<argument><expr><name>ast_conv_stack</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ExprASTConvStackItem</name></type> <name>cur_item</name> <init>= <expr><call><name>kv_last</name><argument_list>(<argument><expr><name>ast_conv_stack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExprASTNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>node</name> <init>= <expr><operator>*</operator><name><name>cur_item</name><operator>.</operator><name>node_p</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>kv_size</name><argument_list>(<argument><expr><name>ast_conv_stack</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_drop</name><argument_list>(<argument><expr><name>ast_conv_stack</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur_item</name><operator>.</operator><name>ret_node_p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeNil</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ret_node_items_size</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator>
<literal type="number">3</literal> 
<operator>+</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> 
<operator>+</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeOption</name>
<operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodePlainIdentifier</name><operator>)</operator> 
<operator>+</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeOption</name>
<operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodePlainIdentifier</name>
<operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodePlainKey</name>
<operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeEnvironment</name><operator>)</operator> 
<operator>+</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeRegister</name><operator>)</operator> 
<operator>+</operator> <operator>(</operator><literal type="number">3</literal> 
<operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeComparison</name><operator>)</operator><operator>)</operator>
<operator>+</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeInteger</name><operator>)</operator> 
<operator>+</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeFloat</name><operator>)</operator> 
<operator>+</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeDoubleQuotedString</name>
<operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeSingleQuotedString</name><operator>)</operator> 
<operator>+</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExprNodeAssignment</name><operator>)</operator> 
<operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>ret_node</name> <init>= <expr><block>{
<expr><operator>.</operator><name>items</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>ret_node_items_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ret_node</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>capacity</name> <operator>=</operator> <name>ret_node_items_size</name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name><name>cur_item</name><operator>.</operator><name>ret_node_p</name></name> <operator>=</operator> <call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><name>ret_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Dictionary</name> <modifier>*</modifier></type><name>ret_node</name> <init>= <expr><operator>&amp;</operator><name><name>cur_item</name><operator>.</operator><name>ret_node_p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dictionary</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>num_children</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>children_array</name> <init>= <expr><block>{
<expr><operator>.</operator><name>items</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>num_children</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>children_array</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>capacity</name> <operator>=</operator> <name>num_children</name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <name>num_children</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_children</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>children_array</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"children"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>children_array</name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<macro><name>kvi_push</name><argument_list>(<argument>ast_conv_stack</argument>, <argument>((ExprASTConvStackItem) {
.node_p = &amp;node-&gt;children,
.ret_node_p = &amp;children_array.items[<literal type="number">0</literal>],
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<macro><name>kvi_push</name><argument_list>(<argument>ast_conv_stack</argument>, <argument>((ExprASTConvStackItem) {
.node_p = &amp;node-&gt;next,
.ret_node_p = cur_item.ret_node_p + <literal type="number">1</literal>,
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>kv_drop</name><argument_list>(<argument><expr><name>ast_conv_stack</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name><name>east_node_type_tab</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>start_array</name> <init>= <expr><block>{
<expr><operator>.</operator><name>items</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>start_array</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>capacity</name> <operator>=</operator> <literal type="number">2</literal></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>start_array</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>start_array</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>start_array</name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"len"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kExprNodeDoubleQuotedString</name></expr>:</case>
<case>case <expr><name>kExprNodeSingleQuotedString</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"svalue"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <macro><name>STRING_OBJ</name><argument_list>(<argument>((String) {
.data = node-&gt;data.str.value,
.size = node-&gt;data.str.size,
})</argument>)</argument_list></macro></expr>,
}</block></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kExprNodeOption</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"scope"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>opt</name><operator>.</operator><name>scope</name></name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"ident"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <macro><name>STRING_OBJ</name><argument_list>(<argument>((String) {
.data = xmemdupz(node-&gt;data.opt.ident,
node-&gt;data.opt.ident_len),
.size = node-&gt;data.opt.ident_len,
})</argument>)</argument_list></macro></expr>,
}</block></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kExprNodePlainIdentifier</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"scope"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>var</name><operator>.</operator><name>scope</name></name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"ident"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <macro><name>STRING_OBJ</name><argument_list>(<argument>((String) {
.data = xmemdupz(node-&gt;data.var.ident,
node-&gt;data.var.ident_len),
.size = node-&gt;data.var.ident_len,
})</argument>)</argument_list></macro></expr>,
}</block></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kExprNodePlainKey</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"ident"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <macro><name>STRING_OBJ</name><argument_list>(<argument>((String) {
.data = xmemdupz(node-&gt;data.var.ident,
node-&gt;data.var.ident_len),
.size = node-&gt;data.var.ident_len,
})</argument>)</argument_list></macro></expr>,
}</block></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kExprNodeEnvironment</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"ident"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <macro><name>STRING_OBJ</name><argument_list>(<argument>((String) {
.data = xmemdupz(node-&gt;data.env.ident,
node-&gt;data.env.ident_len),
.size = node-&gt;data.env.ident_len,
})</argument>)</argument_list></macro></expr>,
}</block></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kExprNodeRegister</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>reg</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kExprNodeComparison</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"cmp_type"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(
<argument><expr><name><name>eltkn_cmp_type_tab</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>cmp</name><operator>.</operator><name>type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"ccs_strategy"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(
<argument><expr><name><name>ccs_tab</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>cmp</name><operator>.</operator><name>ccs</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"invert"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>cmp</name><operator>.</operator><name>inv</name></name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kExprNodeFloat</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"fvalue"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>FLOAT_OBJ</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>flt</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kExprNodeInteger</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"ivalue"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><operator>(</operator>
<name><name>node</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>value</name></name> <operator>&gt;</operator> <name>API_INTEGER_MAX</name>
<operator>?</operator> <name>API_INTEGER_MAX</name>
<operator>:</operator> <operator>(</operator><name>Integer</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kExprNodeAssignment</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ExprAssignmentType</name></type> <name>asgn_type</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ass</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret_node</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ret_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>KeyValuePair</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STATIC_CSTR_TO_STRING</name><argument_list>(<argument><expr><literal type="string">"augmentation"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>value</name> <operator>=</operator> <call><name>STRING_OBJ</name><argument_list>(
<argument><expr><name>asgn_type</name> <operator>==</operator> <name>kExprAsgnPlain</name>
<operator>?</operator> <operator>(</operator><name>String</name><operator>)</operator><name>STRING_INIT</name>
<operator>:</operator> <call><name>cstr_to_string</name><argument_list>(<argument><expr><name><name>expr_asgn_type_tab</name><index>[<expr><name>asgn_type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kExprNodeMissing</name></expr>:</case>
<case>case <expr><name>kExprNodeOpMissing</name></expr>:</case>
<case>case <expr><name>kExprNodeTernary</name></expr>:</case>
<case>case <expr><name>kExprNodeTernaryValue</name></expr>:</case>
<case>case <expr><name>kExprNodeSubscript</name></expr>:</case>
<case>case <expr><name>kExprNodeListLiteral</name></expr>:</case>
<case>case <expr><name>kExprNodeUnaryPlus</name></expr>:</case>
<case>case <expr><name>kExprNodeBinaryPlus</name></expr>:</case>
<case>case <expr><name>kExprNodeNested</name></expr>:</case>
<case>case <expr><name>kExprNodeCall</name></expr>:</case>
<case>case <expr><name>kExprNodeComplexIdentifier</name></expr>:</case>
<case>case <expr><name>kExprNodeUnknownFigure</name></expr>:</case>
<case>case <expr><name>kExprNodeLambda</name></expr>:</case>
<case>case <expr><name>kExprNodeDictLiteral</name></expr>:</case>
<case>case <expr><name>kExprNodeCurlyBracesIdentifier</name></expr>:</case>
<case>case <expr><name>kExprNodeComma</name></expr>:</case>
<case>case <expr><name>kExprNodeColon</name></expr>:</case>
<case>case <expr><name>kExprNodeArrow</name></expr>:</case>
<case>case <expr><name>kExprNodeConcat</name></expr>:</case>
<case>case <expr><name>kExprNodeConcatOrSubscript</name></expr>:</case>
<case>case <expr><name>kExprNodeOr</name></expr>:</case>
<case>case <expr><name>kExprNodeAnd</name></expr>:</case>
<case>case <expr><name>kExprNodeUnaryMinus</name></expr>:</case>
<case>case <expr><name>kExprNodeBinaryMinus</name></expr>:</case>
<case>case <expr><name>kExprNodeNot</name></expr>:</case>
<case>case <expr><name>kExprNodeMultiplication</name></expr>:</case>
<case>case <expr><name>kExprNodeDivision</name></expr>:</case>
<case>case <expr><name>kExprNodeMod</name></expr>:</case> <block>{<block_content>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cur_item</name><operator>.</operator><name>ret_node_p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dictionary</name><operator>.</operator><name>size</name></name>
<operator>==</operator> <name><name>cur_item</name><operator>.</operator><name>ret_node_p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dictionary</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name><name>cur_item</name><operator>.</operator><name>node_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>cur_item</name><operator>.</operator><name>node_p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>kvi_destroy</name><argument_list>(<argument><expr><name>ast_conv_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ret</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name><name>ret</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>viml_pexpr_free_ast</name><argument_list>(<argument><expr><name>east</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>viml_parser_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block>








<function><type><specifier>static</specifier> <name>void</name></type> <name>write_msg</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>to_err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>out_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>err_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>out_line_buf</name><index>[<expr><name>LINE_BUFFER_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>err_line_buf</name><index>[<expr><name>LINE_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH_CHAR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>, <parameter><type><name>line_buf</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (message.data[i] == NL || pos == LINE_BUFFER_SIZE - 1) { line_buf[pos] = NUL; msg((char_u *)line_buf); pos = 0; continue; } line_buf[pos++] = message.data[i];</cpp:value></cpp:define>









<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>message</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>to_err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUSH_CHAR</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>err_pos</name></expr></argument>, <argument><expr><name>err_line_buf</name></expr></argument>, <argument><expr><name>emsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>PUSH_CHAR</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>out_pos</name></expr></argument>, <argument><expr><name>out_line_buf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><name>Object</name></type> <name>nvim__id</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>copy_object</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>Array</name></type> <name>nvim__id_array</name><parameter_list>(<parameter><decl><type><name>Array</name></type> <name>arr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>copy_object</name><argument_list>(<argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>array</name></name></expr>;</return>
</block_content>}</block></function>









<function><type><name>Dictionary</name></type> <name>nvim__id_dictionary</name><parameter_list>(<parameter><decl><type><name>Dictionary</name></type> <name>dct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>copy_object</name><argument_list>(<argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><name>dct</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>dictionary</name></name></expr>;</return>
</block_content>}</block></function>









<function><type><name>Float</name></type> <name>nvim__id_float</name><parameter_list>(<parameter><decl><type><name>Float</name></type> <name>flt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>flt</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>Dictionary</name></type> <name>nvim__stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"fsync"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>g_stats</name><operator>.</operator><name>fsync</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"redraw"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>g_stats</name><operator>.</operator><name>redraw</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>Array</name></type> <name>nvim_list_uis</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>4</function>)
<block>{<block_content>
<return>return <expr><call><name>ui_array</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block>




<function><type><name>Array</name></type> <name>nvim_get_proc_children</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>4</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rvobj</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>proc_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>pid</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Invalid pid: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>proc_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>os_proc_children</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proc_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proc_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"fallback to vim._os_proc_children()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>a</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><literal type="string">"return vim._os_proc_children(select(1, ...))"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name>nvim_exec_lua</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>api_free_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeArray</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rvobj</name> <operator>=</operator> <name><name>o</name><operator>.</operator><name>data</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get process children. pid=%"</literal> <name>PRId64</name> <literal type="string">" error=%d"</literal></expr></argument>,
<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>proc_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rvobj</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>proc_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>proc_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rvobj</name></expr>;</return>
</block_content>}</block>




<function><type><name>Object</name></type> <name>nvim_get_proc</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>4</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Object</name></type> <name>rvobj</name> <init>= <expr><name>OBJECT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rvobj</name><operator>.</operator><name>data</name><operator>.</operator><name>dictionary</name></name> <operator>=</operator> <operator>(</operator><name>Dictionary</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rvobj</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>kObjectTypeDictionary</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>pid</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Invalid pid: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>rvobj</name><operator>.</operator><name>data</name><operator>.</operator><name>dictionary</name></name> <operator>=</operator> <call><name>os_proc_info</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rvobj</name><operator>.</operator><name>data</name><operator>.</operator><name>dictionary</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>NIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>Array</name></type> <name>a</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><literal type="string">"return vim._os_proc_info(select(1, ...))"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name>nvim_exec_lua</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>api_free_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeArray</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>.</operator><name>data</name><operator>.</operator><name>array</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NIL</name></expr>;</return> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeDictionary</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rvobj</name><operator>.</operator><name>data</name><operator>.</operator><name>dictionary</name></name> <operator>=</operator> <name><name>o</name><operator>.</operator><name>data</name><operator>.</operator><name>dictionary</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>,
<argument><expr><literal type="string">"Failed to get process info. pid=%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>rvobj</name></expr>;</return>
</block_content>}</block>















<function><type><name>void</name></type> <name>nvim_select_popupmenu_item</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>insert</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>finish</name></decl></parameter>,
<parameter><decl><type><name>Dictionary</name></type> <name>opts</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>)
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"opts dict isn't empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>finish</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>insert</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pum_ext_select_item</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>item</name></expr></argument>, <argument><expr><name>insert</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<function><type><name>Array</name></type> <name>nvim__inspect_cell</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>grid</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>ret</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>&amp;</operator><name>default_grid</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>grid</name> <operator>==</operator> <name><name>pum_grid</name><operator>.</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>&amp;</operator><name>pum_grid</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>grid</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>get_win_by_grid_handle</name><argument_list>(<argument><expr><operator>(</operator><name>handle_T</name><operator>)</operator><name>grid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>chars</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"No grid with the given handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>row</name> <operator>&gt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>Rows</name></name>
<operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>off</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>row</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>col</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>g</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>off</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><call><name>hl_get_attr_by_id</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>highlight_use_hlstate</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><call><name>hl_inspect</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>nvim__put_attr</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>start_row</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>start_col</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>end_row</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>end_col</name></decl></parameter>)</parameter_list>
FUNC_API_LUA_ONLY
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lua_attr_active</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>syn_get_final_id</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>decorations_add_luahl_attr</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>start_row</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>start_col</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>end_row</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>end_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
