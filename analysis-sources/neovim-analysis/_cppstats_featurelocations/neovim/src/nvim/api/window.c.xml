<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\api\window.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/globals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>






<function><type><name>Buffer</name></type> <name>nvim_win_get_buf</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>handle</name></name></expr>;</return>
</block_content>}</block>






<function><type><name>void</name></type> <name>nvim_win_set_buf</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>5</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>save_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tab</name> <init>= <expr><call><name>win_find_tabpage</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>save_curtab</name> <init>= <expr><name>curtab</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>switch_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curtab</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kErrorTypeException</name></expr></argument>,
<argument><expr><literal type="string">"Failed to switch to window %d"</literal></expr></argument>,
<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>do_buffer</name><argument_list>(<argument><expr><name>DOBUF_GOTO</name></expr></argument>, <argument><expr><name>DOBUF_FIRST</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kErrorTypeException</name></expr></argument>,
<argument><expr><literal type="string">"Failed to set buffer %d"</literal></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_win</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>, <argument><expr><name>save_curtab</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>






<macro><name>ArrayOf</name><argument_list>(<argument>Integer</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>nvim_win_get_cursor</name><argument_list>(<argument>Window window</argument>, <argument>Error *err</argument>)</argument_list></macro>
<macro><name>FUNC_API_SINCE</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>






<decl_stmt><decl><type><name>void</name></type> <name>nvim_win_set_cursor</name><argument_list>(<argument><expr><name>Window</name> <name>window</name></expr></argument>, <argument><expr><macro><name>ArrayOf</name><argument_list>(<argument>Integer</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <name>pos</name></expr></argument>, <argument><expr><name>Error</name> <operator>*</operator><name>err</name></expr></argument>)</argument_list>
<name>FUNC_API_SINCE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>pos</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>kObjectTypeInteger</name>
<operator>||</operator> <name><name>pos</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>kObjectTypeInteger</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"Argument \"pos\" must be a [row, col] array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>row</name> <init>= <expr><name><name>pos</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>integer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>col</name> <init>= <expr><name><name>pos</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>integer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>row</name> <operator>&gt;</operator> <name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Cursor position outside buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <name>MAXCOL</name> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Column value outside range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor_col_win</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>update_topline_win</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>






<function><type><name>Integer</name></type> <name>nvim_win_get_height</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>win</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</return>
</block_content>}</block>







<function><type><name>void</name></type> <name>nvim_win_set_height</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator> <name>height</name> <operator>&lt;</operator> <name>INT_MIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Height value outside range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>savewin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>win</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>savewin</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>






<function><type><name>Integer</name></type> <name>nvim_win_get_width</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>win</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</return>
</block_content>}</block>







<function><type><name>void</name></type> <name>nvim_win_set_width</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator> <name>width</name> <operator>&lt;</operator> <name>INT_MIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Width value outside range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>savewin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>win</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_setwidth</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>savewin</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<function><type><name>Object</name></type> <name>nvim_win_get_var</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Object</name><operator>)</operator> <name>OBJECT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>dict_get_value</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>







<function><type><name>void</name></type> <name>nvim_win_set_var</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dict_set_var</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>






<function><type><name>void</name></type> <name>nvim_win_del_var</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dict_set_var</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>













<function><type><name>Object</name></type> <name>window_set_var</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Object</name><operator>)</operator> <name>OBJECT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>dict_set_var</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>Object</name></type> <name>window_del_var</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Object</name><operator>)</operator> <name>OBJECT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>dict_set_var</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>Object</name></type> <name>nvim_win_get_option</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Object</name><operator>)</operator> <name>OBJECT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>get_option_from</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>SREQ_WIN</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>









<function><type><name>void</name></type> <name>nvim_win_set_option</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_option_to</name><argument_list>(<argument><expr><name>channel_id</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>SREQ_WIN</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>






<macro><name>ArrayOf</name><argument_list>(<argument>Integer</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>nvim_win_get_position</name><argument_list>(<argument>Window window</argument>, <argument>Error *err</argument>)</argument_list></macro>
<macro><name>FUNC_API_SINCE</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_winrow</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>






<function><type><name>Tabpage</name></type> <name>nvim_win_get_tabpage</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Tabpage</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>win_find_tabpage</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>handle</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>






<function><type><name>Integer</name></type> <name>nvim_win_get_number</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tabnr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>win_get_tabwin</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tabnr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>





<function><type><name>Boolean</name></type> <name>nvim_win_is_valid</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Error</name></type> <name>stub</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>ret</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stub</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block>














<function><type><name>void</name></type> <name>nvim_win_set_config</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>Dictionary</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>new_float</name> <init>= <expr><operator>!</operator><name><name>win</name><operator>-&gt;</operator><name>w_floating</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FloatConfig</name></type> <name>fconfig</name> <init>= <expr><ternary><condition><expr><name>new_float</name></expr> ?</condition><then> <expr><name>FLOAT_CONFIG_INIT</name></expr> </then><else>: <expr><name><name>win</name><operator>-&gt;</operator><name>w_float_config</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_float_config</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fconfig</name></expr></argument>, <argument><expr><operator>!</operator><name>new_float</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_float</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_new_float</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>fconfig</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>win_config_float</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>fconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_pos_changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fconfig</name><operator>.</operator><name>style</name></name> <operator>==</operator> <name>kWinStyleMinimal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>win_set_minimal_style</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>didset_window_options</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>










<function><type><name>Dictionary</name></type> <name>nvim_win_get_config</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wp</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>FloatConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_float_config</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"focusable"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>focusable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"external"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>external</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_floating</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>external</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>relative</name></name> <operator>==</operator> <name>kFloatRelativeWindow</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"win"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>bufpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>pos</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>bufpos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>bufpos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"bufpos"</literal></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"anchor"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(
<argument><expr><name><name>float_anchor_str</name><index>[<expr><name><name>config</name><operator>-&gt;</operator><name>anchor</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"row"</literal></expr></argument>, <argument><expr><call><name>FLOAT_OBJ</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"col"</literal></expr></argument>, <argument><expr><call><name>FLOAT_OBJ</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rel</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_floating</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>external</name></name></expr>
?</condition><then> <expr><name><name>float_relative_str</name><index>[<expr><name><name>config</name><operator>-&gt;</operator><name>relative</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"relative"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>








<function><type><name>void</name></type> <name>nvim_win_close</name><parameter_list>(<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>find_window_by_handle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>win</name> <operator>==</operator> <name>curwin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_cmdwin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tabpage</name> <init>= <expr><call><name>win_find_tabpage</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TryState</name></type> <name>tstate</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>try_enter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ex_win_close</name><argument_list>(<argument><expr><name>force</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><ternary><condition><expr><name>tabpage</name> <operator>==</operator> <name>curtab</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>tabpage</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vim_ignored</name> <operator>=</operator> <call><name>try_leave</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tstate</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
