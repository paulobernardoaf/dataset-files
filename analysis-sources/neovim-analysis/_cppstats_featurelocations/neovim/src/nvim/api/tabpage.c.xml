<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\api\tabpage.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/tabpage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>






<macro><name>ArrayOf</name><argument_list>(<argument>Window</argument>)</argument_list></macro> <macro><name>nvim_tabpage_list_wins</name><argument_list>(<argument>Tabpage tabpage</argument>, <argument>Error *err</argument>)</argument_list></macro>
<macro><name>FUNC_API_SINCE</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tab</name> <init>= <expr><call><name>find_tab_by_handle</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tab</name> <operator>||</operator> <operator>!</operator><call><name>valid_tabpage</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>tab</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Object</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>rv</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>tab</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>items</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>WINDOW_OBJ</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>







<function><type><name>Object</name></type> <name>nvim_tabpage_get_var</name><parameter_list>(<parameter><decl><type><name>Tabpage</name></type> <name>tabpage</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tab</name> <init>= <expr><call><name>find_tab_by_handle</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tab</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Object</name><operator>)</operator> <name>OBJECT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>dict_get_value</name><argument_list>(<argument><expr><name><name>tab</name><operator>-&gt;</operator><name>tp_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>







<function><type><name>void</name></type> <name>nvim_tabpage_set_var</name><parameter_list>(<parameter><decl><type><name>Tabpage</name></type> <name>tabpage</name></decl></parameter>,
<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>,
<parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tab</name> <init>= <expr><call><name>find_tab_by_handle</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tab</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dict_set_var</name><argument_list>(<argument><expr><name><name>tab</name><operator>-&gt;</operator><name>tp_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>






<function><type><name>void</name></type> <name>nvim_tabpage_del_var</name><parameter_list>(<parameter><decl><type><name>Tabpage</name></type> <name>tabpage</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tab</name> <init>= <expr><call><name>find_tab_by_handle</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tab</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dict_set_var</name><argument_list>(<argument><expr><name><name>tab</name><operator>-&gt;</operator><name>tp_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>













<function><type><name>Object</name></type> <name>tabpage_set_var</name><parameter_list>(<parameter><decl><type><name>Tabpage</name></type> <name>tabpage</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tab</name> <init>= <expr><call><name>find_tab_by_handle</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tab</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Object</name><operator>)</operator> <name>OBJECT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>dict_set_var</name><argument_list>(<argument><expr><name><name>tab</name><operator>-&gt;</operator><name>tp_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>Object</name></type> <name>tabpage_del_var</name><parameter_list>(<parameter><decl><type><name>Tabpage</name></type> <name>tabpage</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tab</name> <init>= <expr><call><name>find_tab_by_handle</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tab</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Object</name><operator>)</operator> <name>OBJECT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>dict_set_var</name><argument_list>(<argument><expr><name><name>tab</name><operator>-&gt;</operator><name>tp_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>Window</name></type> <name>nvim_tabpage_get_win</name><parameter_list>(<parameter><decl><type><name>Tabpage</name></type> <name>tabpage</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Window</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tab</name> <init>= <expr><call><name>find_tab_by_handle</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tab</name> <operator>||</operator> <operator>!</operator><call><name>valid_tabpage</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tab</name> <operator>==</operator> <name>curtab</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>nvim_get_current_win</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>tab</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name><name>tab</name><operator>-&gt;</operator><name>tp_curwin</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>handle</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>






<function><type><name>Integer</name></type> <name>nvim_tabpage_get_number</name><parameter_list>(<parameter><decl><type><name>Tabpage</name></type> <name>tabpage</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Integer</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tab</name> <init>= <expr><call><name>find_tab_by_handle</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tab</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>tabpage_index</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>





<function><type><name>Boolean</name></type> <name>nvim_tabpage_is_valid</name><parameter_list>(<parameter><decl><type><name>Tabpage</name></type> <name>tabpage</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Error</name></type> <name>stub</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>ret</name> <init>= <expr><call><name>find_tab_by_handle</name><argument_list>(<argument><expr><name>tabpage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stub</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block>

</unit>
