<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\api\buffer.c">




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lauxlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lua/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/change.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/extmark.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_updates.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"api/buffer.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





















<function><type><name>Integer</name></type> <name>nvim_buf_line_count</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</return>
</block_content>}</block>













<function><type><name>String</name></type> <name>buffer_get_line</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>rv</name> <init>= <expr><block>{ <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>convert_index</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>slice</name> <init>= <expr><call><name>nvim_buf_get_lines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>slice</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <name><name>slice</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>slice</name><operator>.</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>










































<decl_stmt><decl><type><name>Boolean</name></type> <name>nvim_buf_attach</name><argument_list>(<argument><expr><name>uint64_t</name> <name>channel_id</name></expr></argument>,
<argument><expr><name>Buffer</name> <name>buffer</name></expr></argument>,
<argument><expr><name>Boolean</name> <name>send_buffer</name></expr></argument>,
<argument><expr><macro><name>DictionaryOf</name><argument_list>(<argument>LuaRef</argument>)</argument_list></macro> <name>opts</name></expr></argument>,
<argument><expr><name>Error</name> <operator>*</operator><name>err</name></expr></argument>)</argument_list>
<name>FUNC_API_SINCE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_lua</name> <init>= <expr><operator>(</operator><name>channel_id</name> <operator>==</operator> <name>LUA_INTERNAL_CALL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BufUpdateCallbacks</name></type> <name>cb</name> <init>= <expr><name>BUF_UPDATE_CALLBACKS_INIT</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opts</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>k</name> <init>= <expr><name><name>opts</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Object</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>is_lua</name> <operator>&amp;&amp;</operator> <call><name>strequal</name><argument_list>(<argument><expr><literal type="string">"on_lines"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeLuaRef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"callback is not a function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>on_lines</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>luaref</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>luaref</name></name> <operator>=</operator> <name>LUA_NOREF</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_lua</name> <operator>&amp;&amp;</operator> <call><name>strequal</name><argument_list>(<argument><expr><literal type="string">"_on_bytes"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeLuaRef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"callback is not a function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>on_bytes</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>luaref</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>luaref</name></name> <operator>=</operator> <name>LUA_NOREF</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_lua</name> <operator>&amp;&amp;</operator> <call><name>strequal</name><argument_list>(<argument><expr><literal type="string">"on_changedtick"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeLuaRef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"callback is not a function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>on_changedtick</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>luaref</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>luaref</name></name> <operator>=</operator> <name>LUA_NOREF</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_lua</name> <operator>&amp;&amp;</operator> <call><name>strequal</name><argument_list>(<argument><expr><literal type="string">"on_detach"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeLuaRef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"callback is not a function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>on_detach</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>luaref</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>luaref</name></name> <operator>=</operator> <name>LUA_NOREF</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_lua</name> <operator>&amp;&amp;</operator> <call><name>strequal</name><argument_list>(<argument><expr><literal type="string">"utf_sizes"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeBoolean</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"utf_sizes must be boolean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>utf_sizes</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>boolean</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"unexpected key: %s"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>buf_updates_register</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>send_buffer</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>executor_free_luaref</name><argument_list>(<argument><expr><name><name>cb</name><operator>.</operator><name>on_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>executor_free_luaref</name><argument_list>(<argument><expr><name><name>cb</name><operator>.</operator><name>on_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>executor_free_luaref</name><argument_list>(<argument><expr><name><name>cb</name><operator>.</operator><name>on_changedtick</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>executor_free_luaref</name><argument_list>(<argument><expr><name><name>cb</name><operator>.</operator><name>on_detach</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>











<function><type><name>Boolean</name></type> <name>nvim_buf_detach</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>,
<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>4</function>) <macro><name>FUNC_API_REMOTE_ONLY</name></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>buf_updates_unregister</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buf_clear_luahl</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl</name></name> <operator>||</operator> <name>force</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>executor_free_luaref</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>executor_free_luaref</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl_window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>executor_free_luaref</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>executor_free_luaref</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl_start</name></name> <operator>=</operator> <name>LUA_NOREF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl_window</name></name> <operator>=</operator> <name>LUA_NOREF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl_line</name></name> <operator>=</operator> <name>LUA_NOREF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl_end</name></name> <operator>=</operator> <name>LUA_NOREF</name></expr>;</expr_stmt>
</block_content>}</block></function>










<decl_stmt><decl><type><name>void</name></type> <name>nvim__buf_set_luahl</name><argument_list>(<argument><expr><name>uint64_t</name> <name>channel_id</name></expr></argument>, <argument><expr><name>Buffer</name> <name>buffer</name></expr></argument>,
<argument><expr><macro><name>DictionaryOf</name><argument_list>(<argument>LuaRef</argument>)</argument_list></macro> <name>opts</name></expr></argument>, <argument><expr><name>Error</name> <operator>*</operator><name>err</name></expr></argument>)</argument_list>
<name>FUNC_API_LUA_ONLY</name>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_buf_later</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>buf_clear_luahl</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opts</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>k</name> <init>= <expr><name><name>opts</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Object</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><literal type="string">"on_start"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeLuaRef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"callback is not a function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl_start</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>luaref</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>luaref</name></name> <operator>=</operator> <name>LUA_NOREF</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><literal type="string">"on_window"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeLuaRef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"callback is not a function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl_window</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>luaref</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>luaref</name></name> <operator>=</operator> <name>LUA_NOREF</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><literal type="string">"on_line"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeLuaRef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"callback is not a function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl_line</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>luaref</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>luaref</name></name> <operator>=</operator> <name>LUA_NOREF</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"unexpected key: %s"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>buf_clear_luahl</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>nvim__buf_redraw_range</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>last</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_LUA_ONLY
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_buf_range_later</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>first</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><name>void</name></type> <name>buffer_set_line</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Object</name></type> <name>l</name> <init>= <expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>array</name> <init>= <expr><block>{ <expr><operator>.</operator><name>items</name> <operator>=</operator> <operator>&amp;</operator><name>l</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>convert_index</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nvim_buf_set_lines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>buffer_del_line</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>array</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>convert_index</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nvim_buf_set_lines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<macro><name>ArrayOf</name><argument_list>(<argument>String</argument>)</argument_list></macro> <macro><name>buffer_get_line_slice</name><argument_list>(<argument>Buffer buffer</argument>,
<argument>Integer start</argument>,
<argument>Integer end</argument>,
<argument>Boolean include_start</argument>,
<argument>Boolean include_end</argument>,
<argument>Error *err</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>convert_index</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>!</operator><name>include_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>convert_index</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>include_end</name></expr>;</expr_stmt>
<return>return <expr><call><name>nvim_buf_get_lines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>start</name></expr></argument> , <argument><expr><name>end</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

















<macro><name>ArrayOf</name><argument_list>(<argument>String</argument>)</argument_list></macro> <macro><name>nvim_buf_get_lines</name><argument_list>(<argument>uint64_t channel_id</argument>,
<argument>Buffer buffer</argument>,
<argument>Integer start</argument>,
<argument>Integer end</argument>,
<argument>Boolean strict_indexing</argument>,
<argument>Error *err</argument>)</argument_list></macro>
<macro><name>FUNC_API_SINCE</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>oob</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>normalize_index</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>normalize_index</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strict_indexing</name> <operator>&amp;&amp;</operator> <name>oob</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Index out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Object</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>rv</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>buf_collect_lines</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>rv</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>,
<argument><expr><operator>(</operator><name>channel_id</name> <operator>!=</operator> <name>VIML_INTERNAL_CALL</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rv</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>rv</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>rv</name><operator>.</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>items</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>

















<decl_stmt><decl><type><name>void</name></type> <name>buffer_set_line_slice</name><argument_list>(<argument><expr><name>Buffer</name> <name>buffer</name></expr></argument>,
<argument><expr><name>Integer</name> <name>start</name></expr></argument>,
<argument><expr><name>Integer</name> <name>end</name></expr></argument>,
<argument><expr><name>Boolean</name> <name>include_start</name></expr></argument>,
<argument><expr><name>Boolean</name> <name>include_end</name></expr></argument>,
<argument><expr><macro><name>ArrayOf</name><argument_list>(<argument>String</argument>)</argument_list></macro> <name>replacement</name></expr></argument>,
<argument><expr><name>Error</name> <operator>*</operator><name>err</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>convert_index</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>!</operator><name>include_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>convert_index</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>include_end</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nvim_buf_set_lines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>





















<decl_stmt><decl><type><name>void</name></type> <name>nvim_buf_set_lines</name><argument_list>(<argument><expr><name>uint64_t</name> <name>channel_id</name></expr></argument>,
<argument><expr><name>Buffer</name> <name>buffer</name></expr></argument>,
<argument><expr><name>Integer</name> <name>start</name></expr></argument>,
<argument><expr><name>Integer</name> <name>end</name></expr></argument>,
<argument><expr><name>Boolean</name> <name>strict_indexing</name></expr></argument>,
<argument><expr><macro><name>ArrayOf</name><argument_list>(<argument>String</argument>)</argument_list></macro> <name>replacement</name></expr></argument>,
<argument><expr><name>Error</name> <operator>*</operator><name>err</name></expr></argument>)</argument_list>
<name>FUNC_API_SINCE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>oob</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>normalize_index</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>normalize_index</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strict_indexing</name> <operator>&amp;&amp;</operator> <name>oob</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Index out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"Argument \"start\" is higher than \"end\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>replacement</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>replacement</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>kObjectTypeString</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"All items in the replacement array must be strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channel_id</name> <operator>!=</operator> <name>VIML_INTERNAL_CALL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>String</name></type> <name>l</name> <init>= <expr><name><name>replacement</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>NL</name></expr></argument>, <argument><expr><name><name>l</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"String cannot contain newlines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_len</name> <init>= <expr><name><name>replacement</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>old_len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>lines</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>new_len</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>xcalloc</name><argument_list>(<argument><expr><name>new_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>String</name></type> <name>l</name> <init>= <expr><name><name>replacement</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memchrsub</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>NL</name></expr></argument>, <argument><expr><name><name>l</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>aco_save_T</name></type> <name>aco</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>aucmd_prepbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>, <argument><expr><operator>(</operator><name>buf_T</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MODIFIABLE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Buffer is not 'modifiable'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>start</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>end</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Failed to save undo information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>size_t</name></type> <name>to_delete</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>new_len</name> <operator>&lt;</operator> <name>old_len</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>old_len</name> <operator>-</operator> <name>new_len</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>to_delete</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ml_delete</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>start</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Failed to delete line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>to_delete</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extra</name> <operator>-=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>to_delete</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>size_t</name></type> <name>to_replace</name> <init>= <expr><ternary><condition><expr><name>old_len</name> <operator>&lt;</operator> <name>new_len</name></expr> ?</condition><then> <expr><name>old_len</name></expr> </then><else>: <expr><name>new_len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>to_replace</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>lnum</name> <init>= <expr><name>start</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name>MAXLNUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Index value is too high"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ml_replace</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Failed to replace line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>to_replace</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>lnum</name> <init>= <expr><name>start</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name>MAXLNUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Index value is too high"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ml_append</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Failed to insert line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>extra</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>





<expr_stmt><expr><call><name>mark_adjust</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>start</name></expr></argument>,
<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><name>MAXLNUM</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>extra</name></expr></argument>,
<argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>start</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>extra</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fix_cursor</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aucmd_restbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>















<function><type><name>Integer</name></type> <name>nvim_buf_get_offset</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>5</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>index</name></expr></argument> &gt;</argument_list></name> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Index out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ml_find_line_or_offset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>







<function><type><name>Object</name></type> <name>nvim_buf_get_var</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Object</name><operator>)</operator> <name>OBJECT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>dict_get_value</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>







<function><type><name>Integer</name></type> <name>nvim_buf_get_changedtick</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>2</function>)
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>buf_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>buf_get_changedtick</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>








<macro><name>ArrayOf</name><argument_list>(<argument>Dictionary</argument>)</argument_list></macro> <macro><name>nvim_buf_get_keymap</name><argument_list>(<argument>Buffer buffer</argument>, <argument>String mode</argument>, <argument>Error *err</argument>)</argument_list></macro>
<macro><name>FUNC_API_SINCE</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>keymap_array</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>






<function><type><name>void</name></type> <name>nvim_buf_set_keymap</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rhs</name></decl></parameter>,
<parameter><decl><type><name>Dictionary</name></type> <name>opts</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>modify_keymap</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>






<function><type><name>void</name></type> <name>nvim_buf_del_keymap</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>rhs</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <literal type="string">""</literal></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>opts</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>modify_keymap</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>








<function><type><name>Dictionary</name></type> <name>nvim_buf_get_commands</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Dictionary</name></type> <name>opts</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>4</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>global</name> <init>= <expr><operator>(</operator><name>buffer</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>builtin</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opts</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>k</name> <init>= <expr><name><name>opts</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Object</name></type> <name>v</name> <init>= <expr><name><name>opts</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strequal</name><argument_list>(<argument><expr><literal type="string">"builtin"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"unexpected key: %s"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>Dictionary</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><literal type="string">"builtin"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>builtin</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>data</name><operator>.</operator><name>boolean</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>global</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>builtin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"builtin=true not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>Dictionary</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>commands_array</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>builtin</name> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Dictionary</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>commands_array</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>







<function><type><name>void</name></type> <name>nvim_buf_set_var</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dict_set_var</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>






<function><type><name>void</name></type> <name>nvim_buf_del_var</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dict_set_var</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>













<function><type><name>Object</name></type> <name>buffer_set_var</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Object</name><operator>)</operator> <name>OBJECT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>dict_set_var</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>Object</name></type> <name>buffer_del_var</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Object</name><operator>)</operator> <name>OBJECT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>dict_set_var</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>Object</name></type> <name>nvim_buf_get_option</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Object</name><operator>)</operator> <name>OBJECT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>get_option_from</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SREQ_BUF</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>









<function><type><name>void</name></type> <name>nvim_buf_set_option</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>,
<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_option_to</name><argument_list>(<argument><expr><name>channel_id</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SREQ_BUF</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>









<function><type><name>Integer</name></type> <name>nvim_buf_get_number</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<macro><name>FUNC_API_DEPRECATED_SINCE</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Integer</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</return>
</block_content>}</block>






<function><type><name>String</name></type> <name>nvim_buf_get_name</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>rv</name> <init>= <expr><name>STRING_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>






<function><type><name>void</name></type> <name>nvim_buf_set_name</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>aco_save_T</name></type> <name>aco</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>aucmd_prepbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ren_ret</name> <init>= <expr><call><name>rename_buffer</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>aucmd_restbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ren_ret</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Failed to rename buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>






<function><type><name>Boolean</name></type> <name>nvim_buf_is_loaded</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>5</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Error</name></type> <name>stub</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stub</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block>








<function><type><name>Boolean</name></type> <name>nvim_buf_is_valid</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Error</name></type> <name>stub</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>ret</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stub</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block>










<decl_stmt><decl><type><name>void</name></type> <name>buffer_insert</name><argument_list>(<argument><expr><name>Buffer</name> <name>buffer</name></expr></argument>,
<argument><expr><name>Integer</name> <name>lnum</name></expr></argument>,
<argument><expr><macro><name>ArrayOf</name><argument_list>(<argument>String</argument>)</argument_list></macro> <name>lines</name></expr></argument>,
<argument><expr><name>Error</name> <operator>*</operator><name>err</name></expr></argument>)</argument_list>
<block>{<block_content>


<expr_stmt><expr><call><name>nvim_buf_set_lines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>









<macro><name>ArrayOf</name><argument_list>(<argument>Integer</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>nvim_buf_get_mark</name><argument_list>(<argument>Buffer buffer</argument>, <argument>String name</argument>, <argument>Error *err</argument>)</argument_list></macro>
<macro><name>FUNC_API_SINCE</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"Mark name must be a single character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>posp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>mark</name> <init>= <expr><operator>*</operator><name><name>name</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>try_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>save_buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>switch_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>posp</name> <operator>=</operator> <call><name>getmark</name><argument_list>(<argument><expr><name>mark</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restore_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>try_end</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>posp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Invalid mark name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>posp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>posp</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>








<macro><name>ArrayOf</name><argument_list>(<argument>Integer</argument>)</argument_list></macro> <macro><name>nvim_buf_get_extmark_by_id</name><argument_list>(<argument>Buffer buffer</argument>, <argument>Integer ns_id</argument>,
<argument>Integer id</argument>, <argument>Error *err</argument>)</argument_list></macro>
<macro><name>FUNC_API_SINCE</name><argument_list>(<argument><literal type="number">7</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ns_initialized</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ns_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Invalid ns_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ExtmarkInfo</name></type> <name>extmark</name> <init>= <expr><call><name>extmark_from_id</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ns_id</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>extmark</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name><name>extmark</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name><name>extmark</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>











































<function><type><name>Array</name></type> <name>nvim_buf_get_extmarks</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>ns_id</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>start</name></decl></parameter>,
<parameter><decl><type><name>Object</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>Dictionary</name></type> <name>opts</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>7</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ns_initialized</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ns_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Invalid ns_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Integer</name></type> <name>limit</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opts</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>k</name> <init>= <expr><name><name>opts</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Object</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><literal type="string">"limit"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeInteger</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"limit is not an integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"unexpected key: %s"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>limit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>reverse</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>l_col</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extmark_get_index_from_obj</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ns_id</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l_row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l_col</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>u_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>u_col</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extmark_get_index_from_obj</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ns_id</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u_row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u_col</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l_row</name> <operator>&gt;</operator> <name>u_row</name> <operator>||</operator> <operator>(</operator><name>l_row</name> <operator>==</operator> <name>u_row</name> <operator>&amp;&amp;</operator> <name>l_col</name> <operator>&gt;</operator> <name>u_col</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reverse</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>ExtmarkArray</name></type> <name>marks</name> <init>= <expr><call><name>extmark_get</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ns_id</name></expr></argument>, <argument><expr><name>l_row</name></expr></argument>, <argument><expr><name>l_col</name></expr></argument>, <argument><expr><name>u_row</name></expr></argument>,
<argument><expr><name>u_col</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>limit</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>marks</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>mark</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExtmarkInfo</name></type> <name>extmark</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name>marks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>mark</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name><name>extmark</name><operator>.</operator><name>mark_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>mark</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>extmark</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>mark</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>extmark</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name>marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>


















<function><type><name>Integer</name></type> <name>nvim_buf_set_extmark</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>ns_id</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>Dictionary</name></type> <name>opts</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>7</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ns_initialized</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ns_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Invalid ns_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"opts dict isn't empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>line</name></expr></argument> &gt;</argument_list></name> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"line value outside range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>line</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>line</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>Integer</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><macro><name>col</name></macro> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>col</name> <operator>&gt;</operator> <operator>(</operator><name>Integer</name><operator>)</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"col value outside range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>id_num</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>id_num</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>id</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Invalid mark id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>id_num</name> <operator>=</operator> <call><name>extmark_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ns_id</name></expr></argument>, <argument><expr><name>id_num</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>col</name></expr></argument>, <argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>Integer</name><operator>)</operator><name>id_num</name></expr>;</return>
</block_content>}</block>








<function><type><name>Boolean</name></type> <name>nvim_buf_del_extmark</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>ns_id</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>7</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ns_initialized</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ns_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Invalid ns_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>extmark_del</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ns_id</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>































<function><type><name>Integer</name></type> <name>nvim_buf_add_highlight</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>src_id</name></decl></parameter>,
<parameter><decl><type><name>String</name></type> <name>hl_group</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>line</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>col_start</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>col_end</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>line</name> <operator>&gt;=</operator> <name>MAXLNUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Line number outside range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>col_start</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>col_start</name></expr></argument> &gt;</argument_list></name> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Column value outside range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>col_end</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>col_end</name></expr></argument> &gt;</argument_list></name> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col_end</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ns_id</name> <init>= <expr><call><name>src2ns</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name>line</name> <operator>&amp;&amp;</operator> <name>line</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>src_id</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hlg_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hl_group</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hlg_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>hl_group</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>hl_group</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>src_id</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_line</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>line</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>col_end</name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end_line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>extmark_add_decoration</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ns_id</name></expr></argument>, <argument><expr><name>hlg_id</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>col_start</name></expr></argument>,
<argument><expr><name>end_line</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>col_end</name></expr></argument>,
<argument><expr><name>VIRTTEXT_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>src_id</name></expr>;</return>
</block_content>}</block>













<function><type><name>void</name></type> <name>nvim_buf_clear_namespace</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>ns_id</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>line_start</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>line_end</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>5</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line_start</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>line_start</name> <operator>&gt;=</operator> <name>MAXLNUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Line number outside range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line_end</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>line_end</name></expr></argument> &gt;</argument_list></name> <name>MAXLNUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_end</name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>extmark_clear</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>ns_id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ns_id</name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>line_start</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>line_end</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>











<function><type><name>void</name></type> <name>nvim_buf_clear_highlight</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>ns_id</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>line_start</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>line_end</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>nvim_buf_clear_namespace</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>ns_id</name></expr></argument>, <argument><expr><name>line_start</name></expr></argument>, <argument><expr><name>line_end</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>VirtText</name></type> <name>parse_virt_text</name><parameter_list>(<parameter><decl><type><name>Array</name></type> <name>chunks</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VirtText</name></type> <name>virt_text</name> <init>= <expr><name>KV_INITIAL_VALUE</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chunks</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>chunks</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>kObjectTypeArray</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Chunk is not an array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>chunk</name> <init>= <expr><name><name>chunks</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>chunk</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">2</literal>
<operator>||</operator> <name><name>chunk</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>kObjectTypeString</name>
<operator>||</operator> <operator>(</operator><name><name>chunk</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>chunk</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>kObjectTypeString</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"Chunk is not an array with one or two strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><name><name>chunk</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><call><name>transstr</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>str</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>str</name><operator>.</operator><name>data</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>hl_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>String</name></type> <name>hl</name> <init>= <expr><name><name>chunk</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hl</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hl_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>hl</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>hl</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>kv_push</name><argument_list>(<argument>virt_text</argument>, <argument>((VirtTextChunk){ .text = text, .hl_id = hl_id })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>

<return>return <expr><name>virt_text</name></expr>;</return>

<label><name>free_exit</name>:</label>
<expr_stmt><expr><call><name>clear_virttext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>virt_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>virt_text</name></expr>;</return>
</block_content>}</block></function>





























<function><type><name>Integer</name></type> <name>nvim_buf_set_virtual_text</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>src_id</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>line</name></decl></parameter>,
<parameter><decl><type><name>Array</name></type> <name>chunks</name></decl></parameter>,
<parameter><decl><type><name>Dictionary</name></type> <name>opts</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>5</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>line</name> <operator>&gt;=</operator> <name>MAXLNUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Line number outside range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"opts dict isn't empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ns_id</name> <init>= <expr><call><name>src2ns</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VirtText</name></type> <name>virt_text</name> <init>= <expr><call><name>parse_virt_text</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>VirtText</name> <modifier>*</modifier></type><name>existing</name> <init>= <expr><call><name>extmark_find_virttext</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>line</name></expr></argument>, <argument><expr><name>ns_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>existing</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clear_virttext</name><argument_list>(<argument><expr><name>existing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>existing</name> <operator>=</operator> <name>virt_text</name></expr>;</expr_stmt>
<return>return <expr><name>src_id</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>extmark_add_decoration</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ns_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>virt_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>src_id</name></expr>;</return>
</block_content>}</block>
















<function><type><name>Array</name></type> <name>nvim_buf_get_virtual_text</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_API_SINCE<parameter_list>(</parameter_list>7</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>chunks</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>chunks</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>line</name> <operator>&gt;=</operator> <name>MAXLNUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Line number outside range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>chunks</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>VirtText</name> <modifier>*</modifier></type><name>virt_text</name> <init>= <expr><call><name>extmark_find_virttext</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>virt_text</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>chunks</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>virt_text</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>chunk</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VirtTextChunk</name> <modifier>*</modifier></type><name>vtc</name> <init>= <expr><operator>&amp;</operator><name><name>virt_text</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name><name>vtc</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vtc</name><operator>-&gt;</operator><name>hl_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>syn_id2name</name><argument_list>(<argument><expr><name><name>vtc</name><operator>-&gt;</operator><name>hl_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>chunks</name></expr>;</return>
</block_content>}</block>

<function><type><name>Integer</name></type> <name>nvim__buf_add_decoration</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>ns_id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>hl_group</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>start_row</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>start_col</name></decl></parameter>,
<parameter><decl><type><name>Integer</name></type> <name>end_row</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>end_col</name></decl></parameter>,
<parameter><decl><type><name>Array</name></type> <name>virt_text</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ns_initialized</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ns_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Invalid ns_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>start_row</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>start_row</name> <operator>&gt;=</operator> <name>MAXLNUM</name> <operator>||</operator> <name>end_row</name></expr></argument> &gt;</argument_list></name> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Line number outside range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>start_col</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>start_col</name></expr></argument> &gt;</argument_list></name> <name>MAXCOL</name> <operator>||</operator> <name>end_col</name> <operator>&gt;</operator> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Column value outside range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end_row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>end_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end_row</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end_col</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_row</name> <operator>&gt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>
<operator>||</operator> <name>end_row</name> <operator>&gt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hlg_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hl_group</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hlg_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>hl_group</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>hl_group</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>VirtText</name></type> <name>vt</name> <init>= <expr><call><name>parse_virt_text</name><argument_list>(<argument><expr><name>virt_text</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>mark_id</name> <init>= <expr><call><name>extmark_add_decoration</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ns_id</name></expr></argument>, <argument><expr><name>hlg_id</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>start_row</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>start_col</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>end_row</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>end_col</name></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>Integer</name><operator>)</operator><name>mark_id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dictionary</name></type> <name>nvim__buf_stats</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>rv</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>find_buffer_by_handle</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"flush_count"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>flush_count</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"current_lnum"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"line_dirty"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_LINE_DIRTY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"dirty_bytes"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>deleted_bytes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_curhead</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_curhead</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uhp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_u_newhead</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uhp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"uhp_extmark_size"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name>kv_size</name><argument_list>(<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_extmark</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>fix_cursor</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>hi</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>lo</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>hi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+=</operator> <name>extra</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>extra</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>changed_cline_bef_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>invalidate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>normalize_index</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>oob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>line_count</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <ternary><condition><expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>line_count</name> <operator>+</operator> <name>index</name> <operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>index</name></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>line_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>oob</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name>line_count</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>oob</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>convert_index</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>index</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>index</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
