<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\main.c">


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTERN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;msgpack.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/channel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/aucmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fold.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/hashtab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/iconv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/if_cscope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lua/executor.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mouse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/normal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os_unix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/profile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/popupmnu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/quickfix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/sign.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui_compositor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/shada.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/fileio.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os_win_console.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/signal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/channel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/ui.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/dispatch.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/pty_process_unix.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/vim.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ARG_CMDS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN_HOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN_VER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN_TABS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>use_vimrc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n_commands</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>commands</name><index>[<expr><name>MAX_ARG_CMDS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name></type> <name><name>cmds_tofree</name><index>[<expr><name>MAX_ARG_CMDS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>n_pre_commands</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>pre_commands</name><index>[<expr><name>MAX_ARG_CMDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>edit_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tagname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>use_ef</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>input_isatty</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>output_isatty</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>err_isatty</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>no_swap_file</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>use_debug_break_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>window_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>window_layout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>diff_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>listen_addr</name></decl>;</decl_stmt> 
}</block></struct></type> <name>mparm_T</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDIT_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDIT_FILE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDIT_STDIN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDIT_TAG</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDIT_QF</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"main.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>Loop</name></type> <name>main_loop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_arg_missing</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Argument missing after"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_opt_garbage</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Garbage after option argument"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_opt_unknown</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Unknown option argument"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_too_many_args</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Too many edit arguments"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_extra_cmd</name> <init>=
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Too many \"+command\", \"-c command\" or \"--cmd command\" arguments"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>event_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>loop_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resize_events</name> <operator>=</operator> <call><name>multiqueue_new_child</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>msgpack_rpc_init_method_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_rpc_helpers_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>remote_ui_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_vim_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>event_teardown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>multiqueue_process_events</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>loop_poll_events</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>input_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_teardown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>process_teardown</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>timer_teardown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>server_teardown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal_teardown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_teardown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>loop_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>early_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>env_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fs_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eval_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>init_path</name><argument_list>(<argument><expr><ternary><condition><expr><name>argv0</name></expr> ?</condition><then> <expr><name>argv0</name></expr> </then><else>: <expr><literal type="string">"nvim"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_normal_cmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>highlight_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><call><name>init_locale</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_alloc_first</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_yank</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>alist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>global_alist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>global_alist</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






<expr_stmt><expr><call><name>init_homedir</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>set_init_1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"inits 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_lang_var</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>init_signs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_comp_syn_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAKE_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>nvim_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl> 
<decl_stmt><decl><type><name>int</name></type> <name>nvim_main</name><argument_list>(<argument><expr><name>int</name> <name>argc</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator><name>argv</name></expr></argument>)</argument_list>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<name>int</name> <name>wmain</name><argument_list>(<argument><expr><name>int</name> <name>argc</name></expr></argument>, <argument><expr><name>wchar_t</name> <operator>*</operator><operator>*</operator><name>argv_w</name></expr></argument>)</argument_list> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> main<argument_list>(<argument><expr><name>int</name> <name>argc</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator><name>argv</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAKE_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>argc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>utf16_to_utf8</name><argument_list>(<argument><expr><name><name>argv_w</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>argv0</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mparm_T</name></type> <name>params</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cwd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>time_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>init_params</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_startuptime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>event_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>early_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>check_and_set_isatty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>command_line_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>embedded_mode</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>channel_from_stdio</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>CALLBACK_READER_INIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>server_init</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>listen_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>GARGCOUNT</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>get_fname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"expanding arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>.</operator><name>diff_mode</name></name> <operator>&amp;&amp;</operator> <name><name>params</name><operator>.</operator><name>window_count</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>window_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<expr_stmt><expr><name>RedrawingDisabled</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setbuf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>full_screen</name> <operator>=</operator> <operator>!</operator><name>silent_mode</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>win_init_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>.</operator><name>diff_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>diff_win_options</name><argument_list>(<argument><expr><name>firstwin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_ch</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>Rows</name> <operator>&gt;=</operator> <name>p_ch</name> <operator>&amp;&amp;</operator> <name>Rows</name> <operator>-</operator> <name>p_ch</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Rows</name> <operator>-</operator> <name>p_ch</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>cmdline_row</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screenalloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>set_init_2</name><argument_list>(<argument><expr><name>headless_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"inits 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>no_wait_return</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_highlight</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"init highlight"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>debug_break_level</name> <operator>=</operator> <name><name>params</name><operator>.</operator><name>use_debug_break_level</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>params</name><operator>.</operator><name>input_isatty</name></name> <operator>&amp;&amp;</operator> <name>silent_mode</name> <operator>&amp;&amp;</operator> <name>exmode_active</name> <operator>==</operator> <name>EXMODE_NORMAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>input_start</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO</name></cpp:macro> <cpp:value>"term://"</cpp:value></cpp:define>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><literal type="string">"augroup nvim_terminal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><literal type="string">"autocmd!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><literal type="string">"autocmd BufReadCmd "</literal> <name>PROTO</name> <literal type="string">"* nested "</literal>
<literal type="string">":if !exists('b:term_title')|call termopen( "</literal>

<literal type="string">"matchstr(expand(\"&lt;amatch&gt;\"), "</literal>
<literal type="string">"'\\c\\m"</literal> <name>PROTO</name> <literal type="string">"\\%(.\\{-}//\\%(\\d\\+:\\)\\?\\)\\?\\zs.*'), "</literal>

<literal type="string">"{'cwd': expand(get(matchlist(expand(\"&lt;amatch&gt;\"), "</literal>
<literal type="string">"'\\c\\m"</literal> <name>PROTO</name> <literal type="string">"\\(.\\{-}\\)//'), 1, ''))})"</literal>
<literal type="string">"|endif"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><literal type="string">"augroup END"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROTO</name></cpp:undef>



<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>.</operator><name>use_vimrc</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strequal</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>use_vimrc</name></name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p_lpl</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>use_remote_ui</name> <init>= <expr><operator>(</operator><name>embedded_mode</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>headless_mode</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>use_builtin_ui</name> <init>= <expr><operator>(</operator><operator>!</operator><name>headless_mode</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>embedded_mode</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>silent_mode</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>use_remote_ui</name> <operator>||</operator> <name>use_builtin_ui</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"waiting for UI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_remote_ui</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>remote_ui_wait_for_attach</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ui_builtin_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"done waiting for UI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>starting</name> <operator>=</operator> <name>NO_BUFFERS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screenclear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"initialized screen early for UI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>exe_pre_commands</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>source_startup_scripts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>.</operator><name>use_vimrc</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>strequal</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>use_vimrc</name></name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filetype_maybe_enable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_maybe_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>load_plugins</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>set_window_layout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>recoverymode</name> <operator>&amp;&amp;</operator> <name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>recover_names</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>set_init_3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"inits 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>.</operator><name>no_swap_file</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p_uc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>silent_mode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p_ut</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_shada</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>shada_read_everything</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"reading ShaDa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_vim_var_list</name><argument_list>(<argument><expr><name>VV_OLDFILES</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_vim_var_list</name><argument_list>(<argument><expr><name>VV_OLDFILES</name></expr></argument>, <argument><expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>handle_quickfix</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>starting</name> <operator>=</operator> <name>NO_BUFFERS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>no_wait_return</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exmode_active</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>.</operator><name>edit_type</name></name> <operator>==</operator> <name>EDIT_STDIN</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>recoverymode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>read_stdin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>exmode_active</name> <operator>||</operator> <name>use_remote_ui</name> <operator>||</operator> <name>use_builtin_ui</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>screenclear</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"clearing screen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>no_wait_return</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>create_windows</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"opening buffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_SWAPCOMMAND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>exmode_active</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"BufEnter autocommands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>.</operator><name>edit_type</name></name> <operator>==</operator> <name>EDIT_QF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>qf_jump</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"jump to first error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>edit_buffers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>.</operator><name>diff_mode</name></name></expr>)</condition> <block>{<block_content>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>diff_win_options</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>shorten_fnames</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>handle_tag</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>tagname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>.</operator><name>n_commands</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exe_commands</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>starting</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_wait_return</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>do_autochdir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>p_im</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_start_insertmode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_VIM_DID_ENTER</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_VIMENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"VimEnter autocommands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_remote_ui</name> <operator>||</operator> <name>use_builtin_ui</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_autocmd_uienter</name><argument_list>(<argument><expr><ternary><condition><expr><name>use_remote_ui</name></expr> ?</condition><then> <expr><name>CHAN_STDIO</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"UIEnter autocommands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>set_reg_var</name><argument_list>(<argument><expr><call><name>get_default_register_name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_scrollbind</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"diff scrollbinding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>K_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>cb_flags</name> <operator>&amp;</operator> <name>CB_UNNAMEDMASK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>eval_has_provider</name><argument_list>(<argument><expr><literal type="string">"clipboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"before starting main loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILOG</name><argument_list>(<argument><expr><literal type="string">"starting main loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>normal_enter</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAKE_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>os_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NORETURN
<block>{<block_content>
<expr_stmt><expr><name>exiting</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_call_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ml_close_all</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>event_teardown</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>input_global_fd</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stream_set_blocking</name><argument_list>(<argument><expr><call><name>input_global_fd</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ILOG</name><argument_list>(<argument><expr><literal type="string">"Nvim exit: %d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free_all_mem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>getout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exitval</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NORETURN
<block>{<block_content>
<expr_stmt><expr><name>exiting</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>exmode_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>exitval</name> <operator>+=</operator> <name>ex_exitval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_EXITING</name></expr></argument>, <argument><expr><name>exitval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ui_cursor_goto</name><argument_list>(<argument><expr><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>hash_debug_results</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_vim_var_nr</name><argument_list>(<argument><expr><name>VV_DYING</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>tabpage_T</name> <modifier>*</modifier></type><name>next_tp</name></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><specifier>const</specifier> <name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>first_tabpage</name></expr></init></decl>;</init> <condition><expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name>next_tp</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next_tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</expr_stmt>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>tp</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>buf_get_changedtick</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFWINLEAVE</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>,
<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>buf_set_changedtick</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></for>


<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFUNLOAD</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_VIMLEAVEPRE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_shada</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_shada</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shada_write_file</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_vim_var_nr</name><argument_list>(<argument><expr><name>VV_DYING</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_VIMLEAVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>profile_dump</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>did_emsg</name></expr>
)</condition> <block>{<block_content>

<expr_stmt><expr><name>no_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wait_return</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ui_cursor_goto</name><argument_list>(<argument><expr><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>p_title</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_titleold</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_set_title</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_titleold</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cs_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>garbage_collect_at_exit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>garbage_collect</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_exit</name><argument_list>(<argument><expr><name>exitval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type> <name>get_number_arg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>*</operator><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>def</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p</name><index>[<expr><operator>*</operator><name>idx</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>*</operator><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <operator>*</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>def</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_locale</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name></type> <name><name>localepath</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>localepath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>localepath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_PROGPATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail_with_sep</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>localepath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>localepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><literal type="string">"share/locale"</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>localepath</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>tail</name> <operator>-</operator> <name>localepath</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bindtextdomain</name><argument_list>(<argument><expr><name>PROJECT_NAME</name></expr></argument>, <argument><expr><name>localepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>textdomain</name><argument_list>(<argument><expr><name>PROJECT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"locale set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>edit_stdin</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>explicit</name></decl></parameter>, <parameter><decl><type><name>mparm_T</name> <modifier>*</modifier></type><name>parmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>implicit</name> <init>= <expr><operator>!</operator><name>headless_mode</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name>embedded_mode</name>
<operator>&amp;&amp;</operator> <name>exmode_active</name> <operator>!=</operator> <name>EXMODE_NORMAL</name> 
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>parmp</name><operator>-&gt;</operator><name>input_isatty</name></name>
<operator>&amp;&amp;</operator> <name><name>scriptin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></init></decl>;</decl_stmt> 
<return>return <expr><name>explicit</name> <operator>||</operator> <name>implicit</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>command_line_scan</name><parameter_list>(<parameter><decl><type><name>mparm_T</name> <modifier>*</modifier></type><name>parmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><name><name>parmp</name><operator>-&gt;</operator><name>argc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><name><name>parmp</name><operator>-&gt;</operator><name>argv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argv_idx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>had_stdin_file</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>had_minmin</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>want_argument</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<while>while <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>had_minmin</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>n_commands</name></name> <operator>&gt;=</operator> <name>MAX_ARG_CMDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mainerr</name><argument_list>(<argument><expr><name>err_extra_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>argv_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>commands</name><index>[<expr><name><name>parmp</name><operator>-&gt;</operator><name>n_commands</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="string">"$"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>commands</name><index>[<expr><name><name>parmp</name><operator>-&gt;</operator><name>n_commands</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>had_minmin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>want_argument</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>argv_idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NUL</name></expr>:</case> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>exmode_active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>silent_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>no_swap_file</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>!=</operator> <name>EDIT_NONE</name>
<operator>&amp;&amp;</operator> <name><name>parmp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>!=</operator> <name>EDIT_FILE</name>
<operator>&amp;&amp;</operator> <name><name>parmp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>!=</operator> <name>EDIT_STDIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mainerr</name><argument_list>(<argument><expr><name>err_too_many_args</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>had_stdin_file</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>=</operator> <name>EDIT_STDIN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>argv_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <block>{<block_content> 




<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr></argument>, <argument><expr><literal type="string">"api-info"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FileDescriptor</name></type> <name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fof_ret</name> <init>= <expr><call><name>file_open_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>,
<argument><expr><name>kFileWriteOnly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>msgpack_packer</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>msgpack_packer_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>msgpack_file_write</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fof_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E5421: Failed to open stdin: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>os_strerror</name><argument_list>(<argument><expr><name>fof_ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_outofmem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Object</name></type> <name>md</name> <init>= <expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><call><name>api_metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msgpack_rpc_from_object</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msgpack_packer_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ff_ret</name> <init>= <expr><call><name>file_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ff_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_file_write_error</name><argument_list>(<argument><expr><name>ff_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>os_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr></argument>, <argument><expr><literal type="string">"headless"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>headless_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr></argument>, <argument><expr><literal type="string">"embed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>embedded_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr></argument>, <argument><expr><literal type="string">"listen"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>want_argument</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv_idx</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr></argument>, <argument><expr><literal type="string">"literal"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr></argument>, <argument><expr><literal type="string">"noplugin"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p_lpl</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr></argument>, <argument><expr><literal type="string">"cmd"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>want_argument</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv_idx</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr></argument>, <argument><expr><literal type="string">"startuptime"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>want_argument</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv_idx</name> <operator>+=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr></argument>, <argument><expr><literal type="string">"clean"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>use_vimrc</name></name> <operator>=</operator> <literal type="string">"NONE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"shadafile"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>argv_idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mainerr</name><argument_list>(<argument><expr><name>err_opt_unknown</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>had_minmin</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>want_argument</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argv_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'A'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"arabic"</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <block>{<block_content> 



<expr_stmt><expr><call><name>set_options_bin</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>use_debug_break_level</name></name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>diff_mode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'e'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><name>exmode_active</name> <operator>=</operator> <name>EXMODE_NORMAL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'E'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><name>exmode_active</name> <operator>=</operator> <name>EXMODE_VIM</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'f'</literal></expr>:</case> <block>{<block_content> 
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'?'</literal></expr>:</case> 
<case>case <expr><literal type="char">'h'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<case>case <expr><literal type="char">'H'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><name>p_hkmap</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"rl"</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"lisp"</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sm</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'M'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><call><name>reset_modifiable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>
</block_content>}</block>
<case>case <expr><literal type="char">'m'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><name>p_write</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'N'</literal></expr>:</case> 
<case>case <expr><literal type="char">'X'</literal></expr>:</case> 

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>no_swap_file</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'p'</literal></expr>:</case> <block>{<block_content> 

<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name> <operator>=</operator> <call><name>get_number_arg</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>=</operator> <name>WIN_TABS</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'o'</literal></expr>:</case> <block>{<block_content> 

<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name> <operator>=</operator> <call><name>get_number_arg</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>=</operator> <name>WIN_HOR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'O'</literal></expr>:</case> <block>{<block_content> 

<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name> <operator>=</operator> <call><name>get_number_arg</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>=</operator> <name>WIN_VER</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'q'</literal></expr>:</case> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>!=</operator> <name>EDIT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mainerr</name><argument_list>(<argument><expr><name>err_too_many_args</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>=</operator> <name>EDIT_QF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>argv_idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>use_ef</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>want_argument</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'R'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><name>readonlymode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ro</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_uc</name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> 
<case>case <expr><literal type="char">'L'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><name>recoverymode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>headless_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exmode_active</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>silent_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>no_swap_file</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>want_argument</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>!=</operator> <name>EDIT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mainerr</name><argument_list>(<argument><expr><name>err_too_many_args</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>=</operator> <name>EDIT_TAG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>argv_idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>tagname</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>want_argument</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'v'</literal></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<case>case <expr><literal type="char">'V'</literal></expr>:</case> <block>{<block_content> 

<expr_stmt><expr><name>p_verbose</name> <operator>=</operator> <call><name>get_number_arg</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv_idx</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>argv_idx</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"verbosefile"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv_idx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'w'</literal></expr>:</case> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><index>[<expr><name>argv_idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>get_number_arg</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv_idx</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>want_argument</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><name>restricted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>argv_idx</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>n_commands</name></name> <operator>&gt;=</operator> <name>MAX_ARG_CMDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mainerr</name><argument_list>(<argument><expr><name>err_extra_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>commands</name><index>[<expr><name><name>parmp</name><operator>-&gt;</operator><name>n_commands</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>argv_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>
</block_content>}</block>
<case>case <expr><literal type="char">'S'</literal></expr>:</case> 
<case>case <expr><literal type="char">'i'</literal></expr>:</case> 
<case>case <expr><literal type="char">'u'</literal></expr>:</case> 
<case>case <expr><literal type="char">'U'</literal></expr>:</case> 
<case>case <expr><literal type="char">'W'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><name>want_argument</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default> <block>{<block_content>
<expr_stmt><expr><call><name>mainerr</name><argument_list>(<argument><expr><name>err_opt_unknown</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name>want_argument</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>argv_idx</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mainerr</name><argument_list>(<argument><expr><name>err_opt_garbage</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'S'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>mainerr</name><argument_list>(<argument><expr><name>err_arg_missing</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'c'</literal></expr>:</case> 
<case>case <expr><literal type="char">'S'</literal></expr>:</case> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>n_commands</name></name> <operator>&gt;=</operator> <name>MAX_ARG_CMDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mainerr</name><argument_list>(<argument><expr><name>err_extra_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>SESSION_FILE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>SESSION_FILE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>argv</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_size</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>s_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_size</name></expr></argument>, <argument><expr><literal type="string">"so %s"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>cmds_tofree</name><index>[<expr><name><name>parmp</name><operator>-&gt;</operator><name>n_commands</name></name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>commands</name><index>[<expr><name><name>parmp</name><operator>-&gt;</operator><name>n_commands</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>commands</name><index>[<expr><name><name>parmp</name><operator>-&gt;</operator><name>n_commands</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'-'</literal></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--cmd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>n_pre_commands</name></name> <operator>&gt;=</operator> <name>MAX_ARG_CMDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mainerr</name><argument_list>(<argument><expr><name>err_extra_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>pre_commands</name><index>[<expr><name><name>parmp</name><operator>-&gt;</operator><name>n_pre_commands</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--listen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>listen_addr</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'q'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>use_ef</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"shadafile"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>scriptin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<label><name>scripterror</name>:</label>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Attempt to open script file again: \"%s %s\"\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stdin_dup_fd</name> <init>= <expr><call><name>os_dup</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>os_replace_stdin_to_conin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>stdin_dup</name> <init>= <expr><call><name>file_open_fd_new</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>stdin_dup_fd</name></expr></argument>, <argument><expr><name>kFileReadOnly</name><operator>|</operator><name>kFileNonBlocking</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stdin_dup</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scriptin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>stdin_dup</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>scriptin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>file_open_new</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>kFileReadOnly</name><operator>|</operator><name>kFileNonBlocking</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot open for reading: \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>os_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>save_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>tagname</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <block>{<block_content> 
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>use_vimrc</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'U'</literal></expr>:</case> <block>{<block_content> 
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argv_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>get_number_arg</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv_idx</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>
</block_content>}</block>
<case>case <expr><literal type="char">'W'</literal></expr>:</case> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>scriptout</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>scripterror</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scriptout</name> <operator>=</operator> <call><name>os_fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'w'</literal></expr> ?</condition><then> <expr><name>APPENDBIN</name></expr> </then><else>: <expr><name>WRITEBIN</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot open for script output: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>argv_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>!=</operator> <name>EDIT_NONE</name>
<operator>&amp;&amp;</operator> <name><name>parmp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>!=</operator> <name>EDIT_FILE</name>
<operator>&amp;&amp;</operator> <name><name>parmp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>!=</operator> <name>EDIT_STDIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mainerr</name><argument_list>(<argument><expr><name>err_too_many_args</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>=</operator> <name>EDIT_FILE</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global_alist</name><operator>.</operator><name>al_ga</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>diff_mode</name></name> <operator>&amp;&amp;</operator> <call><name>os_isdir</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>GARGCOUNT</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>os_isdir</name><argument_list>(<argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GARGLIST</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>concat_fnames</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail</name><argument_list>(<argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GARGLIST</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FNAME_CASE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>path_fix_case</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>alist_fnum_flag</name> <init>= <expr><ternary><condition><expr><call><name>edit_stdin</name><argument_list>(<argument><expr><name>had_stdin_file</name></expr></argument>, <argument><expr><name>parmp</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><literal type="number">1</literal></expr> 
</then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>alist_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>global_alist</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>alist_fnum_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>argv_idx</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>argv_idx</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>embedded_mode</name> <operator>&amp;&amp;</operator> <name>silent_mode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mainerr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--embed conflicts with -es/-Es"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>n_commands</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>swcmd_len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>parmp</name><operator>-&gt;</operator><name>commands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>swcmd</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>swcmd_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>swcmd</name></expr></argument>, <argument><expr><name>swcmd_len</name></expr></argument>, <argument><expr><literal type="string">":%s\r"</literal></expr></argument>, <argument><expr><name><name>parmp</name><operator>-&gt;</operator><name>commands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_SWAPCOMMAND</name></expr></argument>, <argument><expr><name>swcmd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>swcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>edit_stdin</name><argument_list>(<argument><expr><name>had_stdin_file</name></expr></argument>, <argument><expr><name>parmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>=</operator> <name>EDIT_STDIN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"parsing arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>init_params</name><parameter_list>(<parameter><decl><type><name>mparm_T</name> <modifier>*</modifier></type><name>paramp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>paramp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>paramp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>paramp</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>paramp</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>paramp</name><operator>-&gt;</operator><name>use_debug_break_level</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>paramp</name><operator>-&gt;</operator><name>window_count</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>paramp</name><operator>-&gt;</operator><name>listen_addr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>init_startuptime</name><parameter_list>(<parameter><decl><type><name>mparm_T</name> <modifier>*</modifier></type><name>paramp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>paramp</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name><name>paramp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--startuptime"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>paramp</name><operator>-&gt;</operator><name>argc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>time_fd</name> <operator>=</operator> <call><name>os_fopen</name><argument_list>(<argument><expr><name><name>paramp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time_start</name><argument_list>(<argument><expr><literal type="string">"--- NVIM STARTING ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>starttime</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_and_set_isatty</name><parameter_list>(<parameter><decl><type><name>mparm_T</name> <modifier>*</modifier></type><name>paramp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>stdin_isatty</name>
<operator>=</operator> <name><name>paramp</name><operator>-&gt;</operator><name>input_isatty</name></name> <operator>=</operator> <call><name>os_isatty</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stdout_isatty</name>
<operator>=</operator> <name><name>paramp</name><operator>-&gt;</operator><name>output_isatty</name></name> <operator>=</operator> <call><name>os_isatty</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>paramp</name><operator>-&gt;</operator><name>err_isatty</name></name> <operator>=</operator> <call><name>os_isatty</name><argument_list>(<argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>tty_fd</name> <init>= <expr><ternary><condition><expr><name><name>paramp</name><operator>-&gt;</operator><name>input_isatty</name></name></expr>
?</condition><then> <expr><name>STDIN_FILENO</name></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>paramp</name><operator>-&gt;</operator><name>output_isatty</name></name></expr>
?</condition><then> <expr><name>STDOUT_FILENO</name></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>paramp</name><operator>-&gt;</operator><name>err_isatty</name></name></expr> ?</condition><then> <expr><name>STDERR_FILENO</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pty_process_save_termios</name><argument_list>(<argument><expr><name>tty_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"window checked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>init_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exename</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>exepath</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>exepathlen</name> <init>= <expr><name>MAXPATHL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_exepath</name><argument_list>(<argument><expr><name>exepath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exepathlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>path_guess_exepath</name><argument_list>(<argument><expr><name>exename</name></expr></argument>, <argument><expr><name>exepath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>exepath</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_PROGPATH</name></expr></argument>, <argument><expr><name>exepath</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_PROGNAME</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>exename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>os_setenv_append_path</name><argument_list>(<argument><expr><name>exepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>get_fname</name><parameter_list>(<parameter><decl><type><name>mparm_T</name> <modifier>*</modifier></type><name>parmp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cwd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GARGLIST</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>set_window_layout</name><parameter_list>(<parameter><decl><type><name>mparm_T</name> <modifier>*</modifier></type><name>paramp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>paramp</name><operator>-&gt;</operator><name>diff_mode</name></name> <operator>&amp;&amp;</operator> <name><name>paramp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>diffopt_horizontal</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>paramp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>=</operator> <name>WIN_HOR</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>paramp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>=</operator> <name>WIN_VER</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>load_plugins</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_lpl</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rtp_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_source_packages</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rtp_copy</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_rtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pack_start_dirs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>source_in_path</name><argument_list>(<argument><expr><ternary><condition><expr><name>rtp_copy</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>p_rtp</name></expr> </then><else>: <expr><name>rtp_copy</name></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"plugin/**/*.vim"</literal></expr></argument>, 
<argument><expr><name>DIP_ALL</name> <operator>|</operator> <name>DIP_NOAFTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"loading plugins"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>rtp_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_source_packages</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>load_start_packages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"loading packages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>source_runtime</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"plugin/**/*.vim"</literal></expr></argument>, <argument><expr><name>DIP_ALL</name> <operator>|</operator> <name>DIP_AFTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"loading after plugins"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_quickfix</name><parameter_list>(<parameter><decl><type><name>mparm_T</name> <modifier>*</modifier></type><name>paramp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>paramp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>==</operator> <name>EDIT_QF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>paramp</name><operator>-&gt;</operator><name>use_ef</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ef"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>paramp</name><operator>-&gt;</operator><name>use_ef</name></name></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><name>SID_CARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><literal type="string">"cfile %s"</literal></expr></argument>, <argument><expr><name>p_ef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>qf_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_ef</name></expr></argument>, <argument><expr><name>p_efm</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>p_menc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_exit</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"reading errorfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_tag</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tagname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tagname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>swap_exists_did_quit</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><literal type="string">"ta %s"</literal></expr></argument>, <argument><expr><name>tagname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"jumping to tag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>swap_exists_did_quit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getout</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>read_stdin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>swap_exists_action</name> <operator>=</operator> <name>SEA_DIALOG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>no_wait_return</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_msg_didany</name> <init>= <expr><name>msg_didany</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_buflisted</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>open_buffer</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>BUFEMPTY</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><literal type="string">"silent! bnext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><literal type="string">"bwipeout 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>no_wait_return</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_didany</name> <operator>=</operator> <name>save_msg_didany</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"reading stdin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_swap_exists_action</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>create_windows</name><parameter_list>(<parameter><decl><type><name>mparm_T</name> <modifier>*</modifier></type><name>parmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dorewind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name> <operator>=</operator> <name>GARGCOUNT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>=</operator> <name>WIN_HOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>==</operator> <name>WIN_TABS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name> <operator>=</operator> <call><name>make_tabpages</name><argument_list>(<argument><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"making tab pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>firstwin</name><operator>-&gt;</operator><name>w_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name> <operator>=</operator> <call><name>make_windows</name><argument_list>(<argument><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name></expr></argument>,
<argument><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>==</operator> <name>WIN_VER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"making windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name> <operator>=</operator> <call><name>win_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>recoverymode</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ml_recover</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>getout</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>do_modelines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>





<expr_stmt><expr><operator>++</operator><name>autocmd_no_enter</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>autocmd_no_leave</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dorewind</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>done</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dorewind</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>==</operator> <name>WIN_TABS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>goto_tabpage</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>==</operator> <name>WIN_TABS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>goto_tabpage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>dorewind</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_fdls</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>=</operator> <name>p_fdls</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>swap_exists_action</name> <operator>=</operator> <name>SEA_DIALOG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_buflisted</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>open_buffer</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>swap_exists_action</name> <operator>==</operator> <name>SEA_QUIT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>got_int</name> <operator>||</operator> <call><name>only_one_window</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>getout</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>setfname</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>swap_exists_action</name> <operator>=</operator> <name>SEA_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_swap_exists</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>dorewind</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>os_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>==</operator> <name>WIN_TABS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>goto_tabpage</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>autocmd_no_enter</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>autocmd_no_leave</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>edit_buffers</name><parameter_list>(<parameter><decl><type><name>mparm_T</name> <modifier>*</modifier></type><name>parmp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cwd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>arg_idx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>advance</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_shm_save</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><operator>++</operator><name>autocmd_no_enter</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>autocmd_no_leave</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>win_close</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>advance</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cwd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_chdir</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg_idx</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_close</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>advance</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>==</operator> <name>WIN_TABS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>goto_tabpage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_shm_save</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"F%s"</literal></expr></argument>, <argument><expr><name>p_shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"shm"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_next</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>advance</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>curbuf</name> <operator>==</operator> <name><name>firstwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>=</operator> <name>arg_idx</name></expr>;</expr_stmt>


<expr_stmt><expr><name>swap_exists_did_quit</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_ecmd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>arg_idx</name> <operator>&lt;</operator> <name>GARGCOUNT</name></expr>
?</condition><then> <expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GARGLIST</name><index>[<expr><name>arg_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ECMD_LASTL</name></expr></argument>, <argument><expr><name>ECMD_HIDE</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>swap_exists_did_quit</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>got_int</name> <operator>||</operator> <call><name>only_one_window</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>getout</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>win_close</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>advance</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>arg_idx</name> <operator>==</operator> <name>GARGCOUNT</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg_had_last</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg_idx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>os_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p_shm_save</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"shm"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>p_shm_save</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p_shm_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>==</operator> <name>WIN_TABS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>goto_tabpage</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>autocmd_no_enter</name></expr>;</expr_stmt>


<expr_stmt><expr><name>win</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_p_pvw</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>win</name> <operator>=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>win</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>win</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>autocmd_no_leave</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"editing files in windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>window_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>parmp</name><operator>-&gt;</operator><name>window_layout</name></name> <operator>!=</operator> <name>WIN_TABS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_equal</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>exe_pre_commands</name><parameter_list>(<parameter><decl><type><name>mparm_T</name> <modifier>*</modifier></type><name>parmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cmds</name> <init>= <expr><name><name>parmp</name><operator>-&gt;</operator><name>pre_commands</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name><name>parmp</name><operator>-&gt;</operator><name>n_pre_commands</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>sourcing_name</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"pre-vimrc command line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>=</operator> <name>SID_CMDARG</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>sourcing_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"--cmd commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>exe_commands</name><parameter_list>(<parameter><decl><type><name>mparm_T</name> <modifier>*</modifier></type><name>parmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>






<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>tagname</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sourcing_name</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"command line"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>=</operator> <name>SID_CARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_sctx</name><operator>.</operator><name>sc_seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>parmp</name><operator>-&gt;</operator><name>n_commands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name><name>parmp</name><operator>-&gt;</operator><name>commands</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>cmds_tofree</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>parmp</name><operator>-&gt;</operator><name>commands</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>sourcing_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exmode_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>edit_type</name></name> <operator>==</operator> <name>EDIT_QF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>qf_jump</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"executing command arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>do_system_initialization</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>config_dirs</name> <init>= <expr><call><name>stdpaths_get_xdg_var</name><argument_list>(<argument><expr><name>kXDGConfigDirs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>config_dirs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>path_tail</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><name>PATHSEP</name></expr>,
<expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><name>NUL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dir_len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>vim_env_iter</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>config_dirs</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dir_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vimrc</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>dir_len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>path_tail</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vimrc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dir_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimrc</name><index>[<expr><name>dir_len</name></expr>]</index></name> <operator>=</operator> <name>PATHSEP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vimrc</name> <operator>+</operator> <name>dir_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>path_tail</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path_tail</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>do_source</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>vimrc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>DOSO_NONE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>vimrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>config_dirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>vimrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>config_dirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_VIMRC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_source</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>SYS_VIMRC_FILE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>DOSO_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>bool</name></type> <name>do_user_initialization</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>do_exrc</name> <init>= <expr><name>p_exrc</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>execute_env</name><argument_list>(<argument><expr><literal type="string">"VIMINIT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>do_exrc</name> <operator>=</operator> <name>p_exrc</name></expr>;</expr_stmt>
<return>return <expr><name>do_exrc</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>user_vimrc</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>stdpaths_user_conf_subpath</name><argument_list>(<argument><expr><literal type="string">"init.vim"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>do_source</name><argument_list>(<argument><expr><name>user_vimrc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>DOSO_VIMRC</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>do_exrc</name> <operator>=</operator> <name>p_exrc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_exrc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>do_exrc</name> <operator>=</operator> <operator>(</operator><call><name>path_full_compare</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VIMRC_FILE</name></expr></argument>, <argument><expr><name>user_vimrc</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>kEqualFiles</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>user_vimrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>do_exrc</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>user_vimrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>config_dirs</name> <init>= <expr><call><name>stdpaths_get_xdg_var</name><argument_list>(<argument><expr><name>kXDGConfigDirs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>config_dirs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dir_len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>vim_env_iter</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>config_dirs</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dir_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>path_tail</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><name>PATHSEP</name></expr>,
<expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><name>NUL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vimrc</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>dir_len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>path_tail</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>vimrc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dir_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vimrc</name><index>[<expr><name>dir_len</name></expr>]</index></name> <operator>=</operator> <name>PATHSEP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>vimrc</name> <operator>+</operator> <name>dir_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>path_tail</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path_tail</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>do_source</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <name>vimrc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>DOSO_VIMRC</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>do_exrc</name> <operator>=</operator> <name>p_exrc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_exrc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>do_exrc</name> <operator>=</operator> <operator>(</operator><call><name>path_full_compare</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VIMRC_FILE</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>vimrc</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>kEqualFiles</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>vimrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>config_dirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>do_exrc</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>vimrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>config_dirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>execute_env</name><argument_list>(<argument><expr><literal type="string">"EXINIT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>do_exrc</name> <operator>=</operator> <name>p_exrc</name></expr>;</expr_stmt>
<return>return <expr><name>do_exrc</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>do_exrc</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>source_startup_scripts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mparm_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>parmp</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>parmp</name><operator>-&gt;</operator><name>use_vimrc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>parmp</name><operator>-&gt;</operator><name>use_vimrc</name></name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>strequal</name><argument_list>(<argument><expr><name><name>parmp</name><operator>-&gt;</operator><name>use_vimrc</name></name></expr></argument>, <argument><expr><literal type="string">"NORC"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>do_source</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>parmp</name><operator>-&gt;</operator><name>use_vimrc</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>DOSO_NONE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E282: Cannot read from \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>parmp</name><operator>-&gt;</operator><name>use_vimrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>silent_mode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_system_initialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_user_initialization</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_owned</name><argument_list>(<argument><expr><name>VIMRC_FILE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>secure</name> <operator>=</operator> <name>p_secure</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_source</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VIMRC_FILE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>DOSO_VIMRC</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_owned</name><argument_list>(<argument><expr><name>EXRC_FILE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>secure</name> <operator>=</operator> <name>p_secure</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>secure</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_source</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>EXRC_FILE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>DOSO_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>secure</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>secure</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TIME_MSG</name><argument_list>(<argument><expr><literal type="string">"sourcing vimrc file(s)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>execute_env</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>initstr</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>initstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_sourcing_name</name> <init>= <expr><name>sourcing_name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>save_sourcing_lnum</name> <init>= <expr><name>sourcing_lnum</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sourcing_name</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>env</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sourcing_lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>sctx_T</name></type> <name>save_current_sctx</name> <init>= <expr><name>current_sctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>=</operator> <name>SID_ENV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_sctx</name><operator>.</operator><name>sc_seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_sctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>initstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sourcing_name</name> <operator>=</operator> <name>save_sourcing_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sourcing_lnum</name> <operator>=</operator> <name>save_sourcing_lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_sctx</name> <operator>=</operator> <name>save_current_sctx</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>file_owned</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fname</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name> <init>= <expr><call><name>getuid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileInfo</name></type> <name>file_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>file_owned</name> <init>= <expr><call><name>os_fileinfo</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_info</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>file_info</name><operator>.</operator><name>stat</name><operator>.</operator><name>st_uid</name></name> <operator>==</operator> <name>uid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>link_owned</name> <init>= <expr><call><name>os_fileinfo_link</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_info</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>file_info</name><operator>.</operator><name>stat</name><operator>.</operator><name>st_uid</name></name> <operator>==</operator> <name>uid</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>file_owned</name> <operator>&amp;&amp;</operator> <name>link_owned</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><specifier>static</specifier> <name>void</name></type> <name>mainerr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prgname</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>argv0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>signal_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><name>prgname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">": \""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nMore info with \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><name>prgname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">" -h\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>info_message</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>list_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>signal_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Usage:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" nvim [options] [file ...] Edit file(s)\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" nvim [options] -t &lt;tag&gt; Edit file where tag is defined\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" nvim [options] -q [errorfile] Edit file with first error\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nOptions:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -- Only file names after this\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" + Start at end of file\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" --cmd &lt;cmd&gt; Execute &lt;cmd&gt; before any config\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" +&lt;cmd&gt;, -c &lt;cmd&gt; Execute &lt;cmd&gt; after config and first file\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -b Binary mode\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -d Diff mode\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -e, -E Ex mode\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -es, -Es Silent (batch) mode\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -h, --help Print this help message\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -i &lt;shada&gt; Use this shada file\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -m Modifications (writing files) not allowed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -M Modifications in text not allowed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -n No swap file, use memory only\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -o[N] Open N windows (default: one per file)\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -O[N] Open N vertical windows (default: one per file)\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -p[N] Open N tab pages (default: one per file)\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -r, -L List swap files\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -r &lt;file&gt; Recover edit state for this file\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -R Read-only mode\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -S &lt;session&gt; Source &lt;session&gt; after loading the first file\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -s &lt;scriptin&gt; Read Normal mode commands from &lt;scriptin&gt;\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -u &lt;config&gt; Use this config file\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -v, --version Print version information\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -V[N][file] Verbose [level][file]\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -Z Restricted mode\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" --api-info Write msgpack-encoded API metadata to stdout\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" --embed Use stdin/stdout as a msgpack-rpc channel\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" --headless Don't start a user interface\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" --listen &lt;address&gt; Serve RPC API from this address\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" --noplugin Don't load plugins\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" --startuptime &lt;file&gt; Write startup timing messages to &lt;file&gt;\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nSee \":help startup-options\" for all options.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>check_swap_exists_action</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>swap_exists_action</name> <operator>==</operator> <name>SEA_QUIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getout</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>handle_swap_exists</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
