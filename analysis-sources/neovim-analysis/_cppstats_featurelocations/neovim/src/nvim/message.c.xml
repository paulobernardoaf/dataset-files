<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\message.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/keymap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/normal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/regexp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui_compositor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mouse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>





<typedef>typedef <type><name><name>struct</name> <name>msgchunk_S</name></name></type> <name>msgchunk_T</name>;</typedef>
<struct>struct <name>msgchunk_S</name> <block>{
<decl_stmt><decl><type><name>msgchunk_T</name> <modifier>*</modifier></type><name>sb_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>msgchunk_T</name> <modifier>*</modifier></type><name>sb_prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sb_eol</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sb_msg_col</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sb_attr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name></type> <name><name>sb_text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_BUTTON_SEP</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLG_HOTKEY_CHAR</name></cpp:macro> <cpp:value>'&amp;'</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>confirm_msg_used</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"message.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>confirm_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>confirm_msg_tail</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MessageHistoryEntry</name> <modifier>*</modifier></type><name>first_msg_hist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MessageHistoryEntry</name> <modifier>*</modifier></type><name>last_msg_hist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>msg_hist_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>verbose_fd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>verbose_did_open</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>







































<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg_ext_kind</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Array</name></type> <name>msg_ext_chunks</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>msg_ext_last_chunk</name> <init>= <expr><call><name>GA_INIT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sattr_T</name></type> <name>msg_ext_last_attr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>msg_ext_cur_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>msg_ext_overwrite</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>msg_ext_visible</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>msg_ext_keep_after_cmdline</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>msg_grid_pos_at_flush</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>msg_grid_scroll_discount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_ext_msg_set_pos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>scrolled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>msgsep</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<macro><name>ui_call_msg_set_pos</name><argument_list>(<argument>msg_grid.handle</argument>, <argument>row</argument>, <argument>scrolled</argument>,
<argument>(String){ .data = buf</argument>, <argument>.size = size }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_grid_set_pos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>scrolled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg_grid</name><operator>.</operator><name>throttled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_ext_msg_set_pos</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>scrolled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_grid_pos_at_flush</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msg_grid_pos</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg_grid</name><operator>.</operator><name>chars</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>msg_grid_adj</name><operator>.</operator><name>row_offset</name></name> <operator>=</operator> <operator>-</operator><name>row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>msg_use_grid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>default_grid</name><operator>.</operator><name>chars</name></name> <operator>&amp;&amp;</operator> <call><name>msg_use_msgsep</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_grid_validate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>grid_assign_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>should_alloc</name> <init>= <expr><call><name>msg_use_grid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>should_alloc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>msg_grid</name><operator>.</operator><name>Rows</name></name> <operator>!=</operator> <name>Rows</name> <operator>||</operator> <name><name>msg_grid</name><operator>.</operator><name>Columns</name></name> <operator>!=</operator> <name>Columns</name>
<operator>||</operator> <operator>!</operator><name><name>msg_grid</name><operator>.</operator><name>chars</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>grid_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid</name></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>msg_grid</name><operator>.</operator><name>dirty_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_grid</name><operator>.</operator><name>dirty_col</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>Rows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>msg_grid</name><operator>.</operator><name>dirty_col</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><ternary><condition><expr><name>msg_scrolled</name></expr> ?</condition><then> <expr><name>msg_grid_pos</name></expr> </then><else>: <expr><name>Rows</name> <operator>-</operator> <name>p_ch</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ui_comp_put_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>msg_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>, <argument><expr><name><name>msg_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_call_grid_resize</name><argument_list>(<argument><expr><name><name>msg_grid</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>msg_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>, <argument><expr><name><name>msg_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msg_grid</name><operator>.</operator><name>throttled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>msg_scrolled_at_flush</name> <operator>=</operator> <name>msg_scrolled</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_grid</name><operator>.</operator><name>focusable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg_scrolled</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_grid_set_pos</name><argument_list>(<argument><expr><name>Rows</name> <operator>-</operator> <name>p_ch</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>should_alloc</name> <operator>&amp;&amp;</operator> <name><name>msg_grid</name><operator>.</operator><name>chars</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_comp_remove_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>msg_grid</name><operator>.</operator><name>dirty_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_call_grid_destroy</name><argument_list>(<argument><expr><name><name>msg_grid</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_grid</name><operator>.</operator><name>throttled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_grid_adj</name><operator>.</operator><name>row_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>msg_grid</name><operator>.</operator><name>chars</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>msg_scrolled</name> <operator>&amp;&amp;</operator> <name>msg_grid_pos</name> <operator>!=</operator> <name>Rows</name> <operator>-</operator> <name>p_ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_grid_set_pos</name><argument_list>(<argument><expr><name>Rows</name> <operator>-</operator> <name>p_ch</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg_grid</name><operator>.</operator><name>chars</name></name> <operator>&amp;&amp;</operator> <name>cmdline_row</name> <operator>&lt;</operator> <name>msg_grid_pos</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_grid_pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>msg</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>msg_attr_keep</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>verb_msg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>msg_attr_keep</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>msg_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<return>return <expr><call><name>msg_attr_keep</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>


<function><type><name>void</name></type> <name>msg_multiline_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>check_int</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>need_clear</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next_spec</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>next_spec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>check_int</name> <operator>&amp;&amp;</operator> <name>got_int</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>next_spec</name> <operator>=</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\t\n\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next_spec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_outtrans_len_attr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>next_spec</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next_spec</name> <operator>!=</operator> <name>TAB</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>need_clear</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>need_clear</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_putchar_attr</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>next_spec</name><operator>)</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>next_spec</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_outtrans_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>msg_attr_keep</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>keep</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>multiline</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>entered</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keep</name> <operator>&amp;&amp;</operator> <name>multiline</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>emsg_on_display</name> <operator>&amp;&amp;</operator> <call><name>message_filtered</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_STATUSMSG</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>entered</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>entered</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>keep_msg</name>
<operator>||</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'&lt;'</literal>
<operator>&amp;&amp;</operator> <name>last_msg_hist</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>last_msg_hist</name><operator>-&gt;</operator><name>msg</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>last_msg_hist</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_msg_hist</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>multiline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>keep_msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keep_msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>msg_strtrunc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>need_clear</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>multiline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_multiline_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_outtrans_attr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>need_clear</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>msg_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keep</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>&amp;&amp;</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Rows</name> <operator>-</operator> <name>cmdline_row</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>*</operator> <name>Columns</name> <operator>+</operator> <name>sc_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_keep_msg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>entered</name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>msg_strtrunc</name> <parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>room</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>msg_scroll</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>need_wait_return</name> <operator>&amp;&amp;</operator> <call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_TRUNCALL</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><name>exmode_active</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <name>force</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>room</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Rows</name> <operator>-</operator> <name>msg_row</name><operator>)</operator> <operator>*</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>room</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Rows</name> <operator>-</operator> <name>msg_row</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>Columns</name> <operator>+</operator> <name>sc_col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>room</name> <operator>&amp;&amp;</operator> <name>room</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>room</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trunc_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>room</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>trunc_string</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>room_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>room</name> <init>= <expr><name>room_in</name> <operator>-</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>half</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>room_in</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>half</name> <operator>=</operator> <name>room</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>half</name> <operator>&amp;&amp;</operator> <name>e</name> <operator>&lt;</operator> <name>buflen</name></expr>;</condition> <incr><expr><operator>++</operator><name>e</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>e</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>e</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <name>half</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>e</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><operator>--</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>e</name> <operator>==</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>e</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>half</name> <operator>=</operator> <name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>half</name> <operator>=</operator> <name>half</name> <operator>-</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>half</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>half</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>half</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>half</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <name>room</name> <operator>||</operator> <name>half</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>half</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>e</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>buflen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>e</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>e</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>e</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>e</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>e</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>buflen</name> <operator>-</operator> <name>e</name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>buflen</name> <operator>-</operator> <name>e</name> <operator>-</operator> <literal type="number">3</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>e</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>e</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>smsg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
FUNC_ATTR_PRINTF<parameter_list>(</parameter_list>1<operator>,</operator> 2</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>arglist</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_vsnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>msg</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<function><type><name>int</name></type> <name>smsg_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
FUNC_ATTR_PRINTF<parameter_list>(</parameter_list>2<operator>,</operator> 3</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>arglist</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_vsnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>msg_attr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<function><type><name>int</name></type> <name>smsg_attr_keep</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
FUNC_ATTR_PRINTF<parameter_list>(</parameter_list>2<operator>,</operator> 3</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>arglist</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_vsnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>msg_attr_keep</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_sourcing_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>last_sourcing_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>





<function><type><name>void</name></type> <name>reset_last_sourcing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>last_sourcing_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_sourcing_lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>other_sourcing_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sourcing_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>last_sourcing_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>sourcing_name</name></expr></argument>, <argument><expr><name>last_sourcing_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_emsg_source</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_ATTR_MALLOC FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sourcing_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>other_sourcing_name</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error detected while processing %s:"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buf_len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>sourcing_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>sourcing_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_emsg_lnum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_ATTR_MALLOC FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>sourcing_name</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>other_sourcing_name</name><argument_list>()</argument_list></call> <operator>||</operator> <name>sourcing_lnum</name> <operator>!=</operator> <name>last_sourcing_lnum</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>sourcing_lnum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"line %4ld:"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buf_len</name> <init>= <expr><literal type="number">20</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>sourcing_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>msg_source</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>no_wait_return</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_emsg_source</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_attr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_emsg_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_attr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_sourcing_lnum</name> <operator>=</operator> <name>sourcing_lnum</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>sourcing_name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>other_sourcing_name</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>last_sourcing_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sourcing_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_sourcing_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>last_sourcing_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>sourcing_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>emsg_not_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>emsg_off</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_debug</name></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_debug</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator>
<operator>||</operator> <name>emsg_skip</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>
)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>emsg_multiline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>multiline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ignore</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>severe</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>emsg_not_now</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>called_emsg</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>



<expr_stmt><expr><name>severe</name> <operator>=</operator> <name>emsg_severe</name></expr>;</expr_stmt>
<expr_stmt><expr><name>emsg_severe</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>emsg_off</name> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_debug</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>







<if_stmt><if>if <condition>(<expr><call><name>cause_errthrow</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>severe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>did_emsg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_ERRMSG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>emsg_silent</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>emsg_noredir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_emsg_source</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>p_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>p_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redir_write</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_emsg_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>p_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>p_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redir_write</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>redir_write</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>sourcing_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>sourcing_lnum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"(:silent) %s (%s (line %ld))"</literal></expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sourcing_name</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>sourcing_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"(:silent) %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>sourcing_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>sourcing_lnum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ILOG</name><argument_list>(<argument><expr><literal type="string">"%s (%s (line %ld))"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sourcing_name</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>sourcing_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ILOG</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ex_exitval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>global_busy</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>global_busy</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_eb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>flush_buffers</name><argument_list>(<argument><expr><name>FLUSH_MINIMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>did_emsg</name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>emsg_on_display</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>msg_scroll</name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><name>msg_ext_kind</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_ext_set_kind</name><argument_list>(<argument><expr><literal type="string">"emsg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>msg_source</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>msg_nowait</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<return>return <expr><call><name>msg_attr_keep</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>multiline</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>emsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>emsg_multiline</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>emsg_invreg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E354: Invalid register name: '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>transchar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>emsgf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
FUNC_ATTR_PRINTF<parameter_list>(</parameter_list>1<operator>,</operator> 2</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>emsgfv</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTILINE_BUFSIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>emsgf_multiline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>errbuf</name><index>[<expr><name>MULTILINE_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>emsg_not_now</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_vsnprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>emsg_multiline</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>emsgfv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>errbuf</name><index>[<expr><name>IOSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>emsg_not_now</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_vsnprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>emsg</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>iemsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ABORT_ON_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>iemsgf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>emsgfv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ABORT_ON_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>internal_error</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>where</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>IEMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_intern2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_emsgf_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>emsg</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_schedule_emsgf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
FUNC_ATTR_PRINTF<parameter_list>(</parameter_list>1<operator>,</operator> 2</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_vsnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>xstrdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>multiqueue_put</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>, <argument><expr><name>msg_emsgf_event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<function><type><name>char_u</name> <modifier>*</modifier></type><name>msg_trunc_attr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>add_msg_hist</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>msg_may_trunc</name><argument_list>(<argument><expr><name>force</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_hist_off</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>msg_attr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_hist_off</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type><name>msg_may_trunc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>room</name></decl>;</decl_stmt>

<expr_stmt><expr><name>room</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Rows</name> <operator>-</operator> <name>cmdline_row</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>Columns</name> <operator>+</operator> <name>sc_col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>force</name> <operator>||</operator> <operator>(</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_TRUNC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>exmode_active</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>room</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>vim_strsize</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>room</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>size</name> <operator>&gt;=</operator> <name>room</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>add_msg_hist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>multiline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>msg_hist_off</name> <operator>||</operator> <name>msg_silent</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<while>while <condition>(<expr><name>msg_hist_len</name> <operator>&gt;</operator> <name>MAX_MSG_HIST_LEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>delete_first_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>


<decl_stmt><decl><type><name><name>struct</name> <name>msg_hist</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>msg_hist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmemdupz</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>multiline</name></name> <operator>=</operator> <name>multiline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>msg_ext_kind</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last_msg_hist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>last_msg_hist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last_msg_hist</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first_msg_hist</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first_msg_hist</name> <operator>=</operator> <name>last_msg_hist</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msg_hist_len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>delete_first_msg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>msg_hist</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_hist_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>first_msg_hist</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_msg_hist</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first_msg_hist</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>msg_hist_len</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_msg_hist</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>msg_hist_len</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ex_messages</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>eap_p</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>exarg_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>eap</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>exarg_T</name> <operator>*</operator><operator>)</operator><name>eap_p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>msg_hist</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"clear"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>keep</name> <init>= <expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>msg_hist_len</name> <operator>&gt;</operator> <name>keep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>delete_first_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name>first_msg_hist</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>c</name> <operator>-=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>first_msg_hist</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>c</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>entries</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>msg</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>entry</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>content_entry</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>content_entry</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>content_entry</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>msg</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>content</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>content_entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ui_call_msg_history_show</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>msg_hist_off</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>msg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_attr_keep</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>multiline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>msg_hist_off</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>msg_end_prompt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_ext_clear_later</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>emsg_on_display</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lines_left</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>wait_return</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>redraw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oldState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmpState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>had_got_int</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>save_scriptout</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>msg_silent</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>vgetc_busy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>no_wait_return</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exmode_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>redir_off</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>oldState</name> <operator>=</operator> <name>State</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quit_more</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>quit_more</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>exmode_active</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><call><name>screenalloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>HITRETURN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>need_check_timestamps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>check_timestamps</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hit_return_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>


<expr_stmt><expr><name>had_got_int</name> <operator>=</operator> <name>got_int</name></expr>;</expr_stmt>



<expr_stmt><expr><name>no_mapping</name><operator>++</operator></expr>;</expr_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>save_reg_recording</name> <init>= <expr><name>reg_recording</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>save_scriptout</name> <operator>=</operator> <name>scriptout</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_recording</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scriptout</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>safe_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>had_got_int</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>global_busy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>no_mapping</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_recording</name> <operator>=</operator> <name>save_reg_recording</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scriptout</name> <operator>=</operator> <name>save_scriptout</name></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name>p_more</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'k'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'g'</literal>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_UP</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_PAGEUP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>&gt;</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_more_prompt</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_IGNORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator>
<ternary><condition><expr><name>cmdmsg_rl</name></expr> ?</condition><then> <expr><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>:
<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>quit_more</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>quit_more</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>!=</operator> <name>K_IGNORE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_IGNORE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hit_return_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>msg_scrolled</name> <operator>&gt;</operator> <name>Rows</name> <operator>-</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'j'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'f'</literal>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_DOWN</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_PAGEDOWN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_IGNORE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>had_got_int</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>Ctrl_C</name><operator>)</operator>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_IGNORE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_LEFTDRAG</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_LEFTRELEASE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MIDDLEDRAG</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MIDDLERELEASE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_RIGHTDRAG</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_RIGHTRELEASE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MOUSELEFT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MOUSERIGHT</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MOUSEDOWN</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MOUSEUP</name>
<operator>||</operator> <operator>(</operator><operator>!</operator><call><name>mouse_has</name><argument_list>(<argument><expr><name>MOUSE_RETURN</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name>mouse_row</name> <operator>&lt;</operator> <name>msg_row</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <name>K_LEFTMOUSE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MIDDLEMOUSE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_RIGHTMOUSE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_X1MOUSE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_X2MOUSE</name><operator>)</operator><operator>)</operator></expr>
)</condition>;</do>
<expr_stmt><expr><call><name>os_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_LEFTMOUSE</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MIDDLEMOUSE</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_RIGHTMOUSE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_X1MOUSE</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_X2MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>jump_to_mouse</name><argument_list>(<argument><expr><name>MOUSE_SETPOS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\r\n "</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_C</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>ins_char_typebuf</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>do_redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>redir_off</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exmode_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>skip_redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>do_redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_ext_keep_after_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>tmpState</name> <operator>=</operator> <name>State</name></expr>;</expr_stmt>
<expr_stmt><expr><name>State</name> <operator>=</operator> <name>oldState</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_wait_return</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>emsg_on_display</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>lines_left</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>reset_last_sourcing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>keep_msg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>keep_msg</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator>
<operator>(</operator><name>Rows</name> <operator>-</operator> <name>cmdline_row</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>Columns</name> <operator>+</operator> <name>sc_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>keep_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpState</name> <operator>==</operator> <name>SETWSIZE</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>ui_refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>skip_redraw</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>redraw</name> <operator>==</operator> <name>true</name> <operator>||</operator> <operator>(</operator><name>msg_scrolled</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>redraw</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_ext_clear</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>hit_return_msg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_p_more</name> <init>= <expr><name>p_more</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_more</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>msg_didout</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_ext_set_kind</name><argument_list>(<argument><expr><literal type="string">"return_prompt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Interrupt: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Press ENTER or type command to continue"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>msg_use_printf</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_more</name> <operator>=</operator> <name>save_p_more</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>set_keep_msg</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>keep_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keep_msg</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>keep_msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>keep_msg_more</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keep_msg_attr</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_ext_set_kind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg_kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_ext_ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>msg_ext_kind</name> <operator>=</operator> <name>msg_kind</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>msg_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>did_return</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg_silent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>keep_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_clr_eos</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>need_clr_eos</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg_scroll</name> <operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>cmdline_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator>
<ternary><condition><expr><name>cmdmsg_rl</name></expr> ?</condition><then> <expr><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>:
<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>msg_didout</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_return</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>exmode_active</name> <operator>!=</operator> <name>EXMODE_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg_didany</name> <operator>||</operator> <name>lines_left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_starthere</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_ext_ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg_scroll</name> <operator>&amp;&amp;</operator> <name>msg_ext_visible</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msg_ext_overwrite</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_return</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redir_write</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>msg_starthere</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>lines_left</name> <operator>=</operator> <name>cmdline_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_didany</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_putchar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar_attr</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_putchar_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>K_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>K_SECOND</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>K_THIRD</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_outnum</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_home_replace</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_home_replace_attr</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_home_replace_hl</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_home_replace_attr</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_home_replace_attr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>home_replace_save</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_outtrans_attr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>msg_outtrans</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>msg_outtrans_attr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>msg_outtrans_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>msg_outtrans_len_attr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>msg_outtrans_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>msg_outtrans_len_attr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type><name>msg_outtrans_one</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_outtrans_len_attr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name> <operator>+</operator> <name>l</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>transchar_byte</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>msg_outtrans_len_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>msgstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>msgstr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>plain_start</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>msgstr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>MSG_HIST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_msg_hist</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>MSG_HIST</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>msgstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<while>while <condition>(<expr><operator>--</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <call><name>utfc_ptr2len_len</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>+=</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&gt;</operator> <name>plain_start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_attr_len</name><argument_list>(<argument><expr><name>plain_start</name></expr></argument>, <argument><expr><name>str</name> <operator>-</operator> <name>plain_start</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>plain_start</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>mb_l</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>transchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>attr</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>attr</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>+=</operator> <call><name>char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>mb_l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>mb_l</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>transchar_byte</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&gt;</operator> <name>plain_start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_attr_len</name><argument_list>(<argument><expr><name>plain_start</name></expr></argument>, <argument><expr><name>str</name> <operator>-</operator> <name>plain_start</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>plain_start</name> <operator>=</operator> <name>str</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name>attr</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>attr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>retval</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&gt;</operator> <name>plain_start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr_len</name><argument_list>(<argument><expr><name>plain_start</name></expr></argument>, <argument><expr><name>str</name> <operator>-</operator> <name>plain_start</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_make</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"eeffoc"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rs</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Plon#dqg#vxjduB"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><operator>*</operator><name>arg</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name><operator>++</operator> <operator>!=</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>rs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><name><name>rs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>msg_outtrans_special</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>strstart</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>from</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>strstart</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>strstart</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str</name> <operator>==</operator> <name>strstart</name> <operator>||</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>string</name> <operator>=</operator> <literal type="string">"&lt;Space&gt;"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>str2special</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><call><name>vim_strsize</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>maxlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>retval</name> <operator>+</operator> <name>len</name> <operator>&gt;=</operator> <name>maxlen</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>
?</condition><then> <expr><name>attr</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>char</name> <modifier>*</modifier></type><name>str2special_save</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>replace_spaces</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>replace_lt</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_MALLOC
FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><call><name>str2special</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>replace_spaces</name></expr></argument>, <argument><expr><name>replace_lt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str2special</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>replace_spaces</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>replace_lt</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name> <init>= <expr><call><name>mb_unescape</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>*</operator><name>sp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>str</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>special</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_MODIFIER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>str</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>modifiers</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>special</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>str</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>transchar_nonprint</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>str</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>str</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>special</name>
<operator>||</operator> <call><name>char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <operator>(</operator><name>replace_spaces</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>replace_lt</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>get_special_key_name</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>str2specialbuf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>sp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>str2special</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>s_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>s_len</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>s_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>s_len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>msg_prt_line</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_final</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>trail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>list</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>trail</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trail</name> <operator>=</operator> <name>s</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>trail</name> <operator>&gt;</operator> <name>s</name> <operator>&amp;&amp;</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>trail</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trail</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>list</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>eol</name></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_extra</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c_final</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c_final</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c_extra</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c_extra</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_extra</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p_extra</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>nbsp</name></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>list</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">160</literal> <operator>||</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x202f</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>nbsp</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>TAB</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>list</name> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab1</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>-</operator> <name>col</name> <operator>%</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>n_extra</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab3</name></name><operator>)</operator></expr>
?</condition><then> <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab3</name></name></expr>
</then><else>: <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab1</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab3</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">160</literal> <operator>&amp;&amp;</operator> <name>list</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>nbsp</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>nbsp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>list</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>eol</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>eol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name> <operator>=</operator> <call><name>byte2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <call><name>transchar_byte</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p_extra</name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>trail</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>&gt;</operator> <name>trail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>trail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>list</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>space</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>space</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_putchar_attr</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>screen_puts_mbyte</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cw</name></decl>;</decl_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>cw</name> <operator>=</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cw</name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>cmdmsg_rl</name></expr> ?</condition><then> <expr><name>msg_col</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>msg_col</name> <operator>==</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_screen_putchar</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grid_puts_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>-=</operator> <name>cw</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>msg_row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>+=</operator> <name>cw</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>msg_row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>s</name> <operator>+</operator> <name>l</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>msg_puts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_puts_title</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>msg_puts_long_attr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>longstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_long_len_attr</name><argument_list>(<argument><expr><name>longstr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>longstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_puts_long_len_attr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>longstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>slen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>room</name></decl>;</decl_stmt>

<expr_stmt><expr><name>room</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <name>msg_col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>room</name> <operator>&amp;&amp;</operator> <name>room</name> <operator>&gt;=</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <operator>(</operator><name>room</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_outtrans_len_attr</name><argument_list>(<argument><expr><name>longstr</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_outtrans_len_attr</name><argument_list>(<argument><expr><name>longstr</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>slen</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>msg_puts_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_attr_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>msg_puts_attr_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redir_write</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>msg_silent</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>MSG_HIST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_msg_hist</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>MSG_HIST</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>overflow</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name>msg_ext_visible</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>msg_ext_overwrite</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>overflow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>overflow</name> <operator>=</operator> <name>msg_scrolled</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>overflow</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>msg_scrolled_ign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msg_didany</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 






<if_stmt><if>if <condition>(<expr><call><name>msg_use_printf</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>saved_msg_col</name> <init>= <expr><name>msg_col</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_puts_printf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>headless_mode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>saved_msg_col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>msg_use_printf</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><name>headless_mode</name> <operator>&amp;&amp;</operator> <name><name>default_grid</name><operator>.</operator><name>chars</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_display</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>msg_printf_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2</function>) <macro><name>FUNC_ATTR_PRINTF</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>msgbuf</name><index>[<expr><name>IOSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>vim_vsnprintf</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msgbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts_attr_len</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_ext_emit_chunk</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_ext_last_attr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return;</return> 
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>chunk</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>msg_ext_last_attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_ext_last_attr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name>ga_take_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_ext_last_chunk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>msg_ext_chunks</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_puts_display</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>recurse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>t_s</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>t_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>sb_str</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sb_col</name> <init>= <expr><name>msg_col</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wrap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_last_char</name></decl>;</decl_stmt>

<expr_stmt><expr><name>did_wait_return</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <name>msg_ext_last_attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_ext_emit_chunk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_ext_last_attr</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strnlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>ga_concat_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_ext_last_chunk</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_ext_cur_len</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_grid_validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdline_was_last_drawn</name> <operator>=</operator> <name>redrawing_cmdline</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>maxlen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>str</name><operator>)</operator> <operator>&lt;</operator> <name>maxlen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>recurse</name> <operator>&amp;&amp;</operator> <name>msg_row</name> <operator>&gt;=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>(</operator><ternary><condition><expr><name>cmdmsg_rl</name></expr>
?</condition><then> <expr><operator>(</operator><name>msg_col</name> <operator>&lt;=</operator> <literal type="number">1</literal>
<operator>||</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <name>TAB</name> <operator>&amp;&amp;</operator> <name>msg_col</name> <operator>&lt;=</operator> <literal type="number">7</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>msg_col</name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><name>msg_col</name> <operator>+</operator> <name>t_col</name> <operator>&gt;=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal>
<operator>||</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <name>TAB</name>
<operator>&amp;&amp;</operator> <name>msg_col</name> <operator>+</operator> <name>t_col</name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>msg_col</name> <operator>+</operator> <name>t_col</name> <operator>&gt;=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>t_col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>t_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t_col</name></expr></argument>, <argument><expr><name>t_s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>msg_no_more</name> <operator>&amp;&amp;</operator> <name>lines_left</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>has_last_char</name> <init>= <expr><operator>(</operator><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>cmdmsg_rl</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_scroll_up</name><argument_list>(<argument><expr><operator>!</operator><name>has_last_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>has_last_char</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>maxlen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utfc_ptr2len_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>maxlen</name><operator>)</operator> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>screen_puts_mbyte</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_last_char</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>did_last_char</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>has_last_char</name> <operator>&amp;&amp;</operator> <call><name>msg_do_throttle</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg_grid</name><operator>.</operator><name>throttled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_grid_scroll_discount</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>msg_grid</name><operator>.</operator><name>throttled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_more</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>store_sb_text</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sb_str</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb_col</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>inc_msg_scrolled</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdline_row</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>exmode_active</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmdline_row</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>lines_left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>lines_left</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_more</name> <operator>&amp;&amp;</operator> <name>lines_left</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>HITRETURN</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name>msg_no_more</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>exmode_active</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>do_more_prompt</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>confirm_msg_tail</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>quit_more</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>did_last_char</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wrap</name> <operator>=</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal>
<operator>||</operator> <name>msg_col</name> <operator>+</operator> <name>t_col</name> <operator>&gt;=</operator> <name>Columns</name>
<operator>||</operator> <operator>(</operator><call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>msg_col</name> <operator>+</operator> <name>t_col</name> <operator>&gt;=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>
;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t_col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>wrap</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\b'</literal>
<operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>BELL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>t_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t_col</name></expr></argument>, <argument><expr><name>t_s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wrap</name> <operator>&amp;&amp;</operator> <name>p_more</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>recurse</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>store_sb_text</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sb_str</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb_col</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>msg_row</name> <operator>&gt;=</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>msg_col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>msg_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>TAB</name></expr>)</condition> <block>{<block_content> 
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>msg_screen_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>msg_col</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition>;</do>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>BELL</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_SH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>cw</name> <operator>=</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>maxlen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utfc_ptr2len_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>maxlen</name><operator>)</operator> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name> <operator>||</operator> <operator>(</operator><name>cw</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>msg_col</name> <operator>+</operator> <name>t_col</name> <operator>&gt;=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>screen_puts_mbyte</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_screen_putchar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t_col</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t_s</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t_col</name> <operator>+=</operator> <name>cw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>t_col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>t_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t_col</name></expr></argument>, <argument><expr><name>t_s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_more</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>recurse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>store_sb_text</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sb_str</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb_col</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>message_filtered</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>filter_regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>match</name> <init>= <expr><call><name>vim_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmdmod</name><operator>.</operator><name>filter_regmatch</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name><name>cmdmod</name><operator>.</operator><name>filter_force</name></name></expr> ?</condition><then> <expr><name>match</name></expr> </then><else>: <expr><operator>!</operator><name>match</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>msg_scrollsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>msg_scrolled</name> <operator>+</operator> <name>p_ch</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>msg_use_msgsep</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<return>return <expr><operator>(</operator><operator>(</operator><name>dy_flags</name> <operator>&amp;</operator> <name>DY_MSGSEP</name><operator>)</operator> <operator>||</operator> <call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMultigrid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>msg_do_throttle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>msg_use_grid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>rdb_flags</name> <operator>&amp;</operator> <name>RDB_NOTHROTTLE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>msg_scroll_up</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>may_throttle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>may_throttle</name> <operator>&amp;&amp;</operator> <call><name>msg_do_throttle</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>msg_grid</name><operator>.</operator><name>throttled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msg_did_scroll</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>msg_use_msgsep</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>msg_grid_pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_grid_set_pos</name><argument_list>(<argument><expr><name>msg_grid_pos</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>grid_del_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>msg_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>msg_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>msg_grid</name><operator>.</operator><name>dirty_col</name></name></expr></argument>, <argument><expr><name><name>msg_grid</name><operator>.</operator><name>dirty_col</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>msg_grid</name><operator>.</operator><name>Rows</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>msg_grid</name><operator>.</operator><name>dirty_col</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_grid</name><operator>.</operator><name>dirty_col</name><index>[<expr><name><name>msg_grid</name><operator>.</operator><name>Rows</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>grid_del_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><name>Rows</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,
<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
















<function><type><name>void</name></type> <name>msg_scroll_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg_grid</name><operator>.</operator><name>throttled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>msg_grid</name><operator>.</operator><name>throttled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos_delta</name> <init>= <expr><name>msg_grid_pos_at_flush</name> <operator>-</operator> <name>msg_grid_pos</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pos_delta</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>msg_scrolled</name> <operator>-</operator> <name>msg_scrolled_at_flush</name></expr></argument>, <argument><expr><name><name>msg_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos_delta</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_ext_msg_set_pos</name><argument_list>(<argument><expr><name>msg_grid_pos</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>to_scroll</name> <init>= <expr><name>delta</name><operator>-</operator><name>pos_delta</name><operator>-</operator><name>msg_grid_scroll_discount</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>to_scroll</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>to_scroll</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>msg_grid_pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_grid_scroll</name><argument_list>(<argument><expr><name><name>msg_grid</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><name>to_scroll</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><name>Rows</name><operator>-</operator><call><name>MAX</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>i</name><operator>-</operator><name>msg_grid_pos</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>msg_grid</name><operator>.</operator><name>dirty_col</name><index>[<expr><name>row</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>msg_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>,
<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_grid</name><operator>.</operator><name>dirty_col</name><index>[<expr><name>row</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msg_scrolled_at_flush</name> <operator>=</operator> <name>msg_scrolled</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_grid_scroll_discount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_grid_pos_at_flush</name> <operator>=</operator> <name>msg_grid_pos</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_reset_scroll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_ext_clear</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>msg_use_grid</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>msg_grid</name><operator>.</operator><name>throttled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>msg_grid_set_pos</name><argument_list>(<argument><expr><name>Rows</name> <operator>-</operator> <name>p_ch</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg_grid</name><operator>.</operator><name>chars</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>MIN</name><argument_list>(<argument><expr><call><name>msg_scrollsize</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>msg_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>grid_clear_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid</name></expr></argument>, <argument><expr><name><name>msg_grid</name><operator>.</operator><name>line_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>msg_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>msg_scrolled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_scrolled_at_flush</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>inc_msg_scrolled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_SCROLLSTART</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sourcing_name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">40</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tofree</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s line %"</literal> <name>PRId64</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>sourcing_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tofree</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_SCROLLSTART</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msg_scrolled</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>must_redraw</name> <operator>&lt;</operator> <name>VALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>VALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>msgchunk_T</name> <modifier>*</modifier></type><name>last_msgchunk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<typedef>typedef <type><enum>enum <block>{
<decl><name>SB_CLEAR_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>SB_CLEAR_ALL</name></decl>,
<decl><name>SB_CLEAR_CMDLINE_BUSY</name></decl>,
<decl><name>SB_CLEAR_CMDLINE_DONE</name></decl>
}</block></enum></type> <name>sb_clear_T</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>sb_clear_T</name></type> <name>do_clear_sb_text</name> <init>= <expr><name>SB_CLEAR_NONE</name></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>store_sb_text</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>sb_str</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sb_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>finish</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>msgchunk_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>do_clear_sb_text</name> <operator>==</operator> <name>SB_CLEAR_ALL</name>
<operator>||</operator> <name>do_clear_sb_text</name> <operator>==</operator> <name>SB_CLEAR_CMDLINE_DONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clear_sb_text</name><argument_list>(<argument><expr><name>do_clear_sb_text</name> <operator>==</operator> <name>SB_CLEAR_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>do_clear_sb_text</name> <operator>=</operator> <name>SB_CLEAR_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <operator>*</operator><name>sb_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>msgchunk_T</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>s</name> <operator>-</operator> <operator>*</operator><name>sb_str</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>sb_eol</name></name> <operator>=</operator> <name>finish</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>sb_msg_col</name></name> <operator>=</operator> <operator>*</operator><name>sb_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>sb_attr</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>sb_text</name></name></expr></argument>, <argument><expr><operator>*</operator><name>sb_str</name></expr></argument>, <argument><expr><name>s</name> <operator>-</operator> <operator>*</operator><name>sb_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>sb_text</name><index>[<expr><name>s</name> <operator>-</operator> <operator>*</operator><name>sb_str</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_msgchunk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_msgchunk</name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>sb_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>sb_prev</name></name> <operator>=</operator> <name>last_msgchunk</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_msgchunk</name><operator>-&gt;</operator><name>sb_next</name></name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_msgchunk</name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>sb_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>finish</name> <operator>&amp;&amp;</operator> <name>last_msgchunk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>last_msgchunk</name><operator>-&gt;</operator><name>sb_eol</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>sb_str</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sb_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>may_clear_sb_text</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>do_clear_sb_text</name> <operator>=</operator> <name>SB_CLEAR_ALL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>sb_text_start_cmdline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>do_clear_sb_text</name> <operator>=</operator> <name>SB_CLEAR_CMDLINE_BUSY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_sb_eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>sb_text_end_cmdline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>do_clear_sb_text</name> <operator>=</operator> <name>SB_CLEAR_CMDLINE_DONE</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>clear_sb_text</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>all</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>msgchunk_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>msgchunk_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>lastp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>all</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lastp</name> <operator>=</operator> <operator>&amp;</operator><name>last_msgchunk</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>last_msgchunk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lastp</name> <operator>=</operator> <operator>&amp;</operator><name><name>last_msgchunk</name><operator>-&gt;</operator><name>sb_prev</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>lastp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>lastp</name><operator>)</operator><operator>-&gt;</operator><name>sb_prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>lastp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lastp</name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>show_sb_text</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>msgchunk_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>



<expr_stmt><expr><name>mp</name> <operator>=</operator> <call><name>msg_sb_start</name><argument_list>(<argument><expr><name>last_msgchunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>mp</name><operator>-&gt;</operator><name>sb_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_MESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>do_more_prompt</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wait_return</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>msgchunk_T</name> <modifier>*</modifier></type><name>msg_sb_start</name><parameter_list>(<parameter><decl><type><name>msgchunk_T</name> <modifier>*</modifier></type><name>mps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>msgchunk_T</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>mps</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>mp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>mp</name><operator>-&gt;</operator><name>sb_prev</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mp</name><operator>-&gt;</operator><name>sb_prev</name><operator>-&gt;</operator><name>sb_eol</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>sb_prev</name></name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>mp</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>msg_sb_eol</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>last_msgchunk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>last_msgchunk</name><operator>-&gt;</operator><name>sb_eol</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>msgchunk_T</name> <modifier>*</modifier></type><name>disp_sb_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>msgchunk_T</name> <modifier>*</modifier></type><name>smp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>msgchunk_T</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>smp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>sb_msg_col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>sb_text</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_puts_display</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>sb_attr</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>sb_eol</name></name> <operator>||</operator> <name><name>mp</name><operator>-&gt;</operator><name>sb_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>sb_next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name><name>mp</name><operator>-&gt;</operator><name>sb_next</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>t_puts</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>t_col</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>t_s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>grid_puts_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>t_s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>t_s</name><operator>)</operator></expr></argument>, <argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>,
<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>+=</operator> <operator>*</operator><name>t_col</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>t_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>t_s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>msg_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>msg_row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>msg_use_printf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><name>embedded_mode</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ui_active</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_puts_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>maxlen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>s</name> <operator>-</operator> <name>str</name> <operator>&lt;</operator> <name>maxlen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>silent_mode</name> <operator>&amp;&amp;</operator> <name>p_verbose</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>info_message</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>info_message</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mch_msg</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cw</name> <init>= <expr><call><name>utf_char2cells</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>-=</operator> <name>cw</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>+=</operator> <name>cw</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>do_more_prompt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>typed_char</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>entered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>used_typed_char</name> <init>= <expr><name>typed_char</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oldState</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>toscroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>to_redraw</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>msgchunk_T</name> <modifier>*</modifier></type><name>mp_last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>msgchunk_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>entered</name> <operator>||</operator> <operator>(</operator><name>State</name> <operator>==</operator> <name>HITRETURN</name> <operator>&amp;&amp;</operator> <name>typed_char</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>typed_char</name> <operator>==</operator> <literal type="char">'G'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mp_last</name> <operator>=</operator> <call><name>msg_sb_start</name><argument_list>(<argument><expr><name>last_msgchunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Rows</name> <operator>-</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>mp_last</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>mp_last</name><operator>-&gt;</operator><name>sb_prev</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp_last</name> <operator>=</operator> <call><name>msg_sb_start</name><argument_list>(<argument><expr><name><name>mp_last</name><operator>-&gt;</operator><name>sb_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>ASKMORE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>typed_char</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_moremsg</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>used_typed_char</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>used_typed_char</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>used_typed_char</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_keystroke</name><argument_list>(<argument><expr><name>resize_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>toscroll</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BS</name></expr>:</case> 
<case>case <expr><name>K_BS</name></expr>:</case>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<case>case <expr><name>K_UP</name></expr>:</case>
<expr_stmt><expr><name>toscroll</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CAR</name></expr>:</case> 
<case>case <expr><name>NL</name></expr>:</case>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<case>case <expr><name>K_DOWN</name></expr>:</case>
<expr_stmt><expr><name>toscroll</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case> 
<expr_stmt><expr><name>toscroll</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>Rows</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> 
<expr_stmt><expr><name>toscroll</name> <operator>=</operator> <name>Rows</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 
<case>case <expr><name>K_PAGEUP</name></expr>:</case>
<expr_stmt><expr><name>toscroll</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>Rows</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">' '</literal></expr>:</case> 
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><name>K_PAGEDOWN</name></expr>:</case>
<case>case <expr><name>K_LEFTMOUSE</name></expr>:</case>
<expr_stmt><expr><name>toscroll</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case> 
<expr_stmt><expr><name>toscroll</name> <operator>=</operator> <operator>-</operator><literal type="number">999999</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case> 
<expr_stmt><expr><name>toscroll</name> <operator>=</operator> <literal type="number">999999</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lines_left</name> <operator>=</operator> <literal type="number">999999</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">':'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>confirm_msg_used</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>typeahead_noflush</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>skip_redraw</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>
<case>case <expr><literal type="char">'q'</literal></expr>:</case> 
<case>case <expr><name>Ctrl_C</name></expr>:</case>
<case>case <expr><name>ESC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>confirm_msg_used</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>quit_more</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>lines_left</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>K_EVENT</name></expr>:</case>



<expr_stmt><expr><call><name>multiqueue_process_events</name><argument_list>(<argument><expr><name>resize_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>to_redraw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default> 
<expr_stmt><expr><call><name>msg_moremsg</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>toscroll</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><name>to_redraw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>toscroll</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>to_redraw</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>toscroll</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>to_redraw</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mp_last</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <call><name>msg_sb_start</name><argument_list>(<argument><expr><name>last_msgchunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mp_last</name><operator>-&gt;</operator><name>sb_prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <call><name>msg_sb_start</name><argument_list>(<argument><expr><name><name>mp_last</name><operator>-&gt;</operator><name>sb_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Rows</name> <operator>-</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>mp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>mp</name><operator>-&gt;</operator><name>sb_prev</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <call><name>msg_sb_start</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>sb_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>sb_prev</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>to_redraw</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>toscroll</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>mp</name><operator>-&gt;</operator><name>sb_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <call><name>msg_sb_start</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>sb_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mp_last</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp_last</name> <operator>=</operator> <call><name>msg_sb_start</name><argument_list>(<argument><expr><name>last_msgchunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp_last</name> <operator>=</operator> <call><name>msg_sb_start</name><argument_list>(<argument><expr><name><name>mp_last</name><operator>-&gt;</operator><name>sb_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>toscroll</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>to_redraw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_ins_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,
<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>disp_sb_line</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,
<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <call><name>disp_sb_line</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>msg_scrolled</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>to_redraw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>toscroll</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>toscroll</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mp_last</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>msg_do_throttle</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>msg_grid</name><operator>.</operator><name>throttled</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>msg_scrolled_at_flush</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_grid_scroll_discount</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_scroll_up</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>inc_msg_scrolled</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><name>Rows</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>Rows</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,
<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mp_last</name> <operator>=</operator> <call><name>disp_sb_line</name><argument_list>(<argument><expr><name>Rows</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>mp_last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>toscroll</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>toscroll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,
<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_moremsg</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>lines_left</name> <operator>=</operator> <name>toscroll</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block></for>


<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,
<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode_displayed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>oldState</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quit_more</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmdmsg_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mch_errmsg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>utf16str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>utf8_to_utf16</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>utf16str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"utf8_to_utf16 failed: %d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fwprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">L"%ls"</literal></expr></argument>, <argument><expr><name>utf16str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>utf16str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>mch_msg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>utf16str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>utf8_to_utf16</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>utf16str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"utf8_to_utf16 failed: %d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>wprintf</name><argument_list>(<argument><expr><literal type="string">L"%ls"</literal></expr></argument>, <argument><expr><name>utf16str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>utf16str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_screen_putchar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>grid_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>msg_col</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>msg_row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>msg_col</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>msg_row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_moremsg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>full</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"-- More --"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>full</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator>
<call><name>_</name><argument_list>(<argument><expr><literal type="string">" SPACE/d/j: screen/page/line down, b/u/k: up, q: quit "</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>vim_strsize</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>repeat_message</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>==</operator> <name>ASKMORE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_moremsg</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>==</operator> <name>CONFIRM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>display_confirm_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>==</operator> <name>EXTERNCMD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_cursor_goto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>==</operator> <name>HITRETURN</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>SETWSIZE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>msg_row</name> <operator>==</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>hit_return_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>msg_clr_eos</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_clr_eos_force</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>msg_clr_eos_force</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msg_startcol</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cmdmsg_rl</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>msg_col</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msg_endcol</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cmdmsg_rl</name><operator>)</operator></expr> ?</condition><then> <expr><name>msg_col</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>Columns</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg_grid</name><operator>.</operator><name>chars</name></name> <operator>&amp;&amp;</operator> <name>msg_row</name> <operator>&lt;</operator> <name>msg_grid_pos</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>msg_grid_pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>msg_startcol</name></expr></argument>, <argument><expr><name>msg_endcol</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,
<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></argument>, <argument><expr><name>msg_row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,
<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>msg_row</name> <operator>&lt;</operator> <name>Rows</name><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>msg_col</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>cmdmsg_rl</name></expr> ?</condition><then> <expr><name>Columns</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>mode_displayed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>msg_clr_cmdline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>cmdline_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos_force</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>msg_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exiting</name> <operator>&amp;&amp;</operator> <name>need_wait_return</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wait_return</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>msg_ext_ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_ext_ui_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_ext_emit_chunk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg_ext_chunks</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_msg_show</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name>msg_ext_kind</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>msg_ext_chunks</name></expr></argument>, <argument><expr><name>msg_ext_overwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg_ext_overwrite</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_ext_visible</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msg_ext_kind</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_ext_chunks</name> <operator>=</operator> <operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_ext_cur_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_ext_overwrite</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_ext_flush_showmode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_ext_emit_chunk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_call_msg_showmode</name><argument_list>(<argument><expr><name>msg_ext_chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_ext_chunks</name> <operator>=</operator> <operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_ext_cur_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_ext_clear</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>msg_ext_visible</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>msg_ext_keep_after_cmdline</name> <operator>||</operator> <name>force</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_msg_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_ext_visible</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_ext_overwrite</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>msg_ext_keep_after_cmdline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_ext_clear_later</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>msg_ext_is_visible</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_ext_need_clear</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>must_redraw</name> <operator>&lt;</operator> <name>VALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>VALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msg_ext_check_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_ext_need_clear</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_ext_clear</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_ext_need_clear</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>msg_ext_is_visible</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>msg_ext_visible</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>msg_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_row</name> <operator>==</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>msg_col</name> <operator>&gt;=</operator> <name>sc_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>redir_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cur_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>maxlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>redir_off</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_vfile</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>verbose_fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>verbose_open</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>redirecting</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>cur_col</name> <operator>&lt;</operator> <name>msg_col</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>capture_ga</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_concat_len</name><argument_list>(<argument><expr><name>capture_ga</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>redir_reg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_reg_contents</name><argument_list>(<argument><expr><name>redir_reg</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>redir_vname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>var_redir_str</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>redir_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>redir_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>verbose_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur_col</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name>maxlen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>maxlen</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>capture_ga</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_concat_len</name><argument_list>(<argument><expr><name>capture_ga</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>redir_reg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_reg_contents</name><argument_list>(<argument><expr><name>redir_reg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>redir_vname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>var_redir_str</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>maxlen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>str</name><operator>)</operator> <operator>&lt;</operator> <name>maxlen</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>redir_reg</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>redir_vname</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>capture_ga</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>redir_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>redir_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>verbose_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_col</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>cur_col</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cur_col</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>msg_silent</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>cur_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redirecting</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>redir_fd</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p_vfile</name> <operator>!=</operator> <name>NUL</name>
<operator>||</operator> <name>redir_reg</name> <operator>||</operator> <name>redir_vname</name> <operator>||</operator> <name>capture_ga</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>verbose_enter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_vfile</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>msg_silent</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>verbose_leave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_vfile</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>msg_silent</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>verbose_enter_scroll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_vfile</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>msg_silent</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>verbose_leave_scroll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_vfile</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>msg_silent</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>verbose_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbose_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>verbose_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>verbose_fd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>verbose_did_open</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>verbose_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbose_fd</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>verbose_did_open</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>verbose_did_open</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>verbose_fd</name> <operator>=</operator> <call><name>os_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_vfile</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose_fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notopen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_vfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>give_warning</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>hl</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_silent</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>no_wait_return</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_WARNINGMSG</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>message</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>keep_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keep_msg_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>keep_msg_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_ext_kind</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_ext_set_kind</name><argument_list>(<argument><expr><literal type="string">"wmsg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>msg_attr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>message</name></expr></argument>, <argument><expr><name>keep_msg_attr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_keep_msg</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>keep_msg_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>msg_nowait</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>no_wait_return</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>give_warning2</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>hl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>message</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>give_warning</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>msg_advance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>msg_silent</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt> 
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<while>while <condition>(<expr><name>msg_ext_cur_len</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdmsg_rl</name></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><name>msg_col</name> <operator>&gt;</operator> <name>Columns</name> <operator>-</operator> <name>col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<while>while <condition>(<expr><name>msg_col</name> <operator>&lt;</operator> <name>col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>
</block_content>}</block></function>



















<function><type><name>int</name></type>
<name>do_dialog</name> <parameter_list>(
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buttons</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dfltbutton</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>textfield</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>ex_cmd</name></decl></parameter> 

)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>hotkeys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>silent_mode</name> 
<operator>||</operator> <operator>!</operator><call><name>ui_active</name><argument_list>()</argument_list></call></expr> 
)</condition> <block>{<block_content>
<return>return <expr><name>dfltbutton</name></expr>;</return> 
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>save_msg_silent</name> <init>= <expr><name>msg_silent</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oldState</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>State</name> <operator>=</operator> <name>CONFIRM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hotkeys</name> <operator>=</operator> <call><name>msg_show_console_dialog</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>buttons</name></expr></argument>, <argument><expr><name>dfltbutton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_keystroke</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CAR</name></expr>:</case> 
<case>case <expr><name>NL</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>dfltbutton</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Ctrl_C</name></expr>:</case> 
<case>case <expr><name>ESC</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> 
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name>ex_cmd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>dfltbutton</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ins_char_typebuf</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hotkeys</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>hotkeys</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>hotkeys</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>hotkeys</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>hotkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>save_msg_silent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>State</name> <operator>=</operator> <name>oldState</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_end_prompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>copy_char</name> <parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lowercase</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lowercase</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>mb_tolower</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_HOTKEY_LEN</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOTK_LEN</name></cpp:macro> <cpp:value>(has_mbyte ? MB_MAXBYTES : 1)</cpp:value></cpp:define>













<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type> <name>console_dialog_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buttons</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name><name>has_hotkey</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lenhotkey</name> <init>= <expr><name>HOTK_LEN</name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name><name>has_hotkey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>buttons</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>r</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>r</name> <operator>==</operator> <name>DLG_BUTTON_SEP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>lenhotkey</name> <operator>+=</operator> <name>HOTK_LEN</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>HAS_HOTKEY_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>has_hotkey</name><index>[<expr><operator>++</operator><name>idx</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>r</name> <operator>==</operator> <name>DLG_HOTKEY_CHAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>HAS_HOTKEY_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>has_hotkey</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call>
<operator>+</operator> <literal type="number">2</literal> 
<operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>)</argument_list></call>
<operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>lenhotkey</name><operator>++</operator></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>has_hotkey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>confirm_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>confirm_msg</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>confirm_msg</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<return>return <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>lenhotkey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>msg_show_console_dialog</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buttons</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dfltbutton</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name><name>has_hotkey</name><index>[<expr><name>HAS_HOTKEY_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>hotk</name> <init>= <expr><call><name>console_dialog_alloc</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>buttons</name></expr></argument>, <argument><expr><name>has_hotkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>copy_hotkeys_and_msg</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>buttons</name></expr></argument>, <argument><expr><name>dfltbutton</name></expr></argument>, <argument><expr><name>has_hotkey</name></expr></argument>, <argument><expr><name>hotk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_confirm_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hotk</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_hotkeys_and_msg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buttons</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>default_button_idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name><name>has_hotkey</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>hotkeys_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>confirm_msg</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>confirm_msg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msgp</name> <init>= <expr><name>confirm_msg</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name><name>hotkeys_ptr</name><index>[<expr><call><name>copy_char</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>, <argument><expr><name>hotkeys_ptr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>



<expr_stmt><expr><name>confirm_msg_tail</name> <operator>=</operator> <name>msgp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>msgp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first_hotkey</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>has_hotkey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first_hotkey</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>buttons</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>r</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>r</name> <operator>==</operator> <name>DLG_BUTTON_SEP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>msgp</name><operator>++</operator> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>msgp</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt> 


<expr_stmt><expr><name>hotkeys_ptr</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>has_mbyte</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>hotkeys_ptr</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hotkeys_ptr</name><index>[<expr><call><name>copy_char</name><argument_list>(<argument><expr><name>r</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>hotkeys_ptr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>default_button_idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>default_button_idx</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>HAS_HOTKEY_LEN</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>has_hotkey</name><index>[<expr><operator>++</operator><name>idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first_hotkey</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>r</name> <operator>==</operator> <name>DLG_HOTKEY_CHAR</name> <operator>||</operator> <name>first_hotkey</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>r</name> <operator>==</operator> <name>DLG_HOTKEY_CHAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>r</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first_hotkey</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>r</name> <operator>==</operator> <name>DLG_HOTKEY_CHAR</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>msgp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>r</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>msgp</name><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>default_button_idx</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'['</literal></expr> </then><else>: <expr><literal type="char">'('</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>msgp</name> <operator>+=</operator> <call><name>copy_char</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>msgp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>msgp</name><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>default_button_idx</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">']'</literal></expr> </then><else>: <expr><literal type="char">')'</literal></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><name><name>hotkeys_ptr</name><index>[<expr><call><name>copy_char</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>hotkeys_ptr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>msgp</name> <operator>+=</operator> <call><name>copy_char</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>msgp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>msgp</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>msgp</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>msgp</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>display_confirm_msg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>confirm_msg_used</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>confirm_msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_ext_set_kind</name><argument_list>(<argument><expr><literal type="string">"confirm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>confirm_msg</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>confirm_msg_used</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vim_dialog_yesno</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dflt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>do_dialog</name><argument_list>(<argument><expr><name>type</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>title</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Question"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>title</name></expr></else></ternary></expr></argument>,
<argument><expr><name>message</name></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Yes\n&amp;No"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dflt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VIM_YES</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VIM_NO</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vim_dialog_yesnocancel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dflt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>do_dialog</name><argument_list>(<argument><expr><name>type</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>title</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Question"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>title</name></expr></else></ternary></expr></argument>,
<argument><expr><name>message</name></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Yes\n&amp;No\n&amp;Cancel"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dflt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><name>VIM_YES</name></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><name>VIM_NO</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VIM_CANCEL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vim_dialog_yesnoallcancel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dflt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>do_dialog</name><argument_list>(<argument><expr><name>type</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>title</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Question"</literal></expr> </then><else>: <expr><name>title</name></expr></else></ternary></expr></argument>,
<argument><expr><name>message</name></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Yes\n&amp;No\nSave &amp;All\n&amp;Discard All\n&amp;Cancel"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>dflt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><name>VIM_YES</name></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><name>VIM_NO</name></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><name>VIM_ALL</name></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case> <return>return <expr><name>VIM_DISCARDALL</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VIM_CANCEL</name></expr>;</return>
</block_content>}</block></function>
</unit>
