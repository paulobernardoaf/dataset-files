<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\ex_session.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/globals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/edit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_getln.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/file_search.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fold.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/keymap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ex_session.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_lcd</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTLINE_FAIL</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (FAIL == put_line(fd, (s))) { return FAIL; } } while (0)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type> <name>put_view_curpos</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>spaces</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%snormal! $\n"</literal></expr></argument>, <argument><expr><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%snormal! 0%d|\n"</literal></expr></argument>, <argument><expr><name>spaces</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ses_winsizes</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>restore_size</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>tab_firstwin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>restore_size</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_WINSIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>tab_firstwin</name></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ses_do_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>&lt;</operator> <name><name>topframe</name><operator>-&gt;</operator><name>fr_height</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
<argument><expr><literal type="string">"exe '%dresize ' . ((&amp;lines * %"</literal> <name>PRId64</name>
<literal type="string">" + %"</literal> <name>PRId64</name> <literal type="string">") / %"</literal> <name>PRId64</name> <literal type="string">")\n"</literal></expr></argument>,
<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>Rows</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>Rows</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&lt;</operator> <name>Columns</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
<argument><expr><literal type="string">"exe 'vert %dresize ' . ((&amp;columns * %"</literal> <name>PRId64</name>
<literal type="string">" + %"</literal> <name>PRId64</name> <literal type="string">") / %"</literal> <name>PRId64</name> <literal type="string">")\n"</literal></expr></argument>,
<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>Columns</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>Columns</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PUTLINE_FAIL</name><argument_list>(<argument><expr><literal type="string">"wincmd ="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>ses_win_rec</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>!=</operator> <name>FR_LEAF</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>frc</name> <operator>=</operator> <call><name>ses_skipframe</name><argument_list>(<argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>frc</name> <operator>=</operator> <call><name>ses_skipframe</name><argument_list>(<argument><expr><name><name>frc</name><operator>-&gt;</operator><name>fr_next</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>,
<argument><expr><literal type="string">"wincmd _ | wincmd |\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr> ?</condition><then> <expr><literal type="string">"split\n"</literal></expr> </then><else>: <expr><literal type="string">"vsplit\n"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr>
?</condition><then> <expr><literal type="string">"%dwincmd k\n"</literal></expr> </then><else>: <expr><literal type="string">"%dwincmd h\n"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>frc</name> <operator>=</operator> <call><name>ses_skipframe</name><argument_list>(<argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>frc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ses_win_rec</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>frc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frc</name> <operator>=</operator> <call><name>ses_skipframe</name><argument_list>(<argument><expr><name><name>frc</name><operator>-&gt;</operator><name>fr_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"wincmd w"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>frame_T</name> <modifier>*</modifier></type><name>ses_skipframe</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frc</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frc</argument>, <argument>fr</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ses_do_frame</name><argument_list>(<argument><expr><name>frc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>frc</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>ses_do_frame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>frame_T</name> <modifier>*</modifier></type><name>frc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ses_do_win</name><argument_list>(<argument><expr><name><name>fr</name><operator>-&gt;</operator><name>fr_win</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frc</argument>, <argument>fr-&gt;fr_child</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ses_do_frame</name><argument_list>(<argument><expr><name>frc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ses_do_win</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>terminal</name></name> <operator>&amp;&amp;</operator> <call><name>bt_nofile</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_BLANK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bt_help</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_HELP</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>ses_arglist</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fullname</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s\n%s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"%argdel"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>aentry_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fullname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_FullName</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname_esc</name> <init>= <expr><call><name>ses_escape_fname</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>flagp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"$argadd %s\n"</literal></expr></argument>, <argument><expr><name>fname_esc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fname_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fname_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>ses_get_fname</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_sfname</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>flagp</name> <operator>==</operator> <operator>&amp;</operator><name>ssop_flags</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <operator>(</operator><name>SSOP_CURDIR</name> <operator>|</operator> <name>SSOP_SESDIR</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name>p_acd</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name>did_lcd</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_sfname</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ses_fname</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>add_eol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>ses_get_fname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>flagp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ses_put_fname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>flagp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>||</operator> <operator>(</operator><name>add_eol</name> <operator>&amp;&amp;</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>ses_escape_fname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sname</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>home_replace_save</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>sname</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_fnameescape</name><argument_list>(<argument><expr><name>sname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>ses_put_fname</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>ses_escape_fname</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>flagp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><ternary><condition><expr><call><name>fputs</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>FAIL</name></expr> </then><else>: <expr><name>OK</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>put_view</name><parameter_list>(
<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>add_edit</name></decl></parameter>, 
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>current_arg_idx</name></decl></parameter> 
)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_next</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>do_cursor</name> <operator>=</operator> <operator>(</operator><name>flagp</name> <operator>==</operator> <operator>&amp;</operator><name>ssop_flags</name> <operator>||</operator> <operator>*</operator><name>flagp</name> <operator>&amp;</operator> <name>SSOP_CURSOR</name><operator>)</operator></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_alist</name></name> <operator>==</operator> <operator>&amp;</operator><name>global_alist</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUTLINE_FAIL</name><argument_list>(<argument><expr><literal type="string">"argglobal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ses_arglist</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"arglocal"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_alist</name><operator>-&gt;</operator><name>al_ga</name></name></expr></argument>,
<argument><expr><name>flagp</name> <operator>==</operator> <operator>&amp;</operator><name>vop_flags</name>
<operator>||</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>flagp</name> <operator>&amp;</operator> <name>SSOP_CURDIR</name><operator>)</operator>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_localdir</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>flagp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>!=</operator> <name>current_arg_idx</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>&lt;</operator> <call><name>WARGCOUNT</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name>flagp</name> <operator>==</operator> <operator>&amp;</operator><name>ssop_flags</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">"argu\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>did_next</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>add_edit</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>did_next</name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_arg_idx_invalid</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname_esc</name> <init>=
<expr><call><name>ses_escape_fname</name><argument_list>(<argument><expr><call><name>ses_get_fname</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>flagp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flagp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>bt_nofile</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>terminal</name></name><operator>)</operator></expr>
)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
<argument><expr><literal type="string">"if bufexists(\"%s\") | buffer %s | else | edit %s | endif\n"</literal>

<literal type="string">"if &amp;buftype ==#'terminal'\n"</literal>
<literal type="string">" silent file %s\n"</literal>
<literal type="string">"endif\n"</literal></expr></argument>,
<argument><expr><name>fname_esc</name></expr></argument>,
<argument><expr><name>fname_esc</name></expr></argument>,
<argument><expr><name>fname_esc</name></expr></argument>,
<argument><expr><name>fname_esc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fname_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PUTLINE_FAIL</name><argument_list>(<argument><expr><literal type="string">"enew"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"file %s\n"</literal></expr></argument>, <argument><expr><name>fname_esc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fname_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>do_cursor</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fname_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>flagp</name> <operator>&amp;</operator> <operator>(</operator><name>SSOP_OPTIONS</name> <operator>|</operator> <name>SSOP_LOCALOPTIONS</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>makemap</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>save_curwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>flagp</name> <operator>&amp;</operator> <operator>(</operator><name>SSOP_OPTIONS</name> <operator>|</operator> <name>SSOP_LOCALOPTIONS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>makeset</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>,
<argument><expr><name>flagp</name> <operator>==</operator> <operator>&amp;</operator><name>vop_flags</name> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>flagp</name> <operator>&amp;</operator> <name>SSOP_OPTIONS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>flagp</name> <operator>&amp;</operator> <name>SSOP_FOLDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>makefoldset</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>save_curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>flagp</name> <operator>&amp;</operator> <name>SSOP_FOLDS</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>bt_normal</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>bt_help</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>
)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>put_folds</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>do_cursor</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
<argument><expr><literal type="string">"let s:l = %"</literal> <name>PRId64</name> <literal type="string">" - ((%"</literal> <name>PRId64</name>
<literal type="string">" * winheight(0) + %"</literal> <name>PRId64</name> <literal type="string">") / %"</literal> <name>PRId64</name> <literal type="string">")\n"</literal>
<literal type="string">"if s:l &lt; 1 | let s:l = 1 | endif\n"</literal>
<literal type="string">"exe s:l\n"</literal>
<literal type="string">"normal! zt\n"</literal>
<literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUTLINE_FAIL</name><argument_list>(<argument><expr><literal type="string">"normal! 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
<argument><expr><literal type="string">"let s:c = %"</literal> <name>PRId64</name> <literal type="string">" - ((%"</literal> <name>PRId64</name>
<literal type="string">" * winwidth(0) + %"</literal> <name>PRId64</name> <literal type="string">") / %"</literal> <name>PRId64</name> <literal type="string">")\n"</literal>
<literal type="string">"if s:c &gt; 0\n"</literal>
<literal type="string">" exe 'normal! ' . s:c . '|zs' . %"</literal> <name>PRId64</name> <literal type="string">" . '|'\n"</literal>
<literal type="string">"else\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_view_curpos</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"endif"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>put_view_curpos</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_localdir</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>flagp</name> <operator>!=</operator> <operator>&amp;</operator><name>vop_flags</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>flagp</name> <operator>&amp;</operator> <name>SSOP_CURDIR</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"lcd "</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>ses_put_fname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_localdir</name></name></expr></argument>, <argument><expr><name>flagp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>did_lcd</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>makeopens</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dirnow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>only_save_windows</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>restore_size</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>edited_win</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tabnr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>tab_firstwin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>tab_topframe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_arg_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_arg_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_BUFFERS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>only_save_windows</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>PUTLINE_FAIL</name><argument_list>(<argument><expr><literal type="string">"let v:this_session=expand(\"&lt;sfile&gt;:p\")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_GLOBALS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>store_session_globals</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>PUTLINE_FAIL</name><argument_list>(<argument><expr><literal type="string">"silent only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_SESDIR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUTLINE_FAIL</name><argument_list>(<argument><expr><literal type="string">"exe \"cd \" . escape(expand(\"&lt;sfile&gt;:p:h\"), ' ')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_CURDIR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sname</name> <operator>=</operator> <call><name>home_replace_save</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name>globaldir</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>globaldir</name></expr> </then><else>: <expr><name>dirnow</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname_esc</name> <init>= <expr><call><name>ses_escape_fname</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>sname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssop_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"cd %s\n"</literal></expr></argument>, <argument><expr><name>fname_esc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fname_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fname_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>,


<argument><expr><literal type="string">"if expand('%') == '' &amp;&amp; !&amp;modified &amp;&amp; line('$') &lt;= 1"</literal>
<literal type="string">" &amp;&amp; getline(1) == ''\n"</literal>
<literal type="string">" let s:wipebuf = bufnr('%')\n"</literal>
<literal type="string">"endif\n"</literal>

<literal type="string">"set shortmess=aoO\n"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>only_save_windows</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_help</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_HELP</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_bl</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"badd +%"</literal> <name>PRId64</name> <literal type="string">" "</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>b_wininfo</name></name> <operator>==</operator> <name>NULL</name></expr>
?</condition><then> <expr><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1L</literal></expr>
</then><else>: <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_wininfo</name><operator>-&gt;</operator><name>wi_fpos</name><operator>.</operator><name>lnum</name></name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>ses_fname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssop_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>


<if_stmt><if>if <condition>(<expr><call><name>ses_arglist</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"argglobal"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>global_alist</name><operator>.</operator><name>al_ga</name></name></expr></argument>,
<argument><expr><operator>!</operator><operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_CURDIR</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssop_flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_RESIZE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"set lines=%"</literal> <name>PRId64</name> <literal type="string">" columns=%"</literal> <name>PRId64</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>Rows</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>Columns</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>restore_stal</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>p_stal</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUTLINE_FAIL</name><argument_list>(<argument><expr><literal type="string">"set stal=2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>restore_stal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>tab_firstwin</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>tab_topframe</name> <operator>=</operator> <name>topframe</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>tabnr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><name>tabnr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><call><name>find_tabpage</name><argument_list>(<argument><expr><name>tabnr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<break>break;</break> 
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_tabnew</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_TABPAGES</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>curtab</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tab_firstwin</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tab_topframe</name> <operator>=</operator> <name>topframe</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>tab_firstwin</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tab_topframe</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_topframe</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tabnr</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_tabnew</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>






<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>tab_firstwin</name></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ses_do_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>bt_help</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>bt_nofile</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>
)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><ternary><condition><expr><name>need_tabnew</name></expr> ?</condition><then> <expr><literal type="string">"tabedit "</literal></expr> </then><else>: <expr><literal type="string">"edit "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>ses_fname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssop_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>need_tabnew</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_arg_idx_invalid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>edited_win</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>need_tabnew</name> <operator>&amp;&amp;</operator> <call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"tabnew"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>PUTLINE_FAIL</name><argument_list>(<argument><expr><literal type="string">"set splitbelow splitright"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ses_win_rec</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>tab_topframe</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sb</name> <operator>&amp;&amp;</operator> <call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"set nosplitbelow"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_spr</name> <operator>&amp;&amp;</operator> <call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"set nosplitright"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>tab_firstwin</name></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ses_do_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>restore_size</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>==</operator> <name>wp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnr</name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>PUTLINE_FAIL</name><argument_list>(<argument><expr><literal type="string">"wincmd t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
<argument><expr><literal type="string">"set winminheight=0\n"</literal>
<literal type="string">"set winheight=1\n"</literal>
<literal type="string">"set winminwidth=0\n"</literal>
<literal type="string">"set winwidth=1\n"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>ses_winsizes</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>restore_size</name></expr></argument>, <argument><expr><name>tab_firstwin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>tab_firstwin</name></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ses_do_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>put_view</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>wp</name> <operator>!=</operator> <name>edited_win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssop_flags</name></expr></argument>, <argument><expr><name>cur_arg_idx</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"wincmd w"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>next_arg_idx</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_arg_idx</name></name></expr>;</expr_stmt>
</block_content>}</block></for>




<expr_stmt><expr><name>cur_arg_idx</name> <operator>=</operator> <name>next_arg_idx</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>cnr</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%dwincmd w\n"</literal></expr></argument>, <argument><expr><name>cnr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>ses_winsizes</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>restore_size</name></expr></argument>, <argument><expr><name>tab_firstwin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_localdir</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"if exists(':tcd') == 2 | tcd "</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>ses_put_fname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_localdir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssop_flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" | endif\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>did_lcd</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_TABPAGES</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_TABPAGES</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"tabnext %d\n"</literal></expr></argument>, <argument><expr><call><name>tabpage_index</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>restore_stal</name> <operator>&amp;&amp;</operator> <call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"set stal=1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><literal type="string">"if exists('s:wipebuf') "</literal>
<literal type="string">"&amp;&amp; getbufvar(s:wipebuf, '&amp;buftype') isnot#'terminal'\n"</literal>
<literal type="string">" silent exe 'bwipe ' . s:wipebuf\n"</literal>
<literal type="string">"endif\n"</literal>
<literal type="string">"unlet! s:wipebuf\n"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
<argument><expr><literal type="string">"set winheight=%"</literal> <name>PRId64</name> <literal type="string">" winwidth=%"</literal> <name>PRId64</name>
<literal type="string">" winminheight=%"</literal> <name>PRId64</name> <literal type="string">" winminwidth=%"</literal> <name>PRId64</name>
<literal type="string">" shortmess=%s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>p_wh</name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>p_wiw</name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>p_wmh</name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>p_wmw</name></expr></argument>,
<argument><expr><name>p_shm</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><literal type="string">"let s:sx = expand(\"&lt;sfile&gt;:p:r\").\"x.vim\"\n"</literal>
<literal type="string">"if file_readable(s:sx)\n"</literal>
<literal type="string">" exe \"source \" . fnameescape(s:sx)\n"</literal>
<literal type="string">"endif\n"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ex_loadview</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><call><name>get_view_file</name><argument_list>(<argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>do_source</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>DOSO_NONE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notopen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>ex_mkrc</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>view_session</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>using_vdir</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>viewFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>flagp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_mksession</name> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_mkview</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>view_session</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>did_lcd</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_mkview</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>NUL</name>
<operator>||</operator> <operator>(</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>get_view_file</name><argument_list>(<argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>viewFile</name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using_vdir</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fname</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_mkvimrc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>VIMRC_FILE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_mksession</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>SESSION_FILE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>EXRC_FILE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>using_vdir</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>os_isdir</name><argument_list>(<argument><expr><name>p_vdir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vim_mkdir_emsg</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_vdir</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open_exfile</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><name>WRITEBIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_mkview</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flagp</name> <operator>=</operator> <operator>&amp;</operator><name>vop_flags</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>flagp</name> <operator>=</operator> <operator>&amp;</operator><name>ssop_flags</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_mkvimrc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"version 6.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_mksession</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"let SessionLoad = 1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>view_session</name> <operator>||</operator> <operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_mksession</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>flagp</name> <operator>&amp;</operator> <name>SSOP_OPTIONS</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>failed</name> <operator>|=</operator> <operator>(</operator><call><name>makemap</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>makeset</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>failed</name> <operator>&amp;&amp;</operator> <name>view_session</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
<argument><expr><literal type="string">"let s:so_save = &amp;so | let s:siso_save = &amp;siso"</literal>
<literal type="string">" | set so=0 siso=0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_mksession</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dirnow</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>dirnow</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>os_dirname</name><argument_list>(<argument><expr><name>dirnow</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>os_chdir</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dirnow</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dirnow</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dirnow</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_SESDIR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_chdirfile</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>shorten_fnames</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>dirnow</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_CURDIR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>globaldir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>os_chdir</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>globaldir</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>shorten_fnames</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>failed</name> <operator>|=</operator> <operator>(</operator><call><name>makeopens</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>dirnow</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dirnow</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_SESDIR</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_CURDIR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>globaldir</name> <operator>!=</operator>
<name>NULL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>os_chdir</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dirnow</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_prev_dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>shorten_fnames</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dirnow</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_SESDIR</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_CURDIR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>globaldir</name> <operator>!=</operator>
<name>NULL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>os_chdir</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dirnow</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_prev_dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>shorten_fnames</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>dirnow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>failed</name> <operator>|=</operator> <operator>(</operator><call><name>put_view</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>!</operator><name>using_vdir</name></expr></argument>, <argument><expr><name>flagp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><literal type="string">"let &amp;so = s:so_save | let &amp;siso = s:siso_save\n"</literal>
<literal type="string">"doautoall SessionLoadPost\n"</literal></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_mksession</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"unlet SessionLoad\n"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\" vim: set ft=vim :"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>failed</name> <operator>|=</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>failed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_write</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_mksession</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tbuf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_FullName</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_THIS_SESSION</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>viewFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_view_file</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sname</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>home_replace_save</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>sname</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_vdir</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>p_vdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>retval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>sname</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'-'</literal></expr> </then><else>: <expr><literal type="char">'+'</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c</name> <operator>&gt;=</operator> <name>CHAR_MIN</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <name>CHAR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">".vim"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>put_eol</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>put_line</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
