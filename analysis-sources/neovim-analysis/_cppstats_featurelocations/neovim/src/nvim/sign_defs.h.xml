<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\sign_defs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_SIGN_DEFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_SIGN_DEFS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/pos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include>




<typedef>typedef <type><struct>struct <name>signgroup_S</name>
<block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>refcount</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>next_sign_id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name></type> <name><name>sg_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>signgroup_T</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SGN_KEY_OFF</name></cpp:macro> <cpp:value>offsetof(signgroup_T, sg_name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI2SG</name><parameter_list>(<parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((signgroup_T *)((hi)-&gt;hi_key - SGN_KEY_OFF))</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>signlist</name></name></type> <name>signlist_T</name>;</typedef>

<struct>struct <name>signlist</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>typenr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>signgroup_T</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>priority</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>signlist_T</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>signlist_T</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt> 
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN_DEF_PRIO</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>


<typedef>typedef <type><enum>enum <block>{
<decl><name>SIGN_ANY</name></decl>,
<decl><name>SIGN_LINEHL</name></decl>,
<decl><name>SIGN_ICON</name></decl>,
<decl><name>SIGN_TEXT</name></decl>,
<decl><name>SIGN_NUMHL</name></decl>,
}</block></enum></type> <name>SignType</name>;</typedef>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
