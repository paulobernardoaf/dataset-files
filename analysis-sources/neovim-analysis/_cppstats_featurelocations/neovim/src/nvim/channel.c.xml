<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\channel.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/ui.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/channel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/encode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/channel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/shell.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/pty_conpty_win.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os_win_console.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>did_stdio</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>next_chan_id</name> <init>= <expr><name>CHAN_STDERR</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"channel.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>void</name></type> <name>channel_teardown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>channels</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<macro><name>map_foreach_value</name><argument_list>(<argument>channels</argument>, <argument>channel</argument>, <argument>{
channel_close(channel-&gt;id, kChannelPartAll, NULL);
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>channel_close</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>ChannelPart</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dummy</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>chan</name> <operator>=</operator> <call><name>find_channel</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <name>next_chan_id</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>e_invchan</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>close_main</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <name>kChannelPartRpc</name> <operator>||</operator> <name>part</name> <operator>==</operator> <name>kChannelPartAll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>close_main</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>is_rpc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rpc_close</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>part</name> <operator>==</operator> <name>kChannelPartRpc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>e_invstream</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>part</name> <operator>==</operator> <name>kChannelPartStdin</name> <operator>||</operator> <name>part</name> <operator>==</operator> <name>kChannelPartStdout</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>chan</name><operator>-&gt;</operator><name>is_rpc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>e_invstreamrpc</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>streamtype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kChannelStreamSocket</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>close_main</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>e_invstream</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>stream_may_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>kChannelStreamProc</name></expr>:</case>
<expr_stmt><expr><name>proc</name> <operator>=</operator> <operator>(</operator><name>Process</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>proc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <name>kChannelPartStdin</name> <operator>||</operator> <name>close_main</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stream_may_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <name>kChannelPartStdout</name> <operator>||</operator> <name>close_main</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stream_may_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <name>kChannelPartStderr</name> <operator>||</operator> <name>part</name> <operator>==</operator> <name>kChannelPartAll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stream_may_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kProcessTypePty</name> <operator>&amp;&amp;</operator> <name>part</name> <operator>==</operator> <name>kChannelPartAll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pty_process_close_master</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>pty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>kChannelStreamStdio</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <name>kChannelPartStdin</name> <operator>||</operator> <name>close_main</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stream_may_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>stdio</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <name>kChannelPartStdout</name> <operator>||</operator> <name>close_main</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stream_may_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>stdio</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <name>kChannelPartStderr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>e_invstream</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>kChannelStreamStderr</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>part</name> <operator>!=</operator> <name>kChannelPartAll</name> <operator>&amp;&amp;</operator> <name>part</name> <operator>!=</operator> <name>kChannelPartStderr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>e_invstream</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>err</name><operator>.</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>err</name><operator>.</operator><name>closed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exiting</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>channel_decref</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>kChannelStreamInternal</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>close_main</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>e_invstream</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>channel_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>channels</name> <operator>=</operator> <call><call><name>pmap_new</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_alloc</name><argument_list>(<argument><expr><name>kChannelStreamStderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>Channel</name> <modifier>*</modifier></type><name>channel_alloc</name><parameter_list>(<parameter><decl><type><name>ChannelStreamType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>chan</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>kChannelStreamStdio</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>CHAN_STDIO</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>kChannelStreamStderr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>CHAN_STDERR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>next_chan_id</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <call><name>multiqueue_new_child</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>exit_status</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>streamtype</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;=</operator> <name>VARNUMBER_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>pmap_put</name></type>(<name>uint64_t</name>)<parameter_list>(<parameter><decl><type><name>channels</name></type></decl></parameter>, <parameter><decl><type><name><name>chan</name><operator>-&gt;</operator><name>id</name></name></type></decl></parameter>, <parameter><decl><type><name>chan</name></type></decl></parameter>)</parameter_list>;</function_decl>
<return>return <expr><name>chan</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>channel_create_event</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext_source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MIN_LOG_LEVEL</name> <operator>&lt;=</operator> <name>INFO_LOG_LEVEL</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ext_source</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>source</name> <operator>=</operator> <name>ext_source</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>eval_fmt_source_name_line</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>source</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;=</operator> <name>VARNUMBER_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>info</name> <init>= <expr><call><name>channel_info</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name> <init>= <expr><name>TV_INITIAL_VALUE</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>object_to_vim</name><argument_list>(<argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>encode_tv2json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ILOG</name><argument_list>(<argument><expr><literal type="string">"new channel %"</literal> <name>PRIu64</name> <literal type="string">" (%s) : %s"</literal></expr></argument>, <argument><expr><name><name>chan</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_dictionary</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ext_source</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>channel_info_changed</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>channel_incref</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>channel_decref</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>--</operator><name><name>chan</name><operator>-&gt;</operator><name>refcount</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>multiqueue_put</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>, <argument><expr><name>free_channel_event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>callback_reader_free</name><parameter_list>(<parameter><decl><type><name>CallbackReader</name> <modifier>*</modifier></type><name>reader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>callback_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reader</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reader</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>callback_reader_start</name><parameter_list>(<parameter><decl><type><name>CallbackReader</name> <modifier>*</modifier></type><name>reader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reader</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_channel_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>is_rpc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rpc_free</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>callback_reader_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>on_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>callback_reader_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>on_stderr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>callback_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>on_exit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>pmap_del</name></type>(<name>uint64_t</name>)<parameter_list>(<parameter><decl><type><name>channels</name></type></decl></parameter>, <parameter><decl><type><name><name>chan</name><operator>-&gt;</operator><name>id</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>multiqueue_free</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>channel_destroy_early</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>--</operator><name>next_chan_id</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<function_decl><type><name>pmap_del</name></type>(<name>uint64_t</name>)<parameter_list>(<parameter><decl><type><name>channels</name></type></decl></parameter>, <parameter><decl><type><name><name>chan</name><operator>-&gt;</operator><name>id</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>--</operator><name><name>chan</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>multiqueue_put</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>, <argument><expr><name>free_channel_event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>close_cb</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>channel_decref</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

























<function><type><name>Channel</name> <modifier>*</modifier></type><name>channel_job_start</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>CallbackReader</name></type> <name>on_stdout</name></decl></parameter>,
<parameter><decl><type><name>CallbackReader</name></type> <name>on_stderr</name></decl></parameter>, <parameter><decl><type><name>Callback</name></type> <name>on_exit</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>pty</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rpc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>detach</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cwd</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>pty_width</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>pty_height</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>term_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>varnumber_T</name> <modifier>*</modifier></type><name>status_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cwd</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>os_isdir_executable</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><call><name>channel_alloc</name><argument_list>(<argument><expr><name>kChannelStreamProc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>on_data</name></name> <operator>=</operator> <name>on_stdout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>on_stderr</name></name> <operator>=</operator> <name>on_stderr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>on_exit</name></name> <operator>=</operator> <name>on_exit</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pty</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>detach</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"terminal/pty job cannot be detached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shell_free_argv</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>term_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_destroy_early</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status_out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>pty</name></name> <operator>=</operator> <call><name>pty_process_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pty_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>pty</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>pty_width</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pty_height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>pty</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>pty_height</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>term_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>pty</name><operator>.</operator><name>term_name</name></name> <operator>=</operator> <name>term_name</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>uv</name></name> <operator>=</operator> <call><name>libuv_process_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>(</operator><name>Process</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>proc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>channel_process_exit_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <name><name>chan</name><operator>-&gt;</operator><name>events</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>detach</name></name> <operator>=</operator> <name>detach</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>cwd</name></name> <operator>=</operator> <name>cwd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>env</name></name> <operator>=</operator> <name>env</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_out</name></decl>, <decl><type ref="prev"/><name>has_err</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kProcessTypePty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_out</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>has_err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>has_out</name> <operator>=</operator> <name>rpc</name> <operator>||</operator> <call><name>callback_reader_set</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>on_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>has_err</name> <operator>=</operator> <call><name>callback_reader_set</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>on_stderr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>process_spawn</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>has_out</name></expr></argument>, <argument><expr><name>has_err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG3</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_jobspawn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>os_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_free_fullenv</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kProcessTypePty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>pty</name><operator>.</operator><name>term_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>channel_destroy_early</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status_out</name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_free_fullenv</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>wstream_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rstream_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rpc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rpc_start</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>callback_reader_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>on_data</name></name></expr></argument>, <argument><expr><literal type="string">"stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rstream_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>on_channel_data</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>callback_reader_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>on_stderr</name></name></expr></argument>, <argument><expr><literal type="string">"stderr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rstream_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rstream_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><name>on_job_stderr</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>status_out</name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>chan</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<return>return <expr><name>chan</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>uint64_t</name></type> <name>channel_connect</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>tcp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>rpc</name></decl></parameter>, <parameter><decl><type><name>CallbackReader</name></type> <name>on_output</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tcp</name> <operator>&amp;&amp;</operator> <name>rpc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>fix_fname</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>loopback</name> <init>= <expr><call><name>server_owns_pipe_address</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>loopback</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>channel_alloc</name><argument_list>(<argument><expr><name>kChannelStreamInternal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpc_start</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>channel_alloc</name><argument_list>(<argument><expr><name>kChannelStreamSocket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>socket_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>socket</name></name></expr></argument>,
<argument><expr><name>tcp</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>channel_destroy_early</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>socket</name><operator>.</operator><name>internal_close_cb</name></name> <operator>=</operator> <name>close_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>socket</name><operator>.</operator><name>internal_data</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wstream_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>socket</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rstream_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>socket</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rpc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rpc_start</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>on_data</name></name> <operator>=</operator> <name>on_output</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>callback_reader_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>on_data</name></name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rstream_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>socket</name></name></expr></argument>, <argument><expr><name>on_channel_data</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>channel_create_event</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>channel_from_connection</name><parameter_list>(<parameter><decl><type><name>SocketWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>channel_alloc</name><argument_list>(<argument><expr><name>kChannelStreamSocket</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>socket_watcher_accept</name><argument_list>(<argument><expr><name>watcher</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>socket</name><operator>.</operator><name>internal_close_cb</name></name> <operator>=</operator> <name>close_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>socket</name><operator>.</operator><name>internal_data</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wstream_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>socket</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rstream_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>socket</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpc_start</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_create_event</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>uint64_t</name></type> <name>channel_from_stdio</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>rpc</name></decl></parameter>, <parameter><decl><type><name>CallbackReader</name></type> <name>on_output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>headless_mode</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>embedded_mode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"can only be opened in headless mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>did_stdio</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"channel was already open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>did_stdio</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>channel_alloc</name><argument_list>(<argument><expr><name>kChannelStreamStdio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stdin_dup_fd</name> <init>= <expr><name>STDIN_FILENO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stdout_dup_fd</name> <init>= <expr><name>STDOUT_FILENO</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>embedded_mode</name> <operator>&amp;&amp;</operator> <call><name>os_has_conpty_working</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stdin_dup_fd</name> <operator>=</operator> <call><name>os_dup</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_replace_stdin_to_conin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stdout_dup_fd</name> <operator>=</operator> <call><name>os_dup</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_replace_stdout_and_stderr_to_conout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rstream_init_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>stdio</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><name>stdin_dup_fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wstream_init_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>stdio</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>stdout_dup_fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rpc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rpc_start</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>on_data</name></name> <operator>=</operator> <name>on_output</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>callback_reader_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>on_data</name></name></expr></argument>, <argument><expr><literal type="string">"stdin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rstream_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>stdio</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><name>on_channel_data</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>channel_send</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><call><name>find_channel</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chan</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invchan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>streamtype</name></name> <operator>==</operator> <name>kChannelStreamStderr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>err</name><operator>.</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Can't send data to closed stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>written</name> <init>= <expr><call><name>fwrite</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name> <operator>*</operator> <name>written</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>Stream</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>channel_instream</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Can't send data to closed stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>is_rpc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Can't send raw data to rpc channel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>WBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>wstream_new_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>xfree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><call><name>wstream_write</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

<label><name>err</name>:</label>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>list_T</name> <modifier>*</modifier></type><name>buffer_to_tv_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_ALWAYS_INLINE
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>l</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><name>kListLenMayKnow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>encode_list_write</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>on_channel_data</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>eof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>on_channel_output</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>eof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>on_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>on_job_stderr</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>eof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>on_channel_output</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>eof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>on_stderr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_channel_output</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>eof</name></decl></parameter>, <parameter><decl><type><name>CallbackReader</name> <modifier>*</modifier></type><name>reader</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>size_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>rbuffer_read_ptr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eof</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>term</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminal_receive</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_flush_output</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rbuffer_consumed</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>callback_reader_set</name><argument_list>(<argument><expr><operator>*</operator><name>reader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_concat_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reader</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>callback_reader_set</name><argument_list>(<argument><expr><operator>*</operator><name>reader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>schedule_channel_event</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>schedule_channel_event</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chan</name><operator>-&gt;</operator><name>callback_scheduled</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chan</name><operator>-&gt;</operator><name>callback_busy</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>multiqueue_put</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>on_channel_event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_incref</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>callback_scheduled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_channel_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><operator>(</operator><name>Channel</name> <operator>*</operator><operator>)</operator><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>callback_busy</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>callback_scheduled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exit_status</name> <init>= <expr><name><name>chan</name><operator>-&gt;</operator><name>exit_status</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>channel_reader_callbacks</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>on_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_reader_callbacks</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>on_stderr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>exit_status</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>channel_callback_call</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>exit_status</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>callback_busy</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>callback_scheduled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>multiqueue_put</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>on_channel_event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_incref</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>channel_decref</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>channel_reader_callbacks</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>, <parameter><decl><type><name>CallbackReader</name> <modifier>*</modifier></type><name>reader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>buffered</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>self</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tv_dict_find</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>buffer_to_tv_list</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>ga_data</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>reader</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tv_dict_add_list</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>EMSG3</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_streamkey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>chan</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>channel_callback_call</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_eof</name> <init>= <expr><name><name>reader</name><operator>-&gt;</operator><name>eof</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>channel_callback_call</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_eof</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>channel_callback_call</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>channel_process_exit_cb</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>term</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"\r\n[Process exited ]"</literal></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof <name>msg</name></sizeof></expr></argument>, <argument><expr><literal type="string">"\r\n[Process exited %d]"</literal></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminal_close</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>exited</name> <init>= <expr><operator>(</operator><name>status</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exited</name> <operator>&amp;&amp;</operator> <name><name>chan</name><operator>-&gt;</operator><name>on_exit</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>kCallbackNone</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>schedule_channel_event</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>exit_status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>channel_decref</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>channel_callback_call</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>, <parameter><decl><type><name>CallbackReader</name> <modifier>*</modifier></type><name>reader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Callback</name> <modifier>*</modifier></type><name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_lock</name> <operator>=</operator> <name>VAR_UNLOCKED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>chan</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reader</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_lock</name> <operator>=</operator> <name>VAR_UNLOCKED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <call><name>buffer_to_tv_list</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>ga_data</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>reader</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_list_ref</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reader</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <operator>&amp;</operator><name><name>reader</name><operator>-&gt;</operator><name>cb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>reader</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_lock</name> <operator>=</operator> <name>VAR_UNLOCKED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>chan</name><operator>-&gt;</operator><name>exit_status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>on_exit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"exit"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_lock</name> <operator>=</operator> <name>VAR_UNLOCKED</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name> <init>= <expr><name>TV_INITIAL_VALUE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>callback_call</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>channel_terminal_open</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TerminalOptions</name></type> <name>topts</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>chan</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>pty</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>pty</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>write_cb</name></name> <operator>=</operator> <name>term_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>resize_cb</name></name> <operator>=</operator> <name>term_resize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>close_cb</name></name> <operator>=</operator> <name>term_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_channel</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>chan</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><call><name>terminal_open</name><argument_list>(<argument><expr><name>topts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_incref</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>term_write</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>proc</name><operator>.</operator><name>in</name><operator>.</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>ILOG</name><argument_list>(<argument><expr><literal type="string">"write failed: stream is closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>WBuffer</name> <modifier>*</modifier></type><name>wbuf</name> <init>= <expr><call><name>wstream_new_buffer</name><argument_list>(<argument><expr><call><name>xmemdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>xfree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wstream_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>proc</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>term_resize</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pty_process_resize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>pty</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>term_delayed_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>proc</name><operator>.</operator><name>in</name><operator>.</operator><name>pending_reqs</name></name> <operator>||</operator> <name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>proc</name><operator>.</operator><name>out</name><operator>.</operator><name>pending_reqs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>multiqueue_put</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>term_delayed_free</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>terminal_destroy</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_decref</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>term_close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>process_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>multiqueue_put</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>term_delayed_free</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>channel_info_changed</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>event_T</name></type> <name>event</name> <init>= <expr><ternary><condition><expr><name>new</name></expr> ?</condition><then> <expr><name>EVENT_CHANOPEN</name></expr> </then><else>: <expr><name>EVENT_CHANINFO</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>has_event</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>channel_incref</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>multiqueue_put</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>, <argument><expr><name>set_info_event</name></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_info_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>event_T</name></type> <name>event</name> <init>= <expr><operator>(</operator><name>event_T</name><operator>)</operator><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><call><name>get_vim_var_dict</name><argument_list>(<argument><expr><name>VV_EVENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>info</name> <init>= <expr><call><name>channel_info</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>object_to_vim</name><argument_list>(<argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>retval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_add_dict</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>retval</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_clear</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_dictionary</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_decref</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>channel_job_running</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><call><name>find_channel</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>chan</name>
<operator>&amp;&amp;</operator> <name><name>chan</name><operator>-&gt;</operator><name>streamtype</name></name> <operator>==</operator> <name>kChannelStreamProc</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>process_is_stopped</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>proc</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dictionary</name></type> <name>channel_info</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><call><name>find_channel</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chan</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Dictionary</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Dictionary</name></type> <name>info</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name><name>chan</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stream_desc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mode_desc</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>streamtype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kChannelStreamProc</name></expr>:</case>
<expr_stmt><expr><name>stream_desc</name> <operator>=</operator> <literal type="string">"job"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>proc</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kProcessTypePty</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>pty_process_tty_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>pty</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"pty"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>kChannelStreamStdio</name></expr>:</case>
<expr_stmt><expr><name>stream_desc</name> <operator>=</operator> <literal type="string">"stdio"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>kChannelStreamStderr</name></expr>:</case>
<expr_stmt><expr><name>stream_desc</name> <operator>=</operator> <literal type="string">"stderr"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>kChannelStreamInternal</name></expr>:</case>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"internal"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>kChannelStreamSocket</name></expr>:</case>
<expr_stmt><expr><name>stream_desc</name> <operator>=</operator> <literal type="string">"socket"</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name>stream_desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>is_rpc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode_desc</name> <operator>=</operator> <literal type="string">"rpc"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"client"</literal></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><call><name>rpc_client_info</name><argument_list>(<argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>term</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode_desc</name> <operator>=</operator> <literal type="string">"terminal"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"buffer"</literal></expr></argument>, <argument><expr><call><name>BUFFER_OBJ</name><argument_list>(<argument><expr><call><name>terminal_buf</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mode_desc</name> <operator>=</operator> <literal type="string">"bytes"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name>mode_desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Array</name></type> <name>channel_all_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>ret</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<macro><name>map_foreach_value</name><argument_list>(<argument>channels</argument>, <argument>channel</argument>, <argument>{
ADD(ret, DICTIONARY_OBJ(channel_info(channel-&gt;id)));
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
