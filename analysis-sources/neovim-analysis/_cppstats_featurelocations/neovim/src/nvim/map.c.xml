<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\map.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/dispatch.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/khash.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cstr_t_hash</name></cpp:macro> <cpp:value>kh_str_hash_func</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cstr_t_eq</name></cpp:macro> <cpp:value>kh_str_hash_equal</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uint64_t_hash</name></cpp:macro> <cpp:value>kh_int64_hash_func</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uint64_t_eq</name></cpp:macro> <cpp:value>kh_int64_hash_equal</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uint32_t_hash</name></cpp:macro> <cpp:value>kh_int_hash_func</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uint32_t_eq</name></cpp:macro> <cpp:value>kh_int_hash_equal</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int_hash</name></cpp:macro> <cpp:value>kh_int_hash_func</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int_eq</name></cpp:macro> <cpp:value>kh_int_hash_equal</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>linenr_T_hash</name></cpp:macro> <cpp:value>kh_int_hash_func</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>linenr_T_eq</name></cpp:macro> <cpp:value>kh_int_hash_equal</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>handle_T_hash</name></cpp:macro> <cpp:value>kh_int_hash_func</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>handle_T_eq</name></cpp:macro> <cpp:value>kh_int_hash_equal</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCH_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ptr_t_hash</name><parameter_list>(<parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>uint64_t_hash((uint64_t)key)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ptr_t_eq</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>uint64_t_eq((uint64_t)a, (uint64_t)b)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCH_32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ptr_t_hash</name><parameter_list>(<parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>uint32_t_hash((uint32_t)key)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ptr_t_eq</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>uint32_t_eq((uint32_t)a, (uint32_t)b)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIALIZER</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>U</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T##_##U##_initializer</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIALIZER_DECLARE</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>U</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>const U INITIALIZER(T, U) = __VA_ARGS__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_INITIALIZER</name></cpp:macro> <cpp:value>{ 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIZE_INITIALIZER</name></cpp:macro> <cpp:value>{ -1 }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_IMPL</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>U</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INITIALIZER_DECLARE(T, U, __VA_ARGS__); __KHASH_IMPL(T##_##U##_map,, T, U, 1, T##_hash, T##_eq) Map(T, U) *map_##T##_##U##_new() { Map(T, U) *rv = xmalloc(sizeof(Map(T, U))); rv-&gt;table = kh_init(T##_##U##_map); return rv; } void map_##T##_##U##_free(Map(T, U) *map) { kh_destroy(T##_##U##_map, map-&gt;table); xfree(map); } U map_##T##_##U##_get(Map(T, U) *map, T key) { khiter_t k; if ((k = kh_get(T##_##U##_map, map-&gt;table, key)) == kh_end(map-&gt;table)) { return INITIALIZER(T, U); } return kh_val(map-&gt;table, k); } bool map_##T##_##U##_has(Map(T, U) *map, T key) { return kh_get(T##_##U##_map, map-&gt;table, key) != kh_end(map-&gt;table); } T map_##T##_##U##_key(Map(T, U) *map, T key) { khiter_t k; if ((k = kh_get(T##_##U##_map, map-&gt;table, key)) == kh_end(map-&gt;table)) { abort(); } return kh_key(map-&gt;table, k); } U map_##T##_##U##_put(Map(T, U) *map, T key, U value) { int ret; U rv = INITIALIZER(T, U); khiter_t k = kh_put(T##_##U##_map, map-&gt;table, key, &amp;ret); if (!ret) { rv = kh_val(map-&gt;table, k); } kh_val(map-&gt;table, k) = value; return rv; } U *map_##T##_##U##_ref(Map(T, U) *map, T key, bool put) { int ret; khiter_t k; if (put) { k = kh_put(T##_##U##_map, map-&gt;table, key, &amp;ret); if (ret) { kh_val(map-&gt;table, k) = INITIALIZER(T, U); } } else { k = kh_get(T##_##U##_map, map-&gt;table, key); if (k == kh_end(map-&gt;table)) { return NULL; } } return &amp;kh_val(map-&gt;table, k); } U map_##T##_##U##_del(Map(T, U) *map, T key) { U rv = INITIALIZER(T, U); khiter_t k; if ((k = kh_get(T##_##U##_map, map-&gt;table, key)) != kh_end(map-&gt;table)) { rv = kh_val(map-&gt;table, k); kh_del(T##_##U##_map, map-&gt;table, k); } return rv; } void map_##T##_##U##_clear(Map(T, U) *map) { kh_clear(T##_##U##_map, map-&gt;table); }</cpp:value></cpp:define>





























































































<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>khint_t</name></type> <name>String_hash</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>khint_t</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <name>h</name> <operator>+</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>s</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>String_eq</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>khint_t</name></type> <name>HlEntry_hash</name><parameter_list>(<parameter><decl><type><name>HlEntry</name></type> <name>ae</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ae</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>khint_t</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <name>h</name> <operator>+</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>HlEntry_eq</name><parameter_list>(<parameter><decl><type><name>HlEntry</name></type> <name>ae1</name></decl></parameter>, <parameter><decl><type><name>HlEntry</name></type> <name>ae2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ae1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ae2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ae1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<macro><name>MAP_IMPL</name><argument_list>(<argument>int</argument>, <argument>int</argument>, <argument>DEFAULT_INITIALIZER</argument>)</argument_list></macro>
<macro><name>MAP_IMPL</name><argument_list>(<argument>cstr_t</argument>, <argument>ptr_t</argument>, <argument>DEFAULT_INITIALIZER</argument>)</argument_list></macro>
<macro><name>MAP_IMPL</name><argument_list>(<argument>ptr_t</argument>, <argument>ptr_t</argument>, <argument>DEFAULT_INITIALIZER</argument>)</argument_list></macro>
<macro><name>MAP_IMPL</name><argument_list>(<argument>uint64_t</argument>, <argument>ptr_t</argument>, <argument>DEFAULT_INITIALIZER</argument>)</argument_list></macro>
<macro><name>MAP_IMPL</name><argument_list>(<argument>uint64_t</argument>, <argument>ssize_t</argument>, <argument>SSIZE_INITIALIZER</argument>)</argument_list></macro>
<macro><name>MAP_IMPL</name><argument_list>(<argument>uint64_t</argument>, <argument>uint64_t</argument>, <argument>DEFAULT_INITIALIZER</argument>)</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTMARK_NS_INITIALIZER</name></cpp:macro> <cpp:value>{ 0, 0 }</cpp:value></cpp:define>
<macro><name>MAP_IMPL</name><argument_list>(<argument>uint64_t</argument>, <argument>ExtmarkNs</argument>, <argument>EXTMARK_NS_INITIALIZER</argument>)</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVEC_INITIALIZER</name></cpp:macro> <cpp:value>{ .size = 0, .capacity = 0, .items = NULL }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTMARK_ITEM_INITIALIZER</name></cpp:macro> <cpp:value>{ 0, 0, 0, KVEC_INITIALIZER }</cpp:value></cpp:define>
<macro><name>MAP_IMPL</name><argument_list>(<argument>uint64_t</argument>, <argument>ExtmarkItem</argument>, <argument>EXTMARK_ITEM_INITIALIZER</argument>)</argument_list></macro>
<macro><name>MAP_IMPL</name><argument_list>(<argument>handle_T</argument>, <argument>ptr_t</argument>, <argument>DEFAULT_INITIALIZER</argument>)</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSGPACK_HANDLER_INITIALIZER</name></cpp:macro> <cpp:value>{ .fn = NULL, .fast = false }</cpp:value></cpp:define>
<macro><name>MAP_IMPL</name><argument_list>(<argument>String</argument>, <argument>MsgpackRpcRequestHandler</argument>, <argument>MSGPACK_HANDLER_INITIALIZER</argument>)</argument_list></macro>
<macro><name>MAP_IMPL</name><argument_list>(<argument>HlEntry</argument>, <argument>int</argument>, <argument>DEFAULT_INITIALIZER</argument>)</argument_list></macro>
<macro><name>MAP_IMPL</name><argument_list>(<argument>String</argument>, <argument>handle_T</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>





<decl_stmt><decl><type><name>void</name></type> <name>pmap_del2</name><argument_list>(<argument><expr><call><name>PMap</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>map</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><call><name>pmap_has</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><call><name>pmap_key</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><call><name>pmap_get</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function_decl><type><name>pmap_del</name></type>(<name>cstr_t</name>)<parameter_list>(<parameter><decl><type><name>map</name></type></decl></parameter>, <parameter><decl><type><name>key</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>
</unit>
