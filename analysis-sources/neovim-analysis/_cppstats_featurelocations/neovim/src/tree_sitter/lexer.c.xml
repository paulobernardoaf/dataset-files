<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\tree_sitter\lexer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./lexer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./subtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./length.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./unicode.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<parameter><type><name>message</name></type></parameter>, <parameter><type><name>character</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (self-&gt;logger.log) { snprintf( self-&gt;debug_buffer, TREE_SITTER_SERIALIZATION_BUFFER_SIZE, 32 &lt;= character &amp;&amp; character &lt; 127 ? message " character:'%c'" : message " character:%d", character ); self-&gt;logger.log( self-&gt;logger.payload, TSLogTypeLex, self-&gt;debug_buffer ); }</cpp:value></cpp:define>
















<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>BYTE_ORDER_MARK</name> <init>= <expr><literal type="number">0xFEFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TSRange</name></type> <name>DEFAULT_RANGE</name> <init>= <expr><block>{
<expr><operator>.</operator><name>start_point</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>column</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr>,
<expr><operator>.</operator><name>end_point</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>row</name> <operator>=</operator> <name>UINT32_MAX</name></expr>,
<expr><operator>.</operator><name>column</name> <operator>=</operator> <name>UINT32_MAX</name></expr>,
}</block></expr>,
<expr><operator>.</operator><name>start_byte</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>end_byte</name> <operator>=</operator> <name>UINT32_MAX</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_lexer__eof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSLexer</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>Lexer</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>current_included_range_index</name></name> <operator>==</operator> <name><name>self</name><operator>-&gt;</operator><name>included_range_count</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_lexer__clear_chunk</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>chunk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>chunk_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>chunk_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_lexer__get_chunk</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>chunk_start</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>chunk</name></name> <operator>=</operator> <call><name><name>self</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>read</name></name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>payload</name></name></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>extent</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>chunk_size</name></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>chunk_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>current_included_range_index</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>included_range_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>chunk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_lexer__get_lookahead</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>position_in_chunk</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name> <operator>-</operator> <name><name>self</name><operator>-&gt;</operator><name>chunk_start</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <name>position_in_chunk</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>chunk_size</name></name> <operator>-</operator> <name>position_in_chunk</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>lookahead_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lookahead</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>UnicodeDecodeFunction</name></type> <name>decode</name> <init>= <expr><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>encoding</name></name> <operator>==</operator> <name>TSInputEncodingUTF8</name></expr>
?</condition><then> <expr><name>ts_decode_utf8</name></expr>
</then><else>: <expr><name>ts_decode_utf16</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>lookahead_size</name></name> <operator>=</operator> <call><name>decode</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lookahead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lookahead</name></name> <operator>==</operator> <name>TS_DECODE_ERROR</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_lexer__get_chunk</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chunk</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>chunk</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>chunk_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>lookahead_size</name></name> <operator>=</operator> <call><name>decode</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lookahead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lookahead</name></name> <operator>==</operator> <name>TS_DECODE_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>lookahead_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_lexer__advance</name><parameter_list>(<parameter><decl><type><name>TSLexer</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>skip</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>Lexer</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>chunk</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"skip"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lookahead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"consume"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lookahead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>lookahead_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name><name>self</name><operator>-&gt;</operator><name>lookahead_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lookahead</name></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>extent</name><operator>.</operator><name>row</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name> <operator>+=</operator> <name><name>self</name><operator>-&gt;</operator><name>lookahead_size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSRange</name> <modifier>*</modifier></type><name>current_range</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>current_included_range_index</name></name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>included_range_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>current_range</name> <operator>=</operator> <operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>included_ranges</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>current_included_range_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name><name>current_range</name><operator>-&gt;</operator><name>end_byte</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>current_included_range_index</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>current_included_range_index</name></name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>included_range_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>current_range</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name></name> <operator>=</operator> <operator>(</operator><name>Length</name><operator>)</operator> <block>{
<expr><name><name>current_range</name><operator>-&gt;</operator><name>start_byte</name></name></expr>,
<expr><name><name>current_range</name><operator>-&gt;</operator><name>start_point</name></name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>current_range</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>token_start_position</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>current_position</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_range</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>chunk_start</name></name> <operator>+</operator> <name><name>self</name><operator>-&gt;</operator><name>chunk_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_lexer__get_chunk</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ts_lexer__get_lookahead</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ts_lexer__clear_chunk</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lookahead</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>lookahead_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_lexer__mark_end</name><parameter_list>(<parameter><decl><type><name>TSLexer</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>Lexer</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_lexer__eof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>TSRange</name> <modifier>*</modifier></type><name>current_included_range</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>included_ranges</name><index>[
<expr><name><name>self</name><operator>-&gt;</operator><name>current_included_range_index</name></name></expr>
]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(
<expr><name><name>self</name><operator>-&gt;</operator><name>current_included_range_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name><name>current_included_range</name><operator>-&gt;</operator><name>start_byte</name></name></expr>
)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>TSRange</name> <modifier>*</modifier></type><name>previous_included_range</name> <init>= <expr><name>current_included_range</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>token_end_position</name></name> <operator>=</operator> <operator>(</operator><name>Length</name><operator>)</operator> <block>{
<expr><name><name>previous_included_range</name><operator>-&gt;</operator><name>end_byte</name></name></expr>,
<expr><name><name>previous_included_range</name><operator>-&gt;</operator><name>end_point</name></name></expr>,
}</block></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>token_end_position</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>current_position</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>ts_lexer__get_column</name><parameter_list>(<parameter><decl><type><name>TSLexer</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>Lexer</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>goal_byte</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name> <operator>-=</operator> <name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>chunk_start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_lexer__get_chunk</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name>goal_byte</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_lexer__advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_lexer__is_at_included_range_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSLexer</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Lexer</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>Lexer</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>current_included_range_index</name></name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>included_range_count</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>TSRange</name> <modifier>*</modifier></type><name>current_range</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>included_ranges</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>current_included_range_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name><name>current_range</name><operator>-&gt;</operator><name>start_byte</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_lexer_init</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>self</name> <operator>=</operator> <operator>(</operator><name>Lexer</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>data</name> <operator>=</operator> <block>{



<expr><operator>.</operator><name>advance</name> <operator>=</operator> <name>ts_lexer__advance</name></expr>,
<expr><operator>.</operator><name>mark_end</name> <operator>=</operator> <name>ts_lexer__mark_end</name></expr>,
<expr><operator>.</operator><name>get_column</name> <operator>=</operator> <name>ts_lexer__get_column</name></expr>,
<expr><operator>.</operator><name>is_at_included_range_start</name> <operator>=</operator> <name>ts_lexer__is_at_included_range_start</name></expr>,
<expr><operator>.</operator><name>eof</name> <operator>=</operator> <name>ts_lexer__eof</name></expr>,
<expr><operator>.</operator><name>lookahead</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>result_symbol</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr>,
<expr><operator>.</operator><name>chunk</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>chunk_size</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>chunk_start</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>current_position</name> <operator>=</operator> <block>{<expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,
<expr><operator>.</operator><name>logger</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>payload</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>log</name> <operator>=</operator> <name>NULL</name></expr>
}</block></expr>,
<expr><operator>.</operator><name>included_ranges</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>included_range_count</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>current_included_range_index</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_lexer_set_included_ranges</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_lexer_delete</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ts_free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>included_ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_lexer_goto</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Length</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found_included_range</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>included_range_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TSRange</name> <modifier>*</modifier></type><name>included_range</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>included_ranges</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>included_range</name><operator>-&gt;</operator><name>end_byte</name></name> <operator>&gt;</operator> <name><name>position</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>included_range</name><operator>-&gt;</operator><name>start_byte</name></name> <operator>&gt;</operator> <name><name>position</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name></name> <operator>=</operator> <operator>(</operator><name>Length</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>included_range</name><operator>-&gt;</operator><name>start_byte</name></name></expr>,
<expr><operator>.</operator><name>extent</name> <operator>=</operator> <name><name>included_range</name><operator>-&gt;</operator><name>start_point</name></name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>current_included_range_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>found_included_range</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>found_included_range</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>chunk</name></name> <operator>&amp;&amp;</operator> <operator>(</operator>
<name><name>position</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>chunk_start</name></name> <operator>||</operator>
<name><name>position</name><operator>.</operator><name>bytes</name></name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>chunk_start</name></name> <operator>+</operator> <name><name>self</name><operator>-&gt;</operator><name>chunk_size</name></name>
<operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_lexer__clear_chunk</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>lookahead_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lookahead</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>



<else>else <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>current_included_range_index</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>included_range_count</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TSRange</name> <modifier>*</modifier></type><name>last_included_range</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>included_ranges</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>included_range_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name></name> <operator>=</operator> <operator>(</operator><name>Length</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>last_included_range</name><operator>-&gt;</operator><name>end_byte</name></name></expr>,
<expr><operator>.</operator><name>extent</name> <operator>=</operator> <name><name>last_included_range</name><operator>-&gt;</operator><name>end_point</name></name></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_lexer__clear_chunk</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>lookahead_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lookahead</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_lexer_set_input</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>TSInput</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_lexer__clear_chunk</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_lexer_goto</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ts_lexer_reset</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Length</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>position</name><operator>.</operator><name>bytes</name></name> <operator>!=</operator> <name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_lexer_goto</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_lexer_start</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>token_start_position</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>current_position</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>token_end_position</name></name> <operator>=</operator> <name>LENGTH_UNDEFINED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>result_symbol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_lexer__eof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>chunk_size</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ts_lexer__get_chunk</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>lookahead_size</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ts_lexer__get_lookahead</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(
<expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lookahead</name></name> <operator>==</operator> <name>BYTE_ORDER_MARK</name></expr>
)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ts_lexer__advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_lexer_finish</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>lookahead_end_byte</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>length_is_undefined</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>token_end_position</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_lexer__mark_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>current_lookahead_end_byte</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>lookahead</name></name> <operator>==</operator> <name>TS_DECODE_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>current_lookahead_end_byte</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_lookahead_end_byte</name> <operator>&gt;</operator> <operator>*</operator><name>lookahead_end_byte</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lookahead_end_byte</name> <operator>=</operator> <name>current_lookahead_end_byte</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_lexer_advance_to_end</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>chunk</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_lexer__advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_lexer_mark_end</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ts_lexer__mark_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_lexer_set_included_ranges</name><parameter_list>(
<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TSRange</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>ranges</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ranges</name> <operator>=</operator> <operator>&amp;</operator><name>DEFAULT_RANGE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>previous_byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TSRange</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><operator>&amp;</operator><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(
<expr><name><name>range</name><operator>-&gt;</operator><name>start_byte</name></name> <operator>&lt;</operator> <name>previous_byte</name> <operator>||</operator>
<name><name>range</name><operator>-&gt;</operator><name>end_byte</name></name> <operator>&lt;</operator> <name><name>range</name><operator>-&gt;</operator><name>start_byte</name></name></expr>
)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>previous_byte</name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>end_byte</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSRange</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>included_ranges</name></name> <operator>=</operator> <call><name>ts_realloc</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>included_ranges</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>included_ranges</name></name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>included_range_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_lexer_goto</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>current_position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSRange</name> <modifier>*</modifier></type><name>ts_lexer_included_ranges</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>included_range_count</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>included_ranges</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOG</name></cpp:undef>
</unit>
