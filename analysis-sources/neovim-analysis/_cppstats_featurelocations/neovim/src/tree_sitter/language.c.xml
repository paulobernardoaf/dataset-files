<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\tree_sitter\language.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./language.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./subtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./error_costs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>uint32_t</name></type> <name>ts_language_symbol_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>symbol_count</name></name> <operator>+</operator> <name><name>self</name><operator>-&gt;</operator><name>alias_count</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ts_language_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>version</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ts_language_field_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name>TREE_SITTER_LANGUAGE_VERSION_WITH_FIELDS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>field_count</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_language_table_entry</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>TSStateId</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>,
<parameter><decl><type><name>TableEntry</name> <modifier>*</modifier></type><name>result</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>symbol</name> <operator>==</operator> <name>ts_builtin_sym_error</name> <operator>||</operator> <name>symbol</name> <operator>==</operator> <name>ts_builtin_sym_error_repeat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>action_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>is_reusable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>actions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>symbol</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>token_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>action_index</name> <init>= <expr><call><name>ts_language_lookup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TSParseActionEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>parse_actions</name><index>[<expr><name>action_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>action_count</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>is_reusable</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>reusable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>actions</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>TSParseAction</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>entry</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>TSSymbolMetadata</name></type> <name>ts_language_symbol_metadata</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>symbol</name> <operator>==</operator> <name>ts_builtin_sym_error</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>TSSymbolMetadata</name><operator>)</operator><block>{<expr><operator>.</operator><name>visible</name> <operator>=</operator> <name>true</name></expr>, <expr><operator>.</operator><name>named</name> <operator>=</operator> <name>true</name></expr>}</block></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>symbol</name> <operator>==</operator> <name>ts_builtin_sym_error_repeat</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>TSSymbolMetadata</name><operator>)</operator><block>{<expr><operator>.</operator><name>visible</name> <operator>=</operator> <name>false</name></expr>, <expr><operator>.</operator><name>named</name> <operator>=</operator> <name>false</name></expr>}</block></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>symbol_metadata</name><index>[<expr><name>symbol</name></expr>]</index></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>TSSymbol</name></type> <name>ts_language_public_symbol</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>symbol</name> <operator>==</operator> <name>ts_builtin_sym_error</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>symbol</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name>TREE_SITTER_LANGUAGE_VERSION_WITH_SYMBOL_DEDUPING</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>public_symbol_map</name><index>[<expr><name>symbol</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>symbol</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ts_language_symbol_name</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>symbol</name> <operator>==</operator> <name>ts_builtin_sym_error</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="string">"ERROR"</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>symbol</name> <operator>==</operator> <name>ts_builtin_sym_error_repeat</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="string">"_ERROR"</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>symbol_names</name><index>[<expr><name>symbol</name></expr>]</index></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>TSSymbol</name></type> <name>ts_language_symbol_for_name</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_named</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"ERROR"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ts_builtin_sym_error</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><call><name>ts_language_symbol_count</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>TSSymbol</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TSSymbolMetadata</name></type> <name>metadata</name> <init>= <expr><call><name>ts_language_symbol_metadata</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>metadata</name><operator>.</operator><name>visible</name></name> <operator>||</operator> <name><name>metadata</name><operator>.</operator><name>named</name></name> <operator>!=</operator> <name>is_named</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symbol_name</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>symbol_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>symbol_name</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>symbol_name</name><index>[<expr><name>length</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name>TREE_SITTER_LANGUAGE_VERSION_WITH_SYMBOL_DEDUPING</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>public_symbol_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSSymbolType</name></type> <name>ts_language_symbol_type</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSSymbolMetadata</name></type> <name>metadata</name> <init>= <expr><call><name>ts_language_symbol_metadata</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>.</operator><name>named</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>TSSymbolTypeRegular</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>metadata</name><operator>.</operator><name>visible</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>TSSymbolTypeAnonymous</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>TSSymbolTypeAuxiliary</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ts_language_field_name_for_id</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>TSFieldId</name></type> <name>id</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><call><name>ts_language_field_count</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>TSFieldId</name></type> <name>ts_language_field_id_for_name</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name_length</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><call><name>ts_language_field_count</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>TSSymbol</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>name_length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>name_length</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
