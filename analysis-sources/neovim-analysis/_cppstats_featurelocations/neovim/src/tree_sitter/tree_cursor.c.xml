<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\tree_sitter\tree_cursor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree_sitter/api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./alloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./tree_cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./language.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./tree.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Subtree</name></type> <name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>child_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>structural_child_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TSSymbol</name> <modifier>*</modifier></type><name>alias_sequence</name></decl>;</decl_stmt>
}</block></struct></type> <name>CursorChildIterator</name>;</typedef>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>CursorChildIterator</name></type> <name>ts_tree_cursor_iterate_children</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TreeCursor</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TreeCursorEntry</name> <modifier>*</modifier></type><name>last_entry</name> <init>= <expr><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><operator>*</operator><name><name>last_entry</name><operator>-&gt;</operator><name>subtree</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>CursorChildIterator</name><operator>)</operator> <block>{<expr><name>NULL_SUBTREE</name></expr>, <expr><name><name>self</name><operator>-&gt;</operator><name>tree</name></name></expr>, <expr><call><name>length_zero</name><argument_list>()</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TSSymbol</name> <modifier>*</modifier></type><name>alias_sequence</name> <init>= <expr><call><name>ts_language_alias_sequence</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,
<argument><expr><name><name>last_entry</name><operator>-&gt;</operator><name>subtree</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>CursorChildIterator</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>tree</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>tree</name></name></expr>,
<expr><operator>.</operator><name>parent</name> <operator>=</operator> <operator>*</operator><name><name>last_entry</name><operator>-&gt;</operator><name>subtree</name></name></expr>,
<expr><operator>.</operator><name>position</name> <operator>=</operator> <name><name>last_entry</name><operator>-&gt;</operator><name>position</name></name></expr>,
<expr><operator>.</operator><name>child_index</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>structural_child_index</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>alias_sequence</name> <operator>=</operator> <name>alias_sequence</name></expr>,
}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_tree_cursor_child_iterator_next</name><parameter_list>(<parameter><decl><type><name>CursorChildIterator</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>TreeCursorEntry</name> <modifier>*</modifier></type><name>result</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>visible</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ptr</name></name> <operator>||</operator> <name><name>self</name><operator>-&gt;</operator><name>child_index</name></name> <operator>==</operator> <name><name>self</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>child_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>(</operator><name>TreeCursorEntry</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>subtree</name> <operator>=</operator> <name>child</name></expr>,
<expr><operator>.</operator><name>position</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>position</name></name></expr>,
<expr><operator>.</operator><name>child_index</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>child_index</name></name></expr>,
<expr><operator>.</operator><name>structural_child_index</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>structural_child_index</name></name></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>visible</name> <operator>=</operator> <call><name>ts_subtree_visible</name><argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>extra</name> <init>= <expr><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>extra</name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>alias_sequence</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>visible</name> <operator>|=</operator> <name><name>self</name><operator>-&gt;</operator><name>alias_sequence</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>structural_child_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>structural_child_index</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <call><name>length_add</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>position</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_size</name><argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>child_index</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>child_index</name></name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>next_child</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>child_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <call><name>length_add</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>position</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_padding</name><argument_list>(<argument><expr><name>next_child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>TSTreeCursor</name></type> <name>ts_tree_cursor_new</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSTreeCursor</name></type> <name>self</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_tree_cursor_init</name><argument_list>(<argument><expr><operator>(</operator><name>TreeCursor</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>self</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_tree_cursor_reset</name><parameter_list>(<parameter><decl><type><name>TSTreeCursor</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>, <parameter><decl><type><name>TSNode</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ts_tree_cursor_init</name><argument_list>(<argument><expr><operator>(</operator><name>TreeCursor</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_tree_cursor_init</name><parameter_list>(<parameter><decl><type><name>TreeCursor</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>TSNode</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>tree</name></name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>tree</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>array_push</name><argument_list>(<argument>&amp;self-&gt;stack</argument>, <argument>((TreeCursorEntry) {
.subtree = (const Subtree *)node.id,
.position = {
ts_node_start_byte(node),
ts_node_start_point(node)
},
.child_index = <literal type="number">0</literal>,
.structural_child_index = <literal type="number">0</literal>,
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_tree_cursor_delete</name><parameter_list>(<parameter><decl><type><name>TSTreeCursor</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TreeCursor</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>TreeCursor</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>ts_tree_cursor_goto_first_child</name><parameter_list>(<parameter><decl><type><name>TSTreeCursor</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TreeCursor</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>TreeCursor</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_descend</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>visible</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TreeCursorEntry</name></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CursorChildIterator</name></type> <name>iterator</name> <init>= <expr><call><name>ts_tree_cursor_iterate_children</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>ts_tree_cursor_child_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>visible</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>visible</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_visible_child_count</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>subtree</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><name>did_descend</name></expr>)</condition>;</do>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>ts_tree_cursor_goto_first_child_for_byte</name><parameter_list>(<parameter><decl><type><name>TSTreeCursor</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>goal_byte</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TreeCursor</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>TreeCursor</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>initial_size</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>visible_child_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_descend</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>visible</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TreeCursorEntry</name></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CursorChildIterator</name></type> <name>iterator</name> <init>= <expr><call><name>ts_tree_cursor_iterate_children</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>ts_tree_cursor_child_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>visible</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>end_byte</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>position</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <call><name>ts_subtree_size</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>subtree</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>at_goal</name> <init>= <expr><name>end_byte</name> <operator>&gt;</operator> <name>goal_byte</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>visible_child_count</name> <init>= <expr><call><name>ts_subtree_visible_child_count</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>at_goal</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>visible</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>visible_child_index</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>visible_child_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>visible</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>visible_child_index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>visible_child_index</name> <operator>+=</operator> <name>visible_child_count</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><name>did_descend</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <name>initial_size</name> <operator>&amp;&amp;</operator>
<call><name>ts_tree_cursor_goto_next_sibling</name><argument_list>(<argument><expr><operator>(</operator><name>TSTreeCursor</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>visible_child_index</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>initial_size</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_tree_cursor_goto_next_sibling</name><parameter_list>(<parameter><decl><type><name>TSTreeCursor</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TreeCursor</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>TreeCursor</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>initial_size</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>TreeCursorEntry</name></type> <name>entry</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CursorChildIterator</name></type> <name>iterator</name> <init>= <expr><call><name>ts_tree_cursor_iterate_children</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>iterator</name><operator>.</operator><name>child_index</name></name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>child_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iterator</name><operator>.</operator><name>structural_child_index</name></name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>structural_child_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iterator</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>position</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>visible</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_tree_cursor_child_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>visible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>visible</name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>initial_size</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>ts_tree_cursor_child_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>visible</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>visible</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_visible_child_count</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_tree_cursor_goto_first_child</name><argument_list>(<argument><expr><name>_self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></while>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>initial_size</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_tree_cursor_goto_parent</name><parameter_list>(<parameter><decl><type><name>TSTreeCursor</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TreeCursor</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>TreeCursor</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TreeCursorEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_aliased</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>TreeCursorEntry</name> <modifier>*</modifier></type><name>parent_entry</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TSSymbol</name> <modifier>*</modifier></type><name>alias_sequence</name> <init>= <expr><call><name>ts_language_alias_sequence</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,
<argument><expr><name><name>parent_entry</name><operator>-&gt;</operator><name>subtree</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>is_aliased</name> <operator>=</operator> <name>alias_sequence</name> <operator>&amp;&amp;</operator> <name><name>alias_sequence</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>structural_child_index</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_visible</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>-&gt;</operator><name>subtree</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>is_aliased</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_tree_cursor_current_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSTreeCursor</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TreeCursor</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TreeCursor</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TreeCursorEntry</name> <modifier>*</modifier></type><name>last_entry</name> <init>= <expr><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSSymbol</name></type> <name>alias_symbol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>TreeCursorEntry</name> <modifier>*</modifier></type><name>parent_entry</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>contents</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TSSymbol</name> <modifier>*</modifier></type><name>alias_sequence</name> <init>= <expr><call><name>ts_language_alias_sequence</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,
<argument><expr><name><name>parent_entry</name><operator>-&gt;</operator><name>subtree</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>alias_sequence</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><operator>*</operator><name><name>last_entry</name><operator>-&gt;</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alias_symbol</name> <operator>=</operator> <name><name>alias_sequence</name><index>[<expr><name><name>last_entry</name><operator>-&gt;</operator><name>structural_child_index</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ts_node_new</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>,
<argument><expr><name><name>last_entry</name><operator>-&gt;</operator><name>subtree</name></name></expr></argument>,
<argument><expr><name><name>last_entry</name><operator>-&gt;</operator><name>position</name></name></expr></argument>,
<argument><expr><name>alias_symbol</name></expr></argument>
)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSFieldId</name></type> <name>ts_tree_cursor_current_status</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>TSTreeCursor</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>can_have_later_siblings</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>can_have_later_siblings_with_this_field</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TreeCursor</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TreeCursor</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSFieldId</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>can_have_later_siblings</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>can_have_later_siblings_with_this_field</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>



<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TreeCursorEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TreeCursorEntry</name> <modifier>*</modifier></type><name>parent_entry</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_visible</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>-&gt;</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TSSymbol</name> <modifier>*</modifier></type><name>alias_sequence</name> <init>= <expr><call><name>ts_language_alias_sequence</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,
<argument><expr><name><name>parent_entry</name><operator>-&gt;</operator><name>subtree</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>alias_sequence</name> <operator>&amp;&amp;</operator> <name><name>alias_sequence</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>structural_child_index</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><operator>*</operator><name><name>parent_entry</name><operator>-&gt;</operator><name>subtree</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>child_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>can_have_later_siblings</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>-&gt;</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSFieldMapEntry</name> <modifier>*</modifier></type><name>field_map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>field_map_end</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_language_field_map</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,
<argument><expr><name><name>parent_entry</name><operator>-&gt;</operator><name>subtree</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>field_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_map_end</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>TSFieldMapEntry</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name>field_map</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>field_map_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>i</name><operator>-&gt;</operator><name>inherited</name></name> <operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>child_index</name></name> <operator>==</operator> <name><name>entry</name><operator>-&gt;</operator><name>structural_child_index</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>field_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>can_have_later_siblings_with_this_field</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>TSFieldMapEntry</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name>field_map</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>field_map_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>field_id</name></name> <operator>==</operator> <name>result</name> <operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>child_index</name></name> <operator>&gt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>structural_child_index</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>can_have_later_siblings_with_this_field</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSFieldId</name></type> <name>ts_tree_cursor_current_field_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSTreeCursor</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TreeCursor</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TreeCursor</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TreeCursorEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TreeCursorEntry</name> <modifier>*</modifier></type><name>parent_entry</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_visible</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>-&gt;</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TSSymbol</name> <modifier>*</modifier></type><name>alias_sequence</name> <init>= <expr><call><name>ts_language_alias_sequence</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,
<argument><expr><name><name>parent_entry</name><operator>-&gt;</operator><name>subtree</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>alias_sequence</name> <operator>&amp;&amp;</operator> <name><name>alias_sequence</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>structural_child_index</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>-&gt;</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSFieldMapEntry</name> <modifier>*</modifier></type><name>field_map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>field_map_end</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_language_field_map</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,
<argument><expr><name><name>parent_entry</name><operator>-&gt;</operator><name>subtree</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>field_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_map_end</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>TSFieldMapEntry</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name>field_map</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>field_map_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>i</name><operator>-&gt;</operator><name>inherited</name></name> <operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>child_index</name></name> <operator>==</operator> <name><name>entry</name><operator>-&gt;</operator><name>structural_child_index</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>i</name><operator>-&gt;</operator><name>field_id</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ts_tree_cursor_current_field_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSTreeCursor</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSFieldId</name></type> <name>id</name> <init>= <expr><call><name>ts_tree_cursor_current_field_id</name><argument_list>(<argument><expr><name>_self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TreeCursor</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TreeCursor</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>tree</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>TSTreeCursor</name></type> <name>ts_tree_cursor_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSTreeCursor</name> <modifier>*</modifier></type><name>_cursor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TreeCursor</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TreeCursor</name> <operator>*</operator><operator>)</operator><name>_cursor</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSTreeCursor</name></type> <name>res</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TreeCursor</name> <modifier>*</modifier></type><name>copy</name> <init>= <expr><operator>(</operator><name>TreeCursor</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>res</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>copy</name><operator>-&gt;</operator><name>tree</name></name> <operator>=</operator> <name><name>cursor</name><operator>-&gt;</operator><name>tree</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>array_push_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>copy</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
