<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\tree_sitter\subtree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./alloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./subtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./length.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./language.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./error_costs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Length</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>old_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>new_end</name></decl>;</decl_stmt>
}</block></struct></type> <name>Edit</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_MAX_INLINE_TREE_LENGTH</name></cpp:macro> <cpp:value>UINT8_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_MAX_TREE_POOL_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ExternalScannerState</name></type> <name>empty_state</name> <init>= <expr><block>{<expr><operator>.</operator><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>short_data</name> <operator>=</operator> <block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>



<function><type><name>void</name></type> <name>ts_external_scanner_state_init</name><parameter_list>(<parameter><decl><type><name>ExternalScannerState</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>short_data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>long_data</name></name> <operator>=</operator> <call><name>ts_malloc</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>long_data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>short_data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ExternalScannerState</name></type> <name>ts_external_scanner_state_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExternalScannerState</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ExternalScannerState</name></type> <name>result</name> <init>= <expr><operator>*</operator><name>self</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>short_data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>long_data</name></name> <operator>=</operator> <call><name>ts_malloc</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>long_data</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>long_data</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_external_scanner_state_delete</name><parameter_list>(<parameter><decl><type><name>ExternalScannerState</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>short_data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>long_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ts_external_scanner_state_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExternalScannerState</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>short_data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>long_data</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>short_data</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_external_scanner_state_eq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExternalScannerState</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ExternalScannerState</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>a</name> <operator>==</operator> <name>b</name> <operator>||</operator> <operator>(</operator>
<name><name>a</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>length</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><call><name>ts_external_scanner_state_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ts_external_scanner_state_data</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call>
<operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ts_subtree_array_copy</name><parameter_list>(<parameter><decl><type><name>SubtreeArray</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>SubtreeArray</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>self</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name><name>self</name><operator>.</operator><name>capacity</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>contents</name></name> <operator>=</operator> <name><name>self</name><operator>.</operator><name>contents</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>capacity</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>contents</name></name> <operator>=</operator> <call><name>ts_calloc</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>capacity</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Subtree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>.</operator><name>contents</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>.</operator><name>size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Subtree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_retain</name><argument_list>(<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_subtree_array_delete</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>SubtreeArray</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SubtreeArray</name></type> <name>ts_subtree_array_remove_trailing_extras</name><parameter_list>(<parameter><decl><type><name>SubtreeArray</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SubtreeArray</name></type> <name>result</name> <init>= <expr><call><name>array_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>child</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree_array_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_subtree_array_reverse</name><parameter_list>(<parameter><decl><type><name>SubtreeArray</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>limit</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>reverse_index</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>swap</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>contents</name><index>[<expr><name>reverse_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>contents</name><index>[<expr><name>reverse_index</name></expr>]</index></name> <operator>=</operator> <name>swap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><name>SubtreePool</name></type> <name>ts_subtree_pool_new</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SubtreePool</name></type> <name>self</name> <init>= <expr><block>{<expr><call><name>array_new</name><argument_list>()</argument_list></call></expr>, <macro><name>array_new</name><argument_list>()</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>array_reserve</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>.</operator><name>free_trees</name></name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_subtree_pool_delete</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>free_trees</name><operator>.</operator><name>contents</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>free_trees</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ts_free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>free_trees</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>free_trees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>tree_stack</name><operator>.</operator><name>contents</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SubtreeHeapData</name> <modifier>*</modifier></type><name>ts_subtree_pool_allocate</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>free_trees</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>array_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>free_trees</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>ptr</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>ts_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SubtreeHeapData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_subtree_pool_free</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>SubtreeHeapData</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>free_trees</name><operator>.</operator><name>capacity</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>free_trees</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>TS_MAX_TREE_POOL_SIZE</name></expr>)</condition> <block>{<block_content>
<macro><name>array_push</name><argument_list>(<argument>&amp;self-&gt;free_trees</argument>, <argument>(MutableSubtree) {.ptr = tree}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ts_free</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_subtree_can_inline</name><parameter_list>(<parameter><decl><type><name>Length</name></type> <name>padding</name></decl></parameter>, <parameter><decl><type><name>Length</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>lookahead_bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return
<expr><name><name>padding</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name>TS_MAX_INLINE_TREE_LENGTH</name> <operator>&amp;&amp;</operator>
<name><name>padding</name><operator>.</operator><name>extent</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator>
<name><name>padding</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name> <operator>&lt;</operator> <name>TS_MAX_INLINE_TREE_LENGTH</name> <operator>&amp;&amp;</operator>
<name><name>size</name><operator>.</operator><name>extent</name><operator>.</operator><name>row</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>size</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name> <operator>&lt;</operator> <name>TS_MAX_INLINE_TREE_LENGTH</name> <operator>&amp;&amp;</operator>
<name>lookahead_bytes</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>Subtree</name></type> <name>ts_subtree_new_leaf</name><parameter_list>(
<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>, <parameter><decl><type><name>Length</name></type> <name>padding</name></decl></parameter>, <parameter><decl><type><name>Length</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>lookahead_bytes</name></decl></parameter>, <parameter><decl><type><name>TSStateId</name></type> <name>parse_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>has_external_tokens</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_keyword</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSSymbolMetadata</name></type> <name>metadata</name> <init>= <expr><call><name>ts_language_symbol_metadata</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>extra</name> <init>= <expr><name>symbol</name> <operator>==</operator> <name>ts_builtin_sym_end</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_inline</name> <init>= <expr><operator>(</operator>
<name>symbol</name> <operator>&lt;=</operator> <name>UINT8_MAX</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name>has_external_tokens</name> <operator>&amp;&amp;</operator>
<call><name>ts_subtree_can_inline</name><argument_list>(<argument><expr><name>padding</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>lookahead_bytes</name></expr></argument>)</argument_list></call>
<operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_inline</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Subtree</name><operator>)</operator> <block>{<expr><block>{
<expr><operator>.</operator><name>parse_state</name> <operator>=</operator> <name>parse_state</name></expr>,
<expr><operator>.</operator><name>symbol</name> <operator>=</operator> <name>symbol</name></expr>,
<expr><operator>.</operator><name>padding_bytes</name> <operator>=</operator> <name><name>padding</name><operator>.</operator><name>bytes</name></name></expr>,
<expr><operator>.</operator><name>padding_rows</name> <operator>=</operator> <name><name>padding</name><operator>.</operator><name>extent</name><operator>.</operator><name>row</name></name></expr>,
<expr><operator>.</operator><name>padding_columns</name> <operator>=</operator> <name><name>padding</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name></expr>,
<expr><operator>.</operator><name>size_bytes</name> <operator>=</operator> <name><name>size</name><operator>.</operator><name>bytes</name></name></expr>,
<expr><operator>.</operator><name>lookahead_bytes</name> <operator>=</operator> <name>lookahead_bytes</name></expr>,
<expr><operator>.</operator><name>visible</name> <operator>=</operator> <name><name>metadata</name><operator>.</operator><name>visible</name></name></expr>,
<expr><operator>.</operator><name>named</name> <operator>=</operator> <name><name>metadata</name><operator>.</operator><name>named</name></name></expr>,
<expr><operator>.</operator><name>extra</name> <operator>=</operator> <name>extra</name></expr>,
<expr><operator>.</operator><name>has_changes</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>is_missing</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>is_keyword</name> <operator>=</operator> <name>is_keyword</name></expr>,
<expr><operator>.</operator><name>is_inline</name> <operator>=</operator> <name>true</name></expr>,
}</block></expr>}</block></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>SubtreeHeapData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>ts_subtree_pool_allocate</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>SubtreeHeapData</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>ref_count</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>padding</name> <operator>=</operator> <name>padding</name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>,
<expr><operator>.</operator><name>lookahead_bytes</name> <operator>=</operator> <name>lookahead_bytes</name></expr>,
<expr><operator>.</operator><name>error_cost</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>child_count</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>symbol</name> <operator>=</operator> <name>symbol</name></expr>,
<expr><operator>.</operator><name>parse_state</name> <operator>=</operator> <name>parse_state</name></expr>,
<expr><operator>.</operator><name>visible</name> <operator>=</operator> <name><name>metadata</name><operator>.</operator><name>visible</name></name></expr>,
<expr><operator>.</operator><name>named</name> <operator>=</operator> <name><name>metadata</name><operator>.</operator><name>named</name></name></expr>,
<expr><operator>.</operator><name>extra</name> <operator>=</operator> <name>extra</name></expr>,
<expr><operator>.</operator><name>fragile_left</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>fragile_right</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>has_changes</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>has_external_tokens</name> <operator>=</operator> <name>has_external_tokens</name></expr>,
<expr><operator>.</operator><name>is_missing</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>is_keyword</name> <operator>=</operator> <name>is_keyword</name></expr>,
<expr><operator>.</operator><name>first_leaf</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>symbol</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>parse_state</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>,
}</block></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>Subtree</name><operator>)</operator> <block>{<expr><operator>.</operator><name>ptr</name> <operator>=</operator> <name>data</name></expr>}</block></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_subtree_set_symbol</name><parameter_list>(
<parameter><decl><type><name>MutableSubtree</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSSymbolMetadata</name></type> <name>metadata</name> <init>= <expr><call><name>ts_language_symbol_metadata</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>symbol</name> <operator>&lt;</operator> <name>UINT8_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>symbol</name></name> <operator>=</operator> <name>symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>named</name></name> <operator>=</operator> <name><name>metadata</name><operator>.</operator><name>named</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>visible</name></name> <operator>=</operator> <name><name>metadata</name><operator>.</operator><name>visible</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>symbol</name></name> <operator>=</operator> <name>symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>named</name></name> <operator>=</operator> <name><name>metadata</name><operator>.</operator><name>named</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>visible</name></name> <operator>=</operator> <name><name>metadata</name><operator>.</operator><name>visible</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Subtree</name></type> <name>ts_subtree_new_error</name><parameter_list>(
<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>lookahead_char</name></decl></parameter>, <parameter><decl><type><name>Length</name></type> <name>padding</name></decl></parameter>, <parameter><decl><type><name>Length</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>bytes_scanned</name></decl></parameter>, <parameter><decl><type><name>TSStateId</name></type> <name>parse_state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>result</name> <init>= <expr><call><name>ts_subtree_new_leaf</name><argument_list>(
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ts_builtin_sym_error</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>bytes_scanned</name></expr></argument>,
<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>language</name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SubtreeHeapData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>SubtreeHeapData</name> <operator>*</operator><operator>)</operator><name><name>result</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fragile_left</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fragile_right</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>lookahead_char</name></name> <operator>=</operator> <name>lookahead_char</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MutableSubtree</name></type> <name>ts_subtree_make_mut</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>MutableSubtree</name><operator>)</operator> <block>{<expr><name><name>self</name><operator>.</operator><name>data</name></name></expr>}</block></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ts_subtree_to_mut_unsafe</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>SubtreeHeapData</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>ts_subtree_pool_allocate</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>self</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SubtreeHeapData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>child_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>ts_calloc</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Subtree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>child_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Subtree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>child_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_retain</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>has_external_tokens</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>external_scanner_state</name></name> <operator>=</operator> <call><name>ts_external_scanner_state_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>external_scanner_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>MutableSubtree</name><operator>)</operator> <block>{<expr><operator>.</operator><name>ptr</name> <operator>=</operator> <name>result</name></expr>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_subtree__compress</name><parameter_list>(<parameter><decl><type><name>MutableSubtree</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>,
<parameter><decl><type><name>MutableSubtreeArray</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>initial_stack_size</name> <init>= <expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>tree</name> <init>= <expr><name>self</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSSymbol</name></type> <name>symbol</name> <init>= <expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>symbol</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>child</name> <init>= <expr><call><name>ts_subtree_to_mut_unsafe</name><argument_list>(<argument><expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(
<expr><name><name>child</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name> <operator>||</operator>
<name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator>
<name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator>
<name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>symbol</name></name> <operator>!=</operator> <name>symbol</name></expr>
)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>grandchild</name> <init>= <expr><call><name>ts_subtree_to_mut_unsafe</name><argument_list>(<argument><expr><name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(
<expr><name><name>grandchild</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name> <operator>||</operator>
<name><name>grandchild</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator>
<name><name>grandchild</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator>
<name><name>grandchild</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>symbol</name></name> <operator>!=</operator> <name>symbol</name></expr>
)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ts_subtree_from_mut</name><argument_list>(<argument><expr><name>grandchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>grandchild</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>grandchild</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grandchild</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>grandchild</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ts_subtree_from_mut</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tree</name> <operator>=</operator> <name>grandchild</name></expr>;</expr_stmt>
</block_content>}</block></for>

<while>while <condition>(<expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>initial_stack_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tree</name> <operator>=</operator> <call><name>array_pop</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>child</name> <init>= <expr><call><name>ts_subtree_to_mut_unsafe</name><argument_list>(<argument><expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>grandchild</name> <init>= <expr><call><name>ts_subtree_to_mut_unsafe</name><argument_list>(<argument><expr><name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_subtree_set_children</name><argument_list>(<argument><expr><name>grandchild</name></expr></argument>, <argument><expr><name><name>grandchild</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name><name>grandchild</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree_set_children</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree_set_children</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_subtree_balance</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>tree_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>tree_stack</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_to_mut_unsafe</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>tree_stack</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>tree</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>tree_stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>repeat_depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>child1</name> <init>= <expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>child2</name> <init>= <expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>repeat_delta</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><call><name>ts_subtree_repeat_depth</name><argument_list>(<argument><expr><name>child1</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>ts_subtree_repeat_depth</name><argument_list>(<argument><expr><name>child2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>repeat_delta</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><name>repeat_delta</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>/=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree__compress</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>tree_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>child</name> <init>= <expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>tree_stack</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_to_mut_unsafe</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_subtree_set_children</name><parameter_list>(
<parameter><decl><type><name>MutableSubtree</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>Subtree</name> <modifier>*</modifier></type><name>children</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>child_count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>children</name> <operator>!=</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_free</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>=</operator> <name>child_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <name>children</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>named_child_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>visible_child_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>error_cost</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>repeat_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>node_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>has_external_tokens</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>dynamic_precedence</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>non_extra_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TSSymbol</name> <modifier>*</modifier></type><name>alias_sequence</name> <init>= <expr><call><name>ts_language_alias_sequence</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lookahead_end_byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>child</name> <init>= <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <call><name>ts_subtree_padding</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>ts_subtree_size</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>length_add</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_total_size</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>child_lookahead_end_byte</name> <init>=
<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>padding</name><operator>.</operator><name>bytes</name></name> <operator>+</operator>
<name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>bytes</name></name> <operator>+</operator>
<call><name>ts_subtree_lookahead_bytes</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>child_lookahead_end_byte</name> <operator>&gt;</operator> <name>lookahead_end_byte</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lookahead_end_byte</name> <operator>=</operator> <name>child_lookahead_end_byte</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ts_builtin_sym_error_repeat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>error_cost</name></name> <operator>+=</operator> <call><name>ts_subtree_error_cost</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>dynamic_precedence</name></name> <operator>+=</operator> <call><name>ts_subtree_dynamic_precedence</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>node_count</name></name> <operator>+=</operator> <call><name>ts_subtree_node_count</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alias_sequence</name> <operator>&amp;&amp;</operator> <name><name>alias_sequence</name><index>[<expr><name>non_extra_index</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>visible_child_count</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_language_symbol_metadata</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name><name>alias_sequence</name><index>[<expr><name>non_extra_index</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><name>named</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>named_child_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ts_subtree_visible</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>visible_child_count</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_named</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>named_child_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>visible_child_count</name></name> <operator>+=</operator> <name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>visible_child_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>named_child_count</name></name> <operator>+=</operator> <name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>named_child_count</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_has_external_tokens</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>has_external_tokens</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_is_error</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>fragile_left</name></name> <operator>=</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>fragile_right</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>parse_state</name></name> <operator>=</operator> <name>TS_TREE_STATE_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>non_extra_index</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>lookahead_bytes</name></name> <operator>=</operator> <name>lookahead_end_byte</name> <operator>-</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>bytes</name></name> <operator>-</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>padding</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>symbol</name></name> <operator>==</operator> <name>ts_builtin_sym_error</name> <operator>||</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>symbol</name></name> <operator>==</operator> <name>ts_builtin_sym_error_repeat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>error_cost</name></name> <operator>+=</operator>
<name>ERROR_COST_PER_RECOVERY</name> <operator>+</operator>
<name>ERROR_COST_PER_SKIPPED_CHAR</name> <operator>*</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>bytes</name></name> <operator>+</operator>
<name>ERROR_COST_PER_SKIPPED_LINE</name> <operator>*</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>extent</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>child</name> <init>= <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>grandchild_count</name> <init>= <expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_is_error</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>grandchild_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_visible</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>error_cost</name></name> <operator>+=</operator> <name>ERROR_COST_PER_SKIPPED_TREE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>grandchild_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>error_cost</name></name> <operator>+=</operator> <name>ERROR_COST_PER_SKIPPED_TREE</name> <operator>*</operator> <name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>visible_child_count</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>first_child</name> <init>= <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>last_child</name> <init>= <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>first_leaf</name><operator>.</operator><name>symbol</name></name> <operator>=</operator> <call><name>ts_subtree_leaf_symbol</name><argument_list>(<argument><expr><name>first_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>first_leaf</name><operator>.</operator><name>parse_state</name></name> <operator>=</operator> <call><name>ts_subtree_leaf_parse_state</name><argument_list>(<argument><expr><name>first_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_fragile_left</name><argument_list>(<argument><expr><name>first_child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>fragile_left</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_fragile_right</name><argument_list>(<argument><expr><name>last_child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>fragile_right</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(
<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>visible</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>named</name></name> <operator>&amp;&amp;</operator>
<call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>first_child</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>symbol</name></name></expr>
)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_repeat_depth</name><argument_list>(<argument><expr><name>first_child</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>ts_subtree_repeat_depth</name><argument_list>(<argument><expr><name>last_child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>repeat_depth</name></name> <operator>=</operator> <call><name>ts_subtree_repeat_depth</name><argument_list>(<argument><expr><name>first_child</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>repeat_depth</name></name> <operator>=</operator> <call><name>ts_subtree_repeat_depth</name><argument_list>(<argument><expr><name>last_child</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>MutableSubtree</name></type> <name>ts_subtree_new_node</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>,
<parameter><decl><type><name>SubtreeArray</name> <modifier>*</modifier></type><name>children</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>production_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSSymbolMetadata</name></type> <name>metadata</name> <init>= <expr><call><name>ts_language_symbol_metadata</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fragile</name> <init>= <expr><name>symbol</name> <operator>==</operator> <name>ts_builtin_sym_error</name> <operator>||</operator> <name>symbol</name> <operator>==</operator> <name>ts_builtin_sym_error_repeat</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SubtreeHeapData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>ts_subtree_pool_allocate</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>SubtreeHeapData</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>ref_count</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>symbol</name> <operator>=</operator> <name>symbol</name></expr>,
<expr><operator>.</operator><name>production_id</name> <operator>=</operator> <name>production_id</name></expr>,
<expr><operator>.</operator><name>visible</name> <operator>=</operator> <name><name>metadata</name><operator>.</operator><name>visible</name></name></expr>,
<expr><operator>.</operator><name>named</name> <operator>=</operator> <name><name>metadata</name><operator>.</operator><name>named</name></name></expr>,
<expr><operator>.</operator><name>has_changes</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>fragile_left</name> <operator>=</operator> <name>fragile</name></expr>,
<expr><operator>.</operator><name>fragile_right</name> <operator>=</operator> <name>fragile</name></expr>,
<expr><operator>.</operator><name>is_keyword</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>node_count</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>first_leaf</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>symbol</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>parse_state</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>,
}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>result</name> <init>= <expr><block>{<expr><operator>.</operator><name>ptr</name> <operator>=</operator> <name>data</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_subtree_set_children</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>children</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><name><name>children</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Subtree</name></type> <name>ts_subtree_new_error_node</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>SubtreeArray</name> <modifier>*</modifier></type><name>children</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>extra</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>result</name> <init>= <expr><call><name>ts_subtree_new_node</name><argument_list>(
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ts_builtin_sym_error</name></expr></argument>, <argument><expr><name>children</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>language</name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
<return>return <expr><call><name>ts_subtree_from_mut</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Subtree</name></type> <name>ts_subtree_new_missing_leaf</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>, <parameter><decl><type><name>Length</name></type> <name>padding</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>result</name> <init>= <expr><call><name>ts_subtree_new_leaf</name><argument_list>(
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>, <argument><expr><call><name>length_zero</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>language</name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>is_missing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>SubtreeHeapData</name> <operator>*</operator><operator>)</operator><name><name>result</name><operator>.</operator><name>ptr</name></name><operator>)</operator><operator>-&gt;</operator><name>is_missing</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_subtree_retain</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_inc</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_subtree_release</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>tree_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atomic_dec</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>tree_stack</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_to_mut_unsafe</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>tree_stack</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>tree</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>tree_stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>child</name> <init>= <expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atomic_dec</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>tree_stack</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_to_mut_unsafe</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ts_free</name><argument_list>(<argument><expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>has_external_tokens</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_external_scanner_state_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>external_scanner_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ts_subtree_pool_free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>tree</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_subtree_eq</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>Subtree</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name> <operator>||</operator> <name><name>other</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>other</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SubtreeInlineData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>other</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>!</operator><name><name>other</name><operator>.</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>symbol</name></name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>symbol</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>visible</name></name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>visible</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>named</name></name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>named</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>padding</name><operator>.</operator><name>bytes</name></name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>padding</name><operator>.</operator><name>bytes</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>bytes</name></name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>bytes</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>symbol</name></name> <operator>==</operator> <name>ts_builtin_sym_error</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>lookahead_char</name></name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>lookahead_char</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>visible_child_count</name></name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>visible_child_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>named_child_count</name></name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>named_child_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_subtree_eq</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ts_subtree_compare</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Subtree</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>left_child</name> <init>= <expr><name><name>left</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>right_child</name> <init>= <expr><name><name>right</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>ts_subtree_compare</name><argument_list>(<argument><expr><name>left_child</name></expr></argument>, <argument><expr><name>right_child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ts_subtree_set_has_changes</name><parameter_list>(<parameter><decl><type><name>MutableSubtree</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>has_changes</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>has_changes</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Subtree</name></type> <name>ts_subtree_edit</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSInputEdit</name> <modifier>*</modifier></type><name>edit</name></decl></parameter>, <parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Subtree</name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Edit</name></type> <name>edit</name></decl>;</decl_stmt>
}</block></struct></type> <name>StackEntry</name>;</typedef>

<macro><name>Array</name><argument_list>(<argument>StackEntry</argument>)</argument_list></macro> <expr_stmt><expr><name>stack</name> <operator>=</operator> <call><name>array_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>array_push</name><argument_list>(<argument>&amp;stack</argument>, <argument>((StackEntry) {
.tree = &amp;self,
.edit = (Edit) {
.start = {edit-&gt;start_byte, edit-&gt;start_point},
.old_end = {edit-&gt;old_end_byte, edit-&gt;old_end_point},
.new_end = {edit-&gt;new_end_byte, edit-&gt;new_end_point},
},
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<while>while <condition>(<expr><name><name>stack</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StackEntry</name></type> <name>entry</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Edit</name></type> <name>edit</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>edit</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_noop</name> <init>= <expr><name><name>edit</name><operator>.</operator><name>old_end</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name><name>edit</name><operator>.</operator><name>start</name><operator>.</operator><name>bytes</name></name> <operator>&amp;&amp;</operator> <name><name>edit</name><operator>.</operator><name>new_end</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name><name>edit</name><operator>.</operator><name>start</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_pure_insertion</name> <init>= <expr><name><name>edit</name><operator>.</operator><name>old_end</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name><name>edit</name><operator>.</operator><name>start</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>size</name> <init>= <expr><call><name>ts_subtree_size</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>padding</name> <init>= <expr><call><name>ts_subtree_padding</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lookahead_bytes</name> <init>= <expr><call><name>ts_subtree_lookahead_bytes</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>end_byte</name> <init>= <expr><name><name>padding</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <name>lookahead_bytes</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>edit</name><operator>.</operator><name>start</name><operator>.</operator><name>bytes</name></name> <operator>&gt;</operator> <name>end_byte</name> <operator>||</operator> <operator>(</operator><name>is_noop</name> <operator>&amp;&amp;</operator> <name><name>edit</name><operator>.</operator><name>start</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name>end_byte</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>edit</name><operator>.</operator><name>old_end</name><operator>.</operator><name>bytes</name></name> <operator>&lt;=</operator> <name><name>padding</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <call><name>length_add</name><argument_list>(<argument><expr><name><name>edit</name><operator>.</operator><name>new_end</name></name></expr></argument>, <argument><expr><call><name>length_sub</name><argument_list>(<argument><expr><name>padding</name></expr></argument>, <argument><expr><name><name>edit</name><operator>.</operator><name>old_end</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>



<if type="elseif">else if <condition>(<expr><name><name>edit</name><operator>.</operator><name>start</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name><name>padding</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>length_sub</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>length_sub</name><argument_list>(<argument><expr><name><name>edit</name><operator>.</operator><name>old_end</name></name></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <name><name>edit</name><operator>.</operator><name>new_end</name></name></expr>;</expr_stmt>
</block_content>}</block></if>



<if type="elseif">else if <condition>(<expr><name><name>edit</name><operator>.</operator><name>start</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name><name>padding</name><operator>.</operator><name>bytes</name></name> <operator>&amp;&amp;</operator> <name>is_pure_insertion</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <name><name>edit</name><operator>.</operator><name>new_end</name></name></expr>;</expr_stmt>
</block_content>}</block></if>


<else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>total_bytes</name> <init>= <expr><name><name>padding</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>edit</name><operator>.</operator><name>start</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name>total_bytes</name> <operator>||</operator>
<operator>(</operator><name><name>edit</name><operator>.</operator><name>start</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name>total_bytes</name> <operator>&amp;&amp;</operator> <name>is_pure_insertion</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>length_add</name><argument_list>(
<argument><expr><call><name>length_sub</name><argument_list>(<argument><expr><name><name>edit</name><operator>.</operator><name>new_end</name></name></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>length_sub</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>length_sub</name><argument_list>(<argument><expr><name><name>edit</name><operator>.</operator><name>old_end</name></name></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>result</name> <init>= <expr><call><name>ts_subtree_make_mut</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_can_inline</name><argument_list>(<argument><expr><name>padding</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>lookahead_bytes</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>padding_bytes</name></name> <operator>=</operator> <name><name>padding</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>padding_rows</name></name> <operator>=</operator> <name><name>padding</name><operator>.</operator><name>extent</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>padding_columns</name></name> <operator>=</operator> <name><name>padding</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>size_bytes</name></name> <operator>=</operator> <name><name>size</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>SubtreeHeapData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>ts_subtree_pool_allocate</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <name>padding</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>lookahead_bytes</name></name> <operator>=</operator> <name>lookahead_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>error_cost</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>child_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>symbol</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>symbol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>parse_state</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>parse_state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>visible</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>visible</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>named</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>named</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>extra</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fragile_left</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fragile_right</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>has_changes</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>has_external_tokens</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>is_missing</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>is_missing</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>is_keyword</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>is_keyword</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <name>padding</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ts_subtree_set_has_changes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>tree</name></name> <operator>=</operator> <call><name>ts_subtree_from_mut</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>child_left</name></decl>, <decl><type ref="prev"/><name>child_right</name> <init>= <expr><call><name>length_zero</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><operator>&amp;</operator><name><name>result</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>child_size</name> <init>= <expr><call><name>ts_subtree_total_size</name><argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>child_left</name> <operator>=</operator> <name>child_right</name></expr>;</expr_stmt>
<expr_stmt><expr><name>child_right</name> <operator>=</operator> <call><name>length_add</name><argument_list>(<argument><expr><name>child_left</name></expr></argument>, <argument><expr><name>child_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>child_right</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <call><name>ts_subtree_lookahead_bytes</name><argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>edit</name><operator>.</operator><name>start</name><operator>.</operator><name>bytes</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>child_left</name><operator>.</operator><name>bytes</name></name> <operator>&gt;</operator> <name><name>edit</name><operator>.</operator><name>old_end</name><operator>.</operator><name>bytes</name></name> <operator>||</operator>
<operator>(</operator><name><name>child_left</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name><name>edit</name><operator>.</operator><name>old_end</name><operator>.</operator><name>bytes</name></name> <operator>&amp;&amp;</operator> <name><name>child_size</name><operator>.</operator><name>bytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>Edit</name></type> <name>child_edit</name> <init>= <expr><block>{
<expr><operator>.</operator><name>start</name> <operator>=</operator> <call><name>length_sub</name><argument_list>(<argument><expr><name><name>edit</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>child_left</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>old_end</name> <operator>=</operator> <call><name>length_sub</name><argument_list>(<argument><expr><name><name>edit</name><operator>.</operator><name>old_end</name></name></expr></argument>, <argument><expr><name>child_left</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>new_end</name> <operator>=</operator> <call><name>length_sub</name><argument_list>(<argument><expr><name><name>edit</name><operator>.</operator><name>new_end</name></name></expr></argument>, <argument><expr><name>child_left</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>edit</name><operator>.</operator><name>start</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name><name>child_left</name><operator>.</operator><name>bytes</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>child_edit</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>length_zero</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>edit</name><operator>.</operator><name>old_end</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name><name>child_left</name><operator>.</operator><name>bytes</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>child_edit</name><operator>.</operator><name>old_end</name></name> <operator>=</operator> <call><name>length_zero</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>edit</name><operator>.</operator><name>new_end</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name><name>child_left</name><operator>.</operator><name>bytes</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>child_edit</name><operator>.</operator><name>new_end</name></name> <operator>=</operator> <call><name>length_zero</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>edit</name><operator>.</operator><name>old_end</name><operator>.</operator><name>bytes</name></name> <operator>&gt;</operator> <name><name>child_right</name><operator>.</operator><name>bytes</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>child_edit</name><operator>.</operator><name>old_end</name></name> <operator>=</operator> <name>child_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>child_right</name><operator>.</operator><name>bytes</name></name> <operator>&gt;</operator> <name><name>edit</name><operator>.</operator><name>start</name><operator>.</operator><name>bytes</name></name> <operator>||</operator>
<operator>(</operator><name><name>child_right</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name><name>edit</name><operator>.</operator><name>start</name><operator>.</operator><name>bytes</name></name> <operator>&amp;&amp;</operator> <name>is_pure_insertion</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>edit</name><operator>.</operator><name>new_end</name></name> <operator>=</operator> <name><name>edit</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
</block_content>}</block></if>


<else>else <block>{<block_content>
<expr_stmt><expr><name><name>child_edit</name><operator>.</operator><name>old_end</name></name> <operator>=</operator> <name><name>child_edit</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child_edit</name><operator>.</operator><name>new_end</name></name> <operator>=</operator> <name><name>child_edit</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<macro><name>array_push</name><argument_list>(<argument>&amp;stack</argument>, <argument>((StackEntry) {
.tree = child,
.edit = child_edit,
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>
</block_content>}</block></while>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Subtree</name></type> <name>ts_subtree_last_external_token</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>tree</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_subtree_has_external_tokens</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL_SUBTREE</name></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>child</name> <init>= <expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_has_external_tokens</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tree</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<return>return <expr><name>tree</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>ts_subtree__write_char_to_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"INVALID"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"'\\0'"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"'\\n'"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"'\\t'"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"'\\r'"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <call><name>isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"'%c'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_subtree__write_dot_string</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>string</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>c</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\\\""</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\\n"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ROOT_FIELD</name> <init>= <expr><literal type="string">"__ROOT__"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>ts_subtree__write_to_string</name><parameter_list>(
<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>limit</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>include_all</name></decl></parameter>,
<parameter><decl><type><name>TSSymbol</name></type> <name>alias_symbol</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>alias_is_named</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field_name</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="string">"(NULL)"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><name>string</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>writer</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>cursor</name></expr> </then><else>: <expr><operator>&amp;</operator><name>string</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_root</name> <init>= <expr><name>field_name</name> <operator>==</operator> <name>ROOT_FIELD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_visible</name> <init>=
<expr><name>include_all</name> <operator>||</operator>
<call><name>ts_subtree_missing</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator>
<ternary><condition><expr><name>alias_symbol</name></expr>
?</condition><then> <expr><name>alias_is_named</name></expr>
</then><else>: <expr><call><name>ts_subtree_visible</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ts_subtree_named</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></else></ternary>
<operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_visible</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_root</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>writer</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>field_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>writer</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>field_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_is_error</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>bytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>writer</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="string">"(UNEXPECTED "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <call><name>ts_subtree__write_char_to_string</name><argument_list>(<argument><expr><operator>*</operator><name>writer</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>lookahead_char</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>TSSymbol</name></type> <name>symbol</name> <init>= <expr><ternary><condition><expr><name>alias_symbol</name></expr> ?</condition><then> <expr><name>alias_symbol</name></expr> </then><else>: <expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symbol_name</name> <init>= <expr><call><name>ts_language_symbol_name</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_missing</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>writer</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="string">"(MISSING "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>alias_is_named</name> <operator>||</operator> <call><name>ts_subtree_named</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>writer</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>symbol_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>writer</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>symbol_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>writer</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="string">"(%s"</literal></expr></argument>, <argument><expr><name>symbol_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_root</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>TSSymbol</name></type> <name>symbol</name> <init>= <expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symbol_name</name> <init>= <expr><call><name>ts_language_symbol_name</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>writer</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="string">"(\"%s\")"</literal></expr></argument>, <argument><expr><name>symbol_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TSSymbol</name> <modifier>*</modifier></type><name>alias_sequence</name> <init>= <expr><call><name>ts_language_alias_sequence</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TSFieldMapEntry</name> <modifier>*</modifier></type><name>field_map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>field_map_end</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_language_field_map</name><argument_list>(
<argument><expr><name>language</name></expr></argument>,
<argument><expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>field_map</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>field_map_end</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>structural_child_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>child</name> <init>= <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <call><name>ts_subtree__write_to_string</name><argument_list>(
<argument><expr><name>child</name></expr></argument>, <argument><expr><operator>*</operator><name>writer</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>,
<argument><expr><name>language</name></expr></argument>, <argument><expr><name>include_all</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>TSSymbol</name></type> <name>alias_symbol</name> <init>= <expr><ternary><condition><expr><name>alias_sequence</name></expr>
?</condition><then> <expr><name><name>alias_sequence</name><index>[<expr><name>structural_child_index</name></expr>]</index></name></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>alias_is_named</name> <init>= <expr><ternary><condition><expr><name>alias_symbol</name></expr>
?</condition><then> <expr><call><name>ts_language_symbol_metadata</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name>alias_symbol</name></expr></argument>)</argument_list></call><operator>.</operator><name>named</name></expr>
</then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>child_field_name</name> <init>= <expr><ternary><condition><expr><name>is_visible</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>field_name</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>TSFieldMapEntry</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name>field_map</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>field_map_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>i</name><operator>-&gt;</operator><name>inherited</name></name> <operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>child_index</name></name> <operator>==</operator> <name>structural_child_index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>child_field_name</name> <operator>=</operator> <name><name>language</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name><name>i</name><operator>-&gt;</operator><name>field_id</name></name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <call><name>ts_subtree__write_to_string</name><argument_list>(
<argument><expr><name>child</name></expr></argument>, <argument><expr><operator>*</operator><name>writer</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>,
<argument><expr><name>language</name></expr></argument>, <argument><expr><name>include_all</name></expr></argument>,
<argument><expr><name>alias_symbol</name></expr></argument>, <argument><expr><name>alias_is_named</name></expr></argument>, <argument><expr><name>child_field_name</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>structural_child_index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_visible</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cursor</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>writer</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>cursor</name> <operator>-</operator> <name>string</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>ts_subtree_string</name><parameter_list>(
<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>include_all</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>scratch_string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>ts_subtree__write_to_string</name><argument_list>(
<argument><expr><name>self</name></expr></argument>, <argument><expr><name>scratch_string</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>language</name></expr></argument>, <argument><expr><name>include_all</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ROOT_FIELD</name></expr></argument>
)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_subtree__write_to_string</name><argument_list>(
<argument><expr><name>self</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name>language</name></expr></argument>, <argument><expr><name>include_all</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ROOT_FIELD</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_subtree__print_dot_graph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>start_offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>, <parameter><decl><type><name>TSSymbol</name></type> <name>alias_symbol</name></decl></parameter>,
<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSSymbol</name></type> <name>subtree_symbol</name> <init>= <expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSSymbol</name></type> <name>symbol</name> <init>= <expr><ternary><condition><expr><name>alias_symbol</name></expr> ?</condition><then> <expr><name>alias_symbol</name></expr> </then><else>: <expr><name>subtree_symbol</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>end_offset</name> <init>= <expr><name>start_offset</name> <operator>+</operator> <call><name>ts_subtree_total_bytes</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"tree_%p [label=\""</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree__write_dot_string</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>ts_language_symbol_name</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">", shape=plaintext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">", fontcolor=gray"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">", tooltip=\""</literal>
<literal type="string">"range: %u - %u\n"</literal>
<literal type="string">"state: %d\n"</literal>
<literal type="string">"error-cost: %u\n"</literal>
<literal type="string">"has-changes: %u\n"</literal>
<literal type="string">"repeat-depth: %u\n"</literal>
<literal type="string">"lookahead-bytes: %u"</literal></expr></argument>,
<argument><expr><name>start_offset</name></expr></argument>, <argument><expr><name>end_offset</name></expr></argument>,
<argument><expr><call><name>ts_subtree_parse_state</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ts_subtree_error_cost</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ts_subtree_has_changes</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ts_subtree_repeat_depth</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ts_subtree_lookahead_bytes</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_is_error</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\ncharacter: '%c'"</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>lookahead_char</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>child_start_offset</name> <init>= <expr><name>start_offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>child_info_offset</name> <init>=
<expr><name><name>language</name><operator>-&gt;</operator><name>max_alias_sequence_length</name></name> <operator>*</operator>
<call><name>ts_subtree_production_id</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSSymbol</name></type> <name>alias_symbol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>child_info_offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alias_symbol</name> <operator>=</operator> <name><name>language</name><operator>-&gt;</operator><name>alias_sequences</name><index>[<expr><name>child_info_offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>child_info_offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ts_subtree__print_dot_graph</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>child_start_offset</name></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><name>alias_symbol</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"tree_%p -&gt; tree_%p [tooltip=%u]\n"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>child_start_offset</name> <operator>+=</operator> <call><name>ts_subtree_total_bytes</name><argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_subtree_print_dot_graph</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"digraph tree {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"edge [arrowhead=none]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree__print_dot_graph</name><argument_list>(<argument><expr><operator>&amp;</operator><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_subtree_external_scanner_state_eq</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>Subtree</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ExternalScannerState</name> <modifier>*</modifier></type><name>state1</name> <init>= <expr><operator>&amp;</operator><name>empty_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ExternalScannerState</name> <modifier>*</modifier></type><name>state2</name> <init>= <expr><operator>&amp;</operator><name>empty_state</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <call><name>ts_subtree_has_external_tokens</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state1</name> <operator>=</operator> <operator>&amp;</operator><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>external_scanner_state</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>other</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <call><name>ts_subtree_has_external_tokens</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>other</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state2</name> <operator>=</operator> <operator>&amp;</operator><name><name>other</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>external_scanner_state</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ts_external_scanner_state_eq</name><argument_list>(<argument><expr><name>state1</name></expr></argument>, <argument><expr><name>state2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
