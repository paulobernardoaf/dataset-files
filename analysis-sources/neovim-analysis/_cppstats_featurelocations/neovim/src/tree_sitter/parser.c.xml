<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\tree_sitter\parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree_sitter/api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./alloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./clock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./error_costs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./get_changed_ranges.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./language.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./length.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./lexer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./reduce_action.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./reusable_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./stack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./subtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./tree.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (self-&gt;lexer.logger.log || self-&gt;dot_graph_file) { snprintf(self-&gt;lexer.debug_buffer, TREE_SITTER_SERIALIZATION_BUFFER_SIZE, __VA_ARGS__); ts_parser__log(self); }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_STACK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>if (self-&gt;dot_graph_file) { ts_stack_print_dot_graph(self-&gt;stack, self-&gt;language, self-&gt;dot_graph_file); fputs("\n\n", self-&gt;dot_graph_file); }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_TREE</name><parameter_list>(<parameter><type><name>tree</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (self-&gt;dot_graph_file) { ts_subtree_print_dot_graph(tree, self-&gt;language, self-&gt;dot_graph_file); fputs("\n", self-&gt;dot_graph_file); }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYM_NAME</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ts_language_symbol_name(self-&gt;language, symbol)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_NAME</name><parameter_list>(<parameter><type><name>tree</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SYM_NAME(ts_subtree_symbol(tree))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>MAX_VERSION_COUNT</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>MAX_VERSION_COUNT_OVERFLOW</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>MAX_SUMMARY_DEPTH</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>MAX_COST_DIFFERENCE</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name>ERROR_COST_PER_SKIPPED_TREE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>OP_COUNT_PER_TIMEOUT_CHECK</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Subtree</name></type> <name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>last_external_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>byte_index</name></decl>;</decl_stmt>
}</block></struct></type> <name>TokenCache</name>;</typedef>

<struct>struct <name>TSParser</name> <block>{
<decl_stmt><decl><type><name>Lexer</name></type> <name>lexer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Stack</name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SubtreePool</name></type> <name>tree_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReduceActionSet</name></type> <name>reduce_actions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>finished_tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SubtreeHeapData</name></type> <name>scratch_tree_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>scratch_tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TokenCache</name></type> <name>token_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReusableNode</name></type> <name>reusable_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>external_scanner_payload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>dot_graph_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSClock</name></type> <name>end_clock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSDuration</name></type> <name>timeout_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>accept_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>operation_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>size_t</name> <modifier>*</modifier></type><name>cancellation_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>old_tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSRangeArray</name></type> <name>included_range_differences</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>included_range_difference_index</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>cost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>node_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dynamic_precedence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_in_error</name></decl>;</decl_stmt>
}</block></struct></type> <name>ErrorStatus</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>ErrorComparisonTakeLeft</name></decl>,
<decl><name>ErrorComparisonPreferLeft</name></decl>,
<decl><name>ErrorComparisonNone</name></decl>,
<decl><name>ErrorComparisonPreferRight</name></decl>,
<decl><name>ErrorComparisonTakeRight</name></decl>,
}</block></enum></type> <name>ErrorComparison</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name></decl>;</decl_stmt>
}</block></struct></type> <name>TSStringInput</name>;</typedef>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ts_string_input_read</name><parameter_list>(
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>byte</name></decl></parameter>,
<parameter><decl><type><name>TSPoint</name></type> <name>_</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>length</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSStringInput</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>TSStringInput</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name>byte</name></expr>;</expr_stmt>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>string</name></name> <operator>+</operator> <name>byte</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_parser__log</name><parameter_list>(<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>logger</name><operator>.</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>logger</name><operator>.</operator><name>log</name></name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>logger</name><operator>.</operator><name>payload</name></name></expr></argument>,
<argument><expr><name>TSLogTypeParse</name></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>debug_buffer</name></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>dot_graph_file</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>dot_graph_file</name></name></expr></argument>, <argument><expr><literal type="string">"graph {\nlabel=\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>debug_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>dot_graph_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>dot_graph_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>dot_graph_file</name></name></expr></argument>, <argument><expr><literal type="string">"\"\n}\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_parser__breakdown_top_of_stack</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>StackVersion</name></type> <name>version</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>did_break_down</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pending</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>StackSliceArray</name></type> <name>pop</name> <init>= <expr><call><name>ts_stack_pop_pending</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pop</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>did_break_down</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pending</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pop</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>StackSlice</name></type> <name>slice</name> <init>= <expr><name><name>pop</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSStateId</name></type> <name>state</name> <init>= <expr><call><name>ts_stack_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>parent</name> <init>= <expr><operator>*</operator><call><name>array_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice</name><operator>.</operator><name>subtrees</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>child</name> <init>= <expr><name><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pending</name> <operator>=</operator> <call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_is_error</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>ERROR_STATE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>ts_language_next_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ts_subtree_retain</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_stack_push</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>pending</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>slice</name><operator>.</operator><name>subtrees</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>tree</name> <init>= <expr><name><name>slice</name><operator>.</operator><name>subtrees</name><operator>.</operator><name>contents</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_stack_push</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice</name><operator>.</operator><name>subtrees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"breakdown_top_of_stack tree:%s"</literal></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOG_STACK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block> while <condition>(<expr><name>pending</name></expr>)</condition>;</do>

<return>return <expr><name>did_break_down</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_parser__breakdown_lookahead</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>Subtree</name> <modifier>*</modifier></type><name>lookahead</name></decl></parameter>,
<parameter><decl><type><name>TSStateId</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>ReusableNode</name> <modifier>*</modifier></type><name>reusable_node</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>did_descend</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>tree</name> <init>= <expr><call><name>reusable_node_tree</name><argument_list>(<argument><expr><name>reusable_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ts_subtree_parse_state</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"state_mismatch sym:%s"</literal></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reusable_node_descend</name><argument_list>(<argument><expr><name>reusable_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tree</name> <operator>=</operator> <call><name>reusable_node_tree</name><argument_list>(<argument><expr><name>reusable_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>did_descend</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><operator>*</operator><name>lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lookahead</name> <operator>=</operator> <name>tree</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree_retain</name><argument_list>(<argument><expr><operator>*</operator><name>lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ErrorComparison</name></type> <name>ts_parser__compare_versions</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>ErrorStatus</name></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name>ErrorStatus</name></type> <name>b</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>.</operator><name>is_in_error</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>.</operator><name>is_in_error</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>cost</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>cost</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ErrorComparisonTakeLeft</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>ErrorComparisonPreferLeft</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>is_in_error</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>.</operator><name>is_in_error</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>cost</name></name> <operator>&lt;</operator> <name><name>a</name><operator>.</operator><name>cost</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ErrorComparisonTakeRight</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>ErrorComparisonPreferRight</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>cost</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>cost</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>b</name><operator>.</operator><name>cost</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>cost</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>a</name><operator>.</operator><name>node_count</name></name><operator>)</operator> <operator>&gt;</operator> <name>MAX_COST_DIFFERENCE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ErrorComparisonTakeLeft</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>ErrorComparisonPreferLeft</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>cost</name></name> <operator>&lt;</operator> <name><name>a</name><operator>.</operator><name>cost</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>.</operator><name>cost</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>cost</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>b</name><operator>.</operator><name>node_count</name></name><operator>)</operator> <operator>&gt;</operator> <name>MAX_COST_DIFFERENCE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ErrorComparisonTakeRight</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>ErrorComparisonPreferRight</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>dynamic_precedence</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>dynamic_precedence</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ErrorComparisonPreferLeft</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>dynamic_precedence</name></name> <operator>&gt;</operator> <name><name>a</name><operator>.</operator><name>dynamic_precedence</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ErrorComparisonPreferRight</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ErrorComparisonNone</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ErrorStatus</name></type> <name>ts_parser__version_status</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>StackVersion</name></type> <name>version</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cost</name> <init>= <expr><call><name>ts_stack_error_cost</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_paused</name> <init>= <expr><call><name>ts_stack_is_paused</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>is_paused</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cost</name> <operator>+=</operator> <name>ERROR_COST_PER_SKIPPED_TREE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ErrorStatus</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>cost</name> <operator>=</operator> <name>cost</name></expr>,
<expr><operator>.</operator><name>node_count</name> <operator>=</operator> <call><name>ts_stack_node_count_since_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>dynamic_precedence</name> <operator>=</operator> <call><name>ts_stack_dynamic_precedence</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>is_in_error</name> <operator>=</operator> <name>is_paused</name> <operator>||</operator> <call><name>ts_stack_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERROR_STATE</name></expr>
}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_parser__better_version_exists</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>StackVersion</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_in_error</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>cost</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <call><name>ts_subtree_error_cost</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>cost</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>position</name> <init>= <expr><call><name>ts_stack_position</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ErrorStatus</name></type> <name>status</name> <init>= <expr><block>{
<expr><operator>.</operator><name>cost</name> <operator>=</operator> <name>cost</name></expr>,
<expr><operator>.</operator><name>is_in_error</name> <operator>=</operator> <name>is_in_error</name></expr>,
<expr><operator>.</operator><name>dynamic_precedence</name> <operator>=</operator> <call><name>ts_stack_dynamic_precedence</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>node_count</name> <operator>=</operator> <call><name>ts_stack_node_count_since_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>StackVersion</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>version</name> <operator>||</operator>
<operator>!</operator><call><name>ts_stack_is_active</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ts_stack_position</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name> <operator>&lt;</operator> <name><name>position</name><operator>.</operator><name>bytes</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>ErrorStatus</name></type> <name>status_i</name> <init>= <expr><call><name>ts_parser__version_status</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>ts_parser__compare_versions</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>status_i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ErrorComparisonTakeRight</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>ErrorComparisonPreferRight</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ts_stack_can_merge</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_parser__restore_external_scanner</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>Subtree</name></type> <name>external_token</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>external_token</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>external_scanner</name><operator>.</operator><name>deserialize</name></name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>external_scanner_payload</name></name></expr></argument>,
<argument><expr><call><name>ts_external_scanner_state_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>external_token</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>external_scanner_state</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>external_token</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>external_scanner_state</name><operator>.</operator><name>length</name></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>external_scanner</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>external_scanner_payload</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_parser__can_reuse_first_leaf</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>TSStateId</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>Subtree</name></type> <name>tree</name></decl></parameter>,
<parameter><decl><type><name>TableEntry</name> <modifier>*</modifier></type><name>table_entry</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSLexMode</name></type> <name>current_lex_mode</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>lex_modes</name><index>[<expr><name>state</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSSymbol</name></type> <name>leaf_symbol</name> <init>= <expr><call><name>ts_subtree_leaf_symbol</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSStateId</name></type> <name>leaf_state</name> <init>= <expr><call><name>ts_subtree_leaf_parse_state</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSLexMode</name></type> <name>leaf_lex_mode</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>lex_modes</name><index>[<expr><name>leaf_state</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(
<expr><name><name>table_entry</name><operator>-&gt;</operator><name>action_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>leaf_lex_mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current_lex_mode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSLexMode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator>
<name>leaf_symbol</name> <operator>!=</operator> <name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>keyword_capture_token</name></name> <operator>||</operator>
<operator>(</operator><operator>!</operator><call><name>ts_subtree_is_keyword</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ts_subtree_parse_state</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>state</name><operator>)</operator>
<operator>)</operator></expr>
)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_size</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>leaf_symbol</name> <operator>!=</operator> <name>ts_builtin_sym_end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>



<return>return <expr><name><name>current_lex_mode</name><operator>.</operator><name>external_lex_state</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>table_entry</name><operator>-&gt;</operator><name>is_reusable</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Subtree</name></type> <name>ts_parser__lex</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>StackVersion</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>TSStateId</name></type> <name>parse_state</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Length</name></type> <name>start_position</name> <init>= <expr><call><name>ts_stack_position</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>external_token</name> <init>= <expr><call><name>ts_stack_last_external_token</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSLexMode</name></type> <name>lex_mode</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>lex_modes</name><index>[<expr><name>parse_state</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lex_mode</name><operator>.</operator><name>lex_state</name></name> <operator>==</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL_SUBTREE</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name> <modifier>*</modifier></type><name>valid_external_tokens</name> <init>= <expr><call><name>ts_language_enabled_external_tokens</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,
<argument><expr><name><name>lex_mode</name><operator>.</operator><name>external_lex_state</name></name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found_external_token</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>error_mode</name> <init>= <expr><name>parse_state</name> <operator>==</operator> <name>ERROR_STATE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>skipped_error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>first_error_character</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>error_start_position</name> <init>= <expr><call><name>length_zero</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>error_end_position</name> <init>= <expr><call><name>length_zero</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lookahead_end_byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_lexer_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>, <argument><expr><name>start_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Length</name></type> <name>current_position</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>current_position</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>valid_external_tokens</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(
<argument><expr><literal type="string">"lex_external state:%d, row:%u, column:%u"</literal></expr></argument>,
<argument><expr><name><name>lex_mode</name><operator>.</operator><name>external_lex_state</name></name></expr></argument>,
<argument><expr><name><name>current_position</name><operator>.</operator><name>extent</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>current_position</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_lexer_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_parser__restore_external_scanner</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>external_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found_token</name> <init>= <expr><call><name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>external_scanner</name><operator>.</operator><name>scan</name></name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>external_scanner_payload</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name>valid_external_tokens</name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_lexer_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lookahead_end_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>













<if_stmt><if>if <condition>(<expr><name>found_token</name> <operator>&amp;&amp;</operator> <operator>(</operator>
<name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_end_position</name><operator>.</operator><name>bytes</name></name> <operator>&gt;</operator> <name><name>current_position</name><operator>.</operator><name>bytes</name></name> <operator>||</operator>
<operator>(</operator><operator>!</operator><name>error_mode</name> <operator>&amp;&amp;</operator> <call><name>ts_stack_has_advanced_since_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found_external_token</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ts_lexer_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>, <argument><expr><name>current_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LOG</name><argument_list>(
<argument><expr><literal type="string">"lex_internal state:%d, row:%u, column:%u"</literal></expr></argument>,
<argument><expr><name><name>lex_mode</name><operator>.</operator><name>lex_state</name></name></expr></argument>,
<argument><expr><name><name>current_position</name><operator>.</operator><name>extent</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>current_position</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_lexer_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found_token</name> <init>= <expr><call><name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>lex_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>lex_mode</name><operator>.</operator><name>lex_state</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_lexer_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lookahead_end_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>found_token</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error_mode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lex_mode</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>lex_modes</name><index>[<expr><name>ERROR_STATE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid_external_tokens</name> <operator>=</operator> <call><name>ts_language_enabled_external_tokens</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,
<argument><expr><name><name>lex_mode</name><operator>.</operator><name>external_lex_state</name></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_lexer_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>, <argument><expr><name>start_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skipped_error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"skip_unrecognized_character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skipped_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error_start_position</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_start_position</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error_end_position</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_start_position</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_error_character</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>data</name><operator>.</operator><name>lookahead</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>current_position</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name><name>error_end_position</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>data</name><operator>.</operator><name>eof</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>data</name><operator>.</operator><name>result_symbol</name></name> <operator>=</operator> <name>ts_builtin_sym_error</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>data</name><operator>.</operator><name>advance</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>error_end_position</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>current_position</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>Subtree</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>skipped_error</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Length</name></type> <name>padding</name> <init>= <expr><call><name>length_sub</name><argument_list>(<argument><expr><name>error_start_position</name></expr></argument>, <argument><expr><name>start_position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>size</name> <init>= <expr><call><name>length_sub</name><argument_list>(<argument><expr><name>error_end_position</name></expr></argument>, <argument><expr><name>error_start_position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lookahead_bytes</name> <init>= <expr><name>lookahead_end_byte</name> <operator>-</operator> <name><name>error_end_position</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ts_subtree_new_error</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>,
<argument><expr><name>first_error_character</name></expr></argument>,
<argument><expr><name>padding</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>,
<argument><expr><name>lookahead_bytes</name></expr></argument>,
<argument><expr><name>parse_state</name></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOG</name><argument_list>(
<argument><expr><literal type="string">"lexed_lookahead sym:%s, size:%u, character:'%c'"</literal></expr></argument>,
<argument><expr><call><name>SYM_NAME</name><argument_list>(<argument><expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ts_subtree_total_size</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name></expr></argument>,
<argument><expr><name>first_error_character</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_end_position</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_start_position</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_start_position</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_end_position</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_keyword</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSSymbol</name></type> <name>symbol</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>data</name><operator>.</operator><name>result_symbol</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>padding</name> <init>= <expr><call><name>length_sub</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_start_position</name></name></expr></argument>, <argument><expr><name>start_position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>size</name> <init>= <expr><call><name>length_sub</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_end_position</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_start_position</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lookahead_bytes</name> <init>= <expr><name>lookahead_end_byte</name> <operator>-</operator> <name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_end_position</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>found_external_token</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>external_scanner</name><operator>.</operator><name>symbol_map</name><index>[<expr><name>symbol</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>symbol</name> <operator>==</operator> <name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>keyword_capture_token</name></name> <operator>&amp;&amp;</operator> <name>symbol</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>end_byte</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_end_position</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_lexer_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_start_position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_lexer_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(
<expr><call><name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>keyword_lex_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_end_position</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name>end_byte</name> <operator>&amp;&amp;</operator>
<call><name>ts_language_has_actions</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>data</name><operator>.</operator><name>result_symbol</name></name></expr></argument>)</argument_list></call></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_keyword</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>data</name><operator>.</operator><name>result_symbol</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ts_subtree_new_leaf</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>,
<argument><expr><name>symbol</name></expr></argument>,
<argument><expr><name>padding</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>,
<argument><expr><name>lookahead_bytes</name></expr></argument>,
<argument><expr><name>parse_state</name></expr></argument>,
<argument><expr><name>found_external_token</name></expr></argument>,
<argument><expr><name>is_keyword</name></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found_external_token</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>length</name> <init>= <expr><call><name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>external_scanner</name><operator>.</operator><name>serialize</name></name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>external_scanner_payload</name></name></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>debug_buffer</name></name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_external_scanner_state_init</name><argument_list>(
<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SubtreeHeapData</name> <operator>*</operator><operator>)</operator><name><name>result</name><operator>.</operator><name>ptr</name></name><operator>)</operator><operator>-&gt;</operator><name>external_scanner_state</name></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>debug_buffer</name></name></expr></argument>,
<argument><expr><name>length</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LOG</name><argument_list>(
<argument><expr><literal type="string">"lexed_lookahead sym:%s, size:%u"</literal></expr></argument>,
<argument><expr><call><name>SYM_NAME</name><argument_list>(<argument><expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ts_subtree_total_size</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Subtree</name></type> <name>ts_parser__get_cached_token</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>TSStateId</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>position</name></decl></parameter>,
<parameter><decl><type><name>Subtree</name></type> <name>last_external_token</name></decl></parameter>,
<parameter><decl><type><name>TableEntry</name> <modifier>*</modifier></type><name>table_entry</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TokenCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>token_cache</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(
<expr><name><name>cache</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>cache</name><operator>-&gt;</operator><name>byte_index</name></name> <operator>==</operator> <name>position</name> <operator>&amp;&amp;</operator>
<call><name>ts_subtree_external_scanner_state_eq</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>last_external_token</name></name></expr></argument>, <argument><expr><name>last_external_token</name></expr></argument>)</argument_list></call></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_language_table_entry</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>token</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>table_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_parser__can_reuse_first_leaf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>table_entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_retain</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>cache</name><operator>-&gt;</operator><name>token</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL_SUBTREE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_parser__set_cached_token</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>byte_index</name></decl></parameter>,
<parameter><decl><type><name>Subtree</name></type> <name>last_external_token</name></decl></parameter>,
<parameter><decl><type><name>Subtree</name></type> <name>token</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TokenCache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>token_cache</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ts_subtree_retain</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>last_external_token</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ts_subtree_retain</name><argument_list>(<argument><expr><name>last_external_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>last_external_token</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>last_external_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>byte_index</name></name> <operator>=</operator> <name>byte_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>last_external_token</name></name> <operator>=</operator> <name>last_external_token</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_parser__has_included_range_difference</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>start_position</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>end_position</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ts_range_array_intersects</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>included_range_differences</name></name></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>included_range_difference_index</name></name></expr></argument>,
<argument><expr><name>start_position</name></expr></argument>,
<argument><expr><name>end_position</name></expr></argument>
)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Subtree</name></type> <name>ts_parser__reuse_node</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>StackVersion</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>TSStateId</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>position</name></decl></parameter>,
<parameter><decl><type><name>Subtree</name></type> <name>last_external_token</name></decl></parameter>,
<parameter><decl><type><name>TableEntry</name> <modifier>*</modifier></type><name>table_entry</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>result</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>reusable_node_tree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>byte_offset</name> <init>= <expr><call><name>reusable_node_byte_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>end_byte_offset</name> <init>= <expr><name>byte_offset</name> <operator>+</operator> <call><name>ts_subtree_total_bytes</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>byte_offset</name> <operator>&gt;</operator> <name>position</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"before_reusable_node symbol:%s"</literal></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>byte_offset</name> <operator>&lt;</operator> <name>position</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"past_reusable_node symbol:%s"</literal></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end_byte_offset</name> <operator>&lt;=</operator> <name>position</name> <operator>||</operator> <operator>!</operator><call><name>reusable_node_descend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reusable_node_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_subtree_external_scanner_state_eq</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name><operator>.</operator><name>last_external_token</name></name></expr></argument>, <argument><expr><name>last_external_token</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"reusable_node_has_different_external_scanner_state symbol:%s"</literal></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reusable_node_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_has_changes</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <literal type="string">"has_changes"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ts_subtree_is_error</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <literal type="string">"is_error"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ts_subtree_missing</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <literal type="string">"is_missing"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ts_subtree_is_fragile</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <literal type="string">"is_fragile"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ts_parser__has_included_range_difference</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>byte_offset</name></expr></argument>, <argument><expr><name>end_byte_offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reason</name> <operator>=</operator> <literal type="string">"contains_different_included_range"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reason</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"cant_reuse_node_%s tree:%s"</literal></expr></argument>, <argument><expr><name>reason</name></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>reusable_node_descend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reusable_node_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_parser__breakdown_top_of_stack</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <call><name>ts_stack_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>leaf_symbol</name> <init>= <expr><call><name>ts_subtree_leaf_symbol</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_language_table_entry</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><operator>*</operator><name>state</name></expr></argument>, <argument><expr><name>leaf_symbol</name></expr></argument>, <argument><expr><name>table_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_parser__can_reuse_first_leaf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>*</operator><name>state</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>table_entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(
<argument><expr><literal type="string">"cant_reuse_node symbol:%s, first_leaf_symbol:%s"</literal></expr></argument>,
<argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SYM_NAME</name><argument_list>(<argument><expr><name>leaf_symbol</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reusable_node_advance_past_leaf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"reuse_node symbol:%s"</literal></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree_retain</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></while>

<return>return <expr><name>NULL_SUBTREE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_parser__select_tree</name><parameter_list>(<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Subtree</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Subtree</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>left</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>right</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_error_cost</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>ts_subtree_error_cost</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"select_smaller_error symbol:%s, over_symbol:%s"</literal></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_error_cost</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>ts_subtree_error_cost</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"select_smaller_error symbol:%s, over_symbol:%s"</literal></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_dynamic_precedence</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>ts_subtree_dynamic_precedence</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"select_higher_precedence symbol:%s, prec:%u, over_symbol:%s, other_prec:%u"</literal></expr></argument>,
<argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ts_subtree_dynamic_precedence</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ts_subtree_dynamic_precedence</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_dynamic_precedence</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>ts_subtree_dynamic_precedence</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"select_higher_precedence symbol:%s, prec:%u, over_symbol:%s, other_prec:%u"</literal></expr></argument>,
<argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ts_subtree_dynamic_precedence</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ts_subtree_dynamic_precedence</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_error_cost</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>comparison</name> <init>= <expr><call><name>ts_subtree_compare</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>comparison</name></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"select_earlier symbol:%s, over_symbol:%s"</literal></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"select_earlier symbol:%s, over_symbol:%s"</literal></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"select_existing symbol:%s, over_symbol:%s"</literal></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_parser__shift</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>StackVersion</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>TSStateId</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>Subtree</name></type> <name>lookahead</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>extra</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>subtree_to_push</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>!=</operator> <call><name>ts_subtree_extra</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>result</name> <init>= <expr><call><name>ts_subtree_make_mut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_subtree_set_extra</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subtree_to_push</name> <operator>=</operator> <call><name>ts_subtree_from_mut</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>subtree_to_push</name> <operator>=</operator> <name>lookahead</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_pending</name> <init>= <expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>subtree_to_push</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_stack_push</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>subtree_to_push</name></expr></argument>, <argument><expr><name>is_pending</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_has_external_tokens</name><argument_list>(<argument><expr><name>subtree_to_push</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_set_last_external_token</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name>ts_subtree_last_external_token</name><argument_list>(<argument><expr><name>subtree_to_push</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_parser__replace_children</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>MutableSubtree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><name>SubtreeArray</name> <modifier>*</modifier></type><name>children</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>self</name><operator>-&gt;</operator><name>scratch_tree</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>*</operator><name><name>tree</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>scratch_tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree_set_children</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>scratch_tree</name></name></expr></argument>, <argument><expr><name><name>children</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><name><name>children</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_parser__select_tree</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>ts_subtree_from_mut</name><argument_list>(<argument><expr><operator>*</operator><name>tree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ts_subtree_from_mut</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>scratch_tree</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>tree</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>*</operator><name><name>self</name><operator>-&gt;</operator><name>scratch_tree</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>StackVersion</name></type> <name>ts_parser__reduce</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>StackVersion</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dynamic_precedence</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>production_id</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_fragile</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_extra</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>initial_version_count</name> <init>= <expr><call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>removed_version_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StackSliceArray</name></type> <name>pop</name> <init>= <expr><call><name>ts_stack_pop_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pop</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>StackSlice</name></type> <name>slice</name> <init>= <expr><name><name>pop</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StackVersion</name></type> <name>slice_version</name> <init>= <expr><name><name>slice</name><operator>.</operator><name>version</name></name> <operator>-</operator> <name>removed_version_count</name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>slice_version</name> <operator>&gt;</operator> <name>MAX_VERSION_COUNT</name> <operator>+</operator> <name>MAX_VERSION_COUNT_OVERFLOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_remove_version</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>slice_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree_array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice</name><operator>.</operator><name>subtrees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>removed_version_count</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>pop</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StackSlice</name></type> <name>next_slice</name> <init>= <expr><name><name>pop</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next_slice</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name><name>slice</name><operator>.</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ts_subtree_array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>next_slice</name><operator>.</operator><name>subtrees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>SubtreeArray</name></type> <name>children</name> <init>= <expr><name><name>slice</name><operator>.</operator><name>subtrees</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>children</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ts_subtree_extra</name><argument_list>(<argument><expr><name><name>children</name><operator>.</operator><name>contents</name><index>[<expr><name><name>children</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>children</name><operator>.</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>parent</name> <init>= <expr><call><name>ts_subtree_new_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>,
<argument><expr><name>symbol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>, <argument><expr><name>production_id</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>





<while>while <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>pop</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StackSlice</name></type> <name>next_slice</name> <init>= <expr><name><name>pop</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next_slice</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name><name>slice</name><operator>.</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SubtreeArray</name></type> <name>children</name> <init>= <expr><name><name>next_slice</name><operator>.</operator><name>subtrees</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>children</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ts_subtree_extra</name><argument_list>(<argument><expr><name><name>children</name><operator>.</operator><name>contents</name><index>[<expr><name><name>children</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>children</name><operator>.</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>ts_parser__replace_children</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice</name><operator>.</operator><name>subtrees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slice</name> <operator>=</operator> <name>next_slice</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>next_slice</name><operator>.</operator><name>subtrees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>dynamic_precedence</name></name> <operator>+=</operator> <name>dynamic_precedence</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name> <operator>=</operator> <name>production_id</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TSStateId</name></type> <name>state</name> <init>= <expr><call><name>ts_stack_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>slice_version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSStateId</name></type> <name>next_state</name> <init>= <expr><call><name>ts_language_next_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>is_extra</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_fragile</name> <operator>||</operator> <name><name>pop</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>initial_version_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>fragile_left</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>fragile_right</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>parse_state</name></name> <operator>=</operator> <name>TS_TREE_STATE_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>parse_state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><call><name>ts_stack_push</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>slice_version</name></expr></argument>, <argument><expr><call><name>ts_subtree_from_mut</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>next_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>j</name> <init>= <expr><name><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>slice</name><operator>.</operator><name>subtrees</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_push</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>slice_version</name></expr></argument>, <argument><expr><name><name>slice</name><operator>.</operator><name>subtrees</name><operator>.</operator><name>contents</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>next_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>StackVersion</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>slice_version</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>version</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_stack_merge</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>slice_version</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>removed_version_count</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<return>return <expr><ternary><condition><expr><call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>initial_version_count</name></expr>
?</condition><then> <expr><name>initial_version_count</name></expr>
</then><else>: <expr><name>STACK_VERSION_NONE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_parser__accept</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>StackVersion</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>Subtree</name></type> <name>lookahead</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ts_subtree_is_eof</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_stack_push</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>StackSliceArray</name></type> <name>pop</name> <init>= <expr><call><name>ts_stack_pop_all</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pop</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>SubtreeArray</name></type> <name>trees</name> <init>= <expr><name><name>pop</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>subtrees</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Subtree</name></type> <name>root</name> <init>= <expr><name>NULL_SUBTREE</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>j</name> <init>= <expr><name><name>trees</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>child</name> <init>= <expr><name><name>trees</name><operator>.</operator><name>contents</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>child</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>child_count</name> <init>= <expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_retain</name><argument_list>(<argument><expr><name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>array_splice</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trees</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>child_count</name></expr></argument>, <argument><expr><name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>ts_subtree_from_mut</name><argument_list>(<argument><expr><call><name>ts_subtree_new_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>,
<argument><expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>trees</name></expr></argument>,
<argument><expr><name><name>child</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>
)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>accept_count</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ts_parser__select_tree</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ts_stack_remove_version</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>pop</name><operator>.</operator><name>contents</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_stack_halt</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_parser__do_all_potential_reductions</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>StackVersion</name></type> <name>starting_version</name></decl></parameter>,
<parameter><decl><type><name>TSSymbol</name></type> <name>lookahead_symbol</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>initial_version_count</name> <init>= <expr><call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_shift_lookahead_symbol</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StackVersion</name></type> <name>version</name> <init>= <expr><name>starting_version</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>true</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version_count</name> <init>= <expr><call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>version_count</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>merged</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>StackVersion</name></type> <name>i</name> <init>= <expr><name>initial_version_count</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>version</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ts_stack_merge</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>merged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>merged</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>TSStateId</name></type> <name>state</name> <init>= <expr><call><name>ts_stack_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_shift_action</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reduce_actions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>first_symbol</name></decl>, <decl><type ref="prev"/><name>end_symbol</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lookahead_symbol</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first_symbol</name> <operator>=</operator> <name>lookahead_symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_symbol</name> <operator>=</operator> <name>lookahead_symbol</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>first_symbol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end_symbol</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>token_count</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>TSSymbol</name></type> <name>symbol</name> <init>= <expr><name>first_symbol</name></expr></init></decl>;</init> <condition><expr><name>symbol</name> <operator>&lt;</operator> <name>end_symbol</name></expr>;</condition> <incr><expr><name>symbol</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TableEntry</name></type> <name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_language_table_entry</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>.</operator><name>action_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TSParseAction</name></type> <name>action</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>actions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>action</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TSParseActionTypeShift</name></expr>:</case>
<case>case <expr><name>TSParseActionTypeRecover</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>extra</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>repetition</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>has_shift_action</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TSParseActionTypeReduce</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>child_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<macro><name>ts_reduce_action_set_add</name><argument_list>(<argument>&amp;self-&gt;reduce_actions</argument>, <argument>(ReduceAction){
.symbol = action.params.symbol</argument>,
<argument>.count = action.params.child_count</argument>,
<argument>.dynamic_precedence = action.params.dynamic_precedence</argument>,
<argument>.production_id = action.params.production_id</argument>,
<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>StackVersion</name></type> <name>reduction_version</name> <init>= <expr><name>STACK_VERSION_NONE</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>reduce_actions</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ReduceAction</name></type> <name>action</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>reduce_actions</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>reduction_version</name> <operator>=</operator> <call><name>ts_parser__reduce</name><argument_list>(
<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>symbol</name></name></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>count</name></name></expr></argument>,
<argument><expr><name><name>action</name><operator>.</operator><name>dynamic_precedence</name></name></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>production_id</name></name></expr></argument>,
<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>has_shift_action</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>can_shift_lookahead_symbol</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reduction_version</name> <operator>!=</operator> <name>STACK_VERSION_NONE</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>MAX_VERSION_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_renumber_version</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>reduction_version</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lookahead_symbol</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_remove_version</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name>starting_version</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>version</name> <operator>=</operator> <name>version_count</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>version</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>can_shift_lookahead_symbol</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_parser__handle_error</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>StackVersion</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>TSSymbol</name></type> <name>lookahead_symbol</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>previous_version_count</name> <init>= <expr><call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>ts_parser__do_all_potential_reductions</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version_count</name> <init>= <expr><call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>position</name> <init>= <expr><call><name>ts_stack_position</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>did_insert_missing_token</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>StackVersion</name></type> <name>v</name> <init>= <expr><name>version</name></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>version_count</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_insert_missing_token</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>TSStateId</name></type> <name>state</name> <init>= <expr><call><name>ts_stack_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>TSSymbol</name></type> <name>missing_symbol</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init>
<condition><expr><name>missing_symbol</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>token_count</name></name></expr>;</condition>
<incr><expr><name>missing_symbol</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TSStateId</name></type> <name>state_after_missing_symbol</name> <init>= <expr><call><name>ts_language_next_state</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>missing_symbol</name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>state_after_missing_symbol</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>state_after_missing_symbol</name> <operator>==</operator> <name>state</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_language_has_reduce_action</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,
<argument><expr><name>state_after_missing_symbol</name></expr></argument>,
<argument><expr><name>lookahead_symbol</name></expr></argument>
)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>ts_lexer_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_lexer_mark_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>padding</name> <init>= <expr><call><name>length_sub</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>token_end_position</name></name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StackVersion</name></type> <name>version_with_missing_tree</name> <init>= <expr><call><name>ts_stack_copy_version</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>missing_tree</name> <init>= <expr><call><name>ts_subtree_new_missing_leaf</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name>missing_symbol</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_stack_push</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version_with_missing_tree</name></expr></argument>,
<argument><expr><name>missing_tree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>state_after_missing_symbol</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_parser__do_all_potential_reductions</name><argument_list>(
<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version_with_missing_tree</name></expr></argument>,
<argument><expr><name>lookahead_symbol</name></expr></argument>
)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(
<argument><expr><literal type="string">"recover_with_missing symbol:%s, state:%u"</literal></expr></argument>,
<argument><expr><call><name>SYM_NAME</name><argument_list>(<argument><expr><name>missing_symbol</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ts_stack_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version_with_missing_tree</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_insert_missing_token</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ts_stack_push</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL_SUBTREE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ERROR_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>v</name> <operator>==</operator> <name>version</name><operator>)</operator></expr> ?</condition><then> <expr><name>previous_version_count</name></expr> </then><else>: <expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name>previous_version_count</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>version_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>did_merge</name> <init>= <expr><call><name>ts_stack_merge</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>previous_version_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>did_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ts_stack_record_summary</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>MAX_SUMMARY_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOG_STACK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_parser__recover_to_state</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>StackVersion</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>depth</name></decl></parameter>,
<parameter><decl><type><name>TSStateId</name></type> <name>goal_state</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>StackSliceArray</name></type> <name>pop</name> <init>= <expr><call><name>ts_stack_pop_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StackVersion</name></type> <name>previous_version</name> <init>= <expr><name>STACK_VERSION_NONE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pop</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>StackSlice</name></type> <name>slice</name> <init>= <expr><name><name>pop</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>.</operator><name>version</name></name> <operator>==</operator> <name>previous_version</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice</name><operator>.</operator><name>subtrees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>array_erase</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pop</name></expr></argument>, <argument><expr><name>i</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_stack_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>goal_state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_halt</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree_array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice</name><operator>.</operator><name>subtrees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>array_erase</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pop</name></expr></argument>, <argument><expr><name>i</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SubtreeArray</name></type> <name>error_trees</name> <init>= <expr><call><name>ts_stack_pop_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>error_trees</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>error_trees</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>error_tree</name> <init>= <expr><name><name>error_trees</name><operator>.</operator><name>contents</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>error_child_count</name> <init>= <expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>error_tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error_child_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_splice</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice</name><operator>.</operator><name>subtrees</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error_child_count</name></expr></argument>, <argument><expr><name><name>error_tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>error_child_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_retain</name><argument_list>(<argument><expr><name><name>slice</name><operator>.</operator><name>subtrees</name><operator>.</operator><name>contents</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ts_subtree_array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_trees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SubtreeArray</name></type> <name>trailing_extras</name> <init>= <expr><call><name>ts_subtree_array_remove_trailing_extras</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice</name><operator>.</operator><name>subtrees</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>.</operator><name>subtrees</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>error</name> <init>= <expr><call><name>ts_subtree_new_error_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice</name><operator>.</operator><name>subtrees</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_stack_push</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>goal_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice</name><operator>.</operator><name>subtrees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>trailing_extras</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Subtree</name></type> <name>tree</name> <init>= <expr><name><name>trailing_extras</name><operator>.</operator><name>contents</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_stack_push</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>goal_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>previous_version</name> <operator>=</operator> <name><name>slice</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trailing_extras</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>previous_version</name> <operator>!=</operator> <name>STACK_VERSION_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_parser__recover</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>StackVersion</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>Subtree</name></type> <name>lookahead</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>did_recover</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>previous_version_count</name> <init>= <expr><call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>position</name> <init>= <expr><call><name>ts_stack_position</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StackSummary</name> <modifier>*</modifier></type><name>summary</name> <init>= <expr><call><name>ts_stack_get_summary</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>node_count_since_error</name> <init>= <expr><call><name>ts_stack_node_count_since_error</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>current_error_cost</name> <init>= <expr><call><name>ts_stack_error_cost</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>













<if_stmt><if>if <condition>(<expr><name>summary</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ts_subtree_is_error</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>summary</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>StackSummaryEntry</name></type> <name>entry</name> <init>= <expr><name><name>summary</name><operator>-&gt;</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>ERROR_STATE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>position</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name><name>position</name><operator>.</operator><name>bytes</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>depth</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>depth</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>node_count_since_error</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>would_merge</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>previous_version_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(
<expr><call><name>ts_stack_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>entry</name><operator>.</operator><name>state</name></name> <operator>&amp;&amp;</operator>
<call><name>ts_stack_position</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name> <operator>==</operator> <name><name>position</name><operator>.</operator><name>bytes</name></name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name>would_merge</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>would_merge</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>new_cost</name> <init>=
<expr><name>current_error_cost</name> <operator>+</operator>
<name><name>entry</name><operator>.</operator><name>depth</name></name> <operator>*</operator> <name>ERROR_COST_PER_SKIPPED_TREE</name> <operator>+</operator>
<operator>(</operator><name><name>position</name><operator>.</operator><name>bytes</name></name> <operator>-</operator> <name><name>entry</name><operator>.</operator><name>position</name><operator>.</operator><name>bytes</name></name><operator>)</operator> <operator>*</operator> <name>ERROR_COST_PER_SKIPPED_CHAR</name> <operator>+</operator>
<operator>(</operator><name><name>position</name><operator>.</operator><name>extent</name><operator>.</operator><name>row</name></name> <operator>-</operator> <name><name>entry</name><operator>.</operator><name>position</name><operator>.</operator><name>extent</name><operator>.</operator><name>row</name></name><operator>)</operator> <operator>*</operator> <name>ERROR_COST_PER_SKIPPED_LINE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_parser__better_version_exists</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>new_cost</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>ts_language_has_actions</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ts_parser__recover_to_state</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>did_recover</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"recover_to_previous state:%u, depth:%u"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOG_STACK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name>previous_version_count</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_stack_is_active</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_remove_version</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>






<if_stmt><if>if <condition>(<expr><name>did_recover</name> <operator>&amp;&amp;</operator> <call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAX_VERSION_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_halt</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_is_eof</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"recover_eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SubtreeArray</name></type> <name>children</name> <init>= <expr><call><name>array_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>parent</name> <init>= <expr><call><name>ts_subtree_new_error_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_stack_push</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_parser__accept</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>new_cost</name> <init>=
<expr><name>current_error_cost</name> <operator>+</operator> <name>ERROR_COST_PER_SKIPPED_TREE</name> <operator>+</operator>
<call><name>ts_subtree_total_bytes</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>ERROR_COST_PER_SKIPPED_CHAR</name> <operator>+</operator>
<call><name>ts_subtree_total_size</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>extent</name><operator>.</operator><name>row</name></name> <operator>*</operator> <name>ERROR_COST_PER_SKIPPED_LINE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_parser__better_version_exists</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>new_cost</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_halt</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TSParseAction</name> <modifier>*</modifier></type><name>actions</name> <init>= <expr><call><name>ts_language_actions</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>actions</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSParseActionTypeShift</name> <operator>&amp;&amp;</operator> <name><name>actions</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>params</name><operator>.</operator><name>extra</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>mutable_lookahead</name> <init>= <expr><call><name>ts_subtree_make_mut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_subtree_set_extra</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutable_lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lookahead</name> <operator>=</operator> <call><name>ts_subtree_from_mut</name><argument_list>(<argument><expr><name>mutable_lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"skip_token symbol:%s"</literal></expr></argument>, <argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SubtreeArray</name></type> <name>children</name> <init>= <expr><call><name>array_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>array_reserve</name><argument_list>(<argument><expr><operator>&amp;</operator><name>children</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>children</name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>error_repeat</name> <init>= <expr><call><name>ts_subtree_new_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>,
<argument><expr><name>ts_builtin_sym_error_repeat</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>children</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>node_count_since_error</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StackSliceArray</name></type> <name>pop</name> <init>= <expr><call><name>ts_stack_pop_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>pop</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pop</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pop</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>subtrees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<while>while <condition>(<expr><call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>pop</name><operator>.</operator><name>contents</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>version</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_remove_version</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>pop</name><operator>.</operator><name>contents</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>version</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ts_stack_renumber_version</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>pop</name><operator>.</operator><name>contents</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>version</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pop</name><operator>.</operator><name>contents</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>subtrees</name></expr></argument>, <argument><expr><call><name>ts_subtree_from_mut</name><argument_list>(<argument><expr><name>error_repeat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error_repeat</name> <operator>=</operator> <call><name>ts_subtree_new_node</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>,
<argument><expr><name>ts_builtin_sym_error_repeat</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>pop</name><operator>.</operator><name>contents</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>subtrees</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ts_stack_push</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name>ts_subtree_from_mut</name><argument_list>(<argument><expr><name>error_repeat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ERROR_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_has_external_tokens</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_set_last_external_token</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name>ts_subtree_last_external_token</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_parser__advance</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name>StackVersion</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>allow_node_reuse</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSStateId</name></type> <name>state</name> <init>= <expr><call><name>ts_stack_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>position</name> <init>= <expr><call><name>ts_stack_position</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>last_external_token</name> <init>= <expr><call><name>ts_stack_last_external_token</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_reuse</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Subtree</name></type> <name>lookahead</name> <init>= <expr><name>NULL_SUBTREE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TableEntry</name></type> <name>table_entry</name> <init>= <expr><block>{<expr><operator>.</operator><name>action_count</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>allow_node_reuse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lookahead</name> <operator>=</operator> <call><name>ts_parser__reuse_node</name><argument_list>(
<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>last_external_token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_entry</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lookahead</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>did_reuse</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lookahead</name> <operator>=</operator> <call><name>ts_parser__get_cached_token</name><argument_list>(
<argument><expr><name>self</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>last_external_token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_entry</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lookahead</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lookahead</name> <operator>=</operator> <call><name>ts_parser__lex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lookahead</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_parser__set_cached_token</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>last_external_token</name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_language_table_entry</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>




<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ts_language_table_entry</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>ts_builtin_sym_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>self</name><operator>-&gt;</operator><name>operation_count</name></name> <operator>==</operator> <name>OP_COUNT_PER_TIMEOUT_CHECK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>operation_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(
<expr><name><name>self</name><operator>-&gt;</operator><name>operation_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>cancellation_flag</name></name> <operator>&amp;&amp;</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>cancellation_flag</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><call><name>clock_is_null</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>end_clock</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>clock_is_gt</name><argument_list>(<argument><expr><call><name>clock_now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>end_clock</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>






<decl_stmt><decl><type><name>StackVersion</name></type> <name>last_reduction_version</name> <init>= <expr><name>STACK_VERSION_NONE</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table_entry</name><operator>.</operator><name>action_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TSParseAction</name></type> <name>action</name> <init>= <expr><name><name>table_entry</name><operator>.</operator><name>actions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>action</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TSParseActionTypeShift</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>repetition</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>TSStateId</name></type> <name>next_state</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>extra</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>ERROR_STATE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"shift_extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"shift state:%u"</literal></expr></argument>, <argument><expr><name>next_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_parser__breakdown_lookahead</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lookahead</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <call><name>ts_language_next_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ts_parser__shift</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>next_state</name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>did_reuse</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>reusable_node_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>TSParseActionTypeReduce</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_fragile</name> <init>= <expr><name><name>table_entry</name><operator>.</operator><name>action_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_extra</name> <init>= <expr><name><name>lookahead</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"reduce sym:%s, child_count:%u"</literal></expr></argument>, <argument><expr><call><name>SYM_NAME</name><argument_list>(<argument><expr><name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>symbol</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>child_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StackVersion</name></type> <name>reduction_version</name> <init>= <expr><call><name>ts_parser__reduce</name><argument_list>(
<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>symbol</name></name></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>child_count</name></name></expr></argument>,
<argument><expr><name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>dynamic_precedence</name></name></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>production_id</name></name></expr></argument>,
<argument><expr><name>is_fragile</name></expr></argument>, <argument><expr><name>is_extra</name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>reduction_version</name> <operator>!=</operator> <name>STACK_VERSION_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_reduction_version</name> <operator>=</operator> <name>reduction_version</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>TSParseActionTypeAccept</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"accept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_parser__accept</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>TSParseActionTypeRecover</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_parser__breakdown_lookahead</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lookahead</name></expr></argument>, <argument><expr><name>ERROR_STATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ts_parser__recover</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>did_reuse</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>reusable_node_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name>last_reduction_version</name> <operator>!=</operator> <name>STACK_VERSION_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_renumber_version</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>last_reduction_version</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOG_STACK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>ts_stack_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lookahead</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lookahead</name> <operator>=</operator> <call><name>ts_parser__lex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ts_language_table_entry</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,
<argument><expr><name>state</name></expr></argument>,
<argument><expr><call><name>ts_subtree_leaf_symbol</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>table_entry</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(
<expr><call><name>ts_subtree_is_keyword</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>keyword_capture_token</name></name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_language_table_entry</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>keyword_capture_token</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>table_entry</name><operator>.</operator><name>action_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(
<argument><expr><literal type="string">"switch from_keyword:%s, to_word_token:%s"</literal></expr></argument>,
<argument><expr><call><name>TREE_NAME</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SYM_NAME</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>keyword_capture_token</name></name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>mutable_lookahead</name> <init>= <expr><call><name>ts_subtree_make_mut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_subtree_set_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutable_lookahead</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>keyword_capture_token</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lookahead</name> <operator>=</operator> <call><name>ts_subtree_from_mut</name><argument_list>(<argument><expr><name>mutable_lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>ERROR_STATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_parser__recover</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>ts_parser__breakdown_top_of_stack</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"detect_error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_stack_pause</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name>ts_subtree_leaf_symbol</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>ts_parser__condense_stack</name><parameter_list>(<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>made_changes</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>min_error_cost</name> <init>= <expr><name>UINT_MAX</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>StackVersion</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ts_stack_is_halted</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_remove_version</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>ErrorStatus</name></type> <name>status_i</name> <init>= <expr><call><name>ts_parser__version_status</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>status_i</name><operator>.</operator><name>is_in_error</name></name> <operator>&amp;&amp;</operator> <name><name>status_i</name><operator>.</operator><name>cost</name></name> <operator>&lt;</operator> <name>min_error_cost</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min_error_cost</name> <operator>=</operator> <name><name>status_i</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><decl><type><name>StackVersion</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ErrorStatus</name></type> <name>status_j</name> <init>= <expr><call><name>ts_parser__version_status</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>ts_parser__compare_versions</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>status_j</name></expr></argument>, <argument><expr><name>status_i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ErrorComparisonTakeLeft</name></expr>:</case>
<expr_stmt><expr><name>made_changes</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_stack_remove_version</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ErrorComparisonPreferLeft</name></expr>:</case>
<case>case <expr><name>ErrorComparisonNone</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ts_stack_merge</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>made_changes</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ErrorComparisonPreferRight</name></expr>:</case>
<expr_stmt><expr><name>made_changes</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ts_stack_merge</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_swap_versions</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>ErrorComparisonTakeRight</name></expr>:</case>
<expr_stmt><expr><name>made_changes</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_stack_remove_version</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></for>



<while>while <condition>(<expr><call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAX_VERSION_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_remove_version</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>MAX_VERSION_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>made_changes</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></while>




<if_stmt><if>if <condition>(<expr><call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>has_unpaused_version</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>StackVersion</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ts_stack_is_paused</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_unpaused_version</name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>accept_count</name></name> <operator>&lt;</operator> <name>MAX_VERSION_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"resume version:%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_error_cost</name> <operator>=</operator> <call><name>ts_stack_error_cost</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TSSymbol</name></type> <name>lookahead_symbol</name> <init>= <expr><call><name>ts_stack_resume</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_parser__handle_error</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>lookahead_symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>has_unpaused_version</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ts_stack_remove_version</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>has_unpaused_version</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>made_changes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"condense"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOG_STACK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>min_error_cost</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_parser_has_outstanding_parse</name><parameter_list>(<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator>
<name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>current_position</name><operator>.</operator><name>bytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>ts_stack_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal>
<operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><name>TSParser</name> <modifier>*</modifier></type><name>ts_parser_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><call><name>ts_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSParser</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ts_lexer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>array_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reduce_actions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>array_reserve</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reduce_actions</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name> <operator>=</operator> <call><name>ts_subtree_pool_new</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <call><name>ts_stack_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name></name> <operator>=</operator> <name>NULL_SUBTREE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name> <operator>=</operator> <call><name>reusable_node_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>dot_graph_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>cancellation_flag</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>timeout_duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>end_clock</name></name> <operator>=</operator> <call><name>clock_null</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>operation_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>old_tree</name></name> <operator>=</operator> <name>NULL_SUBTREE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>scratch_tree</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>scratch_tree_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>included_range_differences</name></name> <operator>=</operator> <operator>(</operator><name>TSRangeArray</name><operator>)</operator> <call><name>array_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>included_range_difference_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_parser__set_cached_token</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL_SUBTREE</name></expr></argument>, <argument><expr><name>NULL_SUBTREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_parser_delete</name><parameter_list>(<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>self</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ts_parser_set_language</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_stack_delete</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>reduce_actions</name><operator>.</operator><name>contents</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reduce_actions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>included_range_differences</name><operator>.</operator><name>contents</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>included_range_differences</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>old_tree</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>old_tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>old_tree</name></name> <operator>=</operator> <name>NULL_SUBTREE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ts_lexer_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_parser__set_cached_token</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL_SUBTREE</name></expr></argument>, <argument><expr><name>NULL_SUBTREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_subtree_pool_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reusable_node_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_free</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>ts_parser_language</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_parser_set_language</name><parameter_list>(<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>language</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>language</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <name>TREE_SITTER_LANGUAGE_VERSION</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>language</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <name>TREE_SITTER_MIN_COMPATIBLE_LANGUAGE_VERSION</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>external_scanner_payload</name></name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>external_scanner</name><operator>.</operator><name>destroy</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>external_scanner</name><operator>.</operator><name>destroy</name></name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>external_scanner_payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>language</name> <operator>&amp;&amp;</operator> <name><name>language</name><operator>-&gt;</operator><name>external_scanner</name><operator>.</operator><name>create</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>external_scanner_payload</name></name> <operator>=</operator> <call><name><name>language</name><operator>-&gt;</operator><name>external_scanner</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>external_scanner_payload</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name> <operator>=</operator> <name>language</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_parser_reset</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSLogger</name></type> <name>ts_parser_logger</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>logger</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_parser_set_logger</name><parameter_list>(<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>TSLogger</name></type> <name>logger</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>logger</name></name> <operator>=</operator> <name>logger</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_parser_print_dot_graphs</name><parameter_list>(<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>dot_graph_file</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>dot_graph_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>dot_graph_file</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>dot_graph_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>ts_parser_cancellation_flag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>size_t</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>cancellation_flag</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_parser_set_cancellation_flag</name><parameter_list>(<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>cancellation_flag</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <specifier>volatile</specifier> <name>size_t</name> <operator>*</operator><operator>)</operator><name>flag</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>ts_parser_timeout_micros</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>duration_to_micros</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>timeout_duration</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_parser_set_timeout_micros</name><parameter_list>(<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>timeout_micros</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>timeout_duration</name></name> <operator>=</operator> <call><name>duration_from_micros</name><argument_list>(<argument><expr><name>timeout_micros</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_parser_set_included_ranges</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TSRange</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ts_lexer_set_included_ranges</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>TSRange</name> <modifier>*</modifier></type><name>ts_parser_included_ranges</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ts_lexer_included_ranges</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_parser_reset</name><parameter_list>(<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>external_scanner</name><operator>.</operator><name>deserialize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>self</name><operator>-&gt;</operator><name>language</name><operator>-&gt;</operator><name>external_scanner</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>external_scanner_payload</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>old_tree</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>old_tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>old_tree</name></name> <operator>=</operator> <name>NULL_SUBTREE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reusable_node_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_lexer_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>, <argument><expr><call><name>length_zero</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_stack_clear</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_parser__set_cached_token</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL_SUBTREE</name></expr></argument>, <argument><expr><name>NULL_SUBTREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name></name> <operator>=</operator> <name>NULL_SUBTREE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>accept_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TSTree</name> <modifier>*</modifier></type><name>ts_parser_parse</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type><name>old_tree</name></decl></parameter>,
<parameter><decl><type><name>TSInput</name></type> <name>input</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>language</name></name> <operator>||</operator> <operator>!</operator><name><name>input</name><operator>.</operator><name>read</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ts_lexer_set_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lexer</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>included_range_differences</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>included_range_difference_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_parser_has_outstanding_parse</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"resume_parsing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>old_tree</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ts_subtree_retain</name><argument_list>(<argument><expr><name><name>old_tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>old_tree</name></name> <operator>=</operator> <name><name>old_tree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_range_array_get_changed_ranges</name><argument_list>(
<argument><expr><name><name>old_tree</name><operator>-&gt;</operator><name>included_ranges</name></name></expr></argument>, <argument><expr><name><name>old_tree</name><operator>-&gt;</operator><name>included_range_count</name></name></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>included_ranges</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>included_range_count</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>included_range_differences</name></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reusable_node_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>, <argument><expr><name><name>old_tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"parse_after_edit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOG_TREE</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>old_tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>included_range_differences</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TSRange</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>included_range_differences</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"different_included_range %u - %u"</literal></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>start_byte</name></name></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>end_byte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>reusable_node_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>reusable_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"new_parse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>last_position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>version_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>operation_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>timeout_duration</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>end_clock</name></name> <operator>=</operator> <call><name>clock_after</name><argument_list>(<argument><expr><call><name>clock_now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>timeout_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>end_clock</name></name> <operator>=</operator> <call><name>clock_null</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<do>do <block>{<block_content>
<for>for <control>(<init><decl><type><name>StackVersion</name></type> <name>version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>
<condition><expr><name>version_count</name> <operator>=</operator> <call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>version</name> <operator>&lt;</operator> <name>version_count</name></expr>;</condition>
<incr><expr><name>version</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>allow_node_reuse</name> <init>= <expr><name>version_count</name> <operator>==</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>ts_stack_is_active</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"process version:%d, version_count:%u, state:%d, row:%u, col:%u"</literal></expr></argument>,
<argument><expr><name>version</name></expr></argument>, <argument><expr><call><name>ts_stack_version_count</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ts_stack_state</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ts_stack_position</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>extent</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>ts_stack_position</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>extent</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_parser__advance</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>allow_node_reuse</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LOG_STACK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>ts_stack_position</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;</operator> <name>last_position</name> <operator>||</operator> <operator>(</operator><name>version</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>position</name> <operator>==</operator> <name>last_position</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_position</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<decl_stmt><decl><type><name>unsigned</name></type> <name>min_error_cost</name> <init>= <expr><call><name>ts_parser__condense_stack</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <call><name>ts_subtree_error_cost</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>min_error_cost</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>included_range_difference_index</name></name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>included_range_differences</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>TSRange</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>included_range_differences</name><operator>.</operator><name>contents</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>included_range_difference_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>end_byte</name></name> <operator>&lt;=</operator> <name>position</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>included_range_difference_index</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><name>version_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>ts_subtree_balance</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>tree_pool</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOG_TREE</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TSTree</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>ts_tree_new</name><argument_list>(
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name></name></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>included_ranges</name></name></expr></argument>,
<argument><expr><name><name>self</name><operator>-&gt;</operator><name>lexer</name><operator>.</operator><name>included_range_count</name></name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>finished_tree</name></name> <operator>=</operator> <name>NULL_SUBTREE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ts_parser_reset</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSTree</name> <modifier>*</modifier></type><name>ts_parser_parse_string</name><parameter_list>(
<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type><name>old_tree</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ts_parser_parse_string_encoding</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>old_tree</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>TSInputEncodingUTF8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSTree</name> <modifier>*</modifier></type><name>ts_parser_parse_string_encoding</name><parameter_list>(<parameter><decl><type><name>TSParser</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type><name>old_tree</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>TSInputEncoding</name></type> <name>encoding</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSStringInput</name></type> <name>input</name> <init>= <expr><block>{<expr><name>string</name></expr>, <expr><name>length</name></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <macro><name>ts_parser_parse</name><argument_list>(<argument>self</argument>, <argument>old_tree</argument>, <argument>(TSInput) {
&amp;input</argument>,
<argument>ts_string_input_read</argument>,
<argument>encoding</argument>,
<argument>}</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOG</name></cpp:undef>
</unit>
