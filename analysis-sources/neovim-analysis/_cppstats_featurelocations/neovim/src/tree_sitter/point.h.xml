<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\tree_sitter\point.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TREE_SITTER_POINT_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_SITTER_POINT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree_sitter/api.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POINT_ZERO</name></cpp:macro> <cpp:value>((TSPoint) {0, 0})</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POINT_MAX</name></cpp:macro> <cpp:value>((TSPoint) {UINT32_MAX, UINT32_MAX})</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSPoint</name></type> <name>point__new</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSPoint</name></type> <name>result</name> <init>= <expr><block>{<expr><name>row</name></expr>, <expr><name>column</name></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSPoint</name></type> <name>point_add</name><parameter_list>(<parameter><decl><type><name>TSPoint</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>TSPoint</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>row</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>point__new</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>row</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>point__new</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>column</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSPoint</name></type> <name>point_sub</name><parameter_list>(<parameter><decl><type><name>TSPoint</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>TSPoint</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>row</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>row</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>point__new</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>row</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>point__new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>column</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>point_lte</name><parameter_list>(<parameter><decl><type><name>TSPoint</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>TSPoint</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>row</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>column</name></name> <operator>&lt;=</operator> <name><name>b</name><operator>.</operator><name>column</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>point_lt</name><parameter_list>(<parameter><decl><type><name>TSPoint</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>TSPoint</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>row</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>column</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>column</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>point_eq</name><parameter_list>(<parameter><decl><type><name>TSPoint</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>TSPoint</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>a</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>column</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>column</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSPoint</name></type> <name>point_min</name><parameter_list>(<parameter><decl><type><name>TSPoint</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>TSPoint</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>row</name></name> <operator>||</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>column</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>column</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>b</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSPoint</name></type> <name>point_max</name><parameter_list>(<parameter><decl><type><name>TSPoint</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>TSPoint</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>row</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>row</name></name> <operator>||</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>column</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>column</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>b</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
