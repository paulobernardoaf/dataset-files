<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\tree_sitter\lexer.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TREE_SITTER_LEXER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_SITTER_LEXER_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./length.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./subtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree_sitter/api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree_sitter/parser.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>TSLexer</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>current_position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>token_start_position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Length</name></type> <name>token_end_position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSRange</name> <modifier>*</modifier></type><name>included_ranges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>included_range_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>current_included_range_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>chunk_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>chunk_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lookahead_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSInput</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TSLogger</name></type> <name>logger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>debug_buffer</name><index>[<expr><name>TREE_SITTER_SERIALIZATION_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>Lexer</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ts_lexer_init</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ts_lexer_delete</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ts_lexer_set_input</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>TSInput</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ts_lexer_reset</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Length</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ts_lexer_start</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ts_lexer_finish</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ts_lexer_advance_to_end</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ts_lexer_mark_end</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>ts_lexer_set_included_ranges</name><parameter_list>(<parameter><decl><type><name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSRange</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>TSRange</name> <modifier>*</modifier></type><name>ts_lexer_included_ranges</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Lexer</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
