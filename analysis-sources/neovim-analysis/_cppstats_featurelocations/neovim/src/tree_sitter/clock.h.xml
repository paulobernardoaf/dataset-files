<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\tree_sitter\clock.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TREE_SITTER_CLOCK_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_SITTER_CLOCK_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>uint64_t</name></type> <name>TSDuration</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>uint64_t</name></type> <name>TSClock</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSDuration</name></type> <name>duration_from_micros</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>micros</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>frequency</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frequency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>micros</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>frequency</name><operator>.</operator><name>QuadPart</name></name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>duration_to_micros</name><parameter_list>(<parameter><decl><type><name>TSDuration</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>frequency</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frequency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name> <operator>*</operator> <literal type="number">1000000</literal> <operator>/</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>frequency</name><operator>.</operator><name>QuadPart</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSClock</name></type> <name>clock_null</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSClock</name></type> <name>clock_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>result</name><operator>.</operator><name>QuadPart</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSClock</name></type> <name>clock_after</name><parameter_list>(<parameter><decl><type><name>TSClock</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>TSDuration</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>base</name> <operator>+</operator> <name>duration</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>clock_is_null</name><parameter_list>(<parameter><decl><type><name>TSClock</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>!</operator><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>clock_is_gt</name><parameter_list>(<parameter><decl><type><name>TSClock</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>TSClock</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>self</name> <operator>&gt;</operator> <name>other</name></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name><name>struct</name> <name>timespec</name></name></type> <name>TSClock</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSDuration</name></type> <name>duration_from_micros</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>micros</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>micros</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>duration_to_micros</name><parameter_list>(<parameter><decl><type><name>TSDuration</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSClock</name></type> <name>clock_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSClock</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSClock</name></type> <name>clock_null</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>TSClock</name><operator>)</operator> <block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSClock</name></type> <name>clock_after</name><parameter_list>(<parameter><decl><type><name>TSClock</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>TSDuration</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TSClock</name></type> <name>result</name> <init>= <expr><name>base</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <name>duration</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>tv_nsec</name></name> <operator>+=</operator> <operator>(</operator><name>duration</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>clock_is_null</name><parameter_list>(<parameter><decl><type><name>TSClock</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>!</operator><name><name>self</name><operator>.</operator><name>tv_sec</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>clock_is_gt</name><parameter_list>(<parameter><decl><type><name>TSClock</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>TSClock</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <name><name>other</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>tv_sec</name></name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>self</name><operator>.</operator><name>tv_nsec</name></name> <operator>&gt;</operator> <name><name>other</name><operator>.</operator><name>tv_nsec</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>uint64_t</name></type> <name>TSClock</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSDuration</name></type> <name>duration_from_micros</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>micros</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>micros</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>CLOCKS_PER_SEC</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>duration_to_micros</name><parameter_list>(<parameter><decl><type><name>TSDuration</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>self</name> <operator>*</operator> <literal type="number">1000000</literal> <operator>/</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>CLOCKS_PER_SEC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSClock</name></type> <name>clock_null</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSClock</name></type> <name>clock_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>clock</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSClock</name></type> <name>clock_after</name><parameter_list>(<parameter><decl><type><name>TSClock</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>TSDuration</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>base</name> <operator>+</operator> <name>duration</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>clock_is_null</name><parameter_list>(<parameter><decl><type><name>TSClock</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>!</operator><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>clock_is_gt</name><parameter_list>(<parameter><decl><type><name>TSClock</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>TSClock</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>self</name> <operator>&gt;</operator> <name>other</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
