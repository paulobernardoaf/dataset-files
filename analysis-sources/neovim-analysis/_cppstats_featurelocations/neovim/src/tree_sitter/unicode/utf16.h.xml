<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\tree_sitter\unicode\utf16.h">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__UTF16_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UTF16_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./umachine.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__UTF_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./utf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_IS_SINGLE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>!U_IS_SURROGATE(c)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_IS_LEAD</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((c)&amp;0xfffffc00)==0xd800)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_IS_TRAIL</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((c)&amp;0xfffffc00)==0xdc00)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_IS_SURROGATE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>U_IS_SURROGATE(c)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_IS_SURROGATE_LEAD</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((c)&amp;0x400)==0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_IS_SURROGATE_TRAIL</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((c)&amp;0x400)!=0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_SURROGATE_OFFSET</name></cpp:macro> <cpp:value>((0xd800&lt;&lt;10UL)+0xdc00-0x10000)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_GET_SUPPLEMENTARY</name><parameter_list>(<parameter><type><name>lead</name></type></parameter>, <parameter><type><name>trail</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((UChar32)(lead)&lt;&lt;10UL)+(UChar32)(trail)-U16_SURROGATE_OFFSET)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_LEAD</name><parameter_list>(<parameter><type><name>supplementary</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(UChar)(((supplementary)&gt;&gt;10)+0xd7c0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_TRAIL</name><parameter_list>(<parameter><type><name>supplementary</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(UChar)(((supplementary)&amp;0x3ff)|0xdc00)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_LENGTH</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(c)&lt;=0xffff ? 1 : 2)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_MAX_LENGTH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_GET_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (c)=(s)[i]; if(U16_IS_SURROGATE(c)) { if(U16_IS_SURROGATE_LEAD(c)) { (c)=U16_GET_SUPPLEMENTARY((c), (s)[(i)+1]); } else { (c)=U16_GET_SUPPLEMENTARY((s)[(i)-1], (c)); } } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_GET</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (c)=(s)[i]; if(U16_IS_SURROGATE(c)) { uint16_t __c2; if(U16_IS_SURROGATE_LEAD(c)) { if((i)+1!=(length) &amp;&amp; U16_IS_TRAIL(__c2=(s)[(i)+1])) { (c)=U16_GET_SUPPLEMENTARY((c), __c2); } } else { if((i)&gt;(start) &amp;&amp; U16_IS_LEAD(__c2=(s)[(i)-1])) { (c)=U16_GET_SUPPLEMENTARY(__c2, (c)); } } } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>






































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_GET_OR_FFFD</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (c)=(s)[i]; if(U16_IS_SURROGATE(c)) { uint16_t __c2; if(U16_IS_SURROGATE_LEAD(c)) { if((i)+1!=(length) &amp;&amp; U16_IS_TRAIL(__c2=(s)[(i)+1])) { (c)=U16_GET_SUPPLEMENTARY((c), __c2); } else { (c)=0xfffd; } } else { if((i)&gt;(start) &amp;&amp; U16_IS_LEAD(__c2=(s)[(i)-1])) { (c)=U16_GET_SUPPLEMENTARY(__c2, (c)); } else { (c)=0xfffd; } } } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>








































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_NEXT_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (c)=(s)[(i)++]; if(U16_IS_LEAD(c)) { (c)=U16_GET_SUPPLEMENTARY((c), (s)[(i)++]); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>



























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_NEXT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (c)=(s)[(i)++]; if(U16_IS_LEAD(c)) { uint16_t __c2; if((i)!=(length) &amp;&amp; U16_IS_TRAIL(__c2=(s)[(i)])) { ++(i); (c)=U16_GET_SUPPLEMENTARY((c), __c2); } } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_NEXT_OR_FFFD</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (c)=(s)[(i)++]; if(U16_IS_SURROGATE(c)) { uint16_t __c2; if(U16_IS_SURROGATE_LEAD(c) &amp;&amp; (i)!=(length) &amp;&amp; U16_IS_TRAIL(__c2=(s)[(i)])) { ++(i); (c)=U16_GET_SUPPLEMENTARY((c), __c2); } else { (c)=0xfffd; } } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_APPEND_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { if((uint32_t)(c)&lt;=0xffff) { (s)[(i)++]=(uint16_t)(c); } else { (s)[(i)++]=(uint16_t)(((c)&gt;&gt;10)+0xd7c0); (s)[(i)++]=(uint16_t)(((c)&amp;0x3ff)|0xdc00); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_APPEND</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>capacity</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>isError</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { if((uint32_t)(c)&lt;=0xffff) { (s)[(i)++]=(uint16_t)(c); } else if((uint32_t)(c)&lt;=0x10ffff &amp;&amp; (i)+1&lt;(capacity)) { (s)[(i)++]=(uint16_t)(((c)&gt;&gt;10)+0xd7c0); (s)[(i)++]=(uint16_t)(((c)&amp;0x3ff)|0xdc00); } else { (isError)=TRUE; } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_FWD_1_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { if(U16_IS_LEAD((s)[(i)++])) { ++(i); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_FWD_1</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { if(U16_IS_LEAD((s)[(i)++]) &amp;&amp; (i)!=(length) &amp;&amp; U16_IS_TRAIL((s)[i])) { ++(i); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_FWD_N_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { int32_t __N=(n); while(__N&gt;0) { U16_FWD_1_UNSAFE(s, i); --__N; } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_FWD_N</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { int32_t __N=(n); while(__N&gt;0 &amp;&amp; ((i)&lt;(length) || ((length)&lt;0 &amp;&amp; (s)[i]!=0))) { U16_FWD_1(s, i, length); --__N; } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_SET_CP_START_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { if(U16_IS_TRAIL((s)[i])) { --(i); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_SET_CP_START</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { if(U16_IS_TRAIL((s)[i]) &amp;&amp; (i)&gt;(start) &amp;&amp; U16_IS_LEAD((s)[(i)-1])) { --(i); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>



























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_PREV_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (c)=(s)[--(i)]; if(U16_IS_TRAIL(c)) { (c)=U16_GET_SUPPLEMENTARY((s)[--(i)], (c)); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>


























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_PREV</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (c)=(s)[--(i)]; if(U16_IS_TRAIL(c)) { uint16_t __c2; if((i)&gt;(start) &amp;&amp; U16_IS_LEAD(__c2=(s)[(i)-1])) { --(i); (c)=U16_GET_SUPPLEMENTARY(__c2, (c)); } } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>






























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_PREV_OR_FFFD</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (c)=(s)[--(i)]; if(U16_IS_SURROGATE(c)) { uint16_t __c2; if(U16_IS_SURROGATE_TRAIL(c) &amp;&amp; (i)&gt;(start) &amp;&amp; U16_IS_LEAD(__c2=(s)[(i)-1])) { --(i); (c)=U16_GET_SUPPLEMENTARY(__c2, (c)); } else { (c)=0xfffd; } } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_BACK_1_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { if(U16_IS_TRAIL((s)[--(i)])) { --(i); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_BACK_1</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { if(U16_IS_TRAIL((s)[--(i)]) &amp;&amp; (i)&gt;(start) &amp;&amp; U16_IS_LEAD((s)[(i)-1])) { --(i); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_BACK_N_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { int32_t __N=(n); while(__N&gt;0) { U16_BACK_1_UNSAFE(s, i); --__N; } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_BACK_N</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { int32_t __N=(n); while(__N&gt;0 &amp;&amp; (i)&gt;(start)) { U16_BACK_1(s, start, i); --__N; } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_SET_CP_LIMIT_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { if(U16_IS_LEAD((s)[(i)-1])) { ++(i); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U16_SET_CP_LIMIT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { if((start)&lt;(i) &amp;&amp; ((i)&lt;(length) || (length)&lt;0) &amp;&amp; U16_IS_LEAD((s)[(i)-1]) &amp;&amp; U16_IS_TRAIL((s)[i])) { ++(i); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
