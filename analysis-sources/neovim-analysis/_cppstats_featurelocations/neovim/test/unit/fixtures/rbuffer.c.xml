<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\test\unit\fixtures\rbuffer.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/rbuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rbuffer.h"</cpp:file></cpp:include>


<function><type><name>void</name></type> <name>ut_rbuffer_each_read_chunk</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>each_ptr_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>RBUFFER_UNTIL_EMPTY</name><argument_list>(<argument>buf</argument>, <argument>rptr</argument>, <argument>rcnt</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>rptr</name></expr></argument>, <argument><expr><name>rcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rbuffer_consumed</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ut_rbuffer_each_write_chunk</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>each_ptr_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>RBUFFER_UNTIL_FULL</name><argument_list>(<argument>buf</argument>, <argument>wptr</argument>, <argument>wcnt</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>wptr</name></expr></argument>, <argument><expr><name>wcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rbuffer_produced</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ut_rbuffer_each</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>each_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>RBUFFER_EACH</name><argument_list>(<argument>buf</argument>, <argument>c</argument>, <argument>i</argument>)</argument_list></macro> <expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ut_rbuffer_each_reverse</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>each_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>RBUFFER_EACH_REVERSE</name><argument_list>(<argument>buf</argument>, <argument>c</argument>, <argument>i</argument>)</argument_list></macro> <expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
