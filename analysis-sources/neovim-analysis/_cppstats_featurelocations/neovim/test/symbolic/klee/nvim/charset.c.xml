<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\test\symbolic\klee\nvim\charset.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>hex2nr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vim_str2nr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>prep</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>varnumber_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>nptr</name></decl></parameter>,
<parameter><decl><type><name>uvarnumber_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>unptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>start</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_ENDED</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(maxlen == 0 || (int)((ptr) - (const char *)start) &lt; maxlen))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>pre</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>negative</name> <init>= <expr><operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uvarnumber_T</name></type> <name>un</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>&amp;</operator> <name>STR2NR_FORCE</name></expr>)</condition> <block>{<block_content>


<switch>switch <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>what</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>STR2NR_FORCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STR2NR_HEX</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_ENDED</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>ascii_isxdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>vim_str2nr_hex</name>;</goto>
</block_content>}</block>
<case>case <expr><name>STR2NR_BIN</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_ENDED</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>ascii_isbdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>vim_str2nr_bin</name>;</goto>
</block_content>}</block>
<case>case <expr><name>STR2NR_OCT</name></expr>:</case> <block>{<block_content>
<goto>goto <name>vim_str2nr_oct</name>;</goto>
</block_content>}</block>
<case>case <expr><literal type="number">0</literal></expr>:</case> <block>{<block_content>
<goto>goto <name>vim_str2nr_dec</name>;</goto>
</block_content>}</block>
<default>default:</default> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <operator>(</operator><name>STR2NR_HEX</name><operator>|</operator><name>STR2NR_OCT</name><operator>|</operator><name>STR2NR_BIN</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>STRING_ENDED</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'8'</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pre</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_HEX</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>STRING_ENDED</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>pre</name> <operator>==</operator> <literal type="char">'X'</literal> <operator>||</operator> <name>pre</name> <operator>==</operator> <literal type="char">'x'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>ascii_isxdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>vim_str2nr_hex</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_BIN</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>STRING_ENDED</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>pre</name> <operator>==</operator> <literal type="char">'B'</literal> <operator>||</operator> <name>pre</name> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>ascii_isbdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>vim_str2nr_bin</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pre</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>STR2NR_OCT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>vim_str2nr_dec</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><operator>!</operator><call><name>STRING_ENDED</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'7'</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>vim_str2nr_dec</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>pre</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<goto>goto <name>vim_str2nr_oct</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>vim_str2nr_dec</name>;</goto>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_NUMBER</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>cond</name></type></parameter>, <parameter><type><name>conv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { while (!STRING_ENDED(ptr) &amp;&amp; (cond)) { if (un &lt; UVARNUMBER_MAX / base) { un = base * un + (uvarnumber_T)(conv); } else { un = UVARNUMBER_MAX; } ptr++; } } while (0)</cpp:value></cpp:define>











<switch>switch <condition>(<expr><name>pre</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><literal type="char">'B'</literal></expr>:</case> <block>{<block_content>
<label><name>vim_str2nr_bin</name>:</label>
<expr_stmt><expr><call><name>PARSE_NUMBER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'1'</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <block>{<block_content>
<label><name>vim_str2nr_oct</name>:</label>
<expr_stmt><expr><call><name>PARSE_NUMBER</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="char">'0'</literal> <operator>&lt;=</operator> <operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>&lt;=</operator> <literal type="char">'7'</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="number">0</literal></expr>:</case> <block>{<block_content>
<label><name>vim_str2nr_dec</name>:</label>
<expr_stmt><expr><call><name>PARSE_NUMBER</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case> <block>{<block_content>
<label><name>vim_str2nr_hex</name>:</label>
<expr_stmt><expr><call><name>PARSE_NUMBER</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>ascii_isxdigit</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><call><name>hex2nr</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PARSE_NUMBER</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name>prep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>prep</name> <operator>=</operator> <name>pre</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>start</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>un</name> <operator>&gt;</operator> <name>VARNUMBER_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nptr</name> <operator>=</operator> <name>VARNUMBER_MIN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nptr</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>un</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>un</name> <operator>&gt;</operator> <name>VARNUMBER_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>un</name> <operator>=</operator> <name>VARNUMBER_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>nptr</name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name>un</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>unptr</name> <operator>=</operator> <name>un</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STRING_ENDED</name></cpp:undef>
</block_content>}</block></function>
</unit>
