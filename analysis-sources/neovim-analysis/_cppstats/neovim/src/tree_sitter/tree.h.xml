<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\tree_sitter\tree.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>alias_symbol</name></decl>;</decl_stmt>

}</block></struct></type> <name>ParentCacheEntry</name>;</typedef>

<struct>struct <name>TSTree</name> <block>{

<decl_stmt><decl><type><name>Subtree</name></type> <name>root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ParentCacheEntry</name> <modifier>*</modifier></type><name>parent_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>parent_cache_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>parent_cache_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSRange</name> <modifier>*</modifier></type><name>included_ranges</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>included_range_count</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>TSTree</name> <modifier>*</modifier></type><name>ts_tree_new</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSRange</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>TSNode</name></type> <name>ts_node_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Length</name></type></decl></parameter>, <parameter><decl><type><name>TSSymbol</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>TSNode</name></type> <name>ts_tree_get_cached_parent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSNode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_tree_set_cached_parent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSNode</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSNode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
