<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\tree_sitter\unicode\utf8.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./umachine.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__UTF_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./utf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_COUNT_TRAIL_BYTES</name><parameter_list>(<parameter><type><name>leadByte</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(U8_IS_LEAD(leadByte) ? ((uint8_t)(leadByte)&gt;=0xe0)+((uint8_t)(leadByte)&gt;=0xf0)+1 : 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_COUNT_TRAIL_BYTES_UNSAFE</name><parameter_list>(<parameter><type><name>leadByte</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint8_t)(leadByte)&gt;=0xc2)+((uint8_t)(leadByte)&gt;=0xe0)+((uint8_t)(leadByte)&gt;=0xf0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_MASK_LEAD_BYTE</name><parameter_list>(<parameter><type><name>leadByte</name></type></parameter>, <parameter><type><name>countTrailBytes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((leadByte)&amp;=(1&lt;&lt;(6-(countTrailBytes)))-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_LEAD3_T1_BITS</name></cpp:macro> <cpp:value>"\x20\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x10\x30\x30"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_IS_VALID_LEAD3_AND_T1</name><parameter_list>(<parameter><type><name>lead</name></type></parameter>, <parameter><type><name>t1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(U8_LEAD3_T1_BITS[(lead)&amp;0xf]&amp;(1&lt;&lt;((uint8_t)(t1)&gt;&gt;5)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_LEAD4_T1_BITS</name></cpp:macro> <cpp:value>"\x00\x00\x00\x00\x00\x00\x00\x00\x1E\x0F\x0F\x0F\x00\x00\x00\x00"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_IS_VALID_LEAD4_AND_T1</name><parameter_list>(<parameter><type><name>lead</name></type></parameter>, <parameter><type><name>t1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(U8_LEAD4_T1_BITS[(uint8_t)(t1)&gt;&gt;4]&amp;(1&lt;&lt;((lead)&amp;7)))</cpp:value></cpp:define>

<function_decl><type><name>U_STABLE</name> <name>UChar32</name> <name>U_EXPORT2</name></type>

<name>utf8_nextCharSafeBody</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>UChar32</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>UBool</name></type> <name>strict</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>U_STABLE</name> <name>int32_t</name> <name>U_EXPORT2</name></type>

<name>utf8_appendCharSafeBody</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>UChar32</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>UBool</name> <modifier>*</modifier></type><name>pIsError</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>U_STABLE</name> <name>UChar32</name> <name>U_EXPORT2</name></type>

<name>utf8_prevCharSafeBody</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>UChar32</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>UBool</name></type> <name>strict</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>U_STABLE</name> <name>int32_t</name> <name>U_EXPORT2</name></type>

<name>utf8_back1SafeBody</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_IS_SINGLE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((c)&amp;0x80)==0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_IS_LEAD</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint8_t)((c)-0xc2)&lt;=0x32)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_IS_TRAIL</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int8_t)(c)&lt;-0x40)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_LENGTH</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(c)&lt;=0x7f ? 1 : ((uint32_t)(c)&lt;=0x7ff ? 2 : ((uint32_t)(c)&lt;=0xd7ff ? 3 : ((uint32_t)(c)&lt;=0xdfff || (uint32_t)(c)&gt;0x10ffff ? 0 : ((uint32_t)(c)&lt;=0xffff ? 3 : 4)) ) ) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_MAX_LENGTH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_GET_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { int32_t _u8_get_unsafe_index=(int32_t)(i); U8_SET_CP_START_UNSAFE(s, _u8_get_unsafe_index); U8_NEXT_UNSAFE(s, _u8_get_unsafe_index, c); } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_GET</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { int32_t _u8_get_index=(i); U8_SET_CP_START(s, start, _u8_get_index); U8_NEXT(s, _u8_get_index, length, c); } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_GET_OR_FFFD</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { int32_t _u8_get_index=(i); U8_SET_CP_START(s, start, _u8_get_index); U8_NEXT_OR_FFFD(s, _u8_get_index, length, c); } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_NEXT_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (c)=(uint8_t)(s)[(i)++]; if(!U8_IS_SINGLE(c)) { if((c)&lt;0xe0) { (c)=(((c)&amp;0x1f)&lt;&lt;6)|((s)[(i)++]&amp;0x3f); } else if((c)&lt;0xf0) { (c)=(UChar)(((c)&lt;&lt;12)|(((s)[i]&amp;0x3f)&lt;&lt;6)|((s)[(i)+1]&amp;0x3f)); (i)+=2; } else { (c)=(((c)&amp;7)&lt;&lt;18)|(((s)[i]&amp;0x3f)&lt;&lt;12)|(((s)[(i)+1]&amp;0x3f)&lt;&lt;6)|((s)[(i)+2]&amp;0x3f); (i)+=3; } } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_NEXT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>U8_INTERNAL_NEXT_OR_SUB(s, i, length, c, U_SENTINEL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_NEXT_OR_FFFD</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>U8_INTERNAL_NEXT_OR_SUB(s, i, length, c, 0xfffd)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_INTERNAL_NEXT_OR_SUB</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>sub</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (c)=(uint8_t)(s)[(i)++]; if(!U8_IS_SINGLE(c)) { uint8_t __t = 0; if((i)!=(length) &amp;&amp; ((c)&gt;=0xe0 ? ((c)&lt;0xf0 ? U8_LEAD3_T1_BITS[(c)&amp;=0xf]&amp;(1&lt;&lt;((__t=(s)[i])&gt;&gt;5)) &amp;&amp; (__t&amp;=0x3f, 1) : ((c)-=0xf0)&lt;=4 &amp;&amp; U8_LEAD4_T1_BITS[(__t=(s)[i])&gt;&gt;4]&amp;(1&lt;&lt;(c)) &amp;&amp; ((c)=((c)&lt;&lt;6)|(__t&amp;0x3f), ++(i)!=(length)) &amp;&amp; (__t=(s)[i]-0x80)&lt;=0x3f) &amp;&amp; ((c)=((c)&lt;&lt;6)|__t, ++(i)!=(length)) : (c)&gt;=0xc2 &amp;&amp; ((c)&amp;=0x1f, 1)) &amp;&amp; (__t=(s)[i]-0x80)&lt;=0x3f &amp;&amp; ((c)=((c)&lt;&lt;6)|__t, ++(i), 1)) { } else { (c)=(sub); } } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_APPEND_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { uint32_t __uc=(c); if(__uc&lt;=0x7f) { (s)[(i)++]=(uint8_t)__uc; } else { if(__uc&lt;=0x7ff) { (s)[(i)++]=(uint8_t)((__uc&gt;&gt;6)|0xc0); } else { if(__uc&lt;=0xffff) { (s)[(i)++]=(uint8_t)((__uc&gt;&gt;12)|0xe0); } else { (s)[(i)++]=(uint8_t)((__uc&gt;&gt;18)|0xf0); (s)[(i)++]=(uint8_t)(((__uc&gt;&gt;12)&amp;0x3f)|0x80); } (s)[(i)++]=(uint8_t)(((__uc&gt;&gt;6)&amp;0x3f)|0x80); } (s)[(i)++]=(uint8_t)((__uc&amp;0x3f)|0x80); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_APPEND</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>capacity</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>isError</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { uint32_t __uc=(c); if(__uc&lt;=0x7f) { (s)[(i)++]=(uint8_t)__uc; } else if(__uc&lt;=0x7ff &amp;&amp; (i)+1&lt;(capacity)) { (s)[(i)++]=(uint8_t)((__uc&gt;&gt;6)|0xc0); (s)[(i)++]=(uint8_t)((__uc&amp;0x3f)|0x80); } else if((__uc&lt;=0xd7ff || (0xe000&lt;=__uc &amp;&amp; __uc&lt;=0xffff)) &amp;&amp; (i)+2&lt;(capacity)) { (s)[(i)++]=(uint8_t)((__uc&gt;&gt;12)|0xe0); (s)[(i)++]=(uint8_t)(((__uc&gt;&gt;6)&amp;0x3f)|0x80); (s)[(i)++]=(uint8_t)((__uc&amp;0x3f)|0x80); } else if(0xffff&lt;__uc &amp;&amp; __uc&lt;=0x10ffff &amp;&amp; (i)+3&lt;(capacity)) { (s)[(i)++]=(uint8_t)((__uc&gt;&gt;18)|0xf0); (s)[(i)++]=(uint8_t)(((__uc&gt;&gt;12)&amp;0x3f)|0x80); (s)[(i)++]=(uint8_t)(((__uc&gt;&gt;6)&amp;0x3f)|0x80); (s)[(i)++]=(uint8_t)((__uc&amp;0x3f)|0x80); } else { (isError)=TRUE; } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_FWD_1_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (i)+=1+U8_COUNT_TRAIL_BYTES_UNSAFE((s)[i]); } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_FWD_1</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { uint8_t __b=(s)[(i)++]; if(U8_IS_LEAD(__b) &amp;&amp; (i)!=(length)) { uint8_t __t1=(s)[i]; if((0xe0&lt;=__b &amp;&amp; __b&lt;0xf0)) { if(U8_IS_VALID_LEAD3_AND_T1(__b, __t1) &amp;&amp; ++(i)!=(length) &amp;&amp; U8_IS_TRAIL((s)[i])) { ++(i); } } else if(__b&lt;0xe0) { if(U8_IS_TRAIL(__t1)) { ++(i); } } else { if(U8_IS_VALID_LEAD4_AND_T1(__b, __t1) &amp;&amp; ++(i)!=(length) &amp;&amp; U8_IS_TRAIL((s)[i]) &amp;&amp; ++(i)!=(length) &amp;&amp; U8_IS_TRAIL((s)[i])) { ++(i); } } } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_FWD_N_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { int32_t __N=(n); while(__N&gt;0) { U8_FWD_1_UNSAFE(s, i); --__N; } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_FWD_N</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { int32_t __N=(n); while(__N&gt;0 &amp;&amp; ((i)&lt;(length) || ((length)&lt;0 &amp;&amp; (s)[i]!=0))) { U8_FWD_1(s, i, length); --__N; } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_SET_CP_START_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { while(U8_IS_TRAIL((s)[i])) { --(i); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_SET_CP_START</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { if(U8_IS_TRAIL((s)[(i)])) { (i)=utf8_back1SafeBody(s, start, (i)); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_TRUNCATE_IF_INCOMPLETE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { if((length)&gt;(start)) { uint8_t __b1=s[(length)-1]; if(U8_IS_SINGLE(__b1)) { } else if(U8_IS_LEAD(__b1)) { --(length); } else if(U8_IS_TRAIL(__b1) &amp;&amp; ((length)-2)&gt;=(start)) { uint8_t __b2=s[(length)-2]; if(0xe0&lt;=__b2 &amp;&amp; __b2&lt;=0xf4) { if(__b2&lt;0xf0 ? U8_IS_VALID_LEAD3_AND_T1(__b2, __b1) : U8_IS_VALID_LEAD4_AND_T1(__b2, __b1)) { (length)-=2; } } else if(U8_IS_TRAIL(__b2) &amp;&amp; ((length)-3)&gt;=(start)) { uint8_t __b3=s[(length)-3]; if(0xf0&lt;=__b3 &amp;&amp; __b3&lt;=0xf4 &amp;&amp; U8_IS_VALID_LEAD4_AND_T1(__b3, __b2)) { (length)-=3; } } } } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_PREV_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (c)=(uint8_t)(s)[--(i)]; if(U8_IS_TRAIL(c)) { uint8_t __b, __count=1, __shift=6; (c)&amp;=0x3f; for(;;) { __b=(s)[--(i)]; if(__b&gt;=0xc0) { U8_MASK_LEAD_BYTE(__b, __count); (c)|=(UChar32)__b&lt;&lt;__shift; break; } else { (c)|=(UChar32)(__b&amp;0x3f)&lt;&lt;__shift; ++__count; __shift+=6; } } } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_PREV</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (c)=(uint8_t)(s)[--(i)]; if(!U8_IS_SINGLE(c)) { (c)=utf8_prevCharSafeBody((const uint8_t *)s, start, &amp;(i), c, -1); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_PREV_OR_FFFD</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { (c)=(uint8_t)(s)[--(i)]; if(!U8_IS_SINGLE(c)) { (c)=utf8_prevCharSafeBody((const uint8_t *)s, start, &amp;(i), c, -3); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_BACK_1_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { while(U8_IS_TRAIL((s)[--(i)])) {} } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_BACK_1</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { if(U8_IS_TRAIL((s)[--(i)])) { (i)=utf8_back1SafeBody(s, start, (i)); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_BACK_N_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { int32_t __N=(n); while(__N&gt;0) { U8_BACK_1_UNSAFE(s, i); --__N; } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_BACK_N</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { int32_t __N=(n); while(__N&gt;0 &amp;&amp; (i)&gt;(start)) { U8_BACK_1(s, start, i); --__N; } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_SET_CP_LIMIT_UNSAFE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { U8_BACK_1_UNSAFE(s, i); U8_FWD_1_UNSAFE(s, i); } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8_SET_CP_LIMIT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPRV_BLOCK_MACRO_BEGIN { if((start)&lt;(i) &amp;&amp; ((i)&lt;(length) || (length)&lt;0)) { U8_BACK_1(s, start, i); U8_FWD_1(s, i, length); } } UPRV_BLOCK_MACRO_END</cpp:value></cpp:define>

</unit>
