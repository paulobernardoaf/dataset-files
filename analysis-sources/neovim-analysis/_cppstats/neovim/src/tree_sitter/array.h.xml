<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\tree_sitter\array.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./alloc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Array</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { T *contents; uint32_t size; uint32_t capacity; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_init</name><parameter_list>(<parameter><type><name>self</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((self)-&gt;size = 0, (self)-&gt;capacity = 0, (self)-&gt;contents = NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_new</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ NULL, 0, 0 }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_get</name><parameter_list>(<parameter><type><name>self</name></type></parameter>, <parameter><type><name>index</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(assert((uint32_t)index &lt; (self)-&gt;size), &amp;(self)-&gt;contents[index])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_front</name><parameter_list>(<parameter><type><name>self</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>array_get(self, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_back</name><parameter_list>(<parameter><type><name>self</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>array_get(self, (self)-&gt;size - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_clear</name><parameter_list>(<parameter><type><name>self</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((self)-&gt;size = 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_reserve</name><parameter_list>(<parameter><type><name>self</name></type></parameter>, <parameter><type><name>new_capacity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>array__reserve((VoidArray *)(self), array__elem_size(self), new_capacity)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_erase</name><parameter_list>(<parameter><type><name>self</name></type></parameter>, <parameter><type><name>index</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>array__erase((VoidArray *)(self), array__elem_size(self), index)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_delete</name><parameter_list>(<parameter><type><name>self</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>array__delete((VoidArray *)self)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_push</name><parameter_list>(<parameter><type><name>self</name></type></parameter>, <parameter><type><name>element</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(array__grow((VoidArray *)(self), 1, array__elem_size(self)), (self)-&gt;contents[(self)-&gt;size++] = (element))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_grow_by</name><parameter_list>(<parameter><type><name>self</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(array__grow((VoidArray *)(self), count, array__elem_size(self)), memset((self)-&gt;contents + (self)-&gt;size, 0, (count) * array__elem_size(self)), (self)-&gt;size += (count))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_push_all</name><parameter_list>(<parameter><type><name>self</name></type></parameter>, <parameter><type><name>other</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>array_splice((self), (self)-&gt;size, 0, (other)-&gt;size, (other)-&gt;contents)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_splice</name><parameter_list>(<parameter><type><name>self</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>old_count</name></type></parameter>, <parameter><type><name>new_count</name></type></parameter>, <parameter><type><name>new_contents</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>array__splice((VoidArray *)(self), array__elem_size(self), index, old_count, new_count, new_contents)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_insert</name><parameter_list>(<parameter><type><name>self</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>element</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>array__splice((VoidArray *)(self), array__elem_size(self), index, 0, 1, &amp;element)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_pop</name><parameter_list>(<parameter><type><name>self</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((self)-&gt;contents[--(self)-&gt;size])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_assign</name><parameter_list>(<parameter><type><name>self</name></type></parameter>, <parameter><type><name>other</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>array__assign((VoidArray *)(self), (const VoidArray *)(other), array__elem_size(self))</cpp:value></cpp:define>

<typedef>typedef <macro><name>Array</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><name>VoidArray</name></expr>;</expr_stmt></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array__elem_size</name><parameter_list>(<parameter><type><name>self</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sizeof(*(self)-&gt;contents)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>array__delete</name><parameter_list>(<parameter><decl><type><name>VoidArray</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>ts_free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>contents</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>array__erase</name><parameter_list>(<parameter><decl><type><name>VoidArray</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contents</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>contents</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>contents</name> <operator>+</operator> <name>index</name> <operator>*</operator> <name>element_size</name></expr></argument>, <argument><expr><name>contents</name> <operator>+</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>element_size</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>index</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>array__reserve</name><parameter_list>(<parameter><decl><type><name>VoidArray</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>element_size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>new_capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_capacity</name> <operator>&gt;</operator> <name><name>self</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>contents</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>contents</name></name> <operator>=</operator> <call><name>ts_realloc</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><name>new_capacity</name> <operator>*</operator> <name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>contents</name></name> <operator>=</operator> <call><name>ts_calloc</name><argument_list>(<argument><expr><name>new_capacity</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>new_capacity</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>array__assign</name><parameter_list>(<parameter><decl><type><name>VoidArray</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VoidArray</name> <modifier>*</modifier></type><name>other</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>element_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>array__reserve</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>, <argument><expr><name><name>other</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>other</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <name>element_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>array__grow</name><parameter_list>(<parameter><decl><type><name>VoidArray</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>element_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>count</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&gt;</operator> <name><name>self</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_capacity</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_capacity</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>new_capacity</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_capacity</name> <operator>&lt;</operator> <name>new_size</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>new_capacity</name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>array__reserve</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>new_capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>array__splice</name><parameter_list>(<parameter><decl><type><name>VoidArray</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>element_size</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>old_count</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>new_count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>elements</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_size</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>new_count</name> <operator>-</operator> <name>old_count</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>old_end</name> <init>= <expr><name>index</name> <operator>+</operator> <name>old_count</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_end</name> <init>= <expr><name>index</name> <operator>+</operator> <name>new_count</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>old_end</name> <operator>&lt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array__reserve</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contents</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>contents</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>old_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(

<argument><expr><name>contents</name> <operator>+</operator> <name>new_end</name> <operator>*</operator> <name>element_size</name></expr></argument>,

<argument><expr><name>contents</name> <operator>+</operator> <name>old_end</name> <operator>*</operator> <name>element_size</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>old_end</name><operator>)</operator> <operator>*</operator> <name>element_size</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>elements</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(

<argument><expr><operator>(</operator><name>contents</name> <operator>+</operator> <name>index</name> <operator>*</operator> <name>element_size</name><operator>)</operator></expr></argument>,

<argument><expr><name>elements</name></expr></argument>,

<argument><expr><name>new_count</name> <operator>*</operator> <name>element_size</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(

<argument><expr><operator>(</operator><name>contents</name> <operator>+</operator> <name>index</name> <operator>*</operator> <name>element_size</name><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>new_count</name> <operator>*</operator> <name>element_size</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>new_count</name> <operator>-</operator> <name>old_count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
