<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\tree_sitter\subtree.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./length.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./array.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./error_costs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree_sitter/api.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree_sitter/parser.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TSStateId</name></type> <name>TS_TREE_STATE_NONE</name> <init>= <expr><name>USHRT_MAX</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL_SUBTREE</name></cpp:macro> <cpp:value>((Subtree) {.ptr = NULL})</cpp:value></cpp:define>

<typedef>typedef <type><name><name>union</name> <name>Subtree</name></name></type> <name>Subtree</name>;</typedef>

<typedef>typedef <type><name><name>union</name> <name>MutableSubtree</name></name></type> <name>MutableSubtree</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<union>union <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>long_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>short_data</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</union>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name></decl>;</decl_stmt>

}</block></struct></type> <name>ExternalScannerState</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>is_inline</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>visible</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>named</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>extra</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_changes</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_missing</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_keyword</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>symbol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>padding_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>size_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>padding_columns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>padding_rows</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>lookahead_bytes</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>parse_state</name></decl>;</decl_stmt>

}</block></struct></type> <name>SubtreeInlineData</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>volatile</specifier> <name>uint32_t</name></type> <name>ref_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>padding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>lookahead_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>error_cost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>child_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSStateId</name></type> <name>parse_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>visible</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>named</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>extra</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fragile_left</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fragile_right</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_changes</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_external_tokens</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_missing</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_keyword</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>Subtree</name> <modifier>*</modifier></type><name>children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>visible_child_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>named_child_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>node_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>repeat_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>dynamic_precedence</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>production_id</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSStateId</name></type> <name>parse_state</name></decl>;</decl_stmt>

}</block> <decl><name>first_leaf</name></decl>;</struct>

}</block>;</struct>

<decl_stmt><decl><type><name>ExternalScannerState</name></type> <name>external_scanner_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>lookahead_char</name></decl>;</decl_stmt>

}</block>;</union>

}</block></struct></type> <name>SubtreeHeapData</name>;</typedef>

<union>union <name>Subtree</name> <block>{

<decl_stmt><decl><type><name>SubtreeInlineData</name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SubtreeHeapData</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

}</block>;</union>

<union>union <name>MutableSubtree</name> <block>{

<decl_stmt><decl><type><name>SubtreeInlineData</name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SubtreeHeapData</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

}</block>;</union>

<typedef>typedef <macro><name>Array</name><argument_list>(<argument>Subtree</argument>)</argument_list></macro> <expr_stmt><expr><name>SubtreeArray</name></expr>;</expr_stmt></typedef>

<typedef>typedef <macro><name>Array</name><argument_list>(<argument>MutableSubtree</argument>)</argument_list></macro> <expr_stmt><expr><name>MutableSubtreeArray</name></expr>;</expr_stmt></typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>MutableSubtreeArray</name></type> <name>free_trees</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MutableSubtreeArray</name></type> <name>tree_stack</name></decl>;</decl_stmt>

}</block></struct></type> <name>SubtreePool</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ts_external_scanner_state_init</name><parameter_list>(<parameter><decl><type><name>ExternalScannerState</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ts_external_scanner_state_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExternalScannerState</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_subtree_array_copy</name><parameter_list>(<parameter><decl><type><name>SubtreeArray</name></type></decl></parameter>, <parameter><decl><type><name>SubtreeArray</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_subtree_array_delete</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>SubtreeArray</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SubtreeArray</name></type> <name>ts_subtree_array_remove_trailing_extras</name><parameter_list>(<parameter><decl><type><name>SubtreeArray</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_subtree_array_reverse</name><parameter_list>(<parameter><decl><type><name>SubtreeArray</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SubtreePool</name></type> <name>ts_subtree_pool_new</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_subtree_pool_delete</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Subtree</name></type> <name>ts_subtree_new_leaf</name><parameter_list>(

<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>TSSymbol</name></type></decl></parameter>, <parameter><decl><type><name>Length</name></type></decl></parameter>, <parameter><decl><type><name>Length</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>,

<parameter><decl><type><name>TSStateId</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type></decl></parameter>

)</parameter_list>;</function_decl>

<function_decl><type><name>Subtree</name></type> <name>ts_subtree_new_error</name><parameter_list>(

<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int32_t</name></type></decl></parameter>, <parameter><decl><type><name>Length</name></type></decl></parameter>, <parameter><decl><type><name>Length</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>TSStateId</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type></decl></parameter>

)</parameter_list>;</function_decl>

<function_decl><type><name>MutableSubtree</name></type> <name>ts_subtree_new_node</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>TSSymbol</name></type></decl></parameter>, <parameter><decl><type><name>SubtreeArray</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Subtree</name></type> <name>ts_subtree_new_error_node</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>SubtreeArray</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Subtree</name></type> <name>ts_subtree_new_missing_leaf</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>TSSymbol</name></type></decl></parameter>, <parameter><decl><type><name>Length</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>MutableSubtree</name></type> <name>ts_subtree_make_mut</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Subtree</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_subtree_retain</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_subtree_release</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Subtree</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ts_subtree_eq</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type></decl></parameter>, <parameter><decl><type><name>Subtree</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ts_subtree_compare</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type></decl></parameter>, <parameter><decl><type><name>Subtree</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_subtree_set_symbol</name><parameter_list>(<parameter><decl><type><name>MutableSubtree</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>TSSymbol</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_subtree_set_children</name><parameter_list>(<parameter><decl><type><name>MutableSubtree</name></type></decl></parameter>, <parameter><decl><type><name>Subtree</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_subtree_balance</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type></decl></parameter>, <parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Subtree</name></type> <name>ts_subtree_edit</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSInputEdit</name> <modifier>*</modifier></type><name>edit</name></decl></parameter>, <parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ts_subtree_string</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>include_all</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_subtree_print_dot_graph</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Subtree</name></type> <name>ts_subtree_last_external_token</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ts_subtree_external_scanner_state_eq</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type></decl></parameter>, <parameter><decl><type><name>Subtree</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBTREE_GET</name><parameter_list>(<parameter><type><name>self</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(self.data.is_inline ? self.data.name : self.ptr-&gt;name)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSSymbol</name></type> <name>ts_subtree_symbol</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SUBTREE_GET</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_subtree_visible</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SUBTREE_GET</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_subtree_named</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SUBTREE_GET</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>named</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_subtree_extra</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SUBTREE_GET</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_subtree_has_changes</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SUBTREE_GET</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>has_changes</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_subtree_missing</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SUBTREE_GET</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>is_missing</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_subtree_is_keyword</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SUBTREE_GET</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>is_keyword</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSStateId</name></type> <name>ts_subtree_parse_state</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SUBTREE_GET</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>parse_state</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>ts_subtree_lookahead_bytes</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SUBTREE_GET</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>lookahead_bytes</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SUBTREE_GET</name></cpp:undef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ts_subtree_set_extra</name><parameter_list>(<parameter><decl><type><name>MutableSubtree</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>extra</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSSymbol</name></type> <name>ts_subtree_leaf_symbol</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>symbol</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>symbol</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>first_leaf</name><operator>.</operator><name>symbol</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSStateId</name></type> <name>ts_subtree_leaf_parse_state</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>parse_state</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>parse_state</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>first_leaf</name><operator>.</operator><name>parse_state</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Length</name></type> <name>ts_subtree_padding</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Length</name></type> <name>result</name> <init>= <expr><block>{<expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>padding_bytes</name></name></expr>, <expr><block>{<expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>padding_rows</name></name></expr>, <expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>padding_columns</name></name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>padding</name></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Length</name></type> <name>ts_subtree_size</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Length</name></type> <name>result</name> <init>= <expr><block>{<expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>size_bytes</name></name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>size_bytes</name></name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Length</name></type> <name>ts_subtree_total_size</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>length_add</name><argument_list>(<argument><expr><call><name>ts_subtree_padding</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ts_subtree_size</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>ts_subtree_total_bytes</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_subtree_total_size</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>ts_subtree_child_count</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>ts_subtree_repeat_depth</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>repeat_depth</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>ts_subtree_node_count</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name> <operator>||</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>node_count</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>ts_subtree_visible_child_count</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>visible_child_count</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>ts_subtree_error_cost</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_missing</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ERROR_COST_PER_MISSING_TREE</name> <operator>+</operator> <name>ERROR_COST_PER_RECOVERY</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>error_cost</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>ts_subtree_dynamic_precedence</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name> <operator>||</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>dynamic_precedence</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>ts_subtree_production_id</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_subtree_fragile_left</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>fragile_left</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_subtree_fragile_right</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>fragile_right</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_subtree_has_external_tokens</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>has_external_tokens</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_subtree_is_fragile</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>self</name><operator>.</operator><name>data</name><operator>.</operator><name>is_inline</name></name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><operator>(</operator><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>fragile_left</name></name> <operator>||</operator> <name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>fragile_right</name></name><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_subtree_is_error</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ts_builtin_sym_error</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_subtree_is_eof</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ts_builtin_sym_end</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Subtree</name></type> <name>ts_subtree_from_mut</name><parameter_list>(<parameter><decl><type><name>MutableSubtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Subtree</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>self</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>MutableSubtree</name></type> <name>ts_subtree_to_mut_unsafe</name><parameter_list>(<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>MutableSubtree</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>self</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
