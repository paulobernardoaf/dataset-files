<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\tree_sitter\language.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./subtree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree_sitter/parser.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ts_builtin_sym_error_repeat</name></cpp:macro> <cpp:value>(ts_builtin_sym_error - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_SITTER_LANGUAGE_VERSION_WITH_FIELDS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_SITTER_LANGUAGE_VERSION_WITH_SYMBOL_DEDUPING</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_SITTER_LANGUAGE_VERSION_WITH_SMALL_STATES</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>TSParseAction</name> <modifier>*</modifier></type><name>actions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>action_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_reusable</name></decl>;</decl_stmt>

}</block></struct></type> <name>TableEntry</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ts_language_table_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>TSStateId</name></type></decl></parameter>, <parameter><decl><type><name>TSSymbol</name></type></decl></parameter>, <parameter><decl><type><name>TableEntry</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>TSSymbolMetadata</name></type> <name>ts_language_symbol_metadata</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>TSSymbol</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>TSSymbol</name></type> <name>ts_language_public_symbol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>TSSymbol</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_language_is_symbol_external</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><literal type="number">0</literal> <operator>&lt;</operator> <name>symbol</name> <operator>&amp;&amp;</operator> <name>symbol</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>external_token_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>TSParseAction</name> <modifier>*</modifier></type><name>ts_language_actions</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>TSStateId</name></type> <name>state</name></decl></parameter>,

<parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TableEntry</name></type> <name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ts_language_table_entry</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>action_count</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>entry</name><operator>.</operator><name>actions</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_language_has_actions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>TSStateId</name></type> <name>state</name></decl></parameter>,

<parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TableEntry</name></type> <name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ts_language_table_entry</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>entry</name><operator>.</operator><name>action_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_language_has_reduce_action</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>TSStateId</name></type> <name>state</name></decl></parameter>,

<parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TableEntry</name></type> <name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ts_language_table_entry</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>entry</name><operator>.</operator><name>action_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>.</operator><name>actions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSParseActionTypeReduce</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>ts_language_lookup</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>TSStateId</name></type> <name>state</name></decl></parameter>,

<parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(

<expr><name><name>self</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name>TREE_SITTER_LANGUAGE_VERSION_WITH_SMALL_STATES</name> <operator>&amp;&amp;</operator>

<name>state</name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>large_state_count</name></name></expr>

)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>small_parse_table_map</name><index>[<expr><name>state</name> <operator>-</operator> <name><name>self</name><operator>-&gt;</operator><name>large_state_count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>small_parse_table</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>section_count</name> <init>= <expr><operator>*</operator><operator>(</operator><name>data</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>section_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>section_value</name> <init>= <expr><operator>*</operator><operator>(</operator><name>data</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>symbol_count</name> <init>= <expr><operator>*</operator><operator>(</operator><name>data</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>symbol_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>data</name><operator>++</operator><operator>)</operator> <operator>==</operator> <name>symbol</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>section_value</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>parse_table</name><index>[<expr><name>state</name> <operator>*</operator> <name><name>self</name><operator>-&gt;</operator><name>symbol_count</name></name> <operator>+</operator> <name>symbol</name></expr>]</index></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSStateId</name></type> <name>ts_language_next_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>TSStateId</name></type> <name>state</name></decl></parameter>,

<parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>symbol</name> <operator>==</operator> <name>ts_builtin_sym_error</name> <operator>||</operator> <name>symbol</name> <operator>==</operator> <name>ts_builtin_sym_error_repeat</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>symbol</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>token_count</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSParseAction</name> <modifier>*</modifier></type><name>actions</name> <init>= <expr><call><name>ts_language_actions</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>TSParseAction</name></type> <name>action</name> <init>= <expr><name><name>actions</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>action</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSParseActionTypeShift</name></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>extra</name></name></expr> ?</condition><then> <expr><name>state</name></expr> </then><else>: <expr><name><name>action</name><operator>.</operator><name>params</name><operator>.</operator><name>state</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>ts_language_lookup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>bool</name> <modifier>*</modifier></type>

<name>ts_language_enabled_external_tokens</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>external_scanner_state</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>external_scanner_state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>external_scanner</name><operator>.</operator><name>states</name></name> <operator>+</operator> <name><name>self</name><operator>-&gt;</operator><name>external_token_count</name></name> <operator>*</operator> <name>external_scanner_state</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>TSSymbol</name> <modifier>*</modifier></type>

<name>ts_language_alias_sequence</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>production_id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>production_id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>

<expr><name><name>self</name><operator>-&gt;</operator><name>alias_sequences</name></name> <operator>+</operator> <name>production_id</name> <operator>*</operator> <name><name>self</name><operator>-&gt;</operator><name>max_alias_sequence_length</name></name></expr> </then><else>:

<expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ts_language_field_map</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>production_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>TSFieldMapEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>start</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>TSFieldMapEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <name>TREE_SITTER_LANGUAGE_VERSION_WITH_FIELDS</name> <operator>||</operator> <name><name>self</name><operator>-&gt;</operator><name>field_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>TSFieldMapSlice</name></type> <name>slice</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>field_map_slices</name><index>[<expr><name>production_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>field_map_entries</name><index>[<expr><name><name>slice</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>field_map_entries</name><index>[<expr><name><name>slice</name><operator>.</operator><name>index</name></name></expr>]</index></name> <operator>+</operator> <name><name>slice</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
