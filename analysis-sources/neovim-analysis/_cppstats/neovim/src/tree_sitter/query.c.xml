<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\tree_sitter\query.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree_sitter/api.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./alloc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./array.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./language.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./point.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./tree_cursor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./unicode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wctype.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>next_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>Stream</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STEP_CAPTURE_COUNT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSFieldId</name></type> <name>field</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>capture_ids</name><index>[<expr><name>MAX_STEP_CAPTURE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>depth</name><range>: <expr><literal type="number">13</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>contains_captures</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_immediate</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_last</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block></struct></type> <name>QueryStep</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name></decl>;</decl_stmt>

}</block></struct></type> <name>Slice</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<macro><name>Array</name><argument_list>(<argument>char</argument>)</argument_list></macro> <expr_stmt><expr><name>characters</name></expr>;</expr_stmt>

<macro><name>Array</name><argument_list>(<argument>Slice</argument>)</argument_list></macro> <expr_stmt><expr><name>slices</name></expr>;</expr_stmt>

}</block></struct></type> <name>SymbolTable</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>step_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>pattern_index</name></decl>;</decl_stmt>

}</block></struct></type> <name>PatternEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>start_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>pattern_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>step_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>capture_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>capture_list_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>consumed_capture_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>id</name></decl>;</decl_stmt>

}</block></struct></type> <name>QueryState</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<macro><name>Array</name><argument_list>(<argument>TSQueryCapture</argument>)</argument_list></macro> <expr_stmt><expr><name>list</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>usage_map</name></decl>;</decl_stmt>

}</block></struct></type> <name>CaptureListPool</name>;</typedef>

<struct>struct <name>TSQuery</name> <block>{

<decl_stmt><decl><type><name>SymbolTable</name></type> <name>captures</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SymbolTable</name></type> <name>predicate_values</name></decl>;</decl_stmt>

<macro><name>Array</name><argument_list>(<argument>QueryStep</argument>)</argument_list></macro> <expr_stmt><expr><name>steps</name></expr>;</expr_stmt>

<macro><name>Array</name><argument_list>(<argument>PatternEntry</argument>)</argument_list></macro> <expr_stmt><expr><name>pattern_map</name></expr>;</expr_stmt>

<macro><name>Array</name><argument_list>(<argument>TSQueryPredicateStep</argument>)</argument_list></macro> <expr_stmt><expr><name>predicate_steps</name></expr>;</expr_stmt>

<macro><name>Array</name><argument_list>(<argument>Slice</argument>)</argument_list></macro> <expr_stmt><expr><name>predicates_by_pattern</name></expr>;</expr_stmt>

<macro><name>Array</name><argument_list>(<argument>uint32_t</argument>)</argument_list></macro> <expr_stmt><expr><name>start_bytes_by_pattern</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>max_capture_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>wildcard_root_pattern_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSSymbol</name> <modifier>*</modifier></type><name>symbol_map</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>TSQueryCursor</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>TSQuery</name> <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSTreeCursor</name></type> <name>cursor</name></decl>;</decl_stmt>

<macro><name>Array</name><argument_list>(<argument>QueryState</argument>)</argument_list></macro> <expr_stmt><expr><name>states</name></expr>;</expr_stmt>

<macro><name>Array</name><argument_list>(<argument>QueryState</argument>)</argument_list></macro> <expr_stmt><expr><name>finished_states</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CaptureListPool</name></type> <name>capture_list_pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>start_byte</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>end_byte</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>next_state_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSPoint</name></type> <name>start_point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSPoint</name></type> <name>end_point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ascending</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TSQueryError</name></type> <name>PARENT_DONE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name>PATTERN_DONE_MARKER</name> <init>= <expr><name>UINT8_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name>NONE</name> <init>= <expr><name>UINT16_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TSSymbol</name></type> <name>WILDCARD_SYMBOL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TSSymbol</name></type> <name>NAMED_WILDCARD_SYMBOL</name> <init>= <expr><name>UINT16_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name>MAX_STATE_COUNT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>stream_advance</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>input</name></name> <operator>+=</operator> <name><name>self</name><operator>-&gt;</operator><name>next_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>input</name></name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name> <init>= <expr><call><name>ts_decode_utf8</name><argument_list>(

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>input</name></name></expr></argument>,

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>self</name><operator>-&gt;</operator><name>input</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>next</name></name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>next_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>next_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_reset</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>next_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Stream</name></type> <name>stream_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Stream</name></type> <name>self</name> <init>= <expr><block>{

<expr><operator>.</operator><name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>input</name> <operator>=</operator> <name>string</name></expr>,

<expr><operator>.</operator><name>end</name> <operator>=</operator> <name>string</name> <operator>+</operator> <name>length</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_skip_whitespace</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>iswspace</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>stream_is_ident_start</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>iswalnum</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'-'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_scan_identifier</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(

<expr><call><name>iswalnum</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator>

<name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator>

<name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator>

<name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator>

<name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'!'</literal></expr>

)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CaptureListPool</name></type> <name>capture_list_pool_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>CaptureListPool</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>list</name> <operator>=</operator> <call><name>array_new</name><argument_list>()</argument_list></call></expr>,

<expr><operator>.</operator><name>usage_map</name> <operator>=</operator> <name>UINT32_MAX</name></expr>,

}</block></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>capture_list_pool_reset</name><parameter_list>(<parameter><decl><type><name>CaptureListPool</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>list_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>usage_map</name></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>total_size</name> <init>= <expr><name>MAX_STATE_COUNT</name> <operator>*</operator> <name>list_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>array_reserve</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>total_size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>capture_list_pool_delete</name><parameter_list>(<parameter><decl><type><name>CaptureListPool</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TSQueryCapture</name> <modifier>*</modifier></type><name>capture_list_pool_get</name><parameter_list>(<parameter><decl><type><name>CaptureListPool</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>contents</name><index>[<expr><name>id</name> <operator>*</operator> <operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>size</name></name> <operator>/</operator> <name>MAX_STATE_COUNT</name><operator>)</operator></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>capture_list_pool_is_empty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CaptureListPool</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>usage_map</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>capture_list_pool_acquire</name><parameter_list>(<parameter><decl><type><name>CaptureListPool</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>id</name> <init>= <expr><call><name>count_leading_zeros</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>usage_map</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NONE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>usage_map</name></name> <operator>&amp;=</operator> <operator>~</operator><call><name>bitmask_for_index</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>id</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>capture_list_pool_release</name><parameter_list>(<parameter><decl><type><name>CaptureListPool</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>usage_map</name></name> <operator>|=</operator> <call><name>bitmask_for_index</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SymbolTable</name></type> <name>symbol_table_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>SymbolTable</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>characters</name> <operator>=</operator> <call><name>array_new</name><argument_list>()</argument_list></call></expr>,

<expr><operator>.</operator><name>slices</name> <operator>=</operator> <call><name>array_new</name><argument_list>()</argument_list></call></expr>,

}</block></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>symbol_table_delete</name><parameter_list>(<parameter><decl><type><name>SymbolTable</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>characters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>symbol_table_id_for_name</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>SymbolTable</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>slices</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Slice</name></type> <name>slice</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>slices</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(

<expr><name><name>slice</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name>length</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>characters</name><operator>.</operator><name>contents</name><index>[<expr><name><name>slice</name><operator>.</operator><name>offset</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>

)</condition><block type="pseudo"><block_content> <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symbol_table_name_for_id</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>SymbolTable</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>length</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Slice</name></type> <name>slice</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>slices</name><operator>.</operator><name>contents</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name><name>slice</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>characters</name><operator>.</operator><name>contents</name><index>[<expr><name><name>slice</name><operator>.</operator><name>offset</name></name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>symbol_table_insert_name</name><parameter_list>(

<parameter><decl><type><name>SymbolTable</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>symbol_table_id_for_name</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>id</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Slice</name></type> <name>slice</name> <init>= <expr><block>{

<expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>characters</name><operator>.</operator><name>size</name></name></expr>,

<expr><operator>.</operator><name>length</name> <operator>=</operator> <name>length</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>array_grow_by</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>characters</name></name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>characters</name><operator>.</operator><name>contents</name><index>[<expr><name><name>slice</name><operator>.</operator><name>offset</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>characters</name><operator>.</operator><name>contents</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>characters</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>slices</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>QueryStep</name></type> <name>query_step__new</name><parameter_list>(

<parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>depth</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_immediate</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>QueryStep</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>symbol</name> <operator>=</operator> <name>symbol</name></expr>,

<expr><operator>.</operator><name>depth</name> <operator>=</operator> <name>depth</name></expr>,

<expr><operator>.</operator><name>field</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>capture_ids</name> <operator>=</operator> <block>{<expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>}</block></expr>,

<expr><operator>.</operator><name>contains_captures</name> <operator>=</operator> <name>false</name></expr>,

<expr><operator>.</operator><name>is_immediate</name> <operator>=</operator> <name>is_immediate</name></expr>,

}</block></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>query_step__add_capture</name><parameter_list>(<parameter><decl><type><name>QueryStep</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>capture_id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_STEP_CAPTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>capture_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>capture_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>capture_id</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>query_step__remove_capture</name><parameter_list>(<parameter><decl><type><name>QueryStep</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>capture_id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_STEP_CAPTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>capture_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>capture_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>capture_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NONE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>MAX_STEP_CAPTURE_COUNT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>capture_ids</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NONE</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>capture_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>capture_ids</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>capture_ids</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_query__pattern_map_search</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>TSSymbol</name></type> <name>needle</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>base_index</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>wildcard_root_pattern_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>pattern_map</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name>base_index</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>base_index</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>half_size</name> <init>= <expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mid_index</name> <init>= <expr><name>base_index</name> <operator>+</operator> <name>half_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>mid_symbol</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[

<expr><name><name>self</name><operator>-&gt;</operator><name>pattern_map</name><operator>.</operator><name>contents</name><index>[<expr><name>mid_index</name></expr>]</index></name><operator>.</operator><name>step_index</name></expr>

]</index></name><operator>.</operator><name>symbol</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>needle</name> <operator>&gt;</operator> <name>mid_symbol</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>base_index</name> <operator>=</operator> <name>mid_index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>half_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>symbol</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[

<expr><name><name>self</name><operator>-&gt;</operator><name>pattern_map</name><operator>.</operator><name>contents</name><index>[<expr><name>base_index</name></expr>]</index></name><operator>.</operator><name>step_index</name></expr>

]</index></name><operator>.</operator><name>symbol</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>needle</name> <operator>&gt;</operator> <name>symbol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base_index</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>base_index</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>pattern_map</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[

<expr><name><name>self</name><operator>-&gt;</operator><name>pattern_map</name><operator>.</operator><name>contents</name><index>[<expr><name>base_index</name></expr>]</index></name><operator>.</operator><name>step_index</name></expr>

]</index></name><operator>.</operator><name>symbol</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>base_index</name></expr>;</expr_stmt>

<return>return <expr><name>needle</name> <operator>==</operator> <name>symbol</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ts_query__pattern_map_insert</name><parameter_list>(

<parameter><decl><type><name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>start_step_index</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ts_query__pattern_map_search</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>array_insert</name><argument_list>(<argument>&amp;self-&gt;pattern_map</argument>, <argument>index</argument>, <argument>((PatternEntry) {

.step_index = start_step_index,

.pattern_index = self-&gt;pattern_map.size,

})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_query__finalize_steps</name><parameter_list>(<parameter><decl><type><name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>QueryStep</name> <modifier>*</modifier></type><name>step</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>depth</name> <init>= <expr><name><name>step</name><operator>-&gt;</operator><name>depth</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>step</name><operator>-&gt;</operator><name>capture_ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>step</name><operator>-&gt;</operator><name>contains_captures</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>step</name><operator>-&gt;</operator><name>contains_captures</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>QueryStep</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>PATTERN_DONE_MARKER</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <name>depth</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>capture_ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NONE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>step</name><operator>-&gt;</operator><name>contains_captures</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TSQueryError</name></type> <name>ts_query__parse_predicate</name><parameter_list>(

<parameter><decl><type><name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PARENT_DONE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSQueryErrorSyntax</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_skip_whitespace</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>step_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_skip_whitespace</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>predicates_by_pattern</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>length</name><operator>++</operator></expr>;</expr_stmt>

<macro><name>array_push</name><argument_list>(<argument>&amp;self-&gt;predicate_steps</argument>, <argument>((TSQueryPredicateStep) {

.type = TSQueryPredicateStepTypeDone,

.value_id = <literal type="number">0</literal>,

})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stream_is_ident_start</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSQueryErrorSyntax</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>capture_name</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stream_scan_identifier</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name> <operator>-</operator> <name>capture_name</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>capture_id</name> <init>= <expr><call><name>symbol_table_id_for_name</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>captures</name></name></expr></argument>,

<argument><expr><name>capture_name</name></expr></argument>,

<argument><expr><name>length</name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>capture_id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_reset</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>capture_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TSQueryErrorCapture</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>predicates_by_pattern</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>length</name><operator>++</operator></expr>;</expr_stmt>

<macro><name>array_push</name><argument_list>(<argument>&amp;self-&gt;predicate_steps</argument>, <argument>((TSQueryPredicateStep) {

.type = TSQueryPredicateStepTypeCapture,

.value_id = capture_id,

})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string_content</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>!</operator><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_reset</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>string_content</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TSQueryErrorSyntax</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name> <operator>-</operator> <name>string_content</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>id</name> <init>= <expr><call><name>symbol_table_insert_name</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>predicate_values</name></name></expr></argument>,

<argument><expr><name>string_content</name></expr></argument>,

<argument><expr><name>length</name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>predicates_by_pattern</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>length</name><operator>++</operator></expr>;</expr_stmt>

<macro><name>array_push</name><argument_list>(<argument>&amp;self-&gt;predicate_steps</argument>, <argument>((TSQueryPredicateStep) {

.type = TSQueryPredicateStepTypeString,

.value_id = id,

})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSQueryErrorSyntax</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>stream_is_ident_start</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symbol_start</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stream_scan_identifier</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name> <operator>-</operator> <name>symbol_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>id</name> <init>= <expr><call><name>symbol_table_insert_name</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>predicate_values</name></name></expr></argument>,

<argument><expr><name>symbol_start</name></expr></argument>,

<argument><expr><name>length</name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>predicates_by_pattern</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>length</name><operator>++</operator></expr>;</expr_stmt>

<macro><name>array_push</name><argument_list>(<argument>&amp;self-&gt;predicate_steps</argument>, <argument>((TSQueryPredicateStep) {

.type = TSQueryPredicateStepTypeString,

.value_id = id,

})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>TSQueryErrorSyntax</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>step_count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_skip_whitespace</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TSQueryError</name></type> <name>ts_query__parse_pattern</name><parameter_list>(

<parameter><decl><type><name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>depth</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>capture_count</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_immediate</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>starting_step_index</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSQueryErrorSyntax</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>PARENT_DONE</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_skip_whitespace</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>TSQueryError</name></type> <name>e</name> <init>= <expr><call><name>ts_query__parse_pattern</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>capture_count</name></expr></argument>, <argument><expr><name>is_immediate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>e</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stream_skip_whitespace</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>TSQueryError</name></type> <name>e</name> <init>= <expr><call><name>ts_query__parse_predicate</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>PARENT_DONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_skip_whitespace</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>e</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>symbol</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name>NAMED_WILDCARD_SYMBOL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>stream_is_ident_start</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stream_scan_identifier</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name> <operator>-</operator> <name>node_name</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>symbol</name> <operator>=</operator> <call><name>ts_language_symbol_for_name</name><argument_list>(

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,

<argument><expr><name>node_name</name></expr></argument>,

<argument><expr><name>length</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>symbol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_reset</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TSQueryErrorNodeType</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>TSQueryErrorSyntax</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>steps</name></name></expr></argument>, <argument><expr><call><name>query_step__new</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>is_immediate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_skip_whitespace</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>child_is_immediate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>child_start_step_index</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>child_is_immediate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_skip_whitespace</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>TSQueryError</name></type> <name>e</name> <init>= <expr><call><name>ts_query__parse_pattern</name><argument_list>(

<argument><expr><name>self</name></expr></argument>,

<argument><expr><name>stream</name></expr></argument>,

<argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>capture_count</name></expr></argument>,

<argument><expr><name>child_is_immediate</name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>PARENT_DONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>child_is_immediate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[<expr><name>child_start_step_index</name></expr>]</index></name><operator>.</operator><name>is_last</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>e</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>child_is_immediate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string_content</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_reset</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>string_content</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TSQueryErrorSyntax</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name> <operator>-</operator> <name>string_content</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>symbol</name> <init>= <expr><call><name>ts_language_symbol_for_name</name><argument_list>(

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,

<argument><expr><name>string_content</name></expr></argument>,

<argument><expr><name>length</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>symbol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_reset</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>string_content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TSQueryErrorNodeType</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>steps</name></name></expr></argument>, <argument><expr><call><name>query_step__new</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>is_immediate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSQueryErrorSyntax</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>stream_is_ident_start</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field_name</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stream_scan_identifier</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name> <operator>-</operator> <name>field_name</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stream_skip_whitespace</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_reset</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>field_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TSQueryErrorSyntax</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_skip_whitespace</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>step_index</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSQueryError</name></type> <name>e</name> <init>= <expr><call><name>ts_query__parse_pattern</name><argument_list>(

<argument><expr><name>self</name></expr></argument>,

<argument><expr><name>stream</name></expr></argument>,

<argument><expr><name>depth</name></expr></argument>,

<argument><expr><name>capture_count</name></expr></argument>,

<argument><expr><name>is_immediate</name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>PARENT_DONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSQueryErrorSyntax</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>e</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>TSFieldId</name></type> <name>field_id</name> <init>= <expr><call><name>ts_language_field_id_for_name</name><argument_list>(

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,

<argument><expr><name>field_name</name></expr></argument>,

<argument><expr><name>length</name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>field_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>field_name</name></expr>;</expr_stmt>

<return>return <expr><name>TSQueryErrorField</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[<expr><name>step_index</name></expr>]</index></name><operator>.</operator><name>field</name> <operator>=</operator> <name>field_id</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_skip_whitespace</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>steps</name></name></expr></argument>, <argument><expr><call><name>query_step__new</name><argument_list>(<argument><expr><name>WILDCARD_SYMBOL</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>is_immediate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>TSQueryErrorSyntax</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>stream_skip_whitespace</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_advance</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stream_is_ident_start</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSQueryErrorSyntax</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>capture_name</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stream_scan_identifier</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>input</name></name> <operator>-</operator> <name>capture_name</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>capture_id</name> <init>= <expr><call><name>symbol_table_insert_name</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>captures</name></name></expr></argument>,

<argument><expr><name>capture_name</name></expr></argument>,

<argument><expr><name>length</name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QueryStep</name> <modifier>*</modifier></type><name>step</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[<expr><name>starting_step_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>query_step__add_capture</name><argument_list>(<argument><expr><name>step</name></expr></argument>, <argument><expr><name>capture_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>capture_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_skip_whitespace</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSQuery</name> <modifier>*</modifier></type><name>ts_query_new</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>source_len</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>error_offset</name></decl></parameter>,

<parameter><decl><type><name>TSQueryError</name> <modifier>*</modifier></type><name>error_type</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TSSymbol</name> <modifier>*</modifier></type><name>symbol_map</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_language_version</name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>TREE_SITTER_LANGUAGE_VERSION_WITH_SYMBOL_DEDUPING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>symbol_map</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>symbol_count</name> <init>= <expr><call><name>ts_language_symbol_count</name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>symbol_map</name> <operator>=</operator> <call><name>ts_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSSymbol</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>symbol_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>symbol_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>ts_language_symbol_name</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSSymbolType</name></type> <name>symbol_type</name> <init>= <expr><call><name>ts_language_symbol_type</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>symbol_map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ts_language_symbol_type</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>symbol_type</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ts_language_symbol_name</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>symbol_map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>TSQuery</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><call><name>ts_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSQuery</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>self</name> <operator>=</operator> <operator>(</operator><name>TSQuery</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>steps</name> <operator>=</operator> <call><name>array_new</name><argument_list>()</argument_list></call></expr>,

<expr><operator>.</operator><name>pattern_map</name> <operator>=</operator> <call><name>array_new</name><argument_list>()</argument_list></call></expr>,

<expr><operator>.</operator><name>captures</name> <operator>=</operator> <call><name>symbol_table_new</name><argument_list>()</argument_list></call></expr>,

<expr><operator>.</operator><name>predicate_values</name> <operator>=</operator> <call><name>symbol_table_new</name><argument_list>()</argument_list></call></expr>,

<expr><operator>.</operator><name>predicate_steps</name> <operator>=</operator> <call><name>array_new</name><argument_list>()</argument_list></call></expr>,

<expr><operator>.</operator><name>predicates_by_pattern</name> <operator>=</operator> <call><name>array_new</name><argument_list>()</argument_list></call></expr>,

<expr><operator>.</operator><name>symbol_map</name> <operator>=</operator> <name>symbol_map</name></expr>,

<expr><operator>.</operator><name>wildcard_root_pattern_count</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>max_capture_count</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>language</name> <operator>=</operator> <name>language</name></expr>,

}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Stream</name></type> <name>stream</name> <init>= <expr><call><name>stream_new</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>source_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stream_skip_whitespace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>start_step_index</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>stream</name><operator>.</operator><name>input</name></name> <operator>&lt;</operator> <name><name>stream</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_step_index</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>capture_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>start_bytes_by_pattern</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>.</operator><name>input</name></name> <operator>-</operator> <name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>array_push</name><argument_list>(<argument>&amp;self-&gt;predicates_by_pattern</argument>, <argument>((Slice) {

.offset = self-&gt;predicate_steps.size,

.length = <literal type="number">0</literal>,

})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>*</operator><name>error_type</name> <operator>=</operator> <call><name>ts_query__parse_pattern</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>capture_count</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>steps</name></name></expr></argument>, <argument><expr><call><name>query_step__new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PATTERN_DONE_MARKER</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>error_type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>error_offset</name> <operator>=</operator> <name><name>stream</name><operator>.</operator><name>input</name></name> <operator>-</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_query_delete</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ts_query__pattern_map_insert</name><argument_list>(

<argument><expr><name>self</name></expr></argument>,

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[<expr><name>start_step_index</name></expr>]</index></name><operator>.</operator><name>symbol</name></expr></argument>,

<argument><expr><name>start_step_index</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[<expr><name>start_step_index</name></expr>]</index></name><operator>.</operator><name>symbol</name> <operator>==</operator> <name>WILDCARD_SYMBOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>wildcard_root_pattern_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>capture_count</name> <operator>&gt;</operator> <name><name>self</name><operator>-&gt;</operator><name>max_capture_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>max_capture_count</name></name> <operator>=</operator> <name>capture_count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ts_query__finalize_steps</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_query_delete</name><parameter_list>(<parameter><decl><type><name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>self</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>steps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>pattern_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>predicate_steps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>predicates_by_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>start_bytes_by_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>symbol_table_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>captures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>symbol_table_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>predicate_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>symbol_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_free</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ts_query_pattern_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>predicates_by_pattern</name><operator>.</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ts_query_capture_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>captures</name><operator>.</operator><name>slices</name><operator>.</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ts_query_string_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>predicate_values</name><operator>.</operator><name>slices</name><operator>.</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ts_query_capture_name_for_id</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>length</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>symbol_table_name_for_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>captures</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ts_query_string_value_for_id</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>length</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>symbol_table_name_for_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>predicate_values</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>TSQueryPredicateStep</name> <modifier>*</modifier></type><name>ts_query_predicates_for_pattern</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>pattern_index</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>step_count</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Slice</name></type> <name>slice</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>predicates_by_pattern</name><operator>.</operator><name>contents</name><index>[<expr><name>pattern_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>step_count</name> <operator>=</operator> <name><name>slice</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>predicate_steps</name><operator>.</operator><name>contents</name><index>[<expr><name><name>slice</name><operator>.</operator><name>offset</name></name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ts_query_start_byte_for_pattern</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>pattern_index</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>start_bytes_by_pattern</name><operator>.</operator><name>contents</name><index>[<expr><name>pattern_index</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_query_disable_capture</name><parameter_list>(

<parameter><decl><type><name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>symbol_table_id_for_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>captures</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>QueryStep</name> <modifier>*</modifier></type><name>step</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>query_step__remove_capture</name><argument_list>(<argument><expr><name>step</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ts_query__finalize_steps</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_query_disable_pattern</name><parameter_list>(

<parameter><decl><type><name>TSQuery</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>pattern_index</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>pattern_map</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>PatternEntry</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>pattern_map</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pattern</name><operator>-&gt;</operator><name>pattern_index</name></name> <operator>==</operator> <name>pattern_index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>array_erase</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>pattern_map</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>TSQueryCursor</name> <modifier>*</modifier></type><name>ts_query_cursor_new</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TSQueryCursor</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><call><name>ts_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSQueryCursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>self</name> <operator>=</operator> <operator>(</operator><name>TSQueryCursor</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>ascending</name> <operator>=</operator> <name>false</name></expr>,

<expr><operator>.</operator><name>states</name> <operator>=</operator> <call><name>array_new</name><argument_list>()</argument_list></call></expr>,

<expr><operator>.</operator><name>finished_states</name> <operator>=</operator> <call><name>array_new</name><argument_list>()</argument_list></call></expr>,

<expr><operator>.</operator><name>capture_list_pool</name> <operator>=</operator> <call><name>capture_list_pool_new</name><argument_list>()</argument_list></call></expr>,

<expr><operator>.</operator><name>start_byte</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>end_byte</name> <operator>=</operator> <name>UINT32_MAX</name></expr>,

<expr><operator>.</operator><name>start_point</name> <operator>=</operator> <block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>end_point</name> <operator>=</operator> <name>POINT_MAX</name></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_reserve</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>MAX_STATE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_reserve</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>finished_states</name></name></expr></argument>, <argument><expr><name>MAX_STATE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_query_cursor_delete</name><parameter_list>(<parameter><decl><type><name>TSQueryCursor</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>finished_states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_tree_cursor_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>capture_list_pool_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_free</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_query_cursor_exec</name><parameter_list>(

<parameter><decl><type><name>TSQueryCursor</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>TSQuery</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,

<parameter><decl><type><name>TSNode</name></type> <name>node</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>finished_states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_tree_cursor_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>capture_list_pool_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>max_capture_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>next_state_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ascending</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <name>query</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_query_cursor_set_byte_range</name><parameter_list>(

<parameter><decl><type><name>TSQueryCursor</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>start_byte</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>end_byte</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>end_byte</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_byte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end_byte</name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>start_byte</name></name> <operator>=</operator> <name>start_byte</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>end_byte</name></name> <operator>=</operator> <name>end_byte</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_query_cursor_set_point_range</name><parameter_list>(

<parameter><decl><type><name>TSQueryCursor</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>TSPoint</name></type> <name>start_point</name></decl></parameter>,

<parameter><decl><type><name>TSPoint</name></type> <name>end_point</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>end_point</name><operator>.</operator><name>row</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>end_point</name><operator>.</operator><name>column</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_point</name> <operator>=</operator> <name>POINT_ZERO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_point</name> <operator>=</operator> <name>POINT_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>start_point</name></name> <operator>=</operator> <name>start_point</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>end_point</name></name> <operator>=</operator> <name>end_point</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_query_cursor__first_in_progress_capture</name><parameter_list>(

<parameter><decl><type><name>TSQueryCursor</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>state_index</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>byte_offset</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pattern_index</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>QueryState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>capture_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSQueryCapture</name> <modifier>*</modifier></type><name>captures</name> <init>= <expr><call><name>capture_list_pool_get</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>capture_list_id</name></name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>capture_byte</name> <init>= <expr><call><name>ts_node_start_byte</name><argument_list>(<argument><expr><name><name>captures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(

<expr><operator>!</operator><name>result</name> <operator>||</operator>

<name>capture_byte</name> <operator>&lt;</operator> <operator>*</operator><name>byte_offset</name> <operator>||</operator>

<operator>(</operator>

<name>capture_byte</name> <operator>==</operator> <operator>*</operator><name>byte_offset</name> <operator>&amp;&amp;</operator>

<name><name>state</name><operator>-&gt;</operator><name>pattern_index</name></name> <operator>&lt;</operator> <operator>*</operator><name>pattern_index</name>

<operator>)</operator></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>state_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>byte_offset</name> <operator>=</operator> <name>capture_byte</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pattern_index</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pattern_index</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_query__cursor_add_state</name><parameter_list>(

<parameter><decl><type><name>TSQueryCursor</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>PatternEntry</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>list_id</name> <init>= <expr><call><name>capture_list_pool_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>list_id</name> <operator>==</operator> <name>NONE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>state_index</name></decl>, <decl><type ref="prev"/><name>byte_offset</name></decl>, <decl><type ref="prev"/><name>pattern_index</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_query_cursor__first_in_progress_capture</name><argument_list>(

<argument><expr><name>self</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>state_index</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>byte_offset</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pattern_index</name></expr></argument>

)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOG</name><argument_list>(

<argument><expr><literal type="string">" abandon state. index:%u, pattern:%u, offset:%u.\n"</literal></expr></argument>,

<argument><expr><name>state_index</name></expr></argument>, <argument><expr><name>pattern_index</name></expr></argument>, <argument><expr><name>byte_offset</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list_id</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>contents</name><index>[<expr><name>state_index</name></expr>]</index></name><operator>.</operator><name>capture_list_id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_erase</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>state_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">" too many finished states.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">" start state. pattern:%u\n"</literal></expr></argument>, <argument><expr><name><name>pattern</name><operator>-&gt;</operator><name>pattern_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>array_push</name><argument_list>(<argument>&amp;self-&gt;states</argument>, <argument>((QueryState) {

.capture_list_id = list_id,

.step_index = pattern-&gt;step_index,

.pattern_index = pattern-&gt;pattern_index,

.start_depth = self-&gt;depth,

.capture_count = <literal type="number">0</literal>,

.consumed_capture_count = <literal type="number">0</literal>,

})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>QueryState</name> <modifier>*</modifier></type><name>ts_query__cursor_copy_state</name><parameter_list>(

<parameter><decl><type><name>TSQueryCursor</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>QueryState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_list_id</name> <init>= <expr><call><name>capture_list_pool_acquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_list_id</name> <operator>==</operator> <name>NONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>QueryState</name> <modifier>*</modifier></type><name>new_state</name> <init>= <expr><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>new_state</name><operator>-&gt;</operator><name>capture_list_id</name></name> <operator>=</operator> <name>new_list_id</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TSQueryCapture</name> <modifier>*</modifier></type><name>old_captures</name> <init>= <expr><call><name>capture_list_pool_get</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>capture_list_id</name></name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSQueryCapture</name> <modifier>*</modifier></type><name>new_captures</name> <init>= <expr><call><name>capture_list_pool_get</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>,

<argument><expr><name>new_list_id</name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_captures</name></expr></argument>, <argument><expr><name>old_captures</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>capture_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSQueryCapture</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_state</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_query_cursor__advance</name><parameter_list>(<parameter><decl><type><name>TSQueryCursor</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>ascending</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"leave node. type:%s\n"</literal></expr></argument>, <argument><expr><call><name>ts_node_type</name><argument_list>(<argument><expr><call><name>ts_tree_cursor_current_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>deleted_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>size</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>QueryState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QueryStep</name> <modifier>*</modifier></type><name>step</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>step_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>start_depth</name></name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>step</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <name><name>self</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOG</name><argument_list>(

<argument><expr><literal type="string">" failed to match. pattern:%u, step:%u\n"</literal></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pattern_index</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>step_index</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>capture_list_pool_release</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>capture_list_id</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>deleted_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>deleted_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name> <operator>-</operator> <name>deleted_count</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>state</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>size</name></name> <operator>-=</operator> <name>deleted_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_tree_cursor_goto_next_sibling</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ascending</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ts_tree_cursor_goto_parent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>depth</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>finished_states</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>has_later_siblings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_have_later_siblings_with_this_field</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSFieldId</name></type> <name>field_id</name> <init>= <expr><call><name>ts_tree_cursor_current_status</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>has_later_siblings</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>can_have_later_siblings_with_this_field</name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>node</name> <init>= <expr><call><name>ts_tree_cursor_current_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>symbol</name> <init>= <expr><call><name>ts_node_symbol</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_named</name> <init>= <expr><call><name>ts_node_is_named</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>symbol</name> <operator>!=</operator> <name>ts_builtin_sym_error</name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>symbol_map</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>symbol_map</name><index>[<expr><name>symbol</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(

<expr><call><name>ts_node_end_byte</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>start_byte</name></name> <operator>||</operator>

<call><name>point_lte</name><argument_list>(<argument><expr><call><name>ts_node_end_point</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>start_point</name></name></expr></argument>)</argument_list></call></expr>

)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_tree_cursor_goto_next_sibling</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ascending</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(

<expr><name><name>self</name><operator>-&gt;</operator><name>end_byte</name></name> <operator>&lt;=</operator> <call><name>ts_node_start_byte</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>point_lte</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>end_point</name></name></expr></argument>, <argument><expr><call><name>ts_node_start_point</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>

)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LOG</name><argument_list>(

<argument><expr><literal type="string">"enter node. "</literal>

<literal type="string">"type:%s, field:%s, row:%u state_count:%u, "</literal>

<literal type="string">"finished_state_count:%u, has_later_siblings:%d, "</literal>

<literal type="string">"can_have_later_siblings_with_this_field:%d\n"</literal></expr></argument>,

<argument><expr><call><name>ts_node_type</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>ts_language_field_name_for_id</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>field_id</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>ts_node_start_point</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>.</operator><name>row</name></expr></argument>,

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>size</name></name></expr></argument>,

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>finished_states</name><operator>.</operator><name>size</name></name></expr></argument>,

<argument><expr><name>has_later_siblings</name></expr></argument>,

<argument><expr><name>can_have_later_siblings_with_this_field</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>wildcard_root_pattern_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>PatternEntry</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>pattern_map</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QueryStep</name> <modifier>*</modifier></type><name>step</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[<expr><name><name>pattern</name><operator>-&gt;</operator><name>step_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>step</name><operator>-&gt;</operator><name>field</name></name> <operator>&amp;&amp;</operator> <name>field_id</name> <operator>!=</operator> <name><name>step</name><operator>-&gt;</operator><name>field</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_query__cursor_add_state</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_query__pattern_map_search</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PatternEntry</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>pattern_map</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QueryStep</name> <modifier>*</modifier></type><name>step</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[<expr><name><name>pattern</name><operator>-&gt;</operator><name>step_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>step</name><operator>-&gt;</operator><name>field</name></name> <operator>&amp;&amp;</operator> <name>field_id</name> <operator>!=</operator> <name><name>step</name><operator>-&gt;</operator><name>field</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_query__cursor_add_state</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>self</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>pattern_map</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>pattern_map</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[<expr><name><name>pattern</name><operator>-&gt;</operator><name>step_index</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name><name>step</name><operator>-&gt;</operator><name>symbol</name></name> <operator>==</operator> <name>symbol</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>size</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>QueryState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QueryStep</name> <modifier>*</modifier></type><name>step</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>steps</name><operator>.</operator><name>contents</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>step_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>start_depth</name></name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>step</name><operator>-&gt;</operator><name>depth</name></name> <operator>!=</operator> <name><name>self</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>node_does_match</name> <init>=

<expr><name><name>step</name><operator>-&gt;</operator><name>symbol</name></name> <operator>==</operator> <name>symbol</name> <operator>||</operator>

<name><name>step</name><operator>-&gt;</operator><name>symbol</name></name> <operator>==</operator> <name>WILDCARD_SYMBOL</name> <operator>||</operator>

<operator>(</operator><name><name>step</name><operator>-&gt;</operator><name>symbol</name></name> <operator>==</operator> <name>NAMED_WILDCARD_SYMBOL</name> <operator>&amp;&amp;</operator> <name>is_named</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>later_sibling_can_match</name> <init>= <expr><name>has_later_siblings</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>step</name><operator>-&gt;</operator><name>is_immediate</name></name> <operator>&amp;&amp;</operator> <name>is_named</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>later_sibling_can_match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>step</name><operator>-&gt;</operator><name>is_last</name></name> <operator>&amp;&amp;</operator> <name>has_later_siblings</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node_does_match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>step</name><operator>-&gt;</operator><name>field</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>step</name><operator>-&gt;</operator><name>field</name></name> <operator>==</operator> <name>field_id</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>can_have_later_siblings_with_this_field</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>later_sibling_can_match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>node_does_match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node_does_match</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>later_sibling_can_match</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOG</name><argument_list>(

<argument><expr><literal type="string">" discard state. pattern:%u, step:%u\n"</literal></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pattern_index</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>step_index</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>capture_list_pool_release</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>capture_list_id</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_erase</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>QueryState</name> <modifier>*</modifier></type><name>next_state</name> <init>= <expr><name>state</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(

<expr><name><name>step</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>step</name><operator>-&gt;</operator><name>contains_captures</name></name> <operator>&amp;&amp;</operator>

<name>later_sibling_can_match</name></expr>

)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>QueryState</name> <modifier>*</modifier></type><name>copy</name> <init>= <expr><call><name>ts_query__cursor_copy_state</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOG</name><argument_list>(

<argument><expr><literal type="string">" split state. pattern:%u, step:%u\n"</literal></expr></argument>,

<argument><expr><name><name>copy</name><operator>-&gt;</operator><name>pattern_index</name></name></expr></argument>,

<argument><expr><name><name>copy</name><operator>-&gt;</operator><name>step_index</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">" canot split state.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LOG</name><argument_list>(

<argument><expr><literal type="string">" advance state. pattern:%u, step:%u\n"</literal></expr></argument>,

<argument><expr><name><name>next_state</name><operator>-&gt;</operator><name>pattern_index</name></name></expr></argument>,

<argument><expr><name><name>next_state</name><operator>-&gt;</operator><name>step_index</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAX_STEP_CAPTURE_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>capture_id</name> <init>= <expr><name><name>step</name><operator>-&gt;</operator><name>capture_ids</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>step</name><operator>-&gt;</operator><name>capture_ids</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NONE</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LOG</name><argument_list>(

<argument><expr><literal type="string">" capture node. pattern:%u, capture_id:%u\n"</literal></expr></argument>,

<argument><expr><name><name>next_state</name><operator>-&gt;</operator><name>pattern_index</name></name></expr></argument>,

<argument><expr><name>capture_id</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TSQueryCapture</name> <modifier>*</modifier></type><name>capture_list</name> <init>= <expr><call><name>capture_list_pool_get</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>,

<argument><expr><name><name>next_state</name><operator>-&gt;</operator><name>capture_list_id</name></name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>capture_list</name><index>[<expr><name><name>next_state</name><operator>-&gt;</operator><name>capture_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>TSQueryCapture</name><operator>)</operator> <block>{

<expr><name>node</name></expr>,

<expr><name>capture_id</name></expr>

}</block></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>next_state</name><operator>-&gt;</operator><name>step_index</name></name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>QueryStep</name> <modifier>*</modifier></type><name>next_step</name> <init>= <expr><name>step</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next_step</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>PATTERN_DONE_MARKER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">" finish pattern %u\n"</literal></expr></argument>, <argument><expr><name><name>next_state</name><operator>-&gt;</operator><name>pattern_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>next_state</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>next_state_id</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>finished_states</name></name></expr></argument>, <argument><expr><operator>*</operator><name>next_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next_state</name> <operator>==</operator> <name>state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>array_erase</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>ts_tree_cursor_goto_first_child</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>depth</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>ascending</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>finished_states</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_query_cursor_next_match</name><parameter_list>(

<parameter><decl><type><name>TSQueryCursor</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>TSQueryMatch</name> <modifier>*</modifier></type><name>match</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>finished_states</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_query_cursor__advance</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>QueryState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>finished_states</name><operator>.</operator><name>contents</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>pattern_index</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pattern_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>capture_count</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>capture_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>captures</name></name> <operator>=</operator> <call><name>capture_list_pool_get</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>capture_list_id</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>capture_list_pool_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>capture_list_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_erase</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>finished_states</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_query_cursor_remove_match</name><parameter_list>(

<parameter><decl><type><name>TSQueryCursor</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>match_id</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>finished_states</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>QueryState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>finished_states</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>match_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>capture_list_pool_release</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>capture_list_id</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_erase</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>finished_states</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_query_cursor_next_capture</name><parameter_list>(

<parameter><decl><type><name>TSQueryCursor</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>TSQueryMatch</name> <modifier>*</modifier></type><name>match</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>capture_index</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>finished_states</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>first_unfinished_capture_byte</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>first_unfinished_pattern_index</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>first_unfinished_state_index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ts_query_cursor__first_in_progress_capture</name><argument_list>(

<argument><expr><name>self</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>first_unfinished_state_index</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>first_unfinished_capture_byte</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>first_unfinished_pattern_index</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_finished_state_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>first_finished_capture_byte</name> <init>= <expr><name>first_unfinished_capture_byte</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>first_finished_pattern_index</name> <init>= <expr><name>first_unfinished_pattern_index</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>finished_states</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>QueryState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>finished_states</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>capture_count</name></name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>consumed_capture_count</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSQueryCapture</name> <modifier>*</modifier></type><name>captures</name> <init>= <expr><call><name>capture_list_pool_get</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>capture_list_id</name></name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>capture_byte</name> <init>= <expr><call><name>ts_node_start_byte</name><argument_list>(

<argument><expr><name><name>captures</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>consumed_capture_count</name></name></expr>]</index></name><operator>.</operator><name>node</name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(

<expr><name>capture_byte</name> <operator>&lt;</operator> <name>first_finished_capture_byte</name> <operator>||</operator>

<operator>(</operator>

<name>capture_byte</name> <operator>==</operator> <name>first_finished_capture_byte</name> <operator>&amp;&amp;</operator>

<name><name>state</name><operator>-&gt;</operator><name>pattern_index</name></name> <operator>&lt;</operator> <name>first_finished_pattern_index</name>

<operator>)</operator></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name>first_finished_state_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>first_finished_capture_byte</name> <operator>=</operator> <name>capture_byte</name></expr>;</expr_stmt>

<expr_stmt><expr><name>first_finished_pattern_index</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pattern_index</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>capture_list_pool_release</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>capture_list_id</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_erase</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>finished_states</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>first_finished_state_index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>QueryState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>finished_states</name><operator>.</operator><name>contents</name><index>[

<expr><name>first_finished_state_index</name></expr>

]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>pattern_index</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pattern_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>capture_count</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>capture_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>captures</name></name> <operator>=</operator> <call><name>capture_list_pool_get</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>capture_list_id</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>capture_index</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>consumed_capture_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>consumed_capture_count</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>capture_list_pool_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOG</name><argument_list>(

<argument><expr><literal type="string">" abandon state. index:%u, pattern:%u, offset:%u.\n"</literal></expr></argument>,

<argument><expr><name>first_unfinished_state_index</name></expr></argument>,

<argument><expr><name>first_unfinished_pattern_index</name></expr></argument>,

<argument><expr><name>first_unfinished_capture_byte</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>capture_list_pool_release</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>capture_list_pool</name></name></expr></argument>,

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>states</name><operator>.</operator><name>contents</name><index>[<expr><name>first_unfinished_state_index</name></expr>]</index></name><operator>.</operator><name>capture_list_id</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_erase</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>first_unfinished_state_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_query_cursor__advance</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOG</name></cpp:undef>

</unit>
