<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\tree_sitter\length.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./point.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree_sitter/api.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSPoint</name></type> <name>extent</name></decl>;</decl_stmt>

}</block></struct></type> <name>Length</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Length</name></type> <name>LENGTH_UNDEFINED</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Length</name></type> <name>LENGTH_MAX</name> <init>= <expr><block>{<expr><name>UINT32_MAX</name></expr>, <expr><block>{<expr><name>UINT32_MAX</name></expr>, <expr><name>UINT32_MAX</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>length_is_undefined</name><parameter_list>(<parameter><decl><type><name>Length</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>length</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>length</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Length</name></type> <name>length_min</name><parameter_list>(<parameter><decl><type><name>Length</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>Length</name></type> <name>len2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>len1</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name><name>len2</name><operator>.</operator><name>bytes</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>len1</name></expr> </then><else>: <expr><name>len2</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Length</name></type> <name>length_add</name><parameter_list>(<parameter><decl><type><name>Length</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>Length</name></type> <name>len2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Length</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>len1</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <name><name>len2</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>extent</name></name> <operator>=</operator> <call><name>point_add</name><argument_list>(<argument><expr><name><name>len1</name><operator>.</operator><name>extent</name></name></expr></argument>, <argument><expr><name><name>len2</name><operator>.</operator><name>extent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Length</name></type> <name>length_sub</name><parameter_list>(<parameter><decl><type><name>Length</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>Length</name></type> <name>len2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Length</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>len1</name><operator>.</operator><name>bytes</name></name> <operator>-</operator> <name><name>len2</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>extent</name></name> <operator>=</operator> <call><name>point_sub</name><argument_list>(<argument><expr><name><name>len1</name><operator>.</operator><name>extent</name></name></expr></argument>, <argument><expr><name><name>len2</name><operator>.</operator><name>extent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Length</name></type> <name>length_zero</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Length</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

</unit>
