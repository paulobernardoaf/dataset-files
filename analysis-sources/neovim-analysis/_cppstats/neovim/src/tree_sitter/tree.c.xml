<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\tree_sitter\tree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree_sitter/api.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./array.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./get_changed_ranges.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./subtree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./tree_cursor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./tree.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>PARENT_CACHE_CAPACITY</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<function><type><name>TSTree</name> <modifier>*</modifier></type><name>ts_tree_new</name><parameter_list>(

<parameter><decl><type><name>Subtree</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>TSRange</name> <modifier>*</modifier></type><name>included_ranges</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>included_range_count</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TSTree</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>ts_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSTree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>language</name></name> <operator>=</operator> <name>language</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>parent_cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>parent_cache_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>parent_cache_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>included_ranges</name></name> <operator>=</operator> <call><name>ts_calloc</name><argument_list>(<argument><expr><name>included_range_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSRange</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>included_ranges</name></name></expr></argument>, <argument><expr><name>included_ranges</name></expr></argument>, <argument><expr><name>included_range_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSRange</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>included_range_count</name></name> <operator>=</operator> <name>included_range_count</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSTree</name> <modifier>*</modifier></type><name>ts_tree_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>ts_subtree_retain</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ts_tree_new</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>included_ranges</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>included_range_count</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_tree_delete</name><parameter_list>(<parameter><decl><type><name>TSTree</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>self</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>SubtreePool</name></type> <name>pool</name> <init>= <expr><call><name>ts_subtree_pool_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ts_subtree_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pool</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_subtree_pool_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>included_ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>parent_cache</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ts_free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>parent_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ts_free</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_tree_root_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node_new</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_padding</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>ts_tree_language</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_tree_edit</name><parameter_list>(<parameter><decl><type><name>TSTree</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSInputEdit</name> <modifier>*</modifier></type><name>edit</name></decl></parameter>)</parameter_list> <block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>included_range_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>TSRange</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>included_ranges</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>end_byte</name></name> <operator>&gt;=</operator> <name><name>edit</name><operator>-&gt;</operator><name>old_end_byte</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>end_byte</name></name> <operator>!=</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>end_byte</name></name> <operator>=</operator> <name><name>edit</name><operator>-&gt;</operator><name>new_end_byte</name></name> <operator>+</operator> <operator>(</operator><name><name>range</name><operator>-&gt;</operator><name>end_byte</name></name> <operator>-</operator> <name><name>edit</name><operator>-&gt;</operator><name>old_end_byte</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>end_point</name></name> <operator>=</operator> <call><name>point_add</name><argument_list>(

<argument><expr><name><name>edit</name><operator>-&gt;</operator><name>new_end_point</name></name></expr></argument>,

<argument><expr><call><name>point_sub</name><argument_list>(<argument><expr><name><name>range</name><operator>-&gt;</operator><name>end_point</name></name></expr></argument>, <argument><expr><name><name>edit</name><operator>-&gt;</operator><name>old_end_point</name></name></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>end_byte</name></name> <operator>&lt;</operator> <name><name>edit</name><operator>-&gt;</operator><name>new_end_byte</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>end_byte</name></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>end_point</name></name> <operator>=</operator> <name>POINT_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>start_byte</name></name> <operator>&gt;=</operator> <name><name>edit</name><operator>-&gt;</operator><name>old_end_byte</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>start_byte</name></name> <operator>=</operator> <name><name>edit</name><operator>-&gt;</operator><name>new_end_byte</name></name> <operator>+</operator> <operator>(</operator><name><name>range</name><operator>-&gt;</operator><name>start_byte</name></name> <operator>-</operator> <name><name>edit</name><operator>-&gt;</operator><name>old_end_byte</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>start_point</name></name> <operator>=</operator> <call><name>point_add</name><argument_list>(

<argument><expr><name><name>edit</name><operator>-&gt;</operator><name>new_end_point</name></name></expr></argument>,

<argument><expr><call><name>point_sub</name><argument_list>(<argument><expr><name><name>range</name><operator>-&gt;</operator><name>start_point</name></name></expr></argument>, <argument><expr><name><name>edit</name><operator>-&gt;</operator><name>old_end_point</name></name></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>start_byte</name></name> <operator>&lt;</operator> <name><name>edit</name><operator>-&gt;</operator><name>new_end_byte</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>start_byte</name></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>start_point</name></name> <operator>=</operator> <name>POINT_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>SubtreePool</name></type> <name>pool</name> <init>= <expr><call><name>ts_subtree_pool_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>ts_subtree_edit</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>edit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>parent_cache_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>parent_cache_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_subtree_pool_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>TSRange</name> <modifier>*</modifier></type><name>ts_tree_get_changed_ranges</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type><name>other</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TreeCursor</name></type> <name>cursor1</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <macro><name>array_new</name><argument_list>()</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TreeCursor</name></type> <name>cursor2</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <macro><name>array_new</name><argument_list>()</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ts_tree_cursor_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor1</name></expr></argument>, <argument><expr><call><name>ts_tree_root_node</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_tree_cursor_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor2</name></expr></argument>, <argument><expr><call><name>ts_tree_root_node</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TSRangeArray</name></type> <name>included_range_differences</name> <init>= <expr><call><name>array_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ts_range_array_get_changed_ranges</name><argument_list>(

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>included_ranges</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>included_range_count</name></name></expr></argument>,

<argument><expr><name><name>other</name><operator>-&gt;</operator><name>included_ranges</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>-&gt;</operator><name>included_range_count</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>included_range_differences</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TSRange</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <call><name>ts_subtree_get_changed_ranges</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>other</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor2</name></expr></argument>,

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>included_range_differences</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>included_range_differences</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cursor1</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cursor2</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_tree_print_dot_graph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>ts_subtree_print_dot_graph</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_tree_get_cached_parent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>parent_cache_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name> <init>= <expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>parent_cache_start</name></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>PARENT_CACHE_CAPACITY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ParentCacheEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>parent_cache</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>child</name></name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ts_node_new</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>alias_symbol</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>ts_node_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>length_zero</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_tree_set_cached_parent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type><name>_self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSNode</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TSTree</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>TSTree</name> <operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>parent_cache</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>parent_cache</name></name> <operator>=</operator> <call><name>ts_calloc</name><argument_list>(<argument><expr><name>PARENT_CACHE_CAPACITY</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParentCacheEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name> <init>= <expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>parent_cache_start</name></name> <operator>+</operator> <name><name>self</name><operator>-&gt;</operator><name>parent_cache_size</name></name><operator>)</operator> <operator>%</operator> <name>PARENT_CACHE_CAPACITY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>parent_cache</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ParentCacheEntry</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>child</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>id</name></name></expr>,

<expr><operator>.</operator><name>parent</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>Subtree</name> <operator>*</operator><operator>)</operator><name><name>parent</name><operator>-&gt;</operator><name>id</name></name></expr>,

<expr><operator>.</operator><name>position</name> <operator>=</operator> <block>{

<expr><name><name>parent</name><operator>-&gt;</operator><name>context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><block>{<expr><name><name>parent</name><operator>-&gt;</operator><name>context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>parent</name><operator>-&gt;</operator><name>context</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>}</block></expr>

}</block></expr>,

<expr><operator>.</operator><name>alias_symbol</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>context</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>,

}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>parent_cache_size</name></name> <operator>==</operator> <name>PARENT_CACHE_CAPACITY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>parent_cache_start</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>parent_cache_size</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
