<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\tree_sitter\utf16.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./utf16.h"</cpp:file></cpp:include>

<function><type><name>utf8proc_ssize_t</name></type> <name>utf16_iterate</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>utf8proc_uint8_t</name> <modifier>*</modifier></type><name>string</name></decl></parameter>,

<parameter><decl><type><name>utf8proc_ssize_t</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>utf8proc_int32_t</name> <modifier>*</modifier></type><name>code_point</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>code_point</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>units</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>string</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>unit</name> <init>= <expr><name><name>units</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unit</name> <operator>&lt;</operator> <literal type="number">0xd800</literal> <operator>||</operator> <name>unit</name> <operator>&gt;=</operator> <literal type="number">0xe000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>code_point</name> <operator>=</operator> <name>unit</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unit</name> <operator>&lt;</operator> <literal type="number">0xdc00</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>next_unit</name> <init>= <expr><name><name>units</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next_unit</name> <operator>&gt;=</operator> <literal type="number">0xdc00</literal> <operator>&amp;&amp;</operator> <name>next_unit</name> <operator>&lt;</operator> <literal type="number">0xe000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>code_point</name> <operator>=</operator> <literal type="number">0x10000</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unit</name> <operator>-</operator> <literal type="number">0xd800</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>next_unit</name> <operator>-</operator> <literal type="number">0xdc00</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>code_point</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

</unit>
