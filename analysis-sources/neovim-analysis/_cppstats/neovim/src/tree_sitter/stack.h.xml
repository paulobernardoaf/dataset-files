<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\tree_sitter\stack.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./array.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./subtree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./error_costs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>Stack</name></name></type> <name>Stack</name>;</typedef>

<typedef>typedef <type><name>unsigned</name></type> <name>StackVersion</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_VERSION_NONE</name></cpp:macro> <cpp:value>((StackVersion)-1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>SubtreeArray</name></type> <name>subtrees</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StackVersion</name></type> <name>version</name></decl>;</decl_stmt>

}</block></struct></type> <name>StackSlice</name>;</typedef>

<typedef>typedef <macro><name>Array</name><argument_list>(<argument>StackSlice</argument>)</argument_list></macro> <expr_stmt><expr><name>StackSliceArray</name></expr>;</expr_stmt></typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>Length</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSStateId</name></type> <name>state</name></decl>;</decl_stmt>

}</block></struct></type> <name>StackSummaryEntry</name>;</typedef>

<typedef>typedef <macro><name>Array</name><argument_list>(<argument>StackSummaryEntry</argument>)</argument_list></macro> <expr_stmt><expr><name>StackSummary</name></expr>;</expr_stmt></typedef>

<function_decl><type><name>Stack</name> <modifier>*</modifier></type><name>ts_stack_new</name><parameter_list>(<parameter><decl><type><name>SubtreePool</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_stack_delete</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>ts_stack_version_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stack</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>TSStateId</name></type> <name>ts_stack_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Subtree</name></type> <name>ts_stack_last_external_token</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_stack_set_last_external_token</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>, <parameter><decl><type><name>Subtree</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>Length</name></type> <name>ts_stack_position</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_stack_push</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>, <parameter><decl><type><name>Subtree</name></type></decl></parameter> , <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>TSStateId</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>StackSliceArray</name></type> <name>ts_stack_pop_count</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SubtreeArray</name></type> <name>ts_stack_pop_error</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>StackSliceArray</name></type> <name>ts_stack_pop_pending</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>StackSliceArray</name></type> <name>ts_stack_pop_all</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>ts_stack_node_count_since_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ts_stack_dynamic_precedence</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ts_stack_has_advanced_since_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_stack_record_summary</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max_depth</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>StackSummary</name> <modifier>*</modifier></type><name>ts_stack_get_summary</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>ts_stack_error_cost</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ts_stack_merge</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ts_stack_can_merge</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>TSSymbol</name></type> <name>ts_stack_resume</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_stack_pause</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>, <parameter><decl><type><name>TSSymbol</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_stack_halt</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ts_stack_is_active</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ts_stack_is_paused</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ts_stack_is_halted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_stack_renumber_version</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_stack_swap_versions</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>StackVersion</name></type> <name>ts_stack_copy_version</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_stack_remove_version</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_stack_clear</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ts_stack_print_dot_graph</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>StackIterateCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>TSStateId</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>void</name></type> <name>ts_stack_iterate</name><parameter_list>(<parameter><decl><type><name>Stack</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>StackVersion</name></type></decl></parameter>, <parameter><decl><type><name>StackIterateCallback</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
