<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\tree_sitter\node.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./subtree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./tree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./language.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>Subtree</name></type> <name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>child_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>structural_child_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSSymbol</name> <modifier>*</modifier></type><name>alias_sequence</name></decl>;</decl_stmt>

}</block></struct></type> <name>NodeChildIterator</name>;</typedef>

<function><type><name>TSNode</name></type> <name>ts_node_new</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>TSTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type><name>subtree</name></decl></parameter>,

<parameter><decl><type><name>Length</name></type> <name>position</name></decl></parameter>,

<parameter><decl><type><name>TSSymbol</name></type> <name>alias</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>TSNode</name><operator>)</operator> <block>{

<expr><block>{<expr><name><name>position</name><operator>.</operator><name>bytes</name></name></expr>, <expr><name><name>position</name><operator>.</operator><name>extent</name><operator>.</operator><name>row</name></name></expr>, <expr><name><name>position</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name></expr>, <expr><name>alias</name></expr>}</block></expr>,

<expr><name>subtree</name></expr>,

<expr><name>tree</name></expr>,

}</block></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSNode</name></type> <name>ts_node__null</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>length_zero</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ts_node_start_byte</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>self</name><operator>.</operator><name>context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSPoint</name></type> <name>ts_node_start_point</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>TSPoint</name><operator>)</operator> <block>{<expr><name><name>self</name><operator>.</operator><name>context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>self</name><operator>.</operator><name>context</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>}</block></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>ts_node__alias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSNode</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>context</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Subtree</name></type> <name>ts_node__subtree</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>Subtree</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>.</operator><name>id</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>NodeChildIterator</name></type> <name>ts_node_iterate_children</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Subtree</name></type> <name>subtree</name> <init>= <expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>subtree</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>NodeChildIterator</name><operator>)</operator> <block>{<expr><name>NULL_SUBTREE</name></expr>, <expr><name><name>node</name><operator>-&gt;</operator><name>tree</name></name></expr>, <expr><call><name>length_zero</name><argument_list>()</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSSymbol</name> <modifier>*</modifier></type><name>alias_sequence</name> <init>= <expr><call><name>ts_language_alias_sequence</name><argument_list>(

<argument><expr><name><name>node</name><operator>-&gt;</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,

<argument><expr><name><name>subtree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>NodeChildIterator</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>tree</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>tree</name></name></expr>,

<expr><operator>.</operator><name>parent</name> <operator>=</operator> <name>subtree</name></expr>,

<expr><operator>.</operator><name>position</name> <operator>=</operator> <block>{<expr><call><name>ts_node_start_byte</name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></call></expr>, <macro><name>ts_node_start_point</name><argument_list>(<argument>*node</argument>)</argument_list></macro>}</block></expr>,

<expr><operator>.</operator><name>child_index</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>structural_child_index</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>alias_sequence</name> <operator>=</operator> <name>alias_sequence</name></expr>,

}</block></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_node_child_iterator_done</name><parameter_list>(<parameter><decl><type><name>NodeChildIterator</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>child_index</name></name> <operator>==</operator> <name><name>self</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>child_count</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_node_child_iterator_next</name><parameter_list>(

<parameter><decl><type><name>NodeChildIterator</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,

<parameter><decl><type><name>TSNode</name> <modifier>*</modifier></type><name>result</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ptr</name></name> <operator>||</operator> <call><name>ts_node_child_iterator_done</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>child_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>alias_symbol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>alias_sequence</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>alias_symbol</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>alias_sequence</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>structural_child_index</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>structural_child_index</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>child_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <call><name>length_add</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>position</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_padding</name><argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>ts_node_new</name><argument_list>(

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>,

<argument><expr><name>child</name></expr></argument>,

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>position</name></name></expr></argument>,

<argument><expr><name>alias_symbol</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <call><name>length_add</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>position</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_size</name><argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>child_index</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ts_node__is_relevant</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>include_anonymous</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Subtree</name></type> <name>tree</name> <init>= <expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>include_anonymous</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ts_subtree_visible</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ts_node__alias</name><argument_list>(<argument><expr><operator>&amp;</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>alias</name> <init>= <expr><call><name>ts_node__alias</name><argument_list>(<argument><expr><operator>&amp;</operator><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alias</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ts_language_symbol_metadata</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call><operator>.</operator><name>named</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>ts_subtree_visible</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ts_subtree_named</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>ts_node__relevant_child_count</name><parameter_list>(

<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>include_anonymous</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Subtree</name></type> <name>tree</name> <init>= <expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>include_anonymous</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>visible_child_count</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>named_child_count</name></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSNode</name></type> <name>ts_node__child</name><parameter_list>(

<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>child_index</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>include_anonymous</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TSNode</name></type> <name>result</name> <init>= <expr><name>self</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_descend</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>did_descend</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NodeChildIterator</name></type> <name>iterator</name> <init>= <expr><call><name>ts_node_iterate_children</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>ts_node_child_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ts_node__is_relevant</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>include_anonymous</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>child_index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ts_tree_set_cached_parent</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>child</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>grandchild_index</name> <init>= <expr><name>child_index</name> <operator>-</operator> <name>index</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>grandchild_count</name> <init>= <expr><call><name>ts_node__relevant_child_count</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>include_anonymous</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>grandchild_index</name> <operator>&lt;</operator> <name>grandchild_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<expr_stmt><expr><name>child_index</name> <operator>=</operator> <name>grandchild_index</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>grandchild_count</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<return>return <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_subtree_has_trailing_empty_descendant</name><parameter_list>(

<parameter><decl><type><name>Subtree</name></type> <name>self</name></decl></parameter>,

<parameter><decl><type><name>Subtree</name></type> <name>other</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Subtree</name></type> <name>child</name> <init>= <expr><name><name>self</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_total_bytes</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>ptr</name></name> <operator>||</operator> <call><name>ts_subtree_has_trailing_empty_descendant</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSNode</name></type> <name>ts_node__prev_sibling</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>include_anonymous</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Subtree</name></type> <name>self_subtree</name> <init>= <expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>self_is_empty</name> <init>= <expr><call><name>ts_subtree_total_bytes</name><argument_list>(<argument><expr><name>self_subtree</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>target_end_byte</name> <init>= <expr><call><name>ts_node_end_byte</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>node</name> <init>= <expr><call><name>ts_node_parent</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>earlier_node</name> <init>= <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>earlier_node_is_relevant</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>ts_node_is_null</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>TSNode</name></type> <name>earlier_child</name> <init>= <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>earlier_child_is_relevant</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found_child_containing_target</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NodeChildIterator</name></type> <name>iterator</name> <init>= <expr><call><name>ts_node_iterate_children</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>ts_node_child_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>self</name><operator>.</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>.</operator><name>position</name><operator>.</operator><name>bytes</name></name> <operator>&gt;</operator> <name>target_end_byte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found_child_containing_target</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>.</operator><name>position</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name>target_end_byte</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name>self_is_empty</name> <operator>||</operator>

<call><name>ts_subtree_has_trailing_empty_descendant</name><argument_list>(<argument><expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>self_subtree</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found_child_containing_target</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_node__is_relevant</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>include_anonymous</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>earlier_child</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<expr_stmt><expr><name>earlier_child_is_relevant</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ts_node__relevant_child_count</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>include_anonymous</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>earlier_child</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<expr_stmt><expr><name>earlier_child_is_relevant</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>found_child_containing_target</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_node_is_null</name><argument_list>(<argument><expr><name>earlier_child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>earlier_node</name> <operator>=</operator> <name>earlier_child</name></expr>;</expr_stmt>

<expr_stmt><expr><name>earlier_node_is_relevant</name> <operator>=</operator> <name>earlier_child_is_relevant</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>earlier_child_is_relevant</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>earlier_child</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ts_node_is_null</name><argument_list>(<argument><expr><name>earlier_child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>earlier_child</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>earlier_node_is_relevant</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>earlier_node</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>earlier_node</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSNode</name></type> <name>ts_node__next_sibling</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>include_anonymous</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>target_end_byte</name> <init>= <expr><call><name>ts_node_end_byte</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>node</name> <init>= <expr><call><name>ts_node_parent</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>later_node</name> <init>= <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>later_node_is_relevant</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>ts_node_is_null</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>TSNode</name></type> <name>later_child</name> <init>= <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>later_child_is_relevant</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>child_containing_target</name> <init>= <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NodeChildIterator</name></type> <name>iterator</name> <init>= <expr><call><name>ts_node_iterate_children</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>ts_node_child_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>.</operator><name>position</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name>target_end_byte</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_node_start_byte</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>ts_node_start_byte</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call><operator>.</operator><name>ptr</name> <operator>!=</operator> <call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>.</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>child_containing_target</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ts_node__is_relevant</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>include_anonymous</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>later_child</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<expr_stmt><expr><name>later_child_is_relevant</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ts_node__relevant_child_count</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>include_anonymous</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>later_child</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<expr_stmt><expr><name>later_child_is_relevant</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_node_is_null</name><argument_list>(<argument><expr><name>child_containing_target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_node_is_null</name><argument_list>(<argument><expr><name>later_child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>later_node</name> <operator>=</operator> <name>later_child</name></expr>;</expr_stmt>

<expr_stmt><expr><name>later_node_is_relevant</name> <operator>=</operator> <name>later_child_is_relevant</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>child_containing_target</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>later_child_is_relevant</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>later_child</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ts_node_is_null</name><argument_list>(<argument><expr><name>later_child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>later_child</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>later_node_is_relevant</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>later_node</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>later_node</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSNode</name></type> <name>ts_node__first_child_for_byte</name><parameter_list>(

<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>goal</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>include_anonymous</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TSNode</name></type> <name>node</name> <init>= <expr><name>self</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_descend</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>did_descend</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NodeChildIterator</name></type> <name>iterator</name> <init>= <expr><call><name>ts_node_iterate_children</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>ts_node_child_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ts_node_end_byte</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>goal</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ts_node__is_relevant</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>include_anonymous</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>child</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ts_node_child_count</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<return>return <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSNode</name></type> <name>ts_node__descendant_for_byte_range</name><parameter_list>(

<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>range_start</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>range_end</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>include_anonymous</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TSNode</name></type> <name>node</name> <init>= <expr><name>self</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>last_visible_node</name> <init>= <expr><name>self</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_descend</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>did_descend</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NodeChildIterator</name></type> <name>iterator</name> <init>= <expr><call><name>ts_node_iterate_children</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>ts_node_child_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>node_end</name> <init>= <expr><name><name>iterator</name><operator>.</operator><name>position</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node_end</name> <operator>&lt;</operator> <name>range_end</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>node_end</name> <operator>&lt;=</operator> <name>range_start</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>range_start</name> <operator>&lt;</operator> <call><name>ts_node_start_byte</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_node__is_relevant</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>include_anonymous</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ts_tree_set_cached_parent</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_visible_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_visible_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></while>

</block_content>}</block></while>

<return>return <expr><name>last_visible_node</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>TSNode</name></type> <name>ts_node__descendant_for_point_range</name><parameter_list>(

<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>,

<parameter><decl><type><name>TSPoint</name></type> <name>range_start</name></decl></parameter>,

<parameter><decl><type><name>TSPoint</name></type> <name>range_end</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>include_anonymous</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TSNode</name></type> <name>node</name> <init>= <expr><name>self</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>last_visible_node</name> <init>= <expr><name>self</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_descend</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>did_descend</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NodeChildIterator</name></type> <name>iterator</name> <init>= <expr><call><name>ts_node_iterate_children</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>ts_node_child_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>TSPoint</name></type> <name>node_end</name> <init>= <expr><name><name>iterator</name><operator>.</operator><name>position</name><operator>.</operator><name>extent</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>point_lt</name><argument_list>(<argument><expr><name>node_end</name></expr></argument>, <argument><expr><name>range_end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>point_lte</name><argument_list>(<argument><expr><name>node_end</name></expr></argument>, <argument><expr><name>range_start</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>point_lt</name><argument_list>(<argument><expr><name>range_start</name></expr></argument>, <argument><expr><call><name>ts_node_start_point</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_node__is_relevant</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>include_anonymous</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ts_tree_set_cached_parent</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_visible_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_visible_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></while>

</block_content>}</block></while>

<return>return <expr><name>last_visible_node</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ts_node_end_byte</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node_start_byte</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ts_subtree_size</name><argument_list>(<argument><expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSPoint</name></type> <name>ts_node_end_point</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>point_add</name><argument_list>(<argument><expr><call><name>ts_node_start_point</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ts_subtree_size</name><argument_list>(<argument><expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>extent</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSSymbol</name></type> <name>ts_node_symbol</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>symbol</name> <init>= <expr><call><name>ts_node__alias</name><argument_list>(<argument><expr><operator>&amp;</operator><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>symbol</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>symbol</name> <operator>=</operator> <call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ts_language_public_symbol</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ts_node_type</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>symbol</name> <init>= <expr><call><name>ts_node__alias</name><argument_list>(<argument><expr><operator>&amp;</operator><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>symbol</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>symbol</name> <operator>=</operator> <call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ts_language_symbol_name</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>ts_node_string</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_subtree_string</name><argument_list>(<argument><expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>self</name><operator>.</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_node_eq</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>TSNode</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>self</name><operator>.</operator><name>tree</name></name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>tree</name></name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>id</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_node_is_null</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>self</name><operator>.</operator><name>id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_node_is_extra</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_node_is_named</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>alias</name> <init>= <expr><call><name>ts_node__alias</name><argument_list>(<argument><expr><operator>&amp;</operator><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>alias</name></expr>

?</condition><then> <expr><call><name>ts_language_symbol_metadata</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call><operator>.</operator><name>named</name></expr>

</then><else>: <expr><call><name>ts_subtree_named</name><argument_list>(<argument><expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_node_is_missing</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_subtree_missing</name><argument_list>(<argument><expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_node_has_changes</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_subtree_has_changes</name><argument_list>(<argument><expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_node_has_error</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_subtree_error_cost</name><argument_list>(<argument><expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_parent</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TSNode</name></type> <name>node</name> <init>= <expr><call><name>ts_tree_get_cached_parent</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>node</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>ts_tree_root_node</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>end_byte</name> <init>= <expr><call><name>ts_node_end_byte</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>self</name><operator>.</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>last_visible_node</name> <init>= <expr><name>node</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_descend</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>did_descend</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TSNode</name></type> <name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NodeChildIterator</name></type> <name>iterator</name> <init>= <expr><call><name>ts_node_iterate_children</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>ts_node_child_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(

<expr><call><name>ts_node_start_byte</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>ts_node_start_byte</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>child</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>self</name><operator>.</operator><name>id</name></name></expr>

)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>.</operator><name>position</name><operator>.</operator><name>bytes</name></name> <operator>&gt;=</operator> <name>end_byte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_node__is_relevant</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ts_tree_set_cached_parent</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_visible_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_visible_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<return>return <expr><name>last_visible_node</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_child</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>child_index</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node__child</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>child_index</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_named_child</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>child_index</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node__child</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>child_index</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_child_by_field_id</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>TSFieldId</name></type> <name>field_id</name></decl></parameter>)</parameter_list> <block>{<block_content>

<label><name>recur</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>field_id</name> <operator>||</operator> <call><name>ts_node_child_count</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSFieldMapEntry</name> <modifier>*</modifier></type><name>field_map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>field_map_end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ts_language_field_map</name><argument_list>(

<argument><expr><name><name>self</name><operator>.</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,

<argument><expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>field_map</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>field_map_end</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>field_map</name> <operator>==</operator> <name>field_map_end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>field_map</name><operator>-&gt;</operator><name>field_id</name></name> <operator>&lt;</operator> <name>field_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>field_map</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>field_map</name> <operator>==</operator> <name>field_map_end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name><name>field_map_end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>field_id</name> <operator>&gt;</operator> <name>field_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>field_map_end</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>field_map</name> <operator>==</operator> <name>field_map_end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>TSNode</name></type> <name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NodeChildIterator</name></type> <name>iterator</name> <init>= <expr><call><name>ts_node_iterate_children</name><argument_list>(<argument><expr><operator>&amp;</operator><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>ts_node_child_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name> <init>= <expr><name><name>iterator</name><operator>.</operator><name>structural_child_index</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>field_map</name><operator>-&gt;</operator><name>child_index</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>field_map</name><operator>-&gt;</operator><name>inherited</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>field_map</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>field_map_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>self</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<goto>goto <name>recur</name>;</goto>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>TSNode</name></type> <name>result</name> <init>= <expr><call><name>ts_node_child_by_field_id</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>field_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>field_map</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>field_map</name> <operator>==</operator> <name>field_map_end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>ts_node__is_relevant</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>child</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>ts_node_child</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><call><name>ts_node__null</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_child_by_field_name</name><parameter_list>(

<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>name_length</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TSFieldId</name></type> <name>field_id</name> <init>= <expr><call><name>ts_language_field_id_for_name</name><argument_list>(

<argument><expr><name><name>self</name><operator>.</operator><name>tree</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,

<argument><expr><name>name</name></expr></argument>,

<argument><expr><name>name_length</name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ts_node_child_by_field_id</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>field_id</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ts_node_child_count</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Subtree</name></type> <name>tree</name> <init>= <expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>visible_child_count</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ts_node_named_child_count</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Subtree</name></type> <name>tree</name> <init>= <expr><call><name>ts_node__subtree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>tree</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>named_child_count</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_next_sibling</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node__next_sibling</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_next_named_sibling</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node__next_sibling</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_prev_sibling</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node__prev_sibling</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_prev_named_sibling</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node__prev_sibling</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_first_child_for_byte</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>byte</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node__first_child_for_byte</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>byte</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_first_named_child_for_byte</name><parameter_list>(<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>byte</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node__first_child_for_byte</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>byte</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_descendant_for_byte_range</name><parameter_list>(

<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>end</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node__descendant_for_byte_range</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_named_descendant_for_byte_range</name><parameter_list>(

<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>end</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node__descendant_for_byte_range</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_descendant_for_point_range</name><parameter_list>(

<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>,

<parameter><decl><type><name>TSPoint</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><name>TSPoint</name></type> <name>end</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node__descendant_for_point_range</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>TSNode</name></type> <name>ts_node_named_descendant_for_point_range</name><parameter_list>(

<parameter><decl><type><name>TSNode</name></type> <name>self</name></decl></parameter>,

<parameter><decl><type><name>TSPoint</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><name>TSPoint</name></type> <name>end</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>ts_node__descendant_for_point_range</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_node_edit</name><parameter_list>(<parameter><decl><type><name>TSNode</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSInputEdit</name> <modifier>*</modifier></type><name>edit</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>start_byte</name> <init>= <expr><call><name>ts_node_start_byte</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSPoint</name></type> <name>start_point</name> <init>= <expr><call><name>ts_node_start_point</name><argument_list>(<argument><expr><operator>*</operator><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start_byte</name> <operator>&gt;=</operator> <name><name>edit</name><operator>-&gt;</operator><name>old_end_byte</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_byte</name> <operator>=</operator> <name><name>edit</name><operator>-&gt;</operator><name>new_end_byte</name></name> <operator>+</operator> <operator>(</operator><name>start_byte</name> <operator>-</operator> <name><name>edit</name><operator>-&gt;</operator><name>old_end_byte</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>start_point</name> <operator>=</operator> <call><name>point_add</name><argument_list>(<argument><expr><name><name>edit</name><operator>-&gt;</operator><name>new_end_point</name></name></expr></argument>, <argument><expr><call><name>point_sub</name><argument_list>(<argument><expr><name>start_point</name></expr></argument>, <argument><expr><name><name>edit</name><operator>-&gt;</operator><name>old_end_point</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>start_byte</name> <operator>&gt;</operator> <name><name>edit</name><operator>-&gt;</operator><name>start_byte</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_byte</name> <operator>=</operator> <name><name>edit</name><operator>-&gt;</operator><name>new_end_byte</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_point</name> <operator>=</operator> <name><name>edit</name><operator>-&gt;</operator><name>new_end_point</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>start_byte</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>start_point</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>context</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>start_point</name><operator>.</operator><name>column</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
