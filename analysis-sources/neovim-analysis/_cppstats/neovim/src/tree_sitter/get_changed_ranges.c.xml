<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\tree_sitter\get_changed_ranges.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./get_changed_ranges.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./subtree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./language.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./error_costs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./tree_cursor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_range_array_add</name><parameter_list>(<parameter><decl><type><name>TSRangeArray</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Length</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Length</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>TSRange</name> <modifier>*</modifier></type><name>last_range</name> <init>= <expr><call><name>array_back</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>start</name><operator>.</operator><name>bytes</name></name> <operator>&lt;=</operator> <name><name>last_range</name><operator>-&gt;</operator><name>end_byte</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>last_range</name><operator>-&gt;</operator><name>end_byte</name></name> <operator>=</operator> <name><name>end</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last_range</name><operator>-&gt;</operator><name>end_point</name></name> <operator>=</operator> <name><name>end</name><operator>.</operator><name>extent</name></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>start</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name><name>end</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>TSRange</name></type> <name>range</name> <init>= <expr><block>{ <expr><name><name>start</name><operator>.</operator><name>extent</name></name></expr>, <expr><name><name>end</name><operator>.</operator><name>extent</name></name></expr>, <expr><name><name>start</name><operator>.</operator><name>bytes</name></name></expr>, <expr><name><name>end</name><operator>.</operator><name>bytes</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>array_push</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_range_array_intersects</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TSRangeArray</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>start_index</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>start_byte</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>end_byte</name></decl></parameter>)</parameter_list> <block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name>start_index</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>TSRange</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>end_byte</name></name> <operator>&gt;</operator> <name>start_byte</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>start_byte</name></name> <operator>&gt;=</operator> <name>end_byte</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_range_array_get_changed_ranges</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>TSRange</name> <modifier>*</modifier></type><name>old_ranges</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>old_range_count</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>TSRange</name> <modifier>*</modifier></type><name>new_ranges</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>new_range_count</name></decl></parameter>,

<parameter><decl><type><name>TSRangeArray</name> <modifier>*</modifier></type><name>differences</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>new_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>old_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>current_position</name> <init>= <expr><call><name>length_zero</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>in_old_range</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>in_new_range</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>old_index</name> <operator>&lt;</operator> <name>old_range_count</name> <operator>||</operator> <name>new_index</name> <operator>&lt;</operator> <name>new_range_count</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSRange</name> <modifier>*</modifier></type><name>old_range</name> <init>= <expr><operator>&amp;</operator><name><name>old_ranges</name><index>[<expr><name>old_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSRange</name> <modifier>*</modifier></type><name>new_range</name> <init>= <expr><operator>&amp;</operator><name><name>new_ranges</name><index>[<expr><name>new_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>next_old_position</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in_old_range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_old_position</name> <operator>=</operator> <operator>(</operator><name>Length</name><operator>)</operator> <block>{<expr><name><name>old_range</name><operator>-&gt;</operator><name>end_byte</name></name></expr>, <expr><name><name>old_range</name><operator>-&gt;</operator><name>end_point</name></name></expr>}</block></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>old_index</name> <operator>&lt;</operator> <name>old_range_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_old_position</name> <operator>=</operator> <operator>(</operator><name>Length</name><operator>)</operator> <block>{<expr><name><name>old_range</name><operator>-&gt;</operator><name>start_byte</name></name></expr>, <expr><name><name>old_range</name><operator>-&gt;</operator><name>start_point</name></name></expr>}</block></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>next_old_position</name> <operator>=</operator> <name>LENGTH_MAX</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>next_new_position</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in_new_range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_new_position</name> <operator>=</operator> <operator>(</operator><name>Length</name><operator>)</operator> <block>{<expr><name><name>new_range</name><operator>-&gt;</operator><name>end_byte</name></name></expr>, <expr><name><name>new_range</name><operator>-&gt;</operator><name>end_point</name></name></expr>}</block></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>new_index</name> <operator>&lt;</operator> <name>new_range_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_new_position</name> <operator>=</operator> <operator>(</operator><name>Length</name><operator>)</operator> <block>{<expr><name><name>new_range</name><operator>-&gt;</operator><name>start_byte</name></name></expr>, <expr><name><name>new_range</name><operator>-&gt;</operator><name>start_point</name></name></expr>}</block></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>next_new_position</name> <operator>=</operator> <name>LENGTH_MAX</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next_old_position</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name><name>next_new_position</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in_old_range</name> <operator>!=</operator> <name>in_new_range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ts_range_array_add</name><argument_list>(<argument><expr><name>differences</name></expr></argument>, <argument><expr><name>current_position</name></expr></argument>, <argument><expr><name>next_old_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in_old_range</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>old_index</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_position</name> <operator>=</operator> <name>next_old_position</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_old_range</name> <operator>=</operator> <operator>!</operator><name>in_old_range</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>next_new_position</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name><name>next_old_position</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in_old_range</name> <operator>!=</operator> <name>in_new_range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ts_range_array_add</name><argument_list>(<argument><expr><name>differences</name></expr></argument>, <argument><expr><name>current_position</name></expr></argument>, <argument><expr><name>next_new_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in_new_range</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>new_index</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_position</name> <operator>=</operator> <name>next_new_position</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_new_range</name> <operator>=</operator> <operator>!</operator><name>in_new_range</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in_old_range</name> <operator>!=</operator> <name>in_new_range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ts_range_array_add</name><argument_list>(<argument><expr><name>differences</name></expr></argument>, <argument><expr><name>current_position</name></expr></argument>, <argument><expr><name>next_new_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in_old_range</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>old_index</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in_new_range</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>new_index</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>in_old_range</name> <operator>=</operator> <operator>!</operator><name>in_old_range</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_new_range</name> <operator>=</operator> <operator>!</operator><name>in_new_range</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_position</name> <operator>=</operator> <name>next_new_position</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>TreeCursor</name></type> <name>cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>visible_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>in_padding</name></decl>;</decl_stmt>

}</block></struct></type> <name>Iterator</name>;</typedef>

<function><type><specifier>static</specifier> <name>Iterator</name></type> <name>iterator_new</name><parameter_list>(<parameter><decl><type><name>TreeCursor</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>array_push</name><argument_list>(<argument>&amp;cursor-&gt;stack</argument>, <argument>((TreeCursorEntry){

.subtree = tree,

.position = length_zero(),

.child_index = <literal type="number">0</literal>,

.structural_child_index = <literal type="number">0</literal>,

})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<return>return <expr><operator>(</operator><name>Iterator</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>cursor</name> <operator>=</operator> <operator>*</operator><name>cursor</name></expr>,

<expr><operator>.</operator><name>language</name> <operator>=</operator> <name>language</name></expr>,

<expr><operator>.</operator><name>visible_depth</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>in_padding</name> <operator>=</operator> <name>false</name></expr>,

}</block></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>iterator_done</name><parameter_list>(<parameter><decl><type><name>Iterator</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Length</name></type> <name>iterator_start_position</name><parameter_list>(<parameter><decl><type><name>Iterator</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TreeCursorEntry</name></type> <name>entry</name> <init>= <expr><operator>*</operator><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>in_padding</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>entry</name><operator>.</operator><name>position</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>length_add</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_padding</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Length</name></type> <name>iterator_end_position</name><parameter_list>(<parameter><decl><type><name>Iterator</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TreeCursorEntry</name></type> <name>entry</name> <init>= <expr><operator>*</operator><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>result</name> <init>= <expr><call><name>length_add</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_padding</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>in_padding</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>length_add</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ts_subtree_size</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>iterator_tree_is_visible</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Iterator</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TreeCursorEntry</name></type> <name>entry</name> <init>= <expr><operator>*</operator><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_visible</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Subtree</name></type> <name>parent</name> <init>= <expr><operator>*</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name><operator>.</operator><name>contents</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>subtree</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSSymbol</name> <modifier>*</modifier></type><name>alias_sequence</name> <init>= <expr><call><name>ts_language_alias_sequence</name><argument_list>(

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,

<argument><expr><name><name>parent</name><operator>.</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>alias_sequence</name> <operator>&amp;&amp;</operator> <name><name>alias_sequence</name><index>[<expr><name><name>entry</name><operator>.</operator><name>structural_child_index</name></name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iterator_get_visible_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Iterator</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Subtree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,

<parameter><decl><type><name>TSSymbol</name> <modifier>*</modifier></type><name>alias_symbol</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>start_byte</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>in_padding</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>TreeCursorEntry</name></type> <name>entry</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name><operator>.</operator><name>contents</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>subtree</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSSymbol</name> <modifier>*</modifier></type><name>alias_sequence</name> <init>= <expr><call><name>ts_language_alias_sequence</name><argument_list>(

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>,

<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>production_id</name></name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alias_sequence</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>alias_symbol</name> <operator>=</operator> <name><name>alias_sequence</name><index>[<expr><name><name>entry</name><operator>.</operator><name>structural_child_index</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_visible</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>subtree</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>alias_symbol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tree</name> <operator>=</operator> <operator>*</operator><name><name>entry</name><operator>.</operator><name>subtree</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>start_byte</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>position</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iterator_ascend</name><parameter_list>(<parameter><decl><type><name>Iterator</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>iterator_done</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iterator_tree_is_visible</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>self</name><operator>-&gt;</operator><name>in_padding</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>visible_depth</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>child_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>in_padding</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>iterator_descend</name><parameter_list>(<parameter><decl><type><name>Iterator</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>goal_position</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>in_padding</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_descend</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TreeCursorEntry</name></type> <name>entry</name> <init>= <expr><operator>*</operator><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>position</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>position</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>structural_child_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><operator>&amp;</operator><name><name>entry</name><operator>.</operator><name>subtree</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>child_left</name> <init>= <expr><call><name>length_add</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><call><name>ts_subtree_padding</name><argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>child_right</name> <init>= <expr><call><name>length_add</name><argument_list>(<argument><expr><name>child_left</name></expr></argument>, <argument><expr><call><name>ts_subtree_size</name><argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>child_right</name><operator>.</operator><name>bytes</name></name> <operator>&gt;</operator> <name>goal_position</name></expr>)</condition> <block>{<block_content>

<macro><name>array_push</name><argument_list>(<argument>&amp;self-&gt;cursor.stack</argument>, <argument>((TreeCursorEntry){

.subtree = child,

.position = position,

.child_index = i,

.structural_child_index = structural_child_index,

})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iterator_tree_is_visible</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>child_left</name><operator>.</operator><name>bytes</name></name> <operator>&gt;</operator> <name>goal_position</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>in_padding</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>visible_depth</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_descend</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>position</name> <operator>=</operator> <name>child_right</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><operator>*</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>structural_child_index</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block> while <condition>(<expr><name>did_descend</name></expr>)</condition>;</do>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iterator_advance</name><parameter_list>(<parameter><decl><type><name>Iterator</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>in_padding</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>in_padding</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iterator_tree_is_visible</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>visible_depth</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>iterator_descend</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>iterator_tree_is_visible</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>visible_depth</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>TreeCursorEntry</name></type> <name>entry</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iterator_done</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subtree</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>child_index</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>child_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><operator>*</operator><name>parent</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>child_index</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Length</name></type> <name>position</name> <init>= <expr><call><name>length_add</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_total_size</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>structural_child_index</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>structural_child_index</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_subtree_extra</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>structural_child_index</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type><name>next_child</name> <init>= <expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>child_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<macro><name>array_push</name><argument_list>(<argument>&amp;self-&gt;cursor.stack</argument>, <argument>((TreeCursorEntry){

.subtree = next_child,

.position = position,

.child_index = child_index,

.structural_child_index = structural_child_index,

})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iterator_tree_is_visible</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_padding</name><argument_list>(<argument><expr><operator>*</operator><name>next_child</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>in_padding</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>visible_depth</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>iterator_descend</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{

<decl><name>IteratorDiffers</name></decl>,

<decl><name>IteratorMayDiffer</name></decl>,

<decl><name>IteratorMatches</name></decl>,

}</block></enum></type> <name>IteratorComparison</name>;</typedef>

<function><type><specifier>static</specifier> <name>IteratorComparison</name></type> <name>iterator_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Iterator</name> <modifier>*</modifier></type><name>old_iter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Iterator</name> <modifier>*</modifier></type><name>new_iter</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>Subtree</name></type> <name>old_tree</name> <init>= <expr><name>NULL_SUBTREE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Subtree</name></type> <name>new_tree</name> <init>= <expr><name>NULL_SUBTREE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>old_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>old_alias_symbol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSSymbol</name></type> <name>new_alias_symbol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>iterator_get_visible_state</name><argument_list>(<argument><expr><name>old_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_alias_symbol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>iterator_get_visible_state</name><argument_list>(<argument><expr><name>new_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_alias_symbol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>old_tree</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>new_tree</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>IteratorMatches</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>old_tree</name><operator>.</operator><name>ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>new_tree</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>IteratorDiffers</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(

<expr><name>old_alias_symbol</name> <operator>==</operator> <name>new_alias_symbol</name> <operator>&amp;&amp;</operator>

<call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>old_tree</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>new_tree</name></expr></argument>)</argument_list></call></expr>

)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>old_start</name> <operator>==</operator> <name>new_start</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>ts_subtree_has_changes</name><argument_list>(<argument><expr><name>old_tree</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><name>old_tree</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ts_builtin_sym_error</name> <operator>&amp;&amp;</operator>

<call><name>ts_subtree_size</name><argument_list>(<argument><expr><name>old_tree</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name> <operator>==</operator> <call><name>ts_subtree_size</name><argument_list>(<argument><expr><name>new_tree</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name> <operator>&amp;&amp;</operator>

<call><name>ts_subtree_parse_state</name><argument_list>(<argument><expr><name>old_tree</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TS_TREE_STATE_NONE</name> <operator>&amp;&amp;</operator>

<call><name>ts_subtree_parse_state</name><argument_list>(<argument><expr><name>new_tree</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TS_TREE_STATE_NONE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>ts_subtree_parse_state</name><argument_list>(<argument><expr><name>old_tree</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERROR_STATE</name><operator>)</operator> <operator>==</operator>

<operator>(</operator><call><name>ts_subtree_parse_state</name><argument_list>(<argument><expr><name>new_tree</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERROR_STATE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>IteratorMatches</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>IteratorMayDiffer</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>IteratorDiffers</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GET_CHANGED_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>iterator_print_state</name><parameter_list>(<parameter><decl><type><name>Iterator</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TreeCursorEntry</name></type> <name>entry</name> <init>= <expr><operator>*</operator><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSPoint</name></type> <name>start</name> <init>= <expr><call><name>iterator_start_position</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>.</operator><name>extent</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSPoint</name></type> <name>end</name> <init>= <expr><call><name>iterator_end_position</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>.</operator><name>extent</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>ts_language_symbol_name</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><call><name>ts_subtree_symbol</name><argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>.</operator><name>subtree</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(

<argument><expr><literal type="string">"(%-25s %s\t depth:%u [%u, %u] - [%u, %u])"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>in_padding</name></name></expr> ?</condition><then> <expr><literal type="string">"(p)"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>self</name><operator>-&gt;</operator><name>visible_depth</name></name></expr></argument>,

<argument><expr><name><name>start</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>start</name><operator>.</operator><name>column</name></name></expr></argument>,

<argument><expr><name><name>end</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>end</name><operator>.</operator><name>column</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>unsigned</name></type> <name>ts_subtree_get_changed_ranges</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type><name>old_tree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Subtree</name> <modifier>*</modifier></type><name>new_tree</name></decl></parameter>,

<parameter><decl><type><name>TreeCursor</name> <modifier>*</modifier></type><name>cursor1</name></decl></parameter>, <parameter><decl><type><name>TreeCursor</name> <modifier>*</modifier></type><name>cursor2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>TSLanguage</name> <modifier>*</modifier></type><name>language</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>TSRangeArray</name> <modifier>*</modifier></type><name>included_range_differences</name></decl></parameter>,

<parameter><decl><type><name>TSRange</name> <modifier>*</modifier><modifier>*</modifier></type><name>ranges</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>TSRangeArray</name></type> <name>results</name> <init>= <expr><call><name>array_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Iterator</name></type> <name>old_iter</name> <init>= <expr><call><name>iterator_new</name><argument_list>(<argument><expr><name>cursor1</name></expr></argument>, <argument><expr><name>old_tree</name></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Iterator</name></type> <name>new_iter</name> <init>= <expr><call><name>iterator_new</name><argument_list>(<argument><expr><name>cursor2</name></expr></argument>, <argument><expr><name>new_tree</name></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>included_range_difference_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>position</name> <init>= <expr><call><name>iterator_start_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>next_position</name> <init>= <expr><call><name>iterator_start_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>position</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name><name>next_position</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ts_range_array_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>results</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>next_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>position</name> <operator>=</operator> <name>next_position</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>position</name><operator>.</operator><name>bytes</name></name> <operator>&gt;</operator> <name><name>next_position</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ts_range_array_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>results</name></expr></argument>, <argument><expr><name>next_position</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_position</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GET_CHANGED_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"At [%-2u, %-2u] Compare "</literal></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>extent</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>iterator_print_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tvs\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>iterator_print_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>IteratorComparison</name></type> <name>comparison</name> <init>= <expr><call><name>iterator_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>comparison</name> <operator>==</operator> <name>IteratorMatches</name> <operator>&amp;&amp;</operator> <call><name>ts_range_array_intersects</name><argument_list>(

<argument><expr><name>included_range_differences</name></expr></argument>,

<argument><expr><name>included_range_difference_index</name></expr></argument>,

<argument><expr><name><name>position</name><operator>.</operator><name>bytes</name></name></expr></argument>,

<argument><expr><call><name>iterator_end_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_iter</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name></expr></argument>

)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>comparison</name> <operator>=</operator> <name>IteratorMayDiffer</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>comparison</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>IteratorMatches</name></expr>:</case>

<expr_stmt><expr><name>next_position</name> <operator>=</operator> <call><name>iterator_end_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>IteratorMayDiffer</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>iterator_descend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_iter</name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iterator_descend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_iter</name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_position</name> <operator>=</operator> <call><name>iterator_end_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>iterator_descend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_iter</name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_position</name> <operator>=</operator> <call><name>iterator_end_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>next_position</name> <operator>=</operator> <call><name>length_min</name><argument_list>(

<argument><expr><call><name>iterator_end_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_iter</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>iterator_end_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_iter</name></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>IteratorDiffers</name></expr>:</case>

<expr_stmt><expr><name>is_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_position</name> <operator>=</operator> <call><name>length_min</name><argument_list>(

<argument><expr><call><name>iterator_end_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_iter</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>iterator_end_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_iter</name></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<while>while <condition>(

<expr><operator>!</operator><call><name>iterator_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_iter</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>iterator_end_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_iter</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name> <operator>&lt;=</operator> <name><name>next_position</name><operator>.</operator><name>bytes</name></name></expr>

)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>iterator_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(

<expr><operator>!</operator><call><name>iterator_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_iter</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>iterator_end_position</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_iter</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name> <operator>&lt;=</operator> <name><name>next_position</name><operator>.</operator><name>bytes</name></name></expr>

)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>iterator_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name><name>old_iter</name><operator>.</operator><name>visible_depth</name></name> <operator>&gt;</operator> <name><name>new_iter</name><operator>.</operator><name>visible_depth</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>iterator_ascend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name><name>new_iter</name><operator>.</operator><name>visible_depth</name></name> <operator>&gt;</operator> <name><name>old_iter</name><operator>.</operator><name>visible_depth</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>iterator_ascend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>is_changed</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GET_CHANGED_RANGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(

<argument><expr><literal type="string">" change: [[%u, %u] - [%u, %u]]\n"</literal></expr></argument>,

<argument><expr><name><name>position</name><operator>.</operator><name>extent</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name></expr></argument>,

<argument><expr><name><name>next_position</name><operator>.</operator><name>extent</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>next_position</name><operator>.</operator><name>extent</name><operator>.</operator><name>column</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ts_range_array_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>results</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>next_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>position</name> <operator>=</operator> <name>next_position</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>included_range_difference_index</name> <operator>&lt;</operator> <name><name>included_range_differences</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>TSRange</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><operator>&amp;</operator><name><name>included_range_differences</name><operator>-&gt;</operator><name>contents</name><index>[

<expr><name>included_range_difference_index</name></expr>

]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>end_byte</name></name> <operator>&lt;=</operator> <name><name>position</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>included_range_difference_index</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>iterator_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_iter</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>iterator_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_iter</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<decl_stmt><decl><type><name>Length</name></type> <name>old_size</name> <init>= <expr><call><name>ts_subtree_total_size</name><argument_list>(<argument><expr><operator>*</operator><name>old_tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Length</name></type> <name>new_size</name> <init>= <expr><call><name>ts_subtree_total_size</name><argument_list>(<argument><expr><operator>*</operator><name>new_tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>old_size</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name><name>new_size</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ts_range_array_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>results</name></expr></argument>, <argument><expr><name>old_size</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>new_size</name><operator>.</operator><name>bytes</name></name> <operator>&lt;</operator> <name><name>old_size</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ts_range_array_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>results</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>, <argument><expr><name>old_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cursor1</name> <operator>=</operator> <name><name>old_iter</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cursor2</name> <operator>=</operator> <name><name>new_iter</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ranges</name> <operator>=</operator> <name><name>results</name><operator>.</operator><name>contents</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>results</name><operator>.</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
