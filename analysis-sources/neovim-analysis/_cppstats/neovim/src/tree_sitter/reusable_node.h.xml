<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\tree_sitter\reusable_node.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./subtree.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>Subtree</name></type> <name>tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>child_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>byte_offset</name></decl>;</decl_stmt>

}</block></struct></type> <name>StackEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<macro><name>Array</name><argument_list>(<argument>StackEntry</argument>)</argument_list></macro> <expr_stmt><expr><name>stack</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Subtree</name></type> <name>last_external_token</name></decl>;</decl_stmt>

}</block></struct></type> <name>ReusableNode</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ReusableNode</name></type> <name>reusable_node_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>ReusableNode</name><operator>)</operator> <block>{<expr><call><name>array_new</name><argument_list>()</argument_list></call></expr>, <expr><name>NULL_SUBTREE</name></expr>}</block></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reusable_node_clear</name><parameter_list>(<parameter><decl><type><name>ReusableNode</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>last_external_token</name></name> <operator>=</operator> <name>NULL_SUBTREE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reusable_node_reset</name><parameter_list>(<parameter><decl><type><name>ReusableNode</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Subtree</name></type> <name>tree</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>reusable_node_clear</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>array_push</name><argument_list>(<argument>&amp;self-&gt;stack</argument>, <argument>((StackEntry) {

.tree = tree,

.child_index = <literal type="number">0</literal>,

.byte_offset = <literal type="number">0</literal>,

})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Subtree</name></type> <name>reusable_node_tree</name><parameter_list>(<parameter><decl><type><name>ReusableNode</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>contents</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tree</name></expr>

</then><else>: <expr><name>NULL_SUBTREE</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>reusable_node_byte_offset</name><parameter_list>(<parameter><decl><type><name>ReusableNode</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>contents</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>byte_offset</name></expr>

</then><else>: <expr><name>UINT32_MAX</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reusable_node_delete</name><parameter_list>(<parameter><decl><type><name>ReusableNode</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reusable_node_advance</name><parameter_list>(<parameter><decl><type><name>ReusableNode</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>StackEntry</name></type> <name>last_entry</name> <init>= <expr><operator>*</operator><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>byte_offset</name> <init>= <expr><name><name>last_entry</name><operator>.</operator><name>byte_offset</name></name> <operator>+</operator> <call><name>ts_subtree_total_bytes</name><argument_list>(<argument><expr><name><name>last_entry</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_has_external_tokens</name><argument_list>(<argument><expr><name><name>last_entry</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>last_external_token</name></name> <operator>=</operator> <call><name>ts_subtree_last_external_token</name><argument_list>(<argument><expr><name><name>last_entry</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Subtree</name></type> <name>tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>next_index</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>StackEntry</name></type> <name>popped_entry</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>next_index</name> <operator>=</operator> <name><name>popped_entry</name><operator>.</operator><name>child_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>stack</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tree</name> <operator>=</operator> <call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tree</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>next_index</name></expr>)</condition>;</do>

<macro><name>array_push</name><argument_list>(<argument>&amp;self-&gt;stack</argument>, <argument>((StackEntry) {

.tree = tree.ptr-&gt;children[next_index],

.child_index = next_index,

.byte_offset = byte_offset,

})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>reusable_node_descend</name><parameter_list>(<parameter><decl><type><name>ReusableNode</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>StackEntry</name></type> <name>last_entry</name> <init>= <expr><operator>*</operator><call><name>array_back</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ts_subtree_child_count</name><argument_list>(<argument><expr><name><name>last_entry</name><operator>.</operator><name>tree</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<macro><name>array_push</name><argument_list>(<argument>&amp;self-&gt;stack</argument>, <argument>((StackEntry) {

.tree = last_entry.tree.ptr-&gt;children[<literal type="number">0</literal>],

.child_index = <literal type="number">0</literal>,

.byte_offset = last_entry.byte_offset,

})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reusable_node_advance_past_leaf</name><parameter_list>(<parameter><decl><type><name>ReusableNode</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<while>while <condition>(<expr><call><name>reusable_node_descend</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content/>}</block></while>

<expr_stmt><expr><call><name>reusable_node_advance</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
