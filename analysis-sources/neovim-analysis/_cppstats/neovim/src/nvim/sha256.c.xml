<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\sha256.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/sha256.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha256.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_UINT32</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (n) = ((uint32_t)(b)[(i)] &lt;&lt; 24) | ((uint32_t)(b)[(i) + 1] &lt;&lt; 16) | ((uint32_t)(b)[(i) + 2] &lt;&lt; 8) | ((uint32_t)(b)[(i) + 3]); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_UINT32</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (b)[(i)] = (char_u)((n) &gt;&gt; 24); (b)[(i) + 1] = (char_u)((n) &gt;&gt; 16); (b)[(i) + 2] = (char_u)((n) &gt;&gt; 8); (b)[(i) + 3] = (char_u)((n)); }</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>sha256_start</name><parameter_list>(<parameter><decl><type><name>context_sha256_T</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x6A09E667</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xBB67AE85</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3C6EF372</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xA54FF53A</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x510E527F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x9B05688C</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x1F83D9AB</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x5BE0CD19</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha256_process</name><parameter_list>(<parameter><decl><type><name>context_sha256_T</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char_u</name></type> <name><name>data</name><index>[<expr><name>SHA256_BUFFER_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name><name>W</name><index>[<expr><name>SHA256_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>, <decl><type ref="prev"/><name>D</name></decl>, <decl><type ref="prev"/><name>E</name></decl>, <decl><type ref="prev"/><name>F</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>H</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_UINT32</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x &amp; 0xFFFFFFFF) &gt;&gt; n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SHR(x, n) | (x &lt;&lt; (32 - n)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ROTR(x, 7) ^ ROTR(x, 18) ^ SHR(x, 3))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ROTR(x, 17) ^ ROTR(x, 19) ^ SHR(x, 10))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ROTR(x, 2) ^ ROTR(x, 13) ^ ROTR(x, 22))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ROTR(x, 6) ^ ROTR(x, 11) ^ ROTR(x, 25))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x &amp; y) | (z &amp; (x | y)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(z ^ (x &amp; (y ^ z)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(W[t] = S1(W[t - 2]) + W[t - 7] + S0(W[t - 15]) + W[t - 16])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>K</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ temp1 = h + S3(e) + F1(e, f, g) + K + x; temp2 = S2(a) + F0(a, b, c); d += temp1; h = temp1 + temp2; }</cpp:value></cpp:define>

<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>D</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>F</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>H</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x428A2F98</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x71374491</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xB5C0FBCF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xE9B5DBA5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x3956C25B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x59F111F1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x923F82A4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xAB1C5ED5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xD807AA98</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x12835B01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x243185BE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x550C7DC3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x72BE5D74</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x80DEB1FE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x9BDC06A7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xC19BF174</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xE49B69C1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xEFBE4786</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x0FC19DC6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x240CA1CC</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x2DE92C6F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x4A7484AA</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x5CB0A9DC</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x76F988DA</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x983E5152</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xA831C66D</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xB00327C8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xBF597FC7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xC6E00BF3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xD5A79147</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x06CA6351</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x14292967</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x27B70A85</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x2E1B2138</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x4D2C6DFC</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x53380D13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x650A7354</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x766A0ABB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x81C2C92E</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x92722C85</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xA2BFE8A1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xA81A664B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xC24B8B70</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xC76C51A3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xD192E819</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xD6990624</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xF40E3585</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">47</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x106AA070</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x19A4C116</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">49</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x1E376C08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x2748774C</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x34B0BCB5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x391C0CB3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x4ED8AA4A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">54</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x5B9CCA4F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x682E6FF3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x748F82EE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x78A5636F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">58</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x84C87814</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x8CC70208</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x90BEFFFA</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xA4506CEB</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xBEF9A3F7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>P</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xC67178F2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>A</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>C</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>E</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>F</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>H</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sha256_update</name><parameter_list>(<parameter><decl><type><name>context_sha256_T</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>left</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>SHA256_BUFFER_SIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>fill</name> <init>= <expr><name>SHA256_BUFFER_SIZE</name> <operator>-</operator> <name>left</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>length</name> <operator>&gt;=</operator> <name>fill</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>left</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>input</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sha256_process</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <name>fill</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <name>fill</name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>length</name> <operator>&gt;=</operator> <name>SHA256_BUFFER_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sha256_process</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <name>SHA256_BUFFER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <name>SHA256_BUFFER_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>left</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>input</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>sha256_padding</name><index>[<expr><name>SHA256_BUFFER_SIZE</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>sha256_finish</name><parameter_list>(<parameter><decl><type><name>context_sha256_T</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>char_u</name></type> <name><name>digest</name><index>[<expr><name>SHA256_SUM_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>padn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>high</name></decl>, <decl><type ref="prev"/><name>low</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>msglen</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">29</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUT_UINT32</name><argument_list>(<argument><expr><name>high</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUT_UINT32</name><argument_list>(<argument><expr><name>low</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>padn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>last</name> <operator>&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">56</literal> <operator>-</operator> <name>last</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">120</literal> <operator>-</operator> <name>last</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sha256_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sha256_padding</name></expr></argument>, <argument><expr><name>padn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sha256_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUT_UINT32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUT_UINT32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUT_UINT32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUT_UINT32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUT_UINT32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUT_UINT32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUT_UINT32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUT_UINT32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA_STEP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sha256_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>salt_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>sha256sum</name><index>[<expr><name>SHA256_SUM_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>hexit</name><index>[<expr><name>SHA256_BUFFER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>context_sha256_T</name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sha256_self_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sha256_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>salt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sha256_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>sha256sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SHA256_SUM_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>hexit</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>SHA_STEP</name></expr></argument>, <argument><expr><name>SHA_STEP</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>sha256sum</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>hexit</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>hexit</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>hexit</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>sha_self_test_msg</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"abc"</literal></expr>,

<expr><literal type="string">"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>sha_self_test_vector</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"ba7816bf8f01cfea414140de5dae2223"</literal> \

<literal type="string">"b00361a396177a9cb410ff61f20015ad"</literal></expr>,

<expr><literal type="string">"248d6a61d20638b8e5c026930c3e6039"</literal> \

<literal type="string">"a33ce45964ff2167f6ecedd419db06c1"</literal></expr>,

<expr><literal type="string">"cdc76e5c9914fb9281a1c7e284d73e67"</literal> \

<literal type="string">"f1809a48a497200e046d39ccc7112cd0"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>sha256_self_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>output</name><index>[<expr><name>SHA256_BUFFER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>context_sha256_T</name></type> <name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>sha256sum</name><index>[<expr><name>SHA256_SUM_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hexit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>sha256_self_tested</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>failures</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sha256_self_tested</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>failures</name> <operator>==</operator> <name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sha256_self_tested</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hexit</name> <operator>=</operator> <call><name>sha256_bytes</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>sha_self_test_msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sha_self_test_msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>hexit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sha256_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>sha256_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>sha256sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SHA256_SUM_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>output</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>SHA_STEP</name></expr></argument>, <argument><expr><name>SHA_STEP</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>sha256sum</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>sha_self_test_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>SHA256_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>failures</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>failures</name> <operator>==</operator> <name>false</name></expr>;</return>

</block_content>}</block></function>

</unit>
