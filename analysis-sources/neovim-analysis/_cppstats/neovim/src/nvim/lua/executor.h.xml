<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\lua\executor.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lua.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lauxlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds_defs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>void</name></type> <name>nlua_add_api_functions</name><argument_list>(<argument><expr><name>lua_State</name> <operator>*</operator><name>lstate</name></expr></argument>)</argument_list> <name>REAL_FATTR_NONNULL_ALL</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>LuaRef</name> <name>nlua_nil_ref</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>LUA_NOREF</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>LuaRef</name> <name>nlua_empty_dict_ref</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>LUA_NOREF</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_api_error</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>err</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { Error *err_ = (err); err_-&gt;type = kErrorTypeException; err_-&gt;set = true; memcpy(&amp;err_-&gt;msg[0], s, sizeof(s)); } while (0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua/executor.h.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
