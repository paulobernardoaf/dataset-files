<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\buffer_defs.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>file_buffer</name></name></type> <name>buf_T</name>;</typedef> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>br_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>br_fnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>br_buf_free_count</name></decl>;</decl_stmt>

}</block></struct></type> <name>bufref_T</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/grid_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/pos.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/undo_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/hashtab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/profile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kvec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/marktree.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETFILE_SUCCESS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &lt;= 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODIFIABLE</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(buf-&gt;b_p_ma)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_WROW</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_WCOL</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_VIRTCOL</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_CHEIGHT</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_CROW</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_BOTLINE</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_BOTLINE_AP</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_TOPLINE</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_RECOVERED</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_CHECK_RO</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_NEVERLOADED</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_NOTEDITED</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_NEW</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_NEW_W</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_READERR</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_DUMMY</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_PRESERVED</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_WRITE_MASK</name></cpp:macro> <cpp:value>(BF_NOTEDITED + BF_NEW + BF_READERR)</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>window_S</name></name></type> <name>win_T</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>wininfo_S</name></name></type> <name>wininfo_T</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>frame_S</name></name></type> <name>frame_T</name>;</typedef>

<typedef>typedef <type><name>uint16_t</name></type> <name>disptick_T</name>;</typedef> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memfile_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/regexp_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/sign_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/fs_defs.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/terminal.h"</cpp:file></cpp:include> 

<typedef>typedef <type><struct>struct <name>taggy</name> <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tagname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>fmark_T</name></type> <name>fmark</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cur_match</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cur_fnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>user_data</name></decl>;</decl_stmt> 

}</block></struct></type> <name>taggy_T</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>buffblock</name></name></type> <name>buffblock_T</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>buffheader</name></name></type> <name>buffheader_T</name>;</typedef>

<struct>struct <name>buffblock</name> <block>{

<decl_stmt><decl><type><name>buffblock_T</name> <modifier>*</modifier></type><name>b_next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>b_str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>buffheader</name> <block>{

<decl_stmt><decl><type><name>buffblock_T</name></type> <name>bh_first</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>buffblock_T</name> <modifier>*</modifier></type><name>bh_curr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>bh_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>bh_space</name></decl>;</decl_stmt> 

}</block>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>buffheader_T</name></type> <name>sr_redobuff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buffheader_T</name></type> <name>sr_old_redobuff</name></decl>;</decl_stmt>

}</block></struct></type> <name>save_redo_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>wo_arab</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_arab</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_arab</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_bri</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_bri</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_bri</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_briopt</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_briopt</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_briopt</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_diff</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_diff</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_diff</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_fdc</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fdc</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fdc</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_fdc_save</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fdc_save</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fdc_save</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_fen</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fen</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fen</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_fen_save</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fen_save</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fen_save</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_fdi</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fdi</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fdi</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>long</name></type> <name>wo_fdl</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fdl</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fdl</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_fdl_save</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fdl_save</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fdl_save</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_fdm</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fdm</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fdm</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_fdm_save</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fdm_save</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fdm_save</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>long</name></type> <name>wo_fml</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fml</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fml</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>long</name></type> <name>wo_fdn</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fdn</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fdn</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_fde</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fde</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fde</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_fdt</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fdt</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fdt</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_fmr</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fmr</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fmr</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_lbr</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_lbr</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_lbr</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_list</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_list</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_list</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_nu</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_nu</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_nu</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_rnu</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_rnu</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_rnu</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>long</name></type> <name>wo_nuw</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_nuw</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_nuw</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_wfh</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_wfh</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_wfh</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_wfw</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_wfw</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_wfw</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_pvw</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_pvw</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_pvw</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_rl</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_rl</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_rl</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_rlc</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_rlc</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_rlc</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>long</name></type> <name>wo_scr</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_scr</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_scr</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_spell</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_spell</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_spell</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_cuc</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_cuc</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_cuc</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_cul</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_cul</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_cul</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_cc</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_cc</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_cc</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_stl</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_stl</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_stl</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_scb</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_scb</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_scb</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_diff_saved</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_diff_saved</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_diff_saved</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>wo_scb_save</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_scb_save</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_scb_save</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>wo_wrap</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_wrap</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_wrap</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_wrap_save</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_wrap_save</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_wrap_save</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_cocu</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_cocu</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_cocu</cpp:value></cpp:define>

<decl_stmt><decl><type><name>long</name></type> <name>wo_cole</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_cole</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_cole</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>wo_crb</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_crb</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_crb</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>wo_crb_save</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_crb_save</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_crb_save</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_scl</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_scl</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_scl</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_winhl</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_winhl</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_winhl</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_fcs</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_fcs</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_fcs</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wo_lcs</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_lcs</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_lcs</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>long</name></type> <name>wo_winbl</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_winbl</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_winbl</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>LastSet</name></type> <name><name>wo_script_ctx</name><index>[<expr><name>WV_COUNT</name></expr>]</index></name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w_p_script_ctx</name></cpp:macro> <cpp:value>w_onebuf_opt.wo_script_ctx</cpp:value></cpp:define>

}</block></struct></type> <name>winopt_T</name>;</typedef>

<struct>struct <name>wininfo_S</name> <block>{

<decl_stmt><decl><type><name>wininfo_T</name> <modifier>*</modifier></type><name>wi_next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>wininfo_T</name> <modifier>*</modifier></type><name>wi_prev</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wi_win</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name></type> <name>wi_fpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>wi_optset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>winopt_T</name></type> <name>wi_opt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>wi_fold_manual</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>garray_T</name></type> <name>wi_folds</name></decl>;</decl_stmt> 

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>arglist</name> <block>{

<decl_stmt><decl><type><name>garray_T</name></type> <name>al_ga</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>al_refcount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt> 

}</block></struct></type> <name>alist_T</name>;</typedef>

<typedef>typedef <type><struct>struct <name>argentry</name> <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ae_fname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ae_fnum</name></decl>;</decl_stmt> 

}</block></struct></type> <name>aentry_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIST</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(win)-&gt;w_alist</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GARGLIST</name></cpp:macro> <cpp:value>((aentry_T *)global_alist.al_ga.ga_data)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGLIST</name></cpp:macro> <cpp:value>((aentry_T *)ALIST(curwin)-&gt;al_ga.ga_data)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WARGLIST</name><parameter_list>(<parameter><type><name>wp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((aentry_T *)ALIST(wp)-&gt;al_ga.ga_data)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AARGLIST</name><parameter_list>(<parameter><type><name>al</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((aentry_T *)((al)-&gt;al_ga.ga_data))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GARGCOUNT</name></cpp:macro> <cpp:value>(global_alist.al_ga.ga_len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGCOUNT</name></cpp:macro> <cpp:value>(ALIST(curwin)-&gt;al_ga.ga_len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WARGCOUNT</name><parameter_list>(<parameter><type><name>wp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ALIST(wp)-&gt;al_ga.ga_len)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tb_buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tb_noremap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tb_buflen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tb_off</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tb_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tb_maplen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tb_silent</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tb_no_abbr_cnt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tb_change_cnt</name></decl>;</decl_stmt> 

}</block></struct></type> <name>typebuf_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>typebuf_T</name></type> <name>save_typebuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>typebuf_valid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>old_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_mod_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buffheader_T</name></type> <name>save_readbuf1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buffheader_T</name></type> <name>save_readbuf2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>String</name></type> <name>save_inputbuf</name></decl>;</decl_stmt>

}</block></struct></type> <name>tasave_T</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>mapblock</name></name></type> <name>mapblock_T</name>;</typedef>

<struct>struct <name>mapblock</name> <block>{

<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>m_next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>m_keys</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>m_str</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>m_orig_str</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>m_keylen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>m_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>m_noremap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>m_silent</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>m_nowait</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>m_expr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>sctx_T</name></type> <name>m_script_ctx</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>stl_hlrec</name> <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>userhl</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNSPL_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNSPL_TOP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNSPL_NOTOP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_SPELL</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((buf)-&gt;b_spell)</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>qf_info_S</name></name></type> <name>qf_info_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>proftime_T</name></type> <name>total</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>proftime_T</name></type> <name>slowest</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>match</name></decl>;</decl_stmt> 

}</block></struct></type> <name>syn_time_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>hashtab_T</name></type> <name>b_keywtab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>hashtab_T</name></type> <name>b_keywtab_ic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_syn_error</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_syn_slow</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_syn_ic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_syn_spell</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>garray_T</name></type> <name>b_syn_patterns</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>garray_T</name></type> <name>b_syn_clusters</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_spell_cluster_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_nospell_cluster_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_syn_containedin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_syn_sync_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name>b_syn_sync_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>b_syn_sync_minlines</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>b_syn_sync_maxlines</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>b_syn_sync_linebreaks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>b_syn_linecont_pat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>b_syn_linecont_prog</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>syn_time_T</name></type> <name>b_syn_linecont_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_syn_linecont_ic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_syn_topgrp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_syn_conceal</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_syn_folditems</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>b_sst_array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_sst_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>b_sst_first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>b_sst_firstfree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_sst_freecount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>b_sst_check_lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>disptick_T</name></type> <name>b_sst_lasttick</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>garray_T</name></type> <name>b_langp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name><name>b_spell_ismw</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>b_spell_ismw_mb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>b_p_spc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>b_cap_prog</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>b_p_spf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>b_p_spl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_cjk</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>b_syn_chartab</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>b_syn_isk</name></decl>;</decl_stmt> 

}</block></struct></type> <name>synblock_T</name>;</typedef>

<typedef>typedef <macro><name>TV_DICTITEM_STRUCT</name><argument_list>(<argument>sizeof(<literal type="string">"changedtick"</literal>)</argument>)</argument_list></macro> <expr_stmt><expr><name>ChangedtickDictItem</name></expr>;</expr_stmt></typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>LuaRef</name></type> <name>on_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LuaRef</name></type> <name>on_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LuaRef</name></type> <name>on_changedtick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LuaRef</name></type> <name>on_detach</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>utf_sizes</name></decl>;</decl_stmt>

}</block></struct></type> <name>BufUpdateCallbacks</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_UPDATE_CALLBACKS_INIT</name></cpp:macro> <cpp:value>{ LUA_NOREF, LUA_NOREF, LUA_NOREF, LUA_NOREF, false }</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>curbuf_splice_pending</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_HAS_QF_ENTRY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_HAS_LL_ENTRY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MAPHASH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<struct>struct <name>file_buffer</name> <block>{

<decl_stmt><decl><type><name>handle_T</name></type> <name>handle</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>b_fnum</name></cpp:macro> <cpp:value>handle</cpp:value></cpp:define>

<decl_stmt><decl><type><name>memline_T</name></type> <name>b_ml</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>b_next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>b_prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_nwindows</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_locked</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>b_ffname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>b_sfname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>b_fname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>file_id_valid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FileID</name></type> <name>file_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_changed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ChangedtickDictItem</name></type> <name>changedtick_di</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>b_last_changedtick</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>b_last_changedtick_pum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_saving</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_mod_set</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>b_mod_top</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>b_mod_bot</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>b_mod_xlines</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>wininfo_T</name> <modifier>*</modifier></type><name>b_wininfo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>b_mtime</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>b_mtime_read</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>b_orig_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_orig_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>fmark_T</name></type> <name><name>b_namedm</name><index>[<expr><name>NMARKS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>visualinfo_T</name></type> <name>b_visual</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_visual_mode_eval</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>fmark_T</name></type> <name>b_last_cursor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>fmark_T</name></type> <name>b_last_insert</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>fmark_T</name></type> <name>b_last_change</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>fmark_T</name></type> <name><name>b_changelist</name><index>[<expr><name>JUMPLISTSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_changelistlen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_new_change</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>b_chartab</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mapblock_T</name> <argument_list>*<argument><expr><operator>(</operator><name><name>b_maphash</name><index>[<expr><name>MAX_MAPHASH</name></expr>]</index></name><operator>)</operator></expr></argument>;

<argument><expr><name>mapblock_T</name> <operator>*</operator><name>b_first_abbr</name></expr></argument>;

<argument><expr><name>garray_T</name> <name>b_ucmds</name></expr></argument>;

<argument><expr><name>pos_T</name> <name>b_op_start</name></expr></argument>;

<argument><expr><name>pos_T</name> <name>b_op_start_orig</name></expr></argument>; 

<argument><expr><name>pos_T</name> <name>b_op_end</name></expr></argument>;

<argument><expr><name>bool</name> <name>b_marks_read</name></expr></argument>; 

<argument><expr><name>u_header_T</name> <operator>*</operator><name>b_u_oldhead</name></expr></argument>; 

<argument><expr><name>u_header_T</name> <operator>*</operator><name>b_u_newhead</name></expr></argument>; 

<argument><expr><name>u_header_T</name> <operator>*</operator><name>b_u_curhead</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_u_numhead</name></expr></argument>; 

<argument><expr><name>bool</name> <name>b_u_synced</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_u_seq_last</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_u_save_nr_last</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_u_seq_cur</name></expr></argument>; 

<argument><expr><name>time_t</name> <name>b_u_time_cur</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_u_save_nr_cur</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_u_line_ptr</name></expr></argument>; 

<argument><expr><name>linenr_T</name> <name>b_u_line_lnum</name></expr></argument>; 

<argument><expr><name>colnr_T</name> <name>b_u_line_colnr</name></expr></argument>; 

<argument><expr><name>bool</name> <name>b_scanned</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_iminsert</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_imsearch</name></expr></argument>; 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_IMODE_USE_INSERT</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_IMODE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_IMODE_LMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_IMODE_LAST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<argument><expr><name>short</name> <name>b_kmap_state</name></expr></argument>; 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYMAP_INIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYMAP_LOADED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<argument><expr><name>garray_T</name> <name>b_kmap_ga</name></expr></argument>; 

<argument><expr><name>bool</name> <name>b_p_initialized</name></expr></argument>; 

<argument><expr><name>LastSet</name> <name><name>b_p_script_ctx</name><index>[<expr><name>BV_COUNT</name></expr>]</index></name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_ai</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_ai_nopaste</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_bkc</name></expr></argument>; 

<argument><expr><name>unsigned</name> <name>int</name> <name>b_bkc_flags</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_ci</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_bin</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_bomb</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_bh</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_bt</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_has_qf_entry</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_bl</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_channel</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_cin</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_cino</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_cink</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_cinw</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_com</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_cms</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_cpt</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_cfu</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_ofu</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_tfu</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_eol</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_fixeol</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_et</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_et_nobin</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_et_nopaste</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_fenc</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_ff</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_ft</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_fo</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_flp</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_inf</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_isk</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_def</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_inc</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_inex</name></expr></argument>; 

<argument><expr><name>uint32_t</name> <name>b_p_inex_flags</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_inde</name></expr></argument>; 

<argument><expr><name>uint32_t</name> <name>b_p_inde_flags</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_indk</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_fp</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_fex</name></expr></argument>; 

<argument><expr><name>uint32_t</name> <name>b_p_fex_flags</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_kp</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_lisp</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_menc</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_mps</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_ml</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_ml_nobin</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_ma</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_nf</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_pi</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_qe</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_ro</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_sw</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_scbk</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_si</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_sts</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_sts_nopaste</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_sua</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_swf</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_smc</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_syn</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_ts</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_tw</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_tw_nobin</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_tw_nopaste</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_wm</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_wm_nobin</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_wm_nopaste</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_keymap</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_gp</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_mp</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_efm</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_ep</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_path</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_ar</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_tags</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_tc</name></expr></argument>; 

<argument><expr><name>unsigned</name> <name>b_tc_flags</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_dict</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_tsr</name></expr></argument>; 

<argument><expr><name>long</name> <name>b_p_ul</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_p_udf</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_p_lw</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_ind_level</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_open_imag</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_no_brace</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_first_open</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_open_extra</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_close_extra</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_open_left_imag</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_jump_label</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_case</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_case_code</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_case_break</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_param</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_func_type</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_comment</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_in_comment</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_in_comment2</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_cpp_baseclass</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_continuation</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_unclosed</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_unclosed2</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_unclosed_noignore</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_unclosed_wrapped</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_unclosed_whiteok</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_matching_paren</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_paren_prev</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_maxparen</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_maxcomment</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_scopedecl</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_scopedecl_code</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_java</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_js</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_keep_case_label</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_hash_comment</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_cpp_namespace</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_if_for_while</name></expr></argument>;

<argument><expr><name>int</name> <name>b_ind_cpp_extern_c</name></expr></argument>;

<argument><expr><name>linenr_T</name> <name>b_no_eol_lnum</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_start_eol</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_start_ffc</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_start_fenc</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_bad_char</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_start_bomb</name></expr></argument>; 

<argument><expr><name>ScopeDictDictItem</name> <name>b_bufvar</name></expr></argument>; 

<argument><expr><name>dict_T</name> <operator>*</operator><name>b_vars</name></expr></argument>; 

<argument><expr><name>bool</name> <name>b_may_swap</name></expr></argument>;

<argument><expr><name>bool</name> <name>b_did_warn</name></expr></argument>; 

<argument><expr><name>bool</name> <name>b_help</name></expr></argument>; 

<argument><expr><name>bool</name> <name>b_spell</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>b_prompt_text</name></expr></argument>; 

<argument><expr><name>Callback</name> <name>b_prompt_callback</name></expr></argument>; 

<argument><expr><name>Callback</name> <name>b_prompt_interrupt</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_prompt_insert</name></expr></argument>; 

<argument><expr><name>synblock_T</name> <name>b_s</name></expr></argument>; 

<argument><expr><name>signlist_T</name> <operator>*</operator><name>b_signlist</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_signcols_max</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_signcols</name></expr></argument>; 

<argument><expr><name>Terminal</name> <operator>*</operator><name>terminal</name></expr></argument>; 

<argument><expr><name>dict_T</name> <operator>*</operator><name>additional_data</name></expr></argument>; 

<argument><expr><name>int</name> <name>b_mapped_ctrl_c</name></expr></argument>; 

<argument><expr><name>MarkTree</name> <name><name>b_marktree</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>;

<argument><expr><call><name>Map</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkItem</name></expr></argument>)</argument_list></call> <operator>*</operator><name>b_extmark_index</name></expr></argument>;

<argument><expr><call><name>Map</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkNs</name></expr></argument>)</argument_list></call> <operator>*</operator><name>b_extmark_ns</name></expr></argument>; 

<argument><expr><macro><name>kvec_t</name><argument_list>(<argument>uint64_t</argument>)</argument_list></macro> <name>update_channels</name></expr></argument>;

<argument><expr><macro><name>kvec_t</name><argument_list>(<argument>BufUpdateCallbacks</argument>)</argument_list></macro> <name>update_callbacks</name></expr></argument>;

<argument><expr><name>bool</name> <name>update_need_codepoints</name></expr></argument>;

<argument><expr><name>size_t</name> <name>deleted_bytes</name></expr></argument>;

<argument><expr><name>size_t</name> <name>deleted_codepoints</name></expr></argument>;

<argument><expr><name>size_t</name> <name>deleted_codeunits</name></expr></argument>;

<argument><expr><name>int</name> <name>flush_count</name></expr></argument>;

<argument><expr><name>bool</name> <name>b_luahl</name></expr></argument>;

<argument><expr><name>LuaRef</name> <name>b_luahl_start</name></expr></argument>;

<argument><expr><name>LuaRef</name> <name>b_luahl_window</name></expr></argument>;

<argument><expr><name>LuaRef</name> <name>b_luahl_line</name></expr></argument>;

<argument><expr><name>LuaRef</name> <name>b_luahl_end</name></expr></argument>;

<argument><expr><name>int</name> <name>b_diff_failed</name></expr></argument>;</argument_list></call></expr></expr_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB_COUNT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<typedef>typedef <type><name><name>struct</name> <name>diffblock_S</name></name></type> <name>diff_T</name>;</typedef>

<struct>struct <name>diffblock_S</name> <block>{

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>df_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name><name>df_lnum</name><index>[<expr><name>DB_COUNT</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name><name>df_count</name><index>[<expr><name>DB_COUNT</name></expr>]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNAP_HELP_IDX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNAP_AUCMD_IDX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNAP_COUNT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>tabpage_S</name></name></type> <name>tabpage_T</name>;</typedef>

<struct>struct <name>tabpage_S</name> <block>{

<decl_stmt><decl><type><name>handle_T</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp_next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>tp_topframe</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>tp_curwin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>tp_prevwin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>tp_firstwin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>tp_lastwin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>tp_old_Rows</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>tp_old_Columns</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>tp_ch_used</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>tp_first_diff</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>buf_T</name> <argument_list>*<argument><expr><operator>(</operator><name><name>tp_diffbuf</name><index>[<expr><name>DB_COUNT</name></expr>]</index></name><operator>)</operator></expr></argument>;

<argument><expr><name>int</name> <name>tp_diff_invalid</name></expr></argument>; 

<argument><expr><name>int</name> <name>tp_diff_update</name></expr></argument>; 

<argument><expr><name>frame_T</name> <operator>*</operator><operator>(</operator><name><name>tp_snapshot</name><index>[<expr><name>SNAP_COUNT</name></expr>]</index></name><operator>)</operator></expr></argument>; 

<argument><expr><name>ScopeDictDictItem</name> <name>tp_winvar</name></expr></argument>; 

<argument><expr><name>dict_T</name> <operator>*</operator><name>tp_vars</name></expr></argument>; 

<argument><expr><name>char_u</name> <operator>*</operator><name>tp_localdir</name></expr></argument>;</argument_list></call></expr></expr_stmt> 

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>w_line</name> <block>{

<decl_stmt><decl><type><name>linenr_T</name></type> <name>wl_lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>wl_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>wl_valid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>wl_folded</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>wl_lastlnum</name></decl>;</decl_stmt> 

}</block></struct></type> <name>wline_T</name>;</typedef>

<struct>struct <name>frame_S</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name>fr_layout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fr_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fr_newwidth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fr_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fr_newheight</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr_parent</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr_next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr_prev</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr_child</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>fr_win</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FR_LEAF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FR_ROW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FR_COL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>regmmatch_T</name></type> <name>rm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>attr_cur</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>first_lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>startcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>endcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>is_addpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>proftime_T</name></type> <name>tm</name></decl>;</decl_stmt> 

}</block></struct></type> <name>match_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXPOSMATCH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> 

}</block></struct></type> <name>llpos_T</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>posmatch</name></name></type> <name>posmatch_T</name>;</typedef>

<struct>struct <name>posmatch</name>

<block>{

<decl_stmt><decl><type><name>llpos_T</name></type> <name><name>pos</name><index>[<expr><name>MAXPOSMATCH</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cur</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>toplnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>botlnum</name></decl>;</decl_stmt> 

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>matchitem</name></name></type> <name>matchitem_T</name>;</typedef>

<struct>struct <name>matchitem</name> <block>{

<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>priority</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>hlg_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>regmmatch_T</name></type> <name>match</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>posmatch_T</name></type> <name>pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>match_T</name></type> <name>hl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>conceal_char</name></decl>;</decl_stmt> 

}</block>;</struct>

<typedef>typedef <type><name>int</name></type> <name>FloatAnchor</name>;</typedef>

<enum>enum <block>{

<decl><name>kFloatAnchorEast</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>kFloatAnchorSouth</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

}</block>;</enum>

<decl_stmt><decl><type><name>EXTERN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <name><name>float_anchor_str</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <block>{ <expr><literal type="string">"NW"</literal></expr>, <expr><literal type="string">"NE"</literal></expr>, <expr><literal type="string">"SW"</literal></expr>, <expr><literal type="string">"SE"</literal></expr> }</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <block>{

<decl><name>kFloatRelativeEditor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>kFloatRelativeWindow</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>kFloatRelativeCursor</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

}</block></enum></type> <name>FloatRelative</name>;</typedef>

<decl_stmt><decl><type><name>EXTERN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <name><name>float_relative_str</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <block>{ <expr><literal type="string">"editor"</literal></expr>, <expr><literal type="string">"win"</literal></expr>,

<expr><literal type="string">"cursor"</literal></expr> }</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <block>{

<decl><name>kWinStyleUnused</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>kWinStyleMinimal</name></decl>, 

}</block></enum></type> <name>WinStyle</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>Window</name></type> <name>window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>bufpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>, <name>width</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>row</name></decl>, <name>col</name>;</decl_stmt>

<decl_stmt><decl><type><name>FloatAnchor</name></type> <name>anchor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FloatRelative</name></type> <name>relative</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>external</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>focusable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WinStyle</name></type> <name>style</name></decl>;</decl_stmt>

}</block></struct></type> <name>FloatConfig</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_CONFIG_INIT</name></cpp:macro> <cpp:value>((FloatConfig){ .height = 0, .width = 0, .bufpos = { -1, 0 }, .row = 0, .col = 0, .anchor = 0, .relative = 0, .external = false, .focusable = true, .style = kWinStyleUnused })</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>w_topline_save</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_topline_corr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name></type> <name>w_cursor_save</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name></type> <name>w_cursor_corr</name></decl>;</decl_stmt> 

}</block></struct></type> <name>pos_save_T</name>;</typedef>

<struct>struct <name>window_S</name> <block>{

<decl_stmt><decl><type><name>handle_T</name></type> <name>handle</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>w_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>w_s</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_hl_id_normal</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_hl_attr_normal</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>w_hl_ids</name><index>[<expr><name>HLF_COUNT</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>w_hl_attrs</name><index>[<expr><name>HLF_COUNT</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_hl_needs_update</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>w_prev</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>w_next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>w_closing</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>w_frame</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name></type> <name>w_cursor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>w_curswant</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_set_curswant</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>w_last_cursorline</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name></type> <name>w_last_cursormoved</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>w_old_visual_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>w_old_cursor_lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>w_old_cursor_fcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>w_old_cursor_lcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>w_old_visual_lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>w_old_visual_col</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>w_old_curswant</name></decl>;</decl_stmt> 

<struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>eol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nbsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>space</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tab1</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tab2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tab3</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>trail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conceal</name></decl>;</decl_stmt>

}</block> <decl><name>w_p_lcs_chars</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>stl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stlnc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>foldopen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>foldclosed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>foldsep</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>msgsep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eob</name></decl>;</decl_stmt>

}</block> <decl><name>w_p_fcs_chars</name></decl>;</struct>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>w_topline</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>w_topline_was_set</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_topfill</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_old_topfill</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>w_botfill</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>w_old_botfill</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>w_leftcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>w_skipcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_winrow</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_status_height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_wincol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_vsep_width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_save_T</name></type> <name>w_save_cursor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_height_inner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w_width_inner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w_height_request</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w_width_request</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w_valid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>w_valid_cursor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>w_valid_leftcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>w_viewport_invalid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w_cline_height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>w_cline_folded</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_cline_row</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>w_virtcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_wrow</name></decl>, <decl><type ref="prev"/><name>w_wcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>w_botline</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_empty_rows</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_filler_rows</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_lines_valid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>wline_T</name> <modifier>*</modifier></type><name>w_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>w_folds</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>w_fold_manual</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>w_foldinvalid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_nrwidth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_redr_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_upd_rows</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>w_redraw_top</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>w_redraw_bot</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_redr_status</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name></type> <name>w_ru_cursor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>w_ru_virtcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>w_ru_topline</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>w_ru_line_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_ru_topfill</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>w_ru_empty</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_alt_fnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>alist_T</name> <modifier>*</modifier></type><name>w_alist</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_arg_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_arg_idx_invalid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>w_localdir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>winopt_T</name></type> <name>w_onebuf_opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>winopt_T</name></type> <name>w_allbuf_opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>w_p_stl_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>w_p_fde_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>w_p_fdt_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>w_p_cc_cols</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_p_brimin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_p_brishift</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>w_p_brisbr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>w_p_siso</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>w_p_so</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLOBAL_WO</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char *)p + sizeof(winopt_T))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>long</name></type> <name>w_scbind_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScopeDictDictItem</name></type> <name>w_winvar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>w_vars</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name></type> <name>w_pcmark</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name></type> <name>w_prev_pcmark</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>xfmark_T</name></type> <name><name>w_jumplist</name><index>[<expr><name>JUMPLISTSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w_jumplistlen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_jumplistidx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_changelistidx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>w_match_head</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_next_match_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>taggy_T</name></type> <name><name>w_tagstack</name><index>[<expr><name>TAGSTACKSIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_tagstackidx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_tagstacklen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ScreenGrid</name></type> <name>w_grid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>w_pos_changed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>w_floating</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FloatConfig</name></type> <name>w_float_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w_fraction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w_prev_fraction_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>w_nrwidth_line_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w_nrwidth_width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>qf_info_T</name> <modifier>*</modifier></type><name>w_llist</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>qf_info_T</name> <modifier>*</modifier></type><name>w_llist_ref</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>win_hl_attr</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hlf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attrs</name><index>[<expr><name>hlf</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHANGEDTICK</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(=== Include buffer.h &amp; use buf_(get|set|inc)_changedtick ===)</cpp:value></cpp:define>

</unit>
