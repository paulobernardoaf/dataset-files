<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\ops.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/change.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/assert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/edit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_getln.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fold.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/indent.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/extmark.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/normal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/search.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/state.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/terminal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/undo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kvec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>yankreg_T</name></type> <name><name>y_regs</name><index>[<expr><name>NUM_REGISTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>yankreg_T</name> <modifier>*</modifier></type><name>y_previous</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>batch_change_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>clipboard_delay_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>clipboard_needs_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>clipboard_didwarn</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>block_def</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>startspaces</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>endspaces</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>textlen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>textstart</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>textcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>start_vcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>end_vcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>is_short</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>is_MAX</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>is_oneChar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pre_whitesp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pre_whitesp_c</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>end_char_vcols</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>start_char_vcols</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ops.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPF_LINES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPF_CHANGE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>opchars</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>NUL</name></expr>, <expr><name>NUL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><name>NUL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'c'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'&lt;'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'&gt;'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'!'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'='</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'q'</literal></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">':'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_LINES</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'U'</literal></expr>, <expr><name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'J'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'J'</literal></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'?'</literal></expr>, <expr><name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'r'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'I'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'A'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><name>OPF_LINES</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><name>OPF_LINES</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><name>OPF_LINES</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><name>OPF_LINES</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><name>OPF_LINES</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><name>OPF_LINES</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><name>OPF_LINES</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'w'</literal></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>Ctrl_A</name></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_CHANGE</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>Ctrl_X</name></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_CHANGE</name></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>get_op_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>char1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>char2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>char1</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>OP_REPLACE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>char1</name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>OP_TILDE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>char1</name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name>char2</name> <operator>==</operator> <name>Ctrl_A</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>OP_NR_ADD</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>char1</name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name>char2</name> <operator>==</operator> <name>Ctrl_X</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>OP_NR_SUB</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opchars</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>char1</name> <operator>&amp;&amp;</operator> <name><name>opchars</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>char2</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>opchars</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"get_op_type()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>op_on_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>opchars</name><index>[<expr><name>op</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>OPF_LINES</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>op_is_change</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>opchars</name><index>[<expr><name>op</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>OPF_CHANGE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_op_char</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>optype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>opchars</name><index>[<expr><name>optype</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_extra_op_char</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>optype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>opchars</name><index>[<expr><name>optype</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>op_shift</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curs_top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>first_char</name> <operator>=</operator> <operator>*</operator><call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first_char</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shift_block</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>first_char</name> <operator>!=</operator> <literal type="char">'#'</literal> <operator>||</operator> <operator>!</operator><call><name>preprocs_left</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shift_line</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_LSHIFT</name></expr></argument>, <argument><expr><name>p_sr</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>block_col</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>curs_top</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <name>p_report</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_RSHIFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&gt;"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>amount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"1 line %sed 1 time"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"1 line %sed %d times"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>amount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" lines %sed 1 time"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" lines %sed %d times"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>shift_line</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>round</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>call_changed_bytes</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p_sw</name> <init>= <expr><call><name>get_sw_value</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>get_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>round</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>count</name> <operator>/</operator> <name>p_sw</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>count</name> <operator>%</operator> <name>p_sw</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;&amp;</operator> <name>left</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>amount</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>amount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>i</name> <operator>*</operator> <name>p_sw</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>p_sw</name> <operator>*</operator> <name>amount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>p_sw</name> <operator>*</operator> <name>amount</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>VREPLACE_FLAG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>change_indent</name><argument_list>(<argument><expr><name>INDENT_SET</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>call_changed_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_indent</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><ternary><condition><expr><name>call_changed_bytes</name></expr> ?</condition><then> <expr><name>SIN_CHANGED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shift_block</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>left</name> <init>= <expr><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_LSHIFT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>oldstate</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>oldcol</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p_sw</name> <init>= <expr><call><name>get_sw_value</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p_ts</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>incr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>old_p_ri</name> <init>= <expr><name>p_ri</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_ri</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>is_short</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>amount</name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>p_sw</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>total</name> <operator>/</operator> <name>p_sw</name><operator>)</operator> <operator>!=</operator> <name>amount</name></expr>)</condition> <block>{<block_content>

<return>return;</return> 

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>oldp</name> <init>= <expr><call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>startcol</name></decl>, <decl><type ref="prev"/><name>oldlen</name></decl>, <decl><type ref="prev"/><name>newlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>pre_whitesp</name></name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>ws_vcol</name> <init>= <expr><name><name>bd</name><operator>.</operator><name>start_vcol</name></name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>pre_whitesp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type> <name>old_textstart</name> <init>= <expr><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textstart</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ws_vcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>lbr_chartabsize_adv</name><argument_list>(<argument><expr><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>bd</name><operator>.</operator><name>start_vcol</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>start_vcol</name></name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ws_vcol</name> <operator>%</operator> <name>p_ts</name><operator>)</operator> <operator>+</operator> <name>total</name><operator>)</operator> <operator>/</operator> <name>p_ts</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ws_vcol</name> <operator>%</operator> <name>p_ts</name><operator>)</operator> <operator>+</operator> <name>total</name><operator>)</operator> <operator>%</operator> <name>p_ts</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>total</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col_pre</name> <init>= <expr><name><name>bd</name><operator>.</operator><name>pre_whitesp_c</name></name> <operator>-</operator> <operator>(</operator><name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>-=</operator> <name>col_pre</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name>i</name> <operator>+</operator><name>j</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>startcol</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>oldlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>bd</name><operator>.</operator><name>textstart</name></name><operator>-</operator><name>old_textstart</name><operator>)</operator> <operator>+</operator> <name>col_pre</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newlen</name> <operator>=</operator> <name>i</name><operator>+</operator><name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>, <argument><expr><name>TAB</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>destination_col</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>verbatim_copy_end</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>verbatim_copy_width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>fill</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>new_line_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>non_white</name> <init>= <expr><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>non_white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>non_white_col</name> <init>= <expr><name><name>bd</name><operator>.</operator><name>start_vcol</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>non_white</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>lbr_chartabsize_adv</name><argument_list>(<argument><expr><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>non_white</name></expr></argument>, <argument><expr><name>non_white_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>non_white_col</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><specifier>const</specifier> <name>colnr_T</name></type> <name>block_space_width</name> <init>= <expr><name>non_white_col</name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>colnr_T</name></type> <name>shift_amount</name> <init>= <expr><ternary><condition><expr><name>block_space_width</name> <operator>&lt;</operator> <name>total</name></expr>

?</condition><then> <expr><name>block_space_width</name></expr>

</then><else>: <expr><name>total</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>destination_col</name> <operator>=</operator> <name>non_white_col</name> <operator>-</operator> <name>shift_amount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>verbatim_copy_end</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textstart</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>verbatim_copy_width</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>verbatim_copy_width</name> <operator>-=</operator> <name><name>bd</name><operator>.</operator><name>start_char_vcols</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>verbatim_copy_width</name> <operator>&lt;</operator> <name>destination_col</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>verbatim_copy_end</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>lbr_chartabsize</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>verbatim_copy_end</name></expr></argument>, <argument><expr><name>verbatim_copy_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>verbatim_copy_width</name> <operator>+</operator> <name>incr</name> <operator>&gt;</operator> <name>destination_col</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>verbatim_copy_width</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>verbatim_copy_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>destination_col</name> <operator>-</operator> <name>verbatim_copy_width</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fill</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>destination_col</name> <operator>-</operator> <name>verbatim_copy_width</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>verbatim_copy_end</name> <operator>-</operator> <name>oldp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>verbatim_diff</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>verbatim_copy_end</name> <operator>-</operator> <name>oldp</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>new_line_len</name> <operator>=</operator> <name>verbatim_diff</name> <operator>+</operator> <name>fill</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>non_white</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><name>new_line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>startcol</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>verbatim_diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>oldlen</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>non_white</name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>textstart</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>verbatim_diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>fill</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><name>verbatim_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>verbatim_diff</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>verbatim_diff</name> <operator>+</operator> <name>fill</name></expr></argument>, <argument><expr><name>non_white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_bytes</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>startcol</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>oldlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newlen</name></expr></argument>,

<argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>oldstate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>oldcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ri</name> <operator>=</operator> <name>old_p_ri</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>block_insert</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_insert</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block_def</name></name> <modifier>*</modifier></type><name>bdp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>spaces</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>s_len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>oldstate</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</condition> <incr><expr><name>lnum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>bdp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bdp</name><operator>-&gt;</operator><name>is_short</name></name> <operator>&amp;&amp;</operator> <name>b_insert</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b_insert</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_ts</name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_char_vcols</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>spaces</name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spaces</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>p_ts</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>textcol</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>p_ts</name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>end_char_vcols</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bdp</name><operator>-&gt;</operator><name>is_short</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>spaces</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name></expr> ?</condition><then> <expr><name>p_ts</name> <operator>-</operator> <name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spaces</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>p_ts</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>textcol</name></name> <operator>+</operator> <name><name>bdp</name><operator>-&gt;</operator><name>textlen</name></name> <operator>-</operator> <operator>(</operator><name>spaces</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bdp</name><operator>-&gt;</operator><name>is_MAX</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>spaces</name> <operator>=</operator> <operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>spaces</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>textcol</name></name> <operator>+</operator> <name><name>bdp</name><operator>-&gt;</operator><name>textlen</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>spaces</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b_insert</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>, <argument><expr><name>oldp</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_off_next</name>)<argument_list>(<argument><expr><name>oldp</name></expr></argument>, <argument><expr><name>oldp</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>spaces</name> <operator>-=</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>s_len</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>startcol</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>spaces</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>s_len</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skipped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>spaces</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>bdp</name><operator>-&gt;</operator><name>is_short</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>spaces</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p_ts</name> <operator>-</operator> <name>spaces</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>skipped</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>spaces</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>lnum</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>startcol</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>skipped</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>offset</name><operator>-</operator><name>startcol</name></expr></argument>, <argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>oldstate</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>op_reindent</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>Indenter</name></type> <name>how</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>amount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>first_changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>last_changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>start_lnum</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MODIFIABLE</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_modifiable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">50</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <name>p_report</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" lines to indent... "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>==</operator> <literal type="number">1</literal>

<operator>||</operator> <name>how</name> <operator>!=</operator> <name>get_lisp_indent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>amount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>amount</name> <operator>=</operator> <call><name>how</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>amount</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>set_indent</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><name>SIN_UNDO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first_changed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>first_changed</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_changed</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_changed</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name>first_changed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr> ?</condition><then> <expr><name>start_lnum</name> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr> </then><else>:

<expr><name>last_changed</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <name>p_report</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"1 line indented "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" lines indented "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>expr_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>get_expr_register</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_line</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_line</name> <operator>=</operator> <call><name>getcmdline</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NUL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>new_line</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_expr_line</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="char">'='</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_expr_line</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>expr_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>expr_line</name> <operator>=</operator> <name>new_line</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_expr_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr_copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nested</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>expr_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>expr_copy</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>expr_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nested</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>expr_copy</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>nested</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>eval_to_string</name><argument_list>(<argument><expr><name>expr_copy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>nested</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>expr_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_expr_line_src</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>expr_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>expr_line</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>valid_yank_reg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>writing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>regname</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>writing</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <literal type="string">"/.%:="</literal></expr></argument> , <argument><expr><name>regname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'#'</literal>

<operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'"'</literal>

<operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'-'</literal>

<operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'_'</literal>

<operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'*'</literal>

<operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{

<decl><name>YREG_PASTE</name></decl>,

<decl><name>YREG_YANK</name></decl>,

<decl><name>YREG_PUT</name></decl>,

}</block></enum></type> <name>yreg_mode_t</name>;</typedef>

<function><type><name>yankreg_T</name> <modifier>*</modifier></type><name>get_yank_register</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>YREG_PASTE</name> <operator>&amp;&amp;</operator> <call><name>get_clipboard</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>reg</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>YREG_YANK</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>regname</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name>y_previous</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>y_previous</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>op_reg_index</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <operator>&amp;</operator><name><name>y_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>YREG_YANK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y_previous</name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>reg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_append_register</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ASCII_ISUPPER</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_literal_register</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>)</parameter_list>

FUNC_ATTR_CONST

<block>{<block_content>

<return>return <expr><name>regname</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'+'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>yankreg_T</name> <modifier>*</modifier></type><name>copy_register</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_RET

<block>{<block_content>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>get_yank_register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>YREG_PASTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>copy</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yankreg_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>copy</name> <operator>=</operator> <operator>*</operator><name>reg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>copy</name><operator>-&gt;</operator><name>y_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>copy</name><operator>-&gt;</operator><name>y_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>copy</name><operator>-&gt;</operator><name>y_array</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name><name>copy</name><operator>-&gt;</operator><name>y_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>copy</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>copy</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>copy</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>yank_register_mline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>valid_yank_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>get_yank_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>YREG_PASTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTLineWise</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_record</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>regname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>old_y_previous</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg_recording</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'"'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>reg_recording</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>regname</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>reg_recording</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_recorded</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>vim_unescape_csi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_y_previous</name> <operator>=</operator> <name>y_previous</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>stuff_yank</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y_previous</name> <operator>=</operator> <name>old_y_previous</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_yreg_additional_data</name><parameter_list>(<parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>additional_data</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>additional_data</name></name> <operator>==</operator> <name>additional_data</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tv_dict_unref</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>additional_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>additional_data</name></name> <operator>=</operator> <name>additional_data</name></expr>;</expr_stmt>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stuff_yank</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>valid_yank_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>get_yank_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>YREG_YANK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_append_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lp</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>lp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>free_register</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_yreg_additional_data</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTCharWise</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <call><name>os_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>execreg_lastc</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>do_execreg</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>colon</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>addcr</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>silent</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>execreg_lastc</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E748: No previously used register"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>regname</name> <operator>=</operator> <name>execreg_lastc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'#'</literal> <operator>||</operator> <operator>!</operator><call><name>valid_yank_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsg_invreg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>execreg_lastc</name> <operator>=</operator> <name>regname</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>last_cmdline</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nolastcmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>new_last_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_escaped_ext</name><argument_list>(

<argument><expr><name>last_cmdline</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\001\002\003\004\005\006\007"</literal>

<literal type="string">"\010\011\012\013\014\015\016\017"</literal>

<literal type="string">"\020\021\022\023\024\025\026\027"</literal>

<literal type="string">"\030\031\032\033\034\035\036\037"</literal></expr></argument>,

<argument><expr><name>Ctrl_V</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"'&lt;,'&gt;"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>put_in_typebuf</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>put_in_typebuf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_expr_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>put_in_typebuf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>colon</name></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_last_insert_save</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noinstext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>put_in_typebuf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>colon</name></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>get_yank_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>YREG_PASTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remap</name> <init>= <expr><ternary><condition><expr><name>colon</name></expr> ?</condition><then> <expr><name>REMAP_NONE</name></expr> </then><else>: <expr><name>REMAP_YES</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_reedit_in_typebuf</name><argument_list>(<argument><expr><name>silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>escaped</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTLineWise</name> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name>addcr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ins_typebuf</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>remap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>vim_strsave_escape_csi</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>ins_typebuf</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>, <argument><expr><name>remap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>colon</name> <operator>&amp;&amp;</operator> <call><name>ins_typebuf</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":"</literal></expr></argument>, <argument><expr><name>remap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>reg_executing</name> <operator>=</operator> <ternary><condition><expr><name>regname</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><name>regname</name></expr></else></ternary></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_reedit_in_typebuf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>silent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'g'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>restart_edit</name> <operator>==</operator> <literal type="char">'I'</literal></expr> ?</condition><then> <expr><literal type="char">'i'</literal></expr> </then><else>: <expr><name>restart_edit</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>REMAP_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_in_typebuf</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>esc</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>colon</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>silent</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_reedit_in_typebuf</name><argument_list>(<argument><expr><name>silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>colon</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>ins_typebuf</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>REMAP_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>esc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_escape_csi</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>ins_typebuf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><name>esc</name></expr> ?</condition><then> <expr><name>REMAP_NONE</name></expr> </then><else>: <expr><name>REMAP_YES</name></expr></else></ternary></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>esc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>colon</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>ins_typebuf</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":"</literal></expr></argument>, <argument><expr><name>REMAP_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>insert_reg</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>literally_arg</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>literally</name> <init>= <expr><name>literally_arg</name> <operator>||</operator> <call><name>is_literal_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>os_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>valid_yank_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>stuff_inserted</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>get_spec_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allocated</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stuffescaped</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><name>literally</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>allocated</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>get_yank_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>YREG_PASTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>stuffescaped</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>literally</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTLineWise</name> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stuffescaped</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>literally</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>start</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>arg</name> <operator>&gt;=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>&lt;</operator> <name>DEL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>arg</name><operator>)</operator> <operator>==</operator> <name>K_SPECIAL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>literally</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stuffReadbuffLen</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>arg</name> <operator>-</operator> <name>start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><call><name>mb_cptr2char_adv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>literally</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>TAB</name><operator>)</operator> <operator>||</operator> <name>c</name> <operator>==</operator> <name>DEL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>Ctrl_V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>get_spec_reg</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>argp</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>allocated</name></decl></parameter>, 

<parameter><decl><type><name>bool</name></type> <name>errmsg</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>allocated</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>regname</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'%'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_fname</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="char">'#'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <call><name>getaltfname</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="char">'='</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <call><name>get_expr_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>allocated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="char">':'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>last_cmdline</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>errmsg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nolastcmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <name>last_cmdline</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="char">'/'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>last_search_pat</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>errmsg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noprevre</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <call><name>last_search_pat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="char">'.'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <call><name>get_last_insert_save</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>allocated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>errmsg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noinstext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>Ctrl_F</name></expr>:</case> 

<case>case <expr><name>Ctrl_P</name></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errmsg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <call><name>file_name_at_cursor</name><argument_list>(

<argument><expr><name>FNAME_MESS</name> <operator>|</operator> <name>FNAME_HYP</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>regname</name> <operator>==</operator> <name>Ctrl_P</name></expr> ?</condition><then> <expr><name>FNAME_EXP</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>allocated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>Ctrl_W</name></expr>:</case> 

<case>case <expr><name>Ctrl_A</name></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errmsg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>find_ident_under_cursor</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>regname</name> <operator>==</operator> <name>Ctrl_W</name></expr>

?</condition><then> <expr><operator>(</operator><name>FIND_IDENT</name><operator>|</operator><name>FIND_STRING</name><operator>)</operator></expr>

</then><else>: <expr><name>FIND_STRING</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <ternary><condition><expr><name>cnt</name></expr> ?</condition><then> <expr><call><name>vim_strnsave</name><argument_list>(<argument><expr><operator>*</operator><name>argp</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>allocated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>Ctrl_L</name></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errmsg</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="char">'_'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cmdline_paste_reg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>literally_arg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>remcr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>literally</name> <init>= <expr><name>literally_arg</name> <operator>||</operator> <call><name>is_literal_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>get_yank_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>YREG_PASTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>cmdline_paste_str</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>literally</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>remcr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>cmdline_paste_str</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\r"</literal></expr></argument>, <argument><expr><name>literally</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shift_delete_registers</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>y_append</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>y_regs</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>y_regs</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>y_regs</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>y_append</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y_previous</name> <operator>=</operator> <operator>&amp;</operator><name><name>y_regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>y_regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y_array</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>int</name></type> <name>op_delete</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_lcount</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>empty</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MODIFIABLE</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_modifiable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mb_adjust_opend</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTCharWise</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name> <operator>==</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_DELETE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>inindent</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>kMTLineWise</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>!=</operator> <name>kMTLineWise</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_DELETE</name>

<operator>&amp;&amp;</operator> <operator>*</operator><call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>virtual_op</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>setmarks</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_EMPTYREGION</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_yank</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_yank</name> <operator>=</operator> <call><name>op_yank</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_yank</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTLineWise</name>

<operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>use_reg_one</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shift_delete_registers</name><argument_list>(<argument><expr><call><name>is_append_register</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <operator>&amp;</operator><name><name>y_regs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op_yank_reg</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_yank</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>!=</operator> <name>kMTLineWise</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>get_yank_register</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>YREG_YANK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op_yank_reg</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_yank</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>did_yank</name> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_clipboard</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_autocmd_textyankpost</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</condition> <incr><expr><name>lnum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>textlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>+</operator>

<operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>lnum</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>textlen</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name><operator>+</operator><name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr></argument>,

<argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTLineWise</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_CHANGE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ai</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>did_ai</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>ai_col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>truncate_line</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>u_clearline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>del_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u_clearline</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>virtual_op</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>endcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <call><name>getviscol2</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><call><name>getviscol2</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name>endcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\t'</literal>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><call><name>getviscol2</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mb_adjust_opend</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_DOLLAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_CHANGE</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>display_dollar</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>-</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>virtual_op</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>curline</name> <init>= <expr><call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>curline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name> <operator>!=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>del_bytes</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>!</operator><name>virtual_op</name></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_DELETE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>curpos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>curbuf_splice_pending</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>startpos</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>truncate_line</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>curpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>del_bytes</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>!</operator><name>virtual_op</name></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_DELETE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>curpos</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_join</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf_splice_pending</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>startpos</name><operator>.</operator><name>lnum</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>startpos</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msgmore</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>old_lcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>setmarks</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mb_adjust_opend</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <call><name>mb_tail_off</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>pbyte</name><parameter_list>(<parameter><decl><type><name>pos_T</name></type> <name>lp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c</name> <operator>&lt;=</operator> <name>UCHAR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>lp</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>lp</name><operator>.</operator><name>col</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curbuf_splice_pending</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>lp</name><operator>.</operator><name>lnum</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lp</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>replace_character</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>REPLACE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>op_replace</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>numc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_chars</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>oldlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>after_p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>had_ctrl_v_cr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name> <operator>)</operator> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>empty</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>REPLACE_CR_NCHAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>had_ctrl_v_cr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>REPLACE_NL_NCHAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>had_ctrl_v_cr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mb_adjust_opend</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>is_MAX</name></name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</condition> <incr><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>textlen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>virtual_op</name> <operator>||</operator> <name><name>bd</name><operator>.</operator><name>is_MAX</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>virtual_op</name> <operator>&amp;&amp;</operator> <name><name>bd</name><operator>.</operator><name>is_short</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>bd</name><operator>.</operator><name>textstart</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>vpos</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getvpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vpos</name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>+=</operator> <name><name>vpos</name><operator>.</operator><name>coladd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr> ?</condition><then> <expr><name><name>bd</name><operator>.</operator><name>start_char_vcols</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name><name>bd</name><operator>.</operator><name>endspaces</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>bd</name><operator>.</operator><name>is_oneChar</name></name>

<operator>&amp;&amp;</operator> <name><name>bd</name><operator>.</operator><name>end_char_vcols</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>bd</name><operator>.</operator><name>end_char_vcols</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>numc</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>is_short</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>virtual_op</name> <operator>||</operator> <name><name>bd</name><operator>.</operator><name>is_MAX</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>numc</name> <operator>-=</operator> <operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>end_vcol</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_char2cells</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>numc</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>bd</name><operator>.</operator><name>is_short</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>numc</name> <operator>=</operator> <name>numc</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_chars</name> <operator>=</operator> <name>numc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>numc</name> <operator>*=</operator> <call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>newp_size</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>had_ctrl_v_cr</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newp_size</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>numc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bd</name><operator>.</operator><name>is_short</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newp_size</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>bd</name><operator>.</operator><name>endspaces</name></name> <operator>+</operator> <name>oldlen</name>

<operator>-</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <call><name>xmallocz</name><argument_list>(<argument><expr><name>newp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>after_p_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>oldlen</name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>newrows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>newcols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>had_ctrl_v_cr</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>newp_len</name> <init>= <expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>--</operator><name>num_chars</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newp_len</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>newp</name> <operator>+</operator> <name>newp_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bd</name><operator>.</operator><name>is_short</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>newp_len</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newp_len</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>newp_len</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newcols</name> <operator>=</operator> <name>newp_len</name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>after_p_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>after_p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><name>after_p_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>after_p</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><name>after_p_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newrows</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>baselnum</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>after_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr></argument>, <argument><expr><name>after_p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>after_p_len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>appended_lines_mark</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>after_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>baselnum</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>textlen</name></name></expr></argument>,

<argument><expr><name>newrows</name></expr></argument>, <argument><expr><name>newcols</name></expr></argument>, <argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTLineWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>ltoreq</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>-</operator> <call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>replace_character</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>end_vcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end_vcol</name> <operator>=</operator> <call><name>getviscol2</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><call><name>getviscol</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>getvpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>end_vcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pbyte</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>virtual_op</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>virtcols</name> <init>= <expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>virtcols</name> <operator>-=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><call><name>getviscol2</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-=</operator> <operator>(</operator><name>virtcols</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>virtcols</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>virtcols</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>replace_character</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>pbyte</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inc_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>op_tilde</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_change</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init>;</init> <condition><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</condition> <incr><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>one_change</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>one_change</name> <operator>=</operator> <call><name>swapchars</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>textlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_change</name> <operator>|=</operator> <name>one_change</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>did_change</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTLineWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>did_change</name> <operator>=</operator> <call><name>swapchars</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>did_change</name> <operator>|=</operator> <call><name>swapchars</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr> ?</condition><then> <expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>:

<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ltoreq</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>did_change</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_change</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <name>p_report</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"1 line changed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" lines changed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>swapchars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op_type</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>did_change</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>todo</name> <init>= <expr><name>length</name></expr></init></decl>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>todo</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><call><name>ml_get_pos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_change</name> <operator>|=</operator> <call><name>swapchar</name><argument_list>(<argument><expr><name>op_type</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inc</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>did_change</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>swapchar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op_type</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2</function>)

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><call><name>gchar_pos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>op_type</name> <operator>==</operator> <name>OP_ROT13</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op_type</name> <operator>==</operator> <name>OP_UPPER</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="number">0xdf</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>sp</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_char</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nc</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mb_islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op_type</name> <operator>==</operator> <name>OP_ROT13</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>ROT13</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op_type</name> <operator>!=</operator> <name>OP_LOWER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>mb_toupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>mb_isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op_type</name> <operator>==</operator> <name>OP_ROT13</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>ROT13</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op_type</name> <operator>!=</operator> <name>OP_UPPER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nc</name> <operator>!=</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>||</operator> <name>nc</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>sp</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_bytes</name><argument_list>(<argument><expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>pbyte</name><argument_list>(<argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block>

<function><type><name>void</name></type> <name>op_insert</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>ins_len</name></decl>, <decl><type ref="prev"/><name>pre_textlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>firstline</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ins_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>ind_pre</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>t1</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>is_MAX</name></name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>old_ve_flags</name> <init>= <expr><name>ve_flags</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ve_flags</name> <operator>=</operator> <name>VE_ALL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>

?</condition><then> <expr><name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><call><name>getviscol</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ve_flags</name> <operator>=</operator> <name>old_ve_flags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ind_pre</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>getwhitecols_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>firstline</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>firstline</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pre_textlen</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTBlockWise</name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>==</operator> <literal type="number">0</literal></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>is_short</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>bd</name><operator>.</operator><name>is_MAX</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textlen</name></name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LINEEMPTY</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>!=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>edit</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>count1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <call><name>lt</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>||</operator> <name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_indent</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>colnr_T</name></type> <name>ind_post</name> <init>= <expr><operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>getwhitecols_curline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>ind_pre</name> <operator>&amp;&amp;</operator> <name>ind_post</name> <operator>&gt;</operator> <name>ind_pre</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+=</operator> <name>ind_post</name> <operator>-</operator> <name>ind_pre</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>start_vcol</name></name> <operator>+=</operator> <name>ind_post</name> <operator>-</operator> <name>ind_pre</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_indent</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>bd</name><operator>.</operator><name>is_MAX</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>did_indent</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_INSERT</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name>

<operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>coladd</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>getviscol2</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pre_textlen</name> <operator>-=</operator> <name>t</name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name>

<operator>&gt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>col</name></name>

<operator>+</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>coladd</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>getviscol2</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pre_textlen</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pre_textlen</name> <operator>-=</operator> <name>t</name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>=</operator> <name>OP_INSERT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd2</name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bd</name><operator>.</operator><name>is_MAX</name></name> <operator>||</operator> <name><name>bd2</name><operator>.</operator><name>textlen</name></name> <operator>&lt;</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pre_textlen</name> <operator>+=</operator> <name><name>bd2</name><operator>.</operator><name>textlen</name></name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd2</name><operator>.</operator><name>endspaces</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>bd2</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>=</operator> <name><name>bd2</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textlen</name></name> <operator>=</operator> <name><name>bd2</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>firstline</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>add</name> <init>= <expr><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>add</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>add</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>firstline</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>firstline</name> <operator>+=</operator> <name>add</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ins_len</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pre_textlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pre_textlen</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ins_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ins_text</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ins_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_insert</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>ins_text</name></expr></argument>, <argument><expr><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_INSERT</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ins_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>op_change</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>linenr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ins_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>pre_textlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>pre_indent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>firstline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ins_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTLineWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_paste</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_si</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cin</name></name></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>can_si</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>op_delete</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>LINEEMPTY</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><name>virtual_op</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>virtual_op</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><call><name>getviscol</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>firstline</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pre_textlen</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pre_indent</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>getwhitecols</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTLineWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fix_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>edit</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTBlockWise</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>firstline</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>pre_indent</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>new_indent</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><call><name>getwhitecols</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pre_textlen</name> <operator>+=</operator> <name>new_indent</name> <operator>-</operator> <name>pre_indent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>new_indent</name> <operator>-</operator> <name>pre_indent</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ins_len</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pre_textlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ins_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ins_text</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>ins_len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>ins_text</name></expr></argument>, <argument><expr><name>firstline</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>, <argument><expr><name>ins_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>linenr</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>linenr</name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</condition>

<incr><expr><name>linenr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name>linenr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bd</name><operator>.</operator><name>is_short</name></name> <operator>||</operator> <name>virtual_op</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>vpos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>is_short</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>linenr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>getvpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vpos</name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vpos</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>linenr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>vpos</name><operator>.</operator><name>coladd</name></name>

<operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>ins_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>vpos</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>vpos</name><operator>.</operator><name>coladd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>ins_text</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ins_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>ins_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>linenr</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>linenr</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>vpos</name><operator>.</operator><name>coladd</name></name><operator>+</operator><operator>(</operator><name>int</name><operator>)</operator><name>ins_len</name></expr></argument>, <argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ins_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_yank</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>y_regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>y_regs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type> <name>clear_registers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_REGISTERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>y_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>free_register</name><parameter_list>(<parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<expr_stmt><expr><call><name>set_yreg_additional_data</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control> <block>{<block_content> 

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>op_yank</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deleting</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>valid_yank_reg</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>get_yank_register</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>, <argument><expr><name>YREG_YANK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>op_yank_reg</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><call><name>is_append_register</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>deleting</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_clipboard</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_autocmd_textyankpost</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>op_yank_reg</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>append</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yankreg_T</name></type> <name>newreg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MotionType</name></type> <name>yank_type</name> <init>= <expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>yanklines</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>yankendlnum</name> <init>= <expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pnew</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><name>reg</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>append</name> <operator>&amp;&amp;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <operator>&amp;</operator><name>newreg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>free_register</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTCharWise</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name> <operator>||</operator> <operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'o'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>yanklines</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>yank_type</name> <operator>=</operator> <name>kMTLineWise</name></expr>;</expr_stmt>

<expr_stmt><expr><name>yankendlnum</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>yanklines</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>=</operator> <name>yanklines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>yank_type</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>yanklines</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>additional_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <call><name>os_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>y_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yank_type</name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_width</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name> <operator>&amp;&amp;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_width</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name>yankendlnum</name></expr>;</condition> <incr><expr><name>lnum</name><operator>++</operator></expr><operator>,</operator> <expr><name>y_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>kMTBlockWise</name></expr>:</case>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yank_copy_line</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name>y_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>kMTLineWise</name></expr>:</case>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>y_idx</name></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>kMTCharWise</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>startcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>endcol</name> <init>= <expr><name>MAXCOL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_oneChar</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>cs</name></decl>, <decl><type ref="prev"/><name>ce</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>endspaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>startcol</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>virtual_op</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ce</name> <operator>!=</operator> <name>cs</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>=</operator> <operator>(</operator><name>ce</name> <operator>-</operator> <name>cs</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator>

<operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>startcol</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>virtual_op</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>endcol</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name>cs</name> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name> <operator>&lt;</operator> <name>ce</name>

<operator>&amp;&amp;</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>endcol</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_oneChar</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name>

<operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>endspaces</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name>

<operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>endcol</name> <operator>-=</operator> <name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>endcol</name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startcol</name> <operator>&gt;</operator> <name>endcol</name>

<operator>||</operator> <name>is_oneChar</name></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textlen</name></name> <operator>=</operator> <name>endcol</name> <operator>-</operator> <name>startcol</name> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textstart</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>startcol</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yank_copy_line</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name>y_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>kMTUnknown</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>curr</name> <operator>!=</operator> <name>reg</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>new_ptr</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>curr</name><operator>-&gt;</operator><name>y_size</name></name> <operator>+</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>curr</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>new_ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>y_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>y_array</name></name> <operator>=</operator> <name>new_ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yank_type</name> <operator>==</operator> <name>kMTLineWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTLineWise</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTCharWise</name>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_REGAPPEND</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pnew</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name><name>curr</name><operator>-&gt;</operator><name>y_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>pnew</name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><operator>--</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>pnew</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pnew</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>y_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>y_idx</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>y_idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>y_size</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rnu</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>yank_type</name> <operator>==</operator> <name>kMTCharWise</name> <operator>&amp;&amp;</operator> <name>yanklines</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>yanklines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>yanklines</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>p_report</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>namebuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>namebuf</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" into \"%c"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>update_topline_redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yanklines</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>yank_type</name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"block of 1 line yanked%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"1 line yanked%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>yank_type</name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"block of %"</literal> <name>PRId64</name> <literal type="string">" lines yanked%s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>yanklines</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" lines yanked%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>yanklines</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yank_type</name> <operator>==</operator> <name>kMTLineWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yank_copy_line</name><parameter_list>(<parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block_def</name></name> <modifier>*</modifier></type><name>bd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>y_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>bd</name><operator>-&gt;</operator><name>startspaces</name></name> <operator>+</operator> <name><name>bd</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>+</operator> <name><name>bd</name><operator>-&gt;</operator><name>textlen</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pnew</name> <init>= <expr><call><name>xmallocz</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>y_idx</name></expr>]</index></name> <operator>=</operator> <name>pnew</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pnew</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>-&gt;</operator><name>startspaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pnew</name> <operator>+=</operator> <name><name>bd</name><operator>-&gt;</operator><name>startspaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>pnew</name></expr></argument>, <argument><expr><name><name>bd</name><operator>-&gt;</operator><name>textstart</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>-&gt;</operator><name>textlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pnew</name> <operator>+=</operator> <name><name>bd</name><operator>-&gt;</operator><name>textlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pnew</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>-&gt;</operator><name>endspaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pnew</name> <operator>+=</operator> <name><name>bd</name><operator>-&gt;</operator><name>endspaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pnew</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_autocmd_textyankpost</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>recursive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>recursive</name> <operator>||</operator> <operator>!</operator><call><name>has_event</name><argument_list>(<argument><expr><name>EVENT_TEXTYANKPOST</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><call><name>get_vim_var_dict</name><argument_list>(<argument><expr><name>VV_EVENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>tv_list_set_lock</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>VAR_FIXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"regcontents"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>format_reg_type</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_width</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"regtype"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"regname"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_special</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"inclusive"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr> ?</condition><then> <expr><name>kSpecialVarTrue</name></expr> </then><else>: <expr><name>kSpecialVarFalse</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>get_op_char</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_str</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"operator"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_set_keys_readonly</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textlock</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TEXTYANKPOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textlock</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_clear</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_put</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>, <parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yanklen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>totlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MotionType</name></type> <name>y_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>y_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>oldlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>vcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>incr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>y_array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>nr_lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>new_cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_indent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>indent_diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>first_indent</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lendiff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>insert_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>allocated</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>cnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PUT_FIXINDENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>orig_indent</name> <operator>=</operator> <call><name>get_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>reg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>non_linewise_vis</name> <init>= <expr><operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>VIsual_mode</name> <operator>!=</operator> <literal type="char">'V'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>command_start_char</name> <init>= <expr><ternary><condition><expr><name>non_linewise_vis</name></expr> ?</condition><then> <expr><literal type="char">'c'</literal></expr> </then><else>:

<expr><operator>(</operator><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>PUT_LINE</name></expr> ?</condition><then> <expr><literal type="char">'i'</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr> ?</condition><then> <expr><literal type="char">'a'</literal></expr> </then><else>: <expr><literal type="char">'i'</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PUT_LINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_put</name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PUT_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PUT_LINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>command_start_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>count</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>stuff_inserted</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>count</name> <operator>!=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>Ctrl_U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>stuff_inserted</name><argument_list>(<argument><expr><name>command_start_char</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PUT_CURSEND</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PUT_LINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><literal type="string">"j0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cursor_pos</name> <init>= <expr><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>one_past_line</name> <init>= <expr><operator>(</operator><operator>*</operator><name>cursor_pos</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>eol</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>one_past_line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>eol</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>cursor_pos</name> <operator>+</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>cursor_pos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ve_allows</name> <init>= <expr><operator>(</operator><name>ve_flags</name> <operator>==</operator> <name>VE_ALL</name> <operator>||</operator> <name>ve_flags</name> <operator>==</operator> <name>VE_ONEMORE</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>eof</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name>one_past_line</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ve_allows</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>eol</name> <operator>||</operator> <name>eof</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PUT_LINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><literal type="string">"g'["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>command_start_char</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reg</name> <operator>&amp;&amp;</operator> <call><name>get_spec_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>insert_string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allocated</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>insert_string</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>terminal</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>insert_string</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y_type</name> <operator>=</operator> <name>kMTCharWise</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>y_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>insert_string</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y_array</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>y_array</name><index>[<expr><name>y_size</name></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>y_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y_array</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y_type</name> <operator>=</operator> <name>kMTLineWise</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>y_array</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y_array</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><name>y_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>y_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>y_array</name> <operator>=</operator> <operator>&amp;</operator><name>insert_string</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>get_yank_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>YREG_PASTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y_type</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_width</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_size</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_array</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>terminal</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>terminal_paste</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>y_array</name></expr></argument>, <argument><expr><name>y_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y_type</name> <operator>==</operator> <name>kMTLineWise</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PUT_LINE_SPLIT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>oldp</name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>oldp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nr_lines</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PUT_LINE_FORWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PUT_LINE</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>y_type</name> <operator>=</operator> <name>kMTLineWise</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>y_array</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E353: Nothing in register %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>regname</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\""</literal></expr> </then><else>: <expr><call><name>transchar</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y_type</name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><name>y_size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y_type</name> <operator>==</operator> <name>kMTLineWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lnum</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><call><name>BUFEMPTY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>u_save</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>u_save</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>yanklen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>y_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ve_flags</name> <operator>==</operator> <name>VE_ALL</name> <operator>&amp;&amp;</operator> <name>y_type</name> <operator>==</operator> <name>kMTCharWise</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>

?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>-</operator> <literal type="number">1</literal></expr>

</then><else>: <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><call><name>getviscol</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><call><name>getviscol</name><argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><name>dir</name> <operator>==</operator> <name>FORWARD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y_type</name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>endcol2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ve_flags</name> <operator>==</operator> <name>VE_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endcol2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endcol2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ve_flags</name> <operator>==</operator> <name>VE_ALL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name>endcol2</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <name>FORWARD</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>endcol2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>y_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>spaces</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>shortline</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>endspaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>delcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ml_append</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nr_lines</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldlen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>oldp</name></expr>;</init> <condition><expr><name>vcol</name> <operator>&lt;</operator> <name>col</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>lbr_chartabsize_adv</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>vcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>oldp</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>shortline</name> <operator>=</operator> <operator>(</operator><name>vcol</name> <operator>&lt;</operator> <name>col</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>vcol</name> <operator>==</operator> <name>col</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vcol</name> <operator>&lt;</operator> <name>col</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>=</operator> <name>col</name> <operator>-</operator> <name>vcol</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>vcol</name> <operator>&gt;</operator> <name>col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>endspaces</name></name> <operator>=</operator> <name>vcol</name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>=</operator> <name>incr</name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>delcount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>, <argument><expr><name>oldp</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oldp</name><index>[<expr><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>]</index></name> <operator>!=</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>endspaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>yanklen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>spaces</name> <operator>=</operator> <name>y_width</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>long</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>yanklen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>spaces</name> <operator>-=</operator> <call><name>lbr_chartabsize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y_array</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>spaces</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totlen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>count</name> <operator>*</operator> <operator>(</operator><name>yanklen</name> <operator>+</operator> <name>spaces</name><operator>)</operator>

<operator>+</operator> <name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>endspaces</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>totlen</name> <operator>+</operator> <name>oldlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>long</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>yanklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>yanklen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>shortline</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>spaces</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>spaces</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>columns</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>oldlen</name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>-</operator> <name>delcount</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>columns</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldp</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name>delcount</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>delcount</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>totlen</name></expr></argument>,

<argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>nr_lines</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>totlen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PUT_CURSEND</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y_type</name> <operator>==</operator> <name>kMTCharWise</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name> <operator>&amp;&amp;</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bytelen</name> <init>= <expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>bytelen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yanklen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name>bytelen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name>bytelen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_cursor</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y_type</name> <operator>==</operator> <name>kMTCharWise</name> <operator>&amp;&amp;</operator> <name>y_size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>end_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end_lnum</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_lnum</name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end_lnum</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>totlen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>count</name> <operator>*</operator> <name>yanklen</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>totlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lnum</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>totlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>newp</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>y_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>yanklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>yanklen</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldp</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>changed_cline_bef_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>totlen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lnum</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name>end_lnum</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>lnum</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>totlen</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>PUT_CURSEND</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>changed_bytes</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>lnum</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>totlen</name></expr></argument>, <argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;=</operator> <name>count</name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y_type</name> <operator>==</operator> <name>kMTCharWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>new_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totlen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>y_array</name><index>[<expr><name>y_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>totlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name><name>y_array</name><index>[<expr><name>y_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>col</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>yanklen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name><name>y_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>yanklen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>y_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y_type</name> <operator>!=</operator> <name>kMTCharWise</name> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <name>y_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lnum</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>nr_lines</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PUT_FIXINDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>old_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <name>count</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>y_size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lendiff</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <call><name>preprocs_left</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>indent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>indent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>first_indent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indent_diff</name> <operator>=</operator> <name>orig_indent</name> <operator>-</operator> <call><name>get_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>indent</name> <operator>=</operator> <name>orig_indent</name></expr>;</expr_stmt>

<expr_stmt><expr><name>first_indent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>indent</name> <operator>=</operator> <call><name>get_indent</name><argument_list>()</argument_list></call> <operator>+</operator> <name>indent_diff</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>indent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_indent</name><argument_list>(<argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SIN_NOMARK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <name>count</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>y_size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lendiff</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>y_type</name> <operator>==</operator> <name>kMTCharWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>new_cursor</name><operator>.</operator><name>lnum</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>y_size</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>y_array</name><index>[<expr><name>y_size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y_type</name> <operator>==</operator> <name>kMTLineWise</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>PUT_LINE_SPLIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>new_cursor</name><operator>.</operator><name>lnum</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>y_size</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>y_type</name> <operator>==</operator> <name>kMTLineWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <operator>(</operator><name>y_type</name> <operator>==</operator> <name>kMTCharWise</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>nr_lines</name>

<operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ExtmarkOp</name></type> <name>kind</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>y_type</name> <operator>==</operator> <name>kMTLineWise</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>PUT_LINE_SPLIT</name><operator>)</operator><operator>)</operator></expr>

?</condition><then> <expr><name>kExtmarkUndo</name></expr> </then><else>: <expr><name>kExtmarkNOOP</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mark_adjust</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <operator>(</operator><name>y_type</name> <operator>==</operator> <name>kMTCharWise</name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>MAXLNUM</name></expr></argument>, <argument><expr><name>nr_lines</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y_type</name> <operator>==</operator> <name>kMTCharWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nr_lines</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>nr_lines</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>y_array</name><index>[<expr><name>y_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>lendiff</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PUT_CURSLINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PUT_CURSEND</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y_type</name> <operator>==</operator> <name>kMTLineWise</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y_type</name> <operator>==</operator> <name>kMTLineWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>new_cursor</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msgmore</name><argument_list>(<argument><expr><name>nr_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>allocated</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>insert_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>y_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adjust_cursor_eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function> 

<function><type><name>void</name></type> <name>adjust_cursor_eol</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>ve_flags</name> <operator>&amp;</operator> <name>VE_ONEMORE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>restart_edit</name> <operator>||</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ve_flags</name> <operator>==</operator> <name>VE_ALL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>scol</name></decl>, <decl><type ref="prev"/><name>ecol</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <name>ecol</name> <operator>-</operator> <name>scol</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>preprocs_left</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_si</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cin</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cin</name></name> <operator>&amp;&amp;</operator> <call><name>in_cinkeys</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ind_hash_comment</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_register_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="char">'"'</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>num</name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>num</name> <operator>==</operator> <name>DELETION_REGISTER</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="char">'-'</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>num</name> <operator>==</operator> <name>STAR_REGISTER</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="char">'*'</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>num</name> <operator>==</operator> <name>PLUS_REGISTER</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="char">'+'</literal></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<return>return <expr><name>num</name> <operator>+</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="number">10</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_display</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>yb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MSG_PUTS_TITLE</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Registers ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_REGISTERS</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>get_register_name</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y_previous</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>yb</name> <operator>=</operator> <name>y_previous</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>yb</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>y_regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>yb</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>y_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>get_clipboard</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yb</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name>redir_reg</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name>redir_reg</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name>yb</name> <operator>==</operator> <name>y_previous</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>yb</name><operator>-&gt;</operator><name>y_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>Columns</name> <operator>-</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><name><name>yb</name><operator>-&gt;</operator><name>y_size</name></name> <operator>&amp;&amp;</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><literal type="string">"^J"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>yb</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name> <operator>-=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<expr_stmt><expr><name>clen</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>clen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>yb</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTLineWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><literal type="string">"^J"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>get_last_insert</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>arg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"\n\". "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dis_msg</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_cmdline</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>arg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"\n\": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dis_msg</name><argument_list>(<argument><expr><name>last_cmdline</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>arg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"\n\"% "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dis_msg</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>dummy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>buflist_name_nr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"\n\"#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dis_msg</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>last_search_pat</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>arg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"\n\"/ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dis_msg</name><argument_list>(<argument><expr><call><name>last_search_pat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>expr_line</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>arg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"\n\"= "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dis_msg</name><argument_list>(<argument><expr><name>expr_line</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dis_msg</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>skip_esc</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name>skip_esc</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>NUL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>n</name> <operator>-=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(<argument><expr><name>p</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>os_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>skip_comment</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>process</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>include_space</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_comment</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>comment_flags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lead_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leader_offset</name> <init>= <expr><call><name>get_last_leader_offset</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comment_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>is_comment</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>leader_offset</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>comment_flags</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>comment_flags</name> <operator>==</operator> <name>COM_END</name>

<operator>||</operator> <operator>*</operator><name>comment_flags</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>comment_flags</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>comment_flags</name> <operator>!=</operator> <name>COM_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_comment</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>process</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>line</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lead_len</name> <operator>=</operator> <call><name>get_leader_len</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comment_flags</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>include_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lead_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>line</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>comment_flags</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>comment_flags</name> <operator>==</operator> <name>COM_END</name>

<operator>||</operator> <operator>*</operator><name>comment_flags</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>comment_flags</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>comment_flags</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>*</operator><name>comment_flags</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>lead_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>line</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_join</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>insert_space</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>save_undo</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>use_formatoptions</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>setmark</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>curr_start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>spaces</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>endcurr1</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>endcurr2</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>currsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sumsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>comments</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remove_comments</name> <init>= <expr><operator>(</operator><name>use_formatoptions</name> <operator>==</operator> <name>TRUE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_REMOVE_COMS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>prev_was_comment</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>save_undo</name> <operator>&amp;&amp;</operator> <call><name>u_save</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><name>count</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spaces</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remove_comments</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>comments</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>comments</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><name>count</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>curr_start</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name>t</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>setmark</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>remove_comments</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>prev_was_comment</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_curr</name> <init>= <expr><call><name>skip_comment</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>insert_space</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>prev_was_comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>comments</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>new_curr</name> <operator>-</operator> <name>curr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>new_curr</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>skip_comment</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>insert_space</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev_was_comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>insert_space</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>curr</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name>curr</name> <operator>!=</operator> <literal type="char">')'</literal>

<operator>&amp;&amp;</operator> <name>sumsize</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>endcurr1</name> <operator>!=</operator> <name>TAB</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_MBYTE_JOIN</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0x100</literal> <operator>&amp;&amp;</operator> <name>endcurr1</name> <operator>&lt;</operator> <literal type="number">0x100</literal><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_MBYTE_JOIN2</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0x100</literal> <operator>||</operator> <name>endcurr1</name> <operator>&lt;</operator> <literal type="number">0x100</literal><operator>)</operator></expr>

)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>endcurr1</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endcurr1</name> <operator>=</operator> <name>endcurr2</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_js</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>endcurr1</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>endcurr1</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator> <name>endcurr1</name> <operator>==</operator> <literal type="char">'!'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>curbuf_splice_pending</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>sumsize</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>curr</name><operator>-</operator> <name>curr_start</name><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>,

<argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>currsize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumsize</name> <operator>+=</operator> <name>currsize</name> <operator>+</operator> <name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>endcurr1</name> <operator>=</operator> <name>endcurr2</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>insert_space</name> <operator>&amp;&amp;</operator> <name>currsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cend</name> <operator>=</operator> <name>curr</name> <operator>+</operator> <name>currsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endcurr1</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cend</name> <operator>&gt;</operator> <name>curr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endcurr2</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>sumsize</name> <operator>-</operator> <name>currsize</name> <operator>-</operator> <name><name>spaces</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sumsize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cend</name> <operator>=</operator> <name>newp</name> <operator>+</operator> <name>sumsize</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf_splice_pending</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><name>t</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cend</name> <operator>-=</operator> <name>currsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>cend</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>currsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cend</name> <operator>-=</operator> <name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cend</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>spaces_removed</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>curr</name> <operator>-</operator> <name>curr_start</name><operator>)</operator> <operator>-</operator> <name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name>t</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>mincol</name> <init>= <expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>lnum_amount</name> <init>= <expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>-</operator><name>t</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>col_amount</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>cend</name> <operator>-</operator> <name>newp</name> <operator>-</operator> <name>spaces_removed</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mark_col_adjust</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>mincol</name></expr></argument>, <argument><expr><name>lnum_amount</name></expr></argument>, <argument><expr><name>col_amount</name></expr></argument>, <argument><expr><name>spaces_removed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>curr_start</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remove_comments</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curr</name> <operator>+=</operator> <name><name>comments</name><index>[<expr><name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>insert_space</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>currsize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>setmark</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>sumsize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>currsize</name></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_lines</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf_splice_pending</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator>

<operator>(</operator><ternary><condition><expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_JOINCOL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>currsize</name></expr> </then><else>: <expr><name>col</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remove_comments</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>comments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>same_leader</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leader1_len</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>leader1_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leader2_len</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>leader2_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idx2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>leader1_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>leader2_len</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>leader1_flags</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>leader1_flags</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>COM_FIRST</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>leader2_len</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>COM_END</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>COM_START</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>leader1_len</name><operator>)</operator> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>leader2_flags</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>leader2_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>leader2_flags</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>COM_MIDDLE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line1</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>line1</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>idx1</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>line2</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx2</name> <operator>&lt;</operator> <name>leader2_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx2</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>line2</name><index>[<expr><name>idx2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>line1</name><index>[<expr><name>idx1</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <name><name>line2</name><index>[<expr><name>idx2</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>line1</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>idx1</name></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>line1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx2</name> <operator>==</operator> <name>leader2_len</name> <operator>&amp;&amp;</operator> <name>idx1</name> <operator>==</operator> <name>leader1_len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>op_format</name><parameter_list>(

<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>keep_cursor</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>old_line_count</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>cursor_start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keep_cursor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>saved_cursor</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>cursor_start</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>format_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>, <argument><expr><name>keep_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>end_adjusted</name></name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_line_count</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>old_line_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msgmore</name><argument_list>(<argument><expr><name>old_line_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keep_cursor</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>saved_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>saved_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>)</condition> <block>{<block_content>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>+=</operator> <name>old_line_count</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>+=</operator> <name>old_line_count</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>op_formatexpr</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fex_format</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>op_format</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>fex_format</name><parameter_list>(

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>use_sandbox</name> <init>= <expr><call><name>was_set_insecurely</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"formatexpr"</literal></expr></argument>,

<argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fex</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_LNUM</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_COUNT</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fex</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sandbox</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sandbox</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>eval_to_number</name><argument_list>(<argument><expr><name>fex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sandbox</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sandbox</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CHAR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>format_lines</name><parameter_list>(

<parameter><decl><type><name>linenr_T</name></type> <name>line_count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>avoid_fex</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_not_par</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>next_is_not_par</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>is_end_par</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>prev_is_end_par</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>next_is_start_par</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leader_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>next_leader_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>leader_flags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next_leader_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_comments</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_comments_list</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>advance</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>second_indent</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_second_indent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_number_indent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_trail_white</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_par_line</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>smd_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_set_indent</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>force_format</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>max_len</name> <operator>=</operator> <call><name>comp_textwidth</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>do_comments</name> <operator>=</operator> <call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_Q_COMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_second_indent</name> <operator>=</operator> <call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_Q_SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_number_indent</name> <operator>=</operator> <call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_Q_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_trail_white</name> <operator>=</operator> <call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_WHITE_PAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_not_par</name> <operator>=</operator> <call><name>fmt_check_par</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>

, <argument><expr><operator>&amp;</operator><name>leader_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>leader_flags</name></expr></argument>, <argument><expr><name>do_comments</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>is_not_par</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>next_is_not_par</name> <operator>=</operator> <call><name>fmt_check_par</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>

, <argument><expr><operator>&amp;</operator><name>next_leader_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_leader_flags</name></expr></argument>, <argument><expr><name>do_comments</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_end_par</name> <operator>=</operator> <operator>(</operator><name>is_not_par</name> <operator>||</operator> <name>next_is_not_par</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_end_par</name> <operator>&amp;&amp;</operator> <name>do_trail_white</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_end_par</name> <operator>=</operator> <operator>!</operator><call><name>ends_in_white</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>--</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <name>line_count</name></expr>;</init> <condition><expr><name>count</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>--</operator><name>count</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_is_end_par</name> <operator>=</operator> <name>is_end_par</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_not_par</name> <operator>=</operator> <name>next_is_not_par</name></expr>;</expr_stmt>

<expr_stmt><expr><name>leader_len</name> <operator>=</operator> <name>next_leader_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>leader_flags</name> <operator>=</operator> <name>next_leader_flags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_is_not_par</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_leader_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>next_leader_flags</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>next_is_not_par</name> <operator>=</operator> <call><name>fmt_check_par</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>

, <argument><expr><operator>&amp;</operator><name>next_leader_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_leader_flags</name></expr></argument>, <argument><expr><name>do_comments</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_number_indent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next_is_start_par</name> <operator>=</operator>

<operator>(</operator><call><name>get_number_indent</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>advance</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_end_par</name> <operator>=</operator> <operator>(</operator><name>is_not_par</name> <operator>||</operator> <name>next_is_not_par</name> <operator>||</operator> <name>next_is_start_par</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_end_par</name> <operator>&amp;&amp;</operator> <name>do_trail_white</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_end_par</name> <operator>=</operator> <operator>!</operator><call><name>ends_in_white</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_not_par</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first_par_line</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>do_second_indent</name> <operator>||</operator> <name>do_number_indent</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>prev_is_end_par</name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_second_indent</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>LINEEMPTY</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>leader_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next_leader_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>second_indent</name> <operator>=</operator>

<call><name>get_indent_lnum</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>second_indent</name> <operator>=</operator> <name>next_leader_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>do_comments_list</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>do_number_indent</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>leader_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next_leader_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>second_indent</name> <operator>=</operator>

<call><name>get_number_indent</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>second_indent</name> <operator>=</operator>

<call><name>get_number_indent</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_comments_list</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>||</operator> <operator>!</operator><call><name>same_leader</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><name>leader_len</name></expr></argument>, <argument><expr><name>leader_flags</name></expr></argument>,

<argument><expr><name>next_leader_len</name></expr></argument>, <argument><expr><name>next_leader_flags</name></expr></argument>)</argument_list></call></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_end_par</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_end_par</name> <operator>||</operator> <name>force_format</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>need_set_indent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_indent</name><argument_list>(<argument><expr><call><name>get_indent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIN_CHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&amp;&amp;</operator> <call><name>ascii_isspace</name><argument_list>(<argument><expr><call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>smd_save</name> <operator>=</operator> <name>p_smd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_smd</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>insertchar</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>INSCHAR_FORMAT</name>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>do_comments</name></expr> ?</condition><then> <expr><name>INSCHAR_DO_COM</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>do_comments</name> <operator>&amp;&amp;</operator> <name>do_comments_list</name></expr>

?</condition><then> <expr><name>INSCHAR_COM_LIST</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>avoid_fex</name></expr> ?</condition><then> <expr><name>INSCHAR_NO_FEX</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>second_indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>old_State</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_smd</name> <operator>=</operator> <name>smd_save</name></expr>;</expr_stmt>

<expr_stmt><expr><name>second_indent</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>need_set_indent</name> <operator>=</operator> <name>is_end_par</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_end_par</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first_par_line</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>force_format</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_end_par</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>advance</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next_leader_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>del_bytes</name><argument_list>(<argument><expr><name>next_leader_len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_col_adjust</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><name>next_leader_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>second_indent</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>indent</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getwhitecols_curline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>indent</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>del_bytes</name><argument_list>(<argument><expr><name>indent</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_col_adjust</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><name>indent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_join</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first_par_line</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>max_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>force_format</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>force_format</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ends_in_white</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fmt_check_par</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>leader_len</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>leader_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_comments</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_comments</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>leader_len</name> <operator>=</operator> <call><name>get_leader_len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>leader_flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>leader_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>leader_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>*</operator><name>leader_flags</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>flags</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>flags</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>flags</name> <operator>!=</operator> <name>COM_END</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>flags</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <operator>*</operator><name>leader_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <operator>(</operator><operator>*</operator><name>leader_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>flags</name> <operator>==</operator> <name>COM_END</name><operator>)</operator>

<operator>||</operator> <call><name>startPS</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>paragraph_start</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leader_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>leader_flags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>next_leader_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next_leader_flags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_comments</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>do_comments</name> <operator>=</operator> <call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_Q_COMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fmt_check_par</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>leader_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>leader_flags</name></expr></argument>, <argument><expr><name>do_comments</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fmt_check_par</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_leader_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_leader_flags</name></expr></argument>, <argument><expr><name>do_comments</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_WHITE_PAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_in_white</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_Q_NUMBER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>get_number_indent</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>same_leader</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>leader_len</name></expr></argument>, <argument><expr><name>leader_flags</name></expr></argument>,

<argument><expr><name>next_leader_len</name></expr></argument>, <argument><expr><name>next_leader_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>block_prep</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block_def</name></name> <modifier>*</modifier></type><name>bdp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_del</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>incr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pstart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prev_pstart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prev_pend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lbr_saved</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>textlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>is_short</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>is_oneChar</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>pre_whitesp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>pre_whitesp_c</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>end_char_vcols</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>start_char_vcols</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pstart</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_pstart</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>&lt;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pstart</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>lbr_chartabsize</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>pstart</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>pstart</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>pre_whitesp</name></name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>pre_whitesp_c</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>pre_whitesp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>pre_whitesp_c</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prev_pstart</name> <operator>=</operator> <name>pstart</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>pstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>start_char_vcols</name></name> <operator>=</operator> <name>incr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>&lt;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>is_short</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_del</name> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_del</name> <operator>&amp;&amp;</operator> <name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_char_vcols</name></name> <operator>-</operator> <name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <name>pstart</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>&gt;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>is_oneChar</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_INSERT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_char_vcols</name></name> <operator>-</operator> <name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name> <operator>+=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_char_vcols</name></name> <operator>-</operator> <name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_del</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_LSHIFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_char_vcols</name></name>

<operator>-</operator> <operator>(</operator><name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>prev_pend</name> <operator>=</operator> <name>pend</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pend</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev_pend</name> <operator>=</operator> <name>pend</name></expr>;</expr_stmt>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>lbr_chartabsize_adv</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pend</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>is_del</name>

<operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name>

<operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_REPLACE</name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>is_short</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name> <operator>||</operator> <name>virtual_op</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name>

<operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>&gt;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_del</name> <operator>&amp;&amp;</operator> <name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <name>incr</name> <operator>-</operator> <name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pend</name> <operator>!=</operator> <name>pstart</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <name>prev_pend</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>end_char_vcols</name></name> <operator>=</operator> <name>incr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_del</name> <operator>&amp;&amp;</operator> <name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pstart</name> <operator>=</operator> <name>prev_pstart</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>textlen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pend</name> <operator>-</operator> <name>pstart</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>textcol</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator> <operator>(</operator><name>pstart</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>textstart</name></name> <operator>=</operator> <name>pstart</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>lbr_saved</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>op_addsub</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>Prenum1</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>g_cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>change_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>amount</name> <init>= <expr><name>Prenum1</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>change_cnt</name> <operator>=</operator> <call><name>do_addsub</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>change_cnt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>one_change</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>startpos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</condition> <incr><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>kMTLineWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name>length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>one_change</name> <operator>=</operator> <call><name>do_addsub</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>one_change</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>change_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>startpos</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>change_cnt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>g_cmd</name> <operator>&amp;&amp;</operator> <name>one_change</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>amount</name> <operator>+=</operator> <name>Prenum1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>change_cnt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>change_cnt</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>change_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name>startpos</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>change_cnt</name> <operator>&gt;</operator> <name>p_report</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>change_cnt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"1 line changed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" lines changed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>change_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_addsub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op_type</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>Prenum1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf2</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pre</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>hexupper</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uvarnumber_T</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uvarnumber_T</name></type> <name>oldn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>dohex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>dooct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>dobin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>doalp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>firstdigit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>subtract</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>negative</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>was_positive</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>visual</name> <init>= <expr><name>VIsual_active</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_change</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>save_cursor</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>startpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>endpos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dohex</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_nf</name></name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>dooct</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_nf</name></name></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>dobin</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_nf</name></name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>doalp</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_nf</name></name></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dobin</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ascii_isbdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dohex</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ascii_isxdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dobin</name>

<operator>&amp;&amp;</operator> <name>dohex</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal> <operator>||</operator> <name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>utf_head_off</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>ascii_isxdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dohex</name>

<operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal> <operator>||</operator> <name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>utf_head_off</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>ascii_isxdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>dobin</name>

<operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal> <operator>||</operator> <name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>utf_head_off</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>ascii_isbdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>doalp</name> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>doalp</name> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>visual</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>doalp</name> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mb_len</name> <init>= <expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>mb_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <name>mb_len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>utf_head_off</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>was_positive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>firstdigit</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>doalp</name> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>doalp</name> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op_type</name> <operator>==</operator> <name>OP_NR_SUB</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CharOrd</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>Prenum1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>firstdigit</name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>firstdigit</name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>firstdigit</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Prenum1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">26</literal> <operator>-</operator> <call><name>CharOrd</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>Prenum1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>firstdigit</name> <operator>=</operator> <literal type="char">'Z'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>firstdigit</name> <operator>=</operator> <literal type="char">'z'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>firstdigit</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Prenum1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>startpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_change</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>del_char</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>utf_head_off</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>visual</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>visual</name> <operator>&amp;&amp;</operator> <name>VIsual_mode</name> <operator>!=</operator> <literal type="char">'V'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_curswant</name></name> <operator>==</operator> <name>MAXCOL</name></expr>

?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>col</name></expr>

</then><else>: <expr><name>length</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_str2nr</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pre</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>,

<argument><expr><literal type="number">0</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dobin</name></expr> ?</condition><then> <expr><name>STR2NR_BIN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dooct</name></expr> ?</condition><then> <expr><name>STR2NR_OCT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dohex</name></expr> ?</condition><then> <expr><name>STR2NR_HEX</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pre</name> <operator>&amp;&amp;</operator> <name>negative</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>subtract</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op_type</name> <operator>==</operator> <name>OP_NR_SUB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>subtract</name> <operator>^=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>subtract</name> <operator>^=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oldn</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>subtract</name></expr> ?</condition><then> <expr><name>n</name> <operator>-</operator> <operator>(</operator><name>uvarnumber_T</name><operator>)</operator><name>Prenum1</name></expr>

</then><else>: <expr><name>n</name> <operator>+</operator> <operator>(</operator><name>uvarnumber_T</name><operator>)</operator><name>Prenum1</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pre</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>subtract</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>oldn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>n</name> <operator>^</operator> <operator>(</operator><name>uvarnumber_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>negative</name> <operator>^=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>oldn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>^</operator> <operator>(</operator><name>uvarnumber_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>negative</name> <operator>^=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>visual</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>was_positive</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>negative</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>startpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_change</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>todel</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>todel</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x100</literal> <operator>&amp;&amp;</operator> <call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hexupper</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hexupper</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>del_char</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>buf1</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>length</name> <operator>+</operator> <name>NUMBUFLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>negative</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>visual</name> <operator>||</operator> <name>was_positive</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pre</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pre</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>pre</name> <operator>==</operator> <literal type="char">'B'</literal> <operator>||</operator> <name>pre</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name>pre</name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>pre</name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pre</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>pre</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bits</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr>;</init> <condition><expr><name>bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>bits</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf2</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <operator>--</operator><name>bits</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>buf2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pre</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf2</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pre</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf2</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIo64</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hexupper</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf2</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIX64</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf2</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>firstdigit</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>dooct</name> <operator>&amp;&amp;</operator> <name>pre</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>length</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_str</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>endpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name>startpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name>endpos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>visual</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_cursor</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>did_change</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>did_change</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>MotionType</name></type> <name>get_reg_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>reg_width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>regname</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'%'</literal></expr>:</case> 

<case>case <expr><literal type="char">'#'</literal></expr>:</case> 

<case>case <expr><literal type="char">'='</literal></expr>:</case> 

<case>case <expr><literal type="char">':'</literal></expr>:</case> 

<case>case <expr><literal type="char">'/'</literal></expr>:</case> 

<case>case <expr><literal type="char">'.'</literal></expr>:</case> 

<case>case <expr><name>Ctrl_F</name></expr>:</case> 

<case>case <expr><name>Ctrl_P</name></expr>:</case> 

<case>case <expr><name>Ctrl_W</name></expr>:</case> 

<case>case <expr><name>Ctrl_A</name></expr>:</case> 

<case>case <expr><literal type="char">'_'</literal></expr>:</case> 

<return>return <expr><name>kMTCharWise</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>valid_yank_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>kMTUnknown</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>get_yank_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>YREG_PASTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>reg_width</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>reg_width</name> <operator>=</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_width</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>kMTUnknown</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>format_reg_type</name><parameter_list>(<parameter><decl><type><name>MotionType</name></type> <name>reg_type</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>reg_width</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>reg_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>kMTLineWise</name></expr>:</case>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>kMTCharWise</name></expr>:</case>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>kMTBlockWise</name></expr>:</case>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>CTRL_V_STR</name> <literal type="string">"%"</literal> <name>PRIdCOLNR</name></expr></argument>, <argument><expr><name>reg_width</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>kMTUnknown</name></expr>:</case>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>get_reg_wrap_one_line</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>kGRegList</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_list_append_allocated_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>get_reg_contents</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kGRegNoExpr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kGRegExprSrc</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>get_reg_wrap_one_line</name><argument_list>(<argument><expr><call><name>get_expr_line_src</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>get_reg_wrap_one_line</name><argument_list>(<argument><expr><call><name>get_expr_line</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>regname</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>valid_yank_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>allocated</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_spec_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allocated</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>allocated</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>get_reg_wrap_one_line</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>get_reg_wrap_one_line</name><argument_list>(<argument><expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>get_yank_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>YREG_PASTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kGRegList</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTLineWise</name> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>retval</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>retval</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTLineWise</name> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>retval</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>retval</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>yankreg_T</name> <modifier>*</modifier></type><name>init_write_reg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>old_y_previous</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>must_append</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_yank_reg</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>emsg_invreg</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>old_y_previous</name> <operator>=</operator> <name>y_previous</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>get_yank_register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>YREG_YANK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_append_register</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>must_append</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_register</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>reg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_write_reg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>old_y_previous</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_clipboard</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y_previous</name> <operator>=</operator> <name>old_y_previous</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_reg_contents</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>must_append</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>write_reg_contents_ex</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>must_append</name></expr></argument>, <argument><expr><name>kMTUnknown</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_reg_contents_lst</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>strings</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>must_append</name></decl></parameter>, <parameter><decl><type><name>MotionType</name></type> <name>yank_type</name></decl></parameter>,

<parameter><decl><type><name>colnr_T</name></type> <name>block_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>name</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>strings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>strings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>strings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E883: search pattern and expression register may not "</literal>

<literal type="string">"contain two or more lines"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>write_reg_contents_ex</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>must_append</name></expr></argument>, <argument><expr><name>yank_type</name></expr></argument>, <argument><expr><name>block_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>old_y_previous</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>reg</name> <operator>=</operator> <call><name>init_write_reg</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_y_previous</name></expr></argument>, <argument><expr><name>must_append</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>str_to_reg</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>yank_type</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>strings</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>strings</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>block_len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>finish_write_reg</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>old_y_previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_reg_contents_ex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,

<parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>must_append</name></decl></parameter>,

<parameter><decl><type><name>MotionType</name></type> <name>yank_type</name></decl></parameter>,

<parameter><decl><type><name>colnr_T</name></type> <name>block_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_last_search_pat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>RE_SEARCH</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nobufnr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><call><name>buflist_findpat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alt_fnum</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>totlen</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>must_append</name> <operator>&amp;&amp;</operator> <name>expr_line</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>exprlen</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>expr_line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <name>exprlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>exprlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>expr_line</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>expr_line</name></expr></argument>, <argument><expr><name>totlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>expr_line</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>expr_line</name><index>[<expr><name>totlen</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>old_y_previous</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>reg</name> <operator>=</operator> <call><name>init_write_reg</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_y_previous</name></expr></argument>, <argument><expr><name>must_append</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>str_to_reg</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>yank_type</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>block_len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>finish_write_reg</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>old_y_previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>str_to_reg</name><parameter_list>(<parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>y_ptr</name></decl></parameter>, <parameter><decl><type><name>MotionType</name></type> <name>yank_type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>blocklen</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>str_list</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>yank_type</name> <operator>==</operator> <name>kMTUnknown</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>yank_type</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>str_list</name>

<operator>||</operator> <operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>str</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NL</name> <operator>||</operator> <name><name>str</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>CAR</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>

?</condition><then> <expr><name>kMTLineWise</name></expr> </then><else>: <expr><name>kMTCharWise</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>newlines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>extraline</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>append</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>str_list</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>ss</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>str</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>ss</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>ss</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>newlines</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>newlines</name> <operator>=</operator> <call><name>memcnt</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yank_type</name> <operator>==</operator> <name>kMTCharWise</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>extraline</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>newlines</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>y_ptr</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTCharWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>append</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>newlines</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><call><name>xrealloc</name><argument_list>(<argument><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>y_ptr</name><operator>-&gt;</operator><name>y_size</name></name> <operator>+</operator> <name>newlines</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name></name> <operator>=</operator> <name>pp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>lnum</name> <init>= <expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_size</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str_list</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>ss</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>str</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>ss</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>ss</name></expr><operator>,</operator> <expr><operator>++</operator><name>lnum</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>ss_len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><operator>*</operator><name>ss</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pp</name><index>[<expr><name>lnum</name></expr>]</index></name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><operator>*</operator><name>ss</name></expr></argument>, <argument><expr><name>ss_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ss_len</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>ss_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>line_len</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>str</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>str</name> <operator>+</operator> <name>len</name></expr></init></decl>;</init>

<condition><expr><name>start</name> <operator>&lt;</operator> <name>end</name> <operator>+</operator> <name>extraline</name></expr>;</condition>

<incr><expr><name>start</name> <operator>+=</operator> <name>line_len</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>lnum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end</name> <operator>-</operator> <name>start</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmemscan</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_len</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>line_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>extra</name> <init>= <expr><ternary><condition><expr><name>append</name></expr> ?</condition><then> <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>pp</name><index>[<expr><operator>--</operator><name>lnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>xmallocz</name><argument_list>(<argument><expr><name>line_len</name> <operator>+</operator> <name>extra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>pp</name><index>[<expr><name>lnum</name></expr>]</index></name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>extra</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>s_len</name> <init>= <expr><name>extra</name> <operator>+</operator> <name>line_len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>append</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>pp</name><index>[<expr><name>lnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>append</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pp</name><index>[<expr><name>lnum</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memchrsub</name><argument_list>(<argument><expr><name><name>pp</name><index>[<expr><name>lnum</name></expr>]</index></name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>s_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>yank_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_size</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_yreg_additional_data</name><argument_list>(<argument><expr><name>y_ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <call><name>os_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yank_type</name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_width</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>blocklen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><operator>(</operator><name>colnr_T</name><operator>)</operator> <name>maxlen</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>blocklen</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear_oparg</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oparg_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>varnumber_T</name></type> <name>line_count_info</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>varnumber_T</name> <modifier>*</modifier></type><name>wc</name></decl></parameter>,

<parameter><decl><type><name>varnumber_T</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>varnumber_T</name></type> <name>limit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>eol_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>words</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>chars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_word</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>limit</name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_word</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ascii_isspace</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>words</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_word</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ascii_isspace</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_word</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>chars</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>is_word</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>words</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>wc</name> <operator>+=</operator> <name>words</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>limit</name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>eol_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chars</name> <operator>+=</operator> <name>eol_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cc</name> <operator>+=</operator> <name>chars</name></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>cursor_pos_info</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf1</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf2</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>byte_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>bom_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>byte_count_cursor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>char_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>char_count_cursor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>word_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>word_count_cursor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eol_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>last_check</name> <init>= <expr><literal type="number">100000L</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>line_count_selected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>min_pos</name></decl>, <decl><type ref="prev"/><name>max_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>oparg_T</name></type> <name>oparg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l_VIsual_active</name> <init>= <expr><name>VIsual_active</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l_VIsual_mode</name> <init>= <expr><name>VIsual_mode</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>no_lines_msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_fileformat</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOL_DOS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>eol_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>eol_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l_VIsual_active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min_pos</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>min_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_pos</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name><name>max_pos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>max_pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l_VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type> <name>saved_sbr</name> <init>= <expr><name>p_sbr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sbr</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oparg</name><operator>.</operator><name>is_VIsual</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oparg</name><operator>.</operator><name>motion_type</name></name> <operator>=</operator> <name>kMTBlockWise</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oparg</name><operator>.</operator><name>op_type</name></name> <operator>=</operator> <name>OP_NOP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getvcols</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_pos</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>oparg</name><operator>.</operator><name>start_vcol</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oparg</name><operator>.</operator><name>end_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sbr</name> <operator>=</operator> <name>saved_sbr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oparg</name><operator>.</operator><name>end_vcol</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oparg</name><operator>.</operator><name>end_vcol</name></name> <operator>&lt;</operator> <name><name>oparg</name><operator>.</operator><name>start_vcol</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>oparg</name><operator>.</operator><name>end_vcol</name></name> <operator>+=</operator> <name><name>oparg</name><operator>.</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oparg</name><operator>.</operator><name>start_vcol</name></name> <operator>=</operator> <name><name>oparg</name><operator>.</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oparg</name><operator>.</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oparg</name><operator>.</operator><name>end_vcol</name></name> <operator>-=</operator> <name><name>oparg</name><operator>.</operator><name>start_vcol</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line_count_selected</name> <operator>=</operator> <name><name>max_pos</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name><name>min_pos</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>byte_count</name> <operator>&gt;</operator> <name>last_check</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_check</name> <operator>=</operator> <name>byte_count</name> <operator>+</operator> <literal type="number">100000L</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l_VIsual_active</name>

<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;=</operator> <name><name>min_pos</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>max_pos</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>l_VIsual_mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>Ctrl_V</name></expr>:</case>

<expr_stmt><expr><name>virtual_op</name> <operator>=</operator> <call><name>virtual_active</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oparg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual_op</name> <operator>=</operator> <name>kNone</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textstart</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>start_col</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>lnum</name> <operator>==</operator> <name><name>min_pos</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr>

?</condition><then> <expr><name><name>min_pos</name><operator>.</operator><name>col</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>end_col</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>lnum</name> <operator>==</operator> <name><name>max_pos</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr>

?</condition><then> <expr><name><name>max_pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name>start_col</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>MAXCOL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>start_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>end_col</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byte_count_cursor</name> <operator>+=</operator> <call><name>line_count_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>word_count_cursor</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>char_count_cursor</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>eol_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_eol</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name> <operator>||</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fixeol</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>byte_count_cursor</name> <operator>-=</operator> <name>eol_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>word_count_cursor</name> <operator>+=</operator> <name>word_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>char_count_cursor</name> <operator>+=</operator> <name>char_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>byte_count_cursor</name> <operator>=</operator> <name>byte_count</name>

<operator>+</operator> <call><name>line_count_info</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>word_count_cursor</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>char_count_cursor</name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>eol_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>byte_count</name> <operator>+=</operator> <call><name>line_count_info</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>word_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>char_count</name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>, <argument><expr><name>eol_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_eol</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name> <operator>||</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fixeol</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>byte_count</name> <operator>-=</operator> <name>eol_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l_VIsual_active</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l_VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>&lt;</operator> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>getvcols</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>min_pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>max_pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>cols</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRICT_SUB</name><argument_list>(<argument><expr><name><name>oparg</name><operator>.</operator><name>end_vcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>oparg</name><operator>.</operator><name>start_vcol</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" Cols; "</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>buf1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>char_count_cursor</name> <operator>==</operator> <name>byte_count_cursor</name>

<operator>&amp;&amp;</operator> <name>char_count</name> <operator>==</operator> <name>byte_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Selected %s%"</literal> <name>PRId64</name> <literal type="string">" of %"</literal> <name>PRId64</name> <literal type="string">" Lines;"</literal>

<literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" of %"</literal> <name>PRId64</name> <literal type="string">" Words;"</literal>

<literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" of %"</literal> <name>PRId64</name> <literal type="string">" Bytes"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>buf1</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>line_count_selected</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>word_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>word_count</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>byte_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Selected %s%"</literal> <name>PRId64</name> <literal type="string">" of %"</literal> <name>PRId64</name> <literal type="string">" Lines;"</literal>

<literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" of %"</literal> <name>PRId64</name> <literal type="string">" Words;"</literal>

<literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" of %"</literal> <name>PRId64</name> <literal type="string">" Chars;"</literal>

<literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" of %"</literal> <name>PRId64</name> <literal type="string">" Bytes"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>buf1</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>line_count_selected</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>word_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>word_count</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>char_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>char_count</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>byte_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>col_print</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>col_print</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>linetabsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>char_count_cursor</name> <operator>==</operator> <name>byte_count_cursor</name>

<operator>&amp;&amp;</operator> <name>char_count</name> <operator>==</operator> <name>byte_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Col %s of %s; Line %"</literal> <name>PRId64</name> <literal type="string">" of %"</literal> <name>PRId64</name> <literal type="string">";"</literal>

<literal type="string">" Word %"</literal> <name>PRId64</name> <literal type="string">" of %"</literal> <name>PRId64</name> <literal type="string">";"</literal>

<literal type="string">" Byte %"</literal> <name>PRId64</name> <literal type="string">" of %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf1</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf2</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>word_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>word_count</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>byte_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Col %s of %s; Line %"</literal> <name>PRId64</name> <literal type="string">" of %"</literal> <name>PRId64</name> <literal type="string">";"</literal>

<literal type="string">" Word %"</literal> <name>PRId64</name> <literal type="string">" of %"</literal> <name>PRId64</name> <literal type="string">";"</literal>

<literal type="string">" Char %"</literal> <name>PRId64</name> <literal type="string">" of %"</literal> <name>PRId64</name> <literal type="string">";"</literal>

<literal type="string">" Byte %"</literal> <name>PRId64</name> <literal type="string">" of %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf1</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf2</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>word_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>word_count</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>char_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>char_count</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>byte_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bom_count</name> <operator>=</operator> <call><name>bomb_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bom_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <name>len</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"(+%"</literal> <name>PRId64</name> <literal type="string">" for BOM)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>bom_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_shm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_shm</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_shm</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"words"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"chars"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>char_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"bytes"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><name>byte_count</name> <operator>+</operator> <name>bom_count</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"visual"</literal></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"cursor"</literal></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"key_len argument in tv_dict_add_nr is wrong"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><ternary><condition><expr><name>l_VIsual_active</name></expr> ?</condition><then> <expr><literal type="string">"visual_bytes"</literal></expr> </then><else>: <expr><literal type="string">"cursor_bytes"</literal></expr></else></ternary></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"visual_bytes"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>byte_count_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><ternary><condition><expr><name>l_VIsual_active</name></expr> ?</condition><then> <expr><literal type="string">"visual_chars"</literal></expr> </then><else>: <expr><literal type="string">"cursor_chars"</literal></expr></else></ternary></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"visual_chars"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>char_count_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><ternary><condition><expr><name>l_VIsual_active</name></expr> ?</condition><then> <expr><literal type="string">"visual_words"</literal></expr> </then><else>: <expr><literal type="string">"cursor_words"</literal></expr></else></ternary></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"visual_words"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>word_count_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_default_register_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>name</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>adjust_clipboard_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>name</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>yankreg_T</name> <modifier>*</modifier></type><name>adjust_clipboard_name</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>quiet</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>writing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_NO_CLIP</name></cpp:macro> <cpp:value>"clipboard: No provider. " "Try \":checkhealth\" or \":h clipboard\"."</cpp:value></cpp:define>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>explicit_cb_reg</name> <init>= <expr><operator>(</operator><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>implicit_cb_reg</name> <init>= <expr><operator>(</operator><operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>cb_flags</name> <operator>&amp;</operator> <name>CB_UNNAMEDMASK</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>explicit_cb_reg</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>implicit_cb_reg</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eval_has_provider</name><argument_list>(<argument><expr><literal type="string">"clipboard"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>batch_change_count</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>quiet</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>clipboard_didwarn</name> <operator>||</operator> <operator>(</operator><name>explicit_cb_reg</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>redirecting</name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>clipboard_didwarn</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>MSG_NO_CLIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>explicit_cb_reg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>target</name> <operator>=</operator> <operator>&amp;</operator><name><name>y_regs</name><index>[<expr><ternary><condition><expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'*'</literal></expr> ?</condition><then> <expr><name>STAR_REGISTER</name></expr> </then><else>: <expr><name>PLUS_REGISTER</name></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>writing</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cb_flags</name> <operator>&amp;</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'*'</literal></expr> ?</condition><then> <expr><name>CB_UNNAMED</name></expr> </then><else>: <expr><name>CB_UNNAMEDPLUS</name></expr></else></ternary><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>clipboard_needs_update</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>writing</name> <operator>&amp;&amp;</operator> <name>clipboard_delay_update</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>clipboard_needs_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>writing</name> <operator>&amp;&amp;</operator> <name>clipboard_needs_update</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cb_flags</name> <operator>&amp;</operator> <name>CB_UNNAMEDPLUS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>cb_flags</name> <operator>&amp;</operator> <name>CB_UNNAMED</name> <operator>&amp;&amp;</operator> <name>writing</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr></then><else>: <expr><literal type="char">'+'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <operator>&amp;</operator><name><name>y_regs</name><index>[<expr><name>PLUS_REGISTER</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <operator>&amp;</operator><name><name>y_regs</name><index>[<expr><name>STAR_REGISTER</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></else></if_stmt>

<label><name>end</name>:</label>

<return>return <expr><name>target</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>prepare_yankreg_from_object</name><parameter_list>(<parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>regtype</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>lines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><name><name>regtype</name><operator>.</operator><name>data</name></name></expr> ?</condition><then> <expr><name><name>regtype</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NUL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTUnknown</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTCharWise</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case> <case>case <expr><literal type="char">'l'</literal></expr>:</case>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTLineWise</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><name>Ctrl_V</name></expr>:</case>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTBlockWise</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regtype</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>!=</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>regtype</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>regtype</name><operator>.</operator><name>data</name></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_width</name></name> <operator>=</operator> <call><name>getdigits_int</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regtype</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name><operator>-</operator><name><name>regtype</name><operator>.</operator><name>data</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>=</operator> <name>lines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>additional_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>finish_yankreg_from_object</name><parameter_list>(<parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clipboard_adjust</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>!=</operator> <name>kMTCharWise</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTUnknown</name> <operator>||</operator> <name>clipboard_adjust</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTUnknown</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTLineWise</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTUnknown</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTCharWise</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>rowlen</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rowlen</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>rowlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>maxlen</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_width</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>maxlen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_clipboard</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>quiet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>errmsg</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><call><name>adjust_clipboard_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>quiet</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free_register</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>args</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>regname</name> <init>= <expr><operator>(</operator><name>char</name><operator>)</operator><name>name</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regname</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>result</name> <init>= <expr><call><name>eval_call_provider</name><argument_list>(<argument><expr><literal type="string">"clipboard"</literal></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name><name>result</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>lines</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_list_len</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_first</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_type</name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_first</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_last</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_type</name> <operator>!=</operator> <name>VAR_STRING</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>regtype</name> <init>= <expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_last</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>regtype</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>regtype</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>regtype</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTUnknown</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTCharWise</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case> <case>case <expr><literal type="char">'l'</literal></expr>:</case>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTLineWise</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><name>Ctrl_V</name></expr>:</case>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTBlockWise</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>lines</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTUnknown</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>tv_list_len</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>tv_list_len</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>additional_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>tv_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>TV_LIST_ITER_CONST</name><argument_list>(<argument>lines</argument>, <argument>li</argument>, <argument>{

if (TV_LIST_ITEM_TV(li)-&gt;v_type != VAR_STRING) {

goto err;

}

reg-&gt;y_array[tv_idx++] = (char_u *)xstrdupnul(

(const char *)TV_LIST_ITEM_TV(li)-&gt;vval.v_string);

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>!=</operator> <name>kMTCharWise</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTUnknown</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTLineWise</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTUnknown</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>kMTCharWise</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTBlockWise</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>rowlen</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rowlen</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>rowlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>maxlen</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_width</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>maxlen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>err</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>additional_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><literal type="string">"clipboard: provider returned invalid data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_clipboard</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>adjust_clipboard_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lines</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(

<argument><expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>+</operator> <operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>!=</operator> <name>kMTCharWise</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>char</name></type> <name>regtype</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>kMTLineWise</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>regtype</name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>kMTCharWise</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>regtype</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>kMTBlockWise</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name>regtype</name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>kMTUnknown</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tv_list_append_list</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regtype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<macro><name>tv_list_append_string</name><argument_list>(<argument>args</argument>, <argument>((char[]) { (char)name })</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>eval_call_provider</name><argument_list>(<argument><expr><literal type="string">"clipboard"</literal></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>start_batch_changes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>batch_change_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>clipboard_delay_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>end_batch_changes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>batch_change_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>clipboard_delay_update</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clipboard_needs_update</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>clipboard_needs_update</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_clipboard</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>y_previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>save_batch_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_count</name> <init>= <expr><name>batch_change_count</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>batch_change_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>clipboard_delay_update</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clipboard_needs_update</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>clipboard_needs_update</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_clipboard</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>y_previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>save_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>restore_batch_count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>save_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>batch_change_count</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>batch_change_count</name> <operator>=</operator> <name>save_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>batch_change_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>clipboard_delay_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>reg_empty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>yankreg_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>reg</name></decl></parameter>)</parameter_list>

FUNC_ATTR_PURE

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>y_array</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>y_size</name></name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>reg</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>kMTCharWise</name>

<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NUL</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>op_global_reg_iter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>,

<parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_unnamed</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2<operator>,</operator> 3<operator>,</operator> 4</function>) <macro><name>FUNC_ATTR_WARN_UNUSED_RESULT</name></macro>

<block>{<block_content>

<return>return <expr><call><name>op_reg_iter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>y_regs</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>is_unnamed</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>op_reg_iter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>iter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>yankreg_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>regs</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>yankreg_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>reg</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_unnamed</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>3<operator>,</operator> 4<operator>,</operator> 5</function>) <macro><name>FUNC_ATTR_WARN_UNUSED_RESULT</name></macro>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>yankreg_T</name> <modifier>*</modifier></type><name>iter_reg</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><operator>&amp;</operator><operator>(</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><specifier>const</specifier> <name>yankreg_T</name> <operator>*</operator><specifier>const</specifier><operator>)</operator><name>iter</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>iter_reg</name> <operator>-</operator> <operator>&amp;</operator><operator>(</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <name>NUM_SAVED_REGISTERS</name> <operator>&amp;&amp;</operator> <call><name>reg_empty</name><argument_list>(<argument><expr><name>iter_reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>iter_reg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>iter_reg</name> <operator>-</operator> <operator>&amp;</operator><operator>(</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NUM_SAVED_REGISTERS</name> <operator>||</operator> <call><name>reg_empty</name><argument_list>(<argument><expr><name>iter_reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iter_off</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iter_reg</name> <operator>-</operator> <operator>&amp;</operator><operator>(</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>get_register_name</name><argument_list>(<argument><expr><name>iter_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>reg</name> <operator>=</operator> <operator>*</operator><name>iter_reg</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>is_unnamed</name> <operator>=</operator> <operator>(</operator><name>iter_reg</name> <operator>==</operator> <name>y_previous</name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>++</operator><name>iter_reg</name> <operator>-</operator> <operator>&amp;</operator><operator>(</operator><name><name>regs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <name>NUM_SAVED_REGISTERS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>reg_empty</name><argument_list>(<argument><expr><name>iter_reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>iter_reg</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block>

<function><type><name>size_t</name></type> <name>op_reg_amount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_SAVED_REGISTERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>reg_empty</name><argument_list>(<argument><expr><name>y_regs</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>op_reg_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>yankreg_T</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_unnamed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>op_reg_index</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>y_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_regs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_unnamed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y_previous</name> <operator>=</operator> <operator>&amp;</operator><name><name>y_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>yankreg_T</name> <modifier>*</modifier></type><name>op_reg_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>op_reg_index</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>y_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>op_reg_set_previous</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>name</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>op_reg_index</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y_previous</name> <operator>=</operator> <operator>&amp;</operator><name><name>y_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
