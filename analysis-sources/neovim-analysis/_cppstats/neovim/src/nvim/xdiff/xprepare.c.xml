<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\xdiff\xprepare.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xinclude.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_KPDIS_RUN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_MAX_EQLIMIT</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_SIMSCAN_WINDOW</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_GUESS_NLINES1</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_GUESS_NLINES2</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>s_xdlclass</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>s_xdlclass</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len1</name></decl>, <name>len2</name>;</decl_stmt>

}</block></struct></type> <name>xdlclass_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>s_xdlclassifier</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>hsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdlclass_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rchash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chastore_t</name></type> <name>ncha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdlclass_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rcrecs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>xdlclassifier_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xdl_init_classifier</name><parameter_list>(<parameter><decl><type><name>xdlclassifier_t</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xdl_free_classifier</name><parameter_list>(<parameter><decl><type><name>xdlclassifier_t</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xdl_classify_record</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>xdlclassifier_t</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>, <parameter><decl><type><name>xrecord_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rhash</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hbits</name></decl></parameter>, <parameter><decl><type><name>xrecord_t</name> <modifier>*</modifier></type><name>rec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xdl_prepare_ctx</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>narec</name></decl></parameter>, <parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>,

<parameter><decl><type><name>xdlclassifier_t</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>, <parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>xdl_free_ctx</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xdl_clean_mmatch</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>dis</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xdl_cleanup_records</name><parameter_list>(<parameter><decl><type><name>xdlclassifier_t</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>, <parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf1</name></decl></parameter>, <parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xdl_trim_ends</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf1</name></decl></parameter>, <parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xdl_optimize_ctxs</name><parameter_list>(<parameter><decl><type><name>xdlclassifier_t</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>, <parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf1</name></decl></parameter>, <parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf2</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_init_classifier</name><parameter_list>(<parameter><decl><type><name>xdlclassifier_t</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>hbits</name></name> <operator>=</operator> <call><name>xdl_hashbits</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>hsize</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>cf</name><operator>-&gt;</operator><name>hbits</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_cha_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cf</name><operator>-&gt;</operator><name>ncha</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xdlclass_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cf</name><operator>-&gt;</operator><name>rchash</name></name> <operator>=</operator> <operator>(</operator><name>xdlclass_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>hsize</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xdlclass_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_cha_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cf</name><operator>-&gt;</operator><name>ncha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>rchash</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>hsize</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xdlclass_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cf</name><operator>-&gt;</operator><name>rcrecs</name></name> <operator>=</operator> <operator>(</operator><name>xdlclass_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>alloc</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xdlclass_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>rchash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_cha_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cf</name><operator>-&gt;</operator><name>ncha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xdl_free_classifier</name><parameter_list>(<parameter><decl><type><name>xdlclassifier_t</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>rcrecs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>rchash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_cha_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cf</name><operator>-&gt;</operator><name>ncha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_classify_record</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>xdlclassifier_t</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>, <parameter><decl><type><name>xrecord_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rhash</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hbits</name></decl></parameter>, <parameter><decl><type><name>xrecord_t</name> <modifier>*</modifier></type><name>rec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdlclass_t</name> <modifier>*</modifier></type><name>rcrec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdlclass_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rcrecs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <call><name>XDL_HASHLONG</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>ha</name></name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>hbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>rcrec</name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>rchash</name><index>[<expr><name>hi</name></expr>]</index></name></expr>;</init> <condition><expr><name>rcrec</name></expr>;</condition> <incr><expr><name>rcrec</name> <operator>=</operator> <name><name>rcrec</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>rcrec</name><operator>-&gt;</operator><name>ha</name></name> <operator>==</operator> <name><name>rec</name><operator>-&gt;</operator><name>ha</name></name> <operator>&amp;&amp;</operator>

<call><name>xdl_recmatch</name><argument_list>(<argument><expr><name><name>rcrec</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>rcrec</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rcrec</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rcrec</name> <operator>=</operator> <call><name>xdl_cha_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cf</name><operator>-&gt;</operator><name>ncha</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rcrec</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cf</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <name><name>cf</name><operator>-&gt;</operator><name>alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>alloc</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rcrecs</name> <operator>=</operator> <operator>(</operator><name>xdlclass_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>xdl_realloc</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>rcrecs</name></name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>alloc</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xdlclass_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>rcrecs</name></name> <operator>=</operator> <name>rcrecs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>rcrecs</name><index>[<expr><name><name>rcrec</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>=</operator> <name>rcrec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcrec</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcrec</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcrec</name><operator>-&gt;</operator><name>ha</name></name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>ha</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcrec</name><operator>-&gt;</operator><name>len1</name></name> <operator>=</operator> <name><name>rcrec</name><operator>-&gt;</operator><name>len2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcrec</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>rchash</name><index>[<expr><name>hi</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>rchash</name><index>[<expr><name>hi</name></expr>]</index></name> <operator>=</operator> <name>rcrec</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>pass</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>rcrec</name><operator>-&gt;</operator><name>len1</name></name><operator>++</operator></expr> </then><else>: <expr><name><name>rcrec</name><operator>-&gt;</operator><name>len2</name></name><operator>++</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>ha</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>rcrec</name><operator>-&gt;</operator><name>idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <call><name>XDL_HASHLONG</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>ha</name></name></expr></argument>, <argument><expr><name>hbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>rhash</name><index>[<expr><name>hi</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rhash</name><index>[<expr><name>hi</name></expr>]</index></name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_prepare_ctx</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>narec</name></decl></parameter>, <parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>,

<parameter><decl><type><name>xdlclassifier_t</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>, <parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>nrec</name></decl>, <decl><type ref="prev"/><name>hsize</name></decl>, <decl><type ref="prev"/><name>bsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hav</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>blk</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrecord_t</name> <modifier>*</modifier></type><name>crec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrecord_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>recs</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>rrecs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrecord_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rhash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>ha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rchg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>rindex</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ha</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rindex</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rchg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rhash</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>recs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_cha_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xdf</name><operator>-&gt;</operator><name>rcha</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xrecord_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>narec</name> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>recs</name> <operator>=</operator> <operator>(</operator><name>xrecord_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><name>narec</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xrecord_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XDF_DIFF_ALG</name><argument_list>(<argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XDF_HISTOGRAM_DIFF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hbits</name> <operator>=</operator> <name>hsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>hbits</name> <operator>=</operator> <call><name>xdl_hashbits</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>narec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hsize</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>hbits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rhash</name> <operator>=</operator> <operator>(</operator><name>xrecord_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><name>hsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xrecord_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rhash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xrecord_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>nrec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <name>blk</name> <operator>=</operator> <call><name>xdl_mmfile_first</name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bsize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>top</name> <operator>=</operator> <name>blk</name> <operator>+</operator> <name>bsize</name></expr>;</init> <condition><expr><name>cur</name> <operator>&lt;</operator> <name>top</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hav</name> <operator>=</operator> <call><name>xdl_hash_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nrec</name> <operator>&gt;=</operator> <name>narec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>narec</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rrecs</name> <operator>=</operator> <operator>(</operator><name>xrecord_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>xdl_realloc</name><argument_list>(<argument><expr><name>recs</name></expr></argument>, <argument><expr><name>narec</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xrecord_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>recs</name> <operator>=</operator> <name>rrecs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>crec</name> <operator>=</operator> <call><name>xdl_cha_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xdf</name><operator>-&gt;</operator><name>rcha</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>crec</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crec</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>cur</name> <operator>-</operator> <name>prev</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crec</name><operator>-&gt;</operator><name>ha</name></name> <operator>=</operator> <name>hav</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>nrec</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>crec</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>XDF_DIFF_ALG</name><argument_list>(<argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XDF_HISTOGRAM_DIFF</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>xdl_classify_record</name><argument_list>(<argument><expr><name>pass</name></expr></argument>, <argument><expr><name>cf</name></expr></argument>, <argument><expr><name>rhash</name></expr></argument>, <argument><expr><name>hbits</name></expr></argument>, <argument><expr><name>crec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rchg</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>nrec</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rchg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>nrec</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rindex</name> <operator>=</operator> <operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>nrec</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ha</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>nrec</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xdf</name><operator>-&gt;</operator><name>nrec</name></name> <operator>=</operator> <name>nrec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xdf</name><operator>-&gt;</operator><name>recs</name></name> <operator>=</operator> <name>recs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xdf</name><operator>-&gt;</operator><name>hbits</name></name> <operator>=</operator> <name>hbits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xdf</name><operator>-&gt;</operator><name>rhash</name></name> <operator>=</operator> <name>rhash</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xdf</name><operator>-&gt;</operator><name>rchg</name></name> <operator>=</operator> <name>rchg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xdf</name><operator>-&gt;</operator><name>rindex</name></name> <operator>=</operator> <name>rindex</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xdf</name><operator>-&gt;</operator><name>nreff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xdf</name><operator>-&gt;</operator><name>ha</name></name> <operator>=</operator> <name>ha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xdf</name><operator>-&gt;</operator><name>dstart</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xdf</name><operator>-&gt;</operator><name>dend</name></name> <operator>=</operator> <name>nrec</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>abort</name>:</label>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name>ha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name>rindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name>rchg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name>rhash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name>recs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_cha_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xdf</name><operator>-&gt;</operator><name>rcha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xdl_free_ctx</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name><name>xdf</name><operator>-&gt;</operator><name>rhash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name><name>xdf</name><operator>-&gt;</operator><name>rindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name><name>xdf</name><operator>-&gt;</operator><name>rchg</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name><name>xdf</name><operator>-&gt;</operator><name>ha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name><name>xdf</name><operator>-&gt;</operator><name>recs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_cha_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xdf</name><operator>-&gt;</operator><name>rcha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>xdl_prepare_env</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf1</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf2</name></decl></parameter>, <parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>,

<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>enl1</name></decl>, <decl><type ref="prev"/><name>enl2</name></decl>, <decl><type ref="prev"/><name>sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdlclassifier_t</name></type> <name>cf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>XDF_DIFF_ALG</name><argument_list>(<argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XDF_HISTOGRAM_DIFF</name></expr>

?</condition><then> <expr><name>XDL_GUESS_NLINES2</name></expr> </then><else>: <expr><name>XDL_GUESS_NLINES1</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>enl1</name> <operator>=</operator> <call><name>xdl_guess_lines</name><argument_list>(<argument><expr><name>mf1</name></expr></argument>, <argument><expr><name>sample</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>enl2</name> <operator>=</operator> <call><name>xdl_guess_lines</name><argument_list>(<argument><expr><name>mf2</name></expr></argument>, <argument><expr><name>sample</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XDF_DIFF_ALG</name><argument_list>(<argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XDF_HISTOGRAM_DIFF</name> <operator>&amp;&amp;</operator>

<call><name>xdl_init_classifier</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>, <argument><expr><name>enl1</name> <operator>+</operator> <name>enl2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_prepare_ctx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mf1</name></expr></argument>, <argument><expr><name>enl1</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free_classifier</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_prepare_ctx</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mf2</name></expr></argument>, <argument><expr><name>enl2</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free_ctx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free_classifier</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>XDF_DIFF_ALG</name><argument_list>(<argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XDF_PATIENCE_DIFF</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>XDF_DIFF_ALG</name><argument_list>(<argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XDF_HISTOGRAM_DIFF</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>xdl_optimize_ctxs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free_ctx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free_ctx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free_classifier</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XDF_DIFF_ALG</name><argument_list>(<argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XDF_HISTOGRAM_DIFF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xdl_free_classifier</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>xdl_free_env</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free_ctx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free_ctx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_clean_mmatch</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>dis</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>rdis0</name></decl>, <decl><type ref="prev"/><name>rpdis0</name></decl>, <decl><type ref="prev"/><name>rdis1</name></decl>, <decl><type ref="prev"/><name>rpdis1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>s</name> <operator>&gt;</operator> <name>XDL_SIMSCAN_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>XDL_SIMSCAN_WINDOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>-</operator> <name>i</name> <operator>&gt;</operator> <name>XDL_SIMSCAN_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>XDL_SIMSCAN_WINDOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>rdis0</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>rpdis0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>-</operator> <name>r</name><operator>)</operator> <operator>&gt;=</operator> <name>s</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dis</name><index>[<expr><name>i</name> <operator>-</operator> <name>r</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rdis0</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>dis</name><index>[<expr><name>i</name> <operator>-</operator> <name>r</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rpdis0</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>rdis0</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>rdis1</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>rpdis1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&lt;=</operator> <name>e</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dis</name><index>[<expr><name>i</name> <operator>+</operator> <name>r</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rdis1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>dis</name><index>[<expr><name>i</name> <operator>+</operator> <name>r</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rpdis1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>rdis1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rdis1</name> <operator>+=</operator> <name>rdis0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rpdis1</name> <operator>+=</operator> <name>rpdis0</name></expr>;</expr_stmt>

<return>return <expr><name>rpdis1</name> <operator>*</operator> <name>XDL_KPDIS_RUN</name> <operator>&lt;</operator> <operator>(</operator><name>rpdis1</name> <operator>+</operator> <name>rdis1</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_cleanup_records</name><parameter_list>(<parameter><decl><type><name>xdlclassifier_t</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>, <parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf1</name></decl></parameter>, <parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nm</name></decl>, <decl><type ref="prev"/><name>nreff</name></decl>, <decl><type ref="prev"/><name>mlim</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrecord_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>recs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdlclass_t</name> <modifier>*</modifier></type><name>rcrec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dis</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dis1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dis2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dis</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><name><name>xdf1</name><operator>-&gt;</operator><name>nrec</name></name> <operator>+</operator> <name><name>xdf2</name><operator>-&gt;</operator><name>nrec</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>xdf1</name><operator>-&gt;</operator><name>nrec</name></name> <operator>+</operator> <name><name>xdf2</name><operator>-&gt;</operator><name>nrec</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dis1</name> <operator>=</operator> <name>dis</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dis2</name> <operator>=</operator> <name>dis1</name> <operator>+</operator> <name><name>xdf1</name><operator>-&gt;</operator><name>nrec</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mlim</name> <operator>=</operator> <call><name>xdl_bogosqrt</name><argument_list>(<argument><expr><name><name>xdf1</name><operator>-&gt;</operator><name>nrec</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>XDL_MAX_EQLIMIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mlim</name> <operator>=</operator> <name>XDL_MAX_EQLIMIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>xdf1</name><operator>-&gt;</operator><name>dstart</name></name></expr><operator>,</operator> <expr><name>recs</name> <operator>=</operator> <operator>&amp;</operator><name><name>xdf1</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name><name>xdf1</name><operator>-&gt;</operator><name>dstart</name></name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>xdf1</name><operator>-&gt;</operator><name>dend</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>recs</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>rcrec</name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>rcrecs</name><index>[<expr><name><operator>(</operator><operator>*</operator><name>recs</name><operator>)</operator><operator>-&gt;</operator><name>ha</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nm</name> <operator>=</operator> <ternary><condition><expr><name>rcrec</name></expr> ?</condition><then> <expr><name><name>rcrec</name><operator>-&gt;</operator><name>len2</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dis1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>nm</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>nm</name> <operator>&gt;=</operator> <name>mlim</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mlim</name> <operator>=</operator> <call><name>xdl_bogosqrt</name><argument_list>(<argument><expr><name><name>xdf2</name><operator>-&gt;</operator><name>nrec</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>XDL_MAX_EQLIMIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mlim</name> <operator>=</operator> <name>XDL_MAX_EQLIMIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>xdf2</name><operator>-&gt;</operator><name>dstart</name></name></expr><operator>,</operator> <expr><name>recs</name> <operator>=</operator> <operator>&amp;</operator><name><name>xdf2</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name><name>xdf2</name><operator>-&gt;</operator><name>dstart</name></name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>xdf2</name><operator>-&gt;</operator><name>dend</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>recs</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>rcrec</name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>rcrecs</name><index>[<expr><name><operator>(</operator><operator>*</operator><name>recs</name><operator>)</operator><operator>-&gt;</operator><name>ha</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nm</name> <operator>=</operator> <ternary><condition><expr><name>rcrec</name></expr> ?</condition><then> <expr><name><name>rcrec</name><operator>-&gt;</operator><name>len1</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dis2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>nm</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><ternary><condition><expr><operator>(</operator><name>nm</name> <operator>&gt;=</operator> <name>mlim</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>nreff</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name><name>xdf1</name><operator>-&gt;</operator><name>dstart</name></name></expr><operator>,</operator> <expr><name>recs</name> <operator>=</operator> <operator>&amp;</operator><name><name>xdf1</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name><name>xdf1</name><operator>-&gt;</operator><name>dstart</name></name></expr>]</index></name></expr>;</init>

<condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>xdf1</name><operator>-&gt;</operator><name>dend</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>recs</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dis1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>

<operator>(</operator><name><name>dis1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>xdl_clean_mmatch</name><argument_list>(<argument><expr><name>dis1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>xdf1</name><operator>-&gt;</operator><name>dstart</name></name></expr></argument>, <argument><expr><name><name>xdf1</name><operator>-&gt;</operator><name>dend</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xdf1</name><operator>-&gt;</operator><name>rindex</name><index>[<expr><name>nreff</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xdf1</name><operator>-&gt;</operator><name>ha</name><index>[<expr><name>nreff</name></expr>]</index></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>recs</name><operator>)</operator><operator>-&gt;</operator><name>ha</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nreff</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xdf1</name><operator>-&gt;</operator><name>rchg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>xdf1</name><operator>-&gt;</operator><name>nreff</name></name> <operator>=</operator> <name>nreff</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>nreff</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name><name>xdf2</name><operator>-&gt;</operator><name>dstart</name></name></expr><operator>,</operator> <expr><name>recs</name> <operator>=</operator> <operator>&amp;</operator><name><name>xdf2</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name><name>xdf2</name><operator>-&gt;</operator><name>dstart</name></name></expr>]</index></name></expr>;</init>

<condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>xdf2</name><operator>-&gt;</operator><name>dend</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>recs</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dis2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>

<operator>(</operator><name><name>dis2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>xdl_clean_mmatch</name><argument_list>(<argument><expr><name>dis2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>xdf2</name><operator>-&gt;</operator><name>dstart</name></name></expr></argument>, <argument><expr><name><name>xdf2</name><operator>-&gt;</operator><name>dend</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xdf2</name><operator>-&gt;</operator><name>rindex</name><index>[<expr><name>nreff</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xdf2</name><operator>-&gt;</operator><name>ha</name><index>[<expr><name>nreff</name></expr>]</index></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>recs</name><operator>)</operator><operator>-&gt;</operator><name>ha</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nreff</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xdf2</name><operator>-&gt;</operator><name>rchg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>xdf2</name><operator>-&gt;</operator><name>nreff</name></name> <operator>=</operator> <name>nreff</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free</name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_trim_ends</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf1</name></decl></parameter>, <parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>lim</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrecord_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>recs1</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>recs2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>recs1</name> <operator>=</operator> <name><name>xdf1</name><operator>-&gt;</operator><name>recs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>recs2</name> <operator>=</operator> <name><name>xdf2</name><operator>-&gt;</operator><name>recs</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>lim</name> <operator>=</operator> <call><name>XDL_MIN</name><argument_list>(<argument><expr><name><name>xdf1</name><operator>-&gt;</operator><name>nrec</name></name></expr></argument>, <argument><expr><name><name>xdf2</name><operator>-&gt;</operator><name>nrec</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lim</name></expr>;</condition>

<incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>recs1</name><operator>++</operator></expr><operator>,</operator> <expr><name>recs2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>recs1</name><operator>)</operator><operator>-&gt;</operator><name>ha</name></name> <operator>!=</operator> <name><operator>(</operator><operator>*</operator><name>recs2</name><operator>)</operator><operator>-&gt;</operator><name>ha</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>xdf1</name><operator>-&gt;</operator><name>dstart</name></name> <operator>=</operator> <name><name>xdf2</name><operator>-&gt;</operator><name>dstart</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>recs1</name> <operator>=</operator> <name><name>xdf1</name><operator>-&gt;</operator><name>recs</name></name> <operator>+</operator> <name><name>xdf1</name><operator>-&gt;</operator><name>nrec</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>recs2</name> <operator>=</operator> <name><name>xdf2</name><operator>-&gt;</operator><name>recs</name></name> <operator>+</operator> <name><name>xdf2</name><operator>-&gt;</operator><name>nrec</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lim</name> <operator>-=</operator> <name>i</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>recs1</name><operator>--</operator></expr><operator>,</operator> <expr><name>recs2</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>recs1</name><operator>)</operator><operator>-&gt;</operator><name>ha</name></name> <operator>!=</operator> <name><operator>(</operator><operator>*</operator><name>recs2</name><operator>)</operator><operator>-&gt;</operator><name>ha</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>xdf1</name><operator>-&gt;</operator><name>dend</name></name> <operator>=</operator> <name><name>xdf1</name><operator>-&gt;</operator><name>nrec</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xdf2</name><operator>-&gt;</operator><name>dend</name></name> <operator>=</operator> <name><name>xdf2</name><operator>-&gt;</operator><name>nrec</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_optimize_ctxs</name><parameter_list>(<parameter><decl><type><name>xdlclassifier_t</name> <modifier>*</modifier></type><name>cf</name></decl></parameter>, <parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf1</name></decl></parameter>, <parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf2</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>xdl_trim_ends</name><argument_list>(<argument><expr><name>xdf1</name></expr></argument>, <argument><expr><name>xdf2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>xdl_cleanup_records</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>xdf1</name></expr></argument>, <argument><expr><name>xdf2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
