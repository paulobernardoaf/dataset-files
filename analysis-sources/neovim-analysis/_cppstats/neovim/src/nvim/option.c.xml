<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\option.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN_OPTION_C</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/edit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/diff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/digraph.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_getln.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fold.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/hardcopy.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/indent_c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/keymap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor_shape.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mouse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/normal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os_unix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/popupmnu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/regexp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_session.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/spell.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/spellfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui_compositor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/undo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/pty_conpty_win.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/lang.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_BOTH</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_WIN</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_BUF</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PV_MASK</name></cpp:macro> <cpp:value>0x0fff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_WIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(idopt_T)(PV_WIN + (int)(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BUF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(idopt_T)(PV_BUF + (int)(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOTH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(idopt_T)(PV_BOTH + (int)(x))</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>PV_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PV_MAXVAL</name> <init>= <expr><literal type="number">0xffff</literal></expr></init></decl> 

}</block></enum></type> <name>idopt_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR_WIN</name></cpp:macro> <cpp:value>((char_u *)-1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>p_term</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>p_ttytype</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_ai</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_bin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_bomb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_bh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_bt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_bl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_ci</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_cin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_cink</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_cino</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_cinw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_com</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_cms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_cpt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_cfu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_ofu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_tfu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_eol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_fixeol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_et</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_fenc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_ff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_fo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_flp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_ft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_iminsert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_imsearch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_inex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_inde</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_indk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_fex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_inf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_isk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_lisp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_ml</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_ma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_mod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_mps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_nf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_pi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_qe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_ro</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_sts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_sua</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_sw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_swf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_smc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_syn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_spc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_spf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_spl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_tw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_udf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_wm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_keymap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_et_nobin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_ml_nobin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_tw_nobin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_wm_nobin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_ai_nopaste</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>p_et_nopaste</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_sts_nopaste</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_tw_nopaste</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>p_wm_nopaste</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>vimoption</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shortname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>idopt_T</name></type> <name>indir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name><name>def_val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>LastSet</name></type> <name>last_set</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCTX_INIT</name></cpp:macro> <cpp:value>, { 0, 0, 0 }</cpp:value></cpp:define>

}</block></struct></type> <name>vimoption_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VI_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIM_DEFAULT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_BOOL</name></cpp:macro> <cpp:value>0x01U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_NUM</name></cpp:macro> <cpp:value>0x02U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_STRING</name></cpp:macro> <cpp:value>0x04U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_ALLOCED</name></cpp:macro> <cpp:value>0x08U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_EXPAND</name></cpp:macro> <cpp:value>0x10U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_NODEFAULT</name></cpp:macro> <cpp:value>0x40U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_DEF_ALLOCED</name></cpp:macro> <cpp:value>0x80U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_WAS_SET</name></cpp:macro> <cpp:value>0x100U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_NO_MKRC</name></cpp:macro> <cpp:value>0x200U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_VI_DEF</name></cpp:macro> <cpp:value>0x400U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_VIM</name></cpp:macro> <cpp:value>0x800U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_RSTAT</name></cpp:macro> <cpp:value>0x1000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_RWIN</name></cpp:macro> <cpp:value>0x2000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_RBUF</name></cpp:macro> <cpp:value>0x4000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_RALL</name></cpp:macro> <cpp:value>0x6000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_RCLR</name></cpp:macro> <cpp:value>0x7000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_COMMA</name></cpp:macro> <cpp:value>0x8000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_ONECOMMA</name></cpp:macro> <cpp:value>0x18000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_NODUP</name></cpp:macro> <cpp:value>0x20000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_FLAGLIST</name></cpp:macro> <cpp:value>0x40000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_SECURE</name></cpp:macro> <cpp:value>0x80000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_GETTEXT</name></cpp:macro> <cpp:value>0x100000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_NOGLOB</name></cpp:macro> <cpp:value>0x200000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_NFNAME</name></cpp:macro> <cpp:value>0x400000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_INSECURE</name></cpp:macro> <cpp:value>0x800000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_PRI_MKRC</name></cpp:macro> <cpp:value>0x1000000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_NO_ML</name></cpp:macro> <cpp:value>0x2000000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_CURSWANT</name></cpp:macro> <cpp:value>0x4000000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_NO_DEF_EXP</name></cpp:macro> <cpp:value>0x8000000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_RWINONLY</name></cpp:macro> <cpp:value>0x10000000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_NDNAME</name></cpp:macro> <cpp:value>0x20000000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_UI_OPTION</name></cpp:macro> <cpp:value>0x40000000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_MLE</name></cpp:macro> <cpp:value>0x80000000U</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIGHLIGHT_INIT</name></cpp:macro> <cpp:value>"8:SpecialKey,~:EndOfBuffer,z:TermCursor,Z:TermCursorNC,@:NonText," "d:Directory,e:ErrorMsg,i:IncSearch,l:Search,m:MoreMsg,M:ModeMsg,n:LineNr," "N:CursorLineNr,r:Question,s:StatusLine,S:StatusLineNC,c:VertSplit,t:Title," "v:Visual,V:VisualNOS,w:WarningMsg,W:WildMenu,f:Folded,F:FoldColumn," "A:DiffAdd,C:DiffChange,D:DiffDelete,T:DiffText,&gt;:SignColumn,-:Conceal," "B:SpellBad,P:SpellCap,R:SpellRare,L:SpellLocal,+:Pmenu,=:PmenuSel," "x:PmenuSbar,X:PmenuThumb,*:TabLine,#:TabLineSel,_:TabLineFill," "!:CursorColumn,.:CursorLine,o:ColorColumn,q:QuickFixLine," "0:Whitespace,I:NormalNC"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"options.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM_COUNT</name></cpp:macro> <cpp:value>ARRAY_SIZE(options)</cpp:value></cpp:define>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_ambw_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"single"</literal></expr>, <expr><literal type="string">"double"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_bg_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"light"</literal></expr>, <expr><literal type="string">"dark"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_nf_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"bin"</literal></expr>, <expr><literal type="string">"octal"</literal></expr>, <expr><literal type="string">"hex"</literal></expr>, <expr><literal type="string">"alpha"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_ff_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><name>FF_UNIX</name></expr>, <expr><name>FF_DOS</name></expr>, <expr><name>FF_MAC</name></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_wak_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"yes"</literal></expr>, <expr><literal type="string">"menu"</literal></expr>, <expr><literal type="string">"no"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_mousem_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"extend"</literal></expr>, <expr><literal type="string">"popup"</literal></expr>, <expr><literal type="string">"popup_setpos"</literal></expr>,

<expr><literal type="string">"mac"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_sel_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"inclusive"</literal></expr>, <expr><literal type="string">"exclusive"</literal></expr>, <expr><literal type="string">"old"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_slm_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"mouse"</literal></expr>, <expr><literal type="string">"key"</literal></expr>, <expr><literal type="string">"cmd"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_km_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"startsel"</literal></expr>, <expr><literal type="string">"stopsel"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_scbopt_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"ver"</literal></expr>, <expr><literal type="string">"hor"</literal></expr>, <expr><literal type="string">"jump"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_debug_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"msg"</literal></expr>, <expr><literal type="string">"throw"</literal></expr>, <expr><literal type="string">"beep"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_ead_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"both"</literal></expr>, <expr><literal type="string">"ver"</literal></expr>, <expr><literal type="string">"hor"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_buftype_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"nofile"</literal></expr>, <expr><literal type="string">"nowrite"</literal></expr>, <expr><literal type="string">"quickfix"</literal></expr>,

<expr><literal type="string">"help"</literal></expr>, <expr><literal type="string">"acwrite"</literal></expr>, <expr><literal type="string">"terminal"</literal></expr>,

<expr><literal type="string">"prompt"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_bufhidden_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"hide"</literal></expr>, <expr><literal type="string">"unload"</literal></expr>, <expr><literal type="string">"delete"</literal></expr>,

<expr><literal type="string">"wipe"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_bs_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"indent"</literal></expr>, <expr><literal type="string">"eol"</literal></expr>, <expr><literal type="string">"start"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_fdm_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"manual"</literal></expr>, <expr><literal type="string">"expr"</literal></expr>, <expr><literal type="string">"marker"</literal></expr>, <expr><literal type="string">"indent"</literal></expr>,

<expr><literal type="string">"syntax"</literal></expr>, <expr><literal type="string">"diff"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_fcl_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"all"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_cot_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"menu"</literal></expr>, <expr><literal type="string">"menuone"</literal></expr>, <expr><literal type="string">"longest"</literal></expr>, <expr><literal type="string">"preview"</literal></expr>,

<expr><literal type="string">"noinsert"</literal></expr>, <expr><literal type="string">"noselect"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_icm_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"nosplit"</literal></expr>, <expr><literal type="string">"split"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_scl_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"yes"</literal></expr>, <expr><literal type="string">"no"</literal></expr>, <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"auto:1"</literal></expr>, <expr><literal type="string">"auto:2"</literal></expr>,

<expr><literal type="string">"auto:3"</literal></expr>, <expr><literal type="string">"auto:4"</literal></expr>, <expr><literal type="string">"auto:5"</literal></expr>, <expr><literal type="string">"auto:6"</literal></expr>, <expr><literal type="string">"auto:7"</literal></expr>, <expr><literal type="string">"auto:8"</literal></expr>, <expr><literal type="string">"auto:9"</literal></expr>,

<expr><literal type="string">"yes:1"</literal></expr>, <expr><literal type="string">"yes:2"</literal></expr>, <expr><literal type="string">"yes:3"</literal></expr>, <expr><literal type="string">"yes:4"</literal></expr>, <expr><literal type="string">"yes:5"</literal></expr>, <expr><literal type="string">"yes:6"</literal></expr>, <expr><literal type="string">"yes:7"</literal></expr>, <expr><literal type="string">"yes:8"</literal></expr>,

<expr><literal type="string">"yes:9"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_fdc_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"auto:1"</literal></expr>, <expr><literal type="string">"auto:2"</literal></expr>,

<expr><literal type="string">"auto:3"</literal></expr>, <expr><literal type="string">"auto:4"</literal></expr>, <expr><literal type="string">"auto:5"</literal></expr>, <expr><literal type="string">"auto:6"</literal></expr>, <expr><literal type="string">"auto:7"</literal></expr>, <expr><literal type="string">"auto:8"</literal></expr>, <expr><literal type="string">"auto:9"</literal></expr>,

<expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><literal type="string">"4"</literal></expr>, <expr><literal type="string">"5"</literal></expr>, <expr><literal type="string">"6"</literal></expr>, <expr><literal type="string">"7"</literal></expr>, <expr><literal type="string">"8"</literal></expr>, <expr><literal type="string">"9"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>SHM_ALL</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>SHM_RO</name></expr>, <expr><name>SHM_MOD</name></expr>, <expr><name>SHM_FILE</name></expr>, <expr><name>SHM_LAST</name></expr>, <expr><name>SHM_TEXT</name></expr>, <expr><name>SHM_LINES</name></expr>, <expr><name>SHM_NEW</name></expr>, <expr><name>SHM_WRI</name></expr>,

<expr><name>SHM_ABBREVIATIONS</name></expr>, <expr><name>SHM_WRITE</name></expr>, <expr><name>SHM_TRUNC</name></expr>, <expr><name>SHM_TRUNCALL</name></expr>, <expr><name>SHM_OVER</name></expr>,

<expr><name>SHM_OVERALL</name></expr>, <expr><name>SHM_SEARCH</name></expr>, <expr><name>SHM_ATTENTION</name></expr>, <expr><name>SHM_INTRO</name></expr>, <expr><name>SHM_COMPLETIONMENU</name></expr>,

<expr><name>SHM_RECORDING</name></expr>, <expr><name>SHM_FILEINFO</name></expr>, <expr><name>SHM_SEARCHCOUNT</name></expr>,

<expr><literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"option.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>strcpy_comma_escaped</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>+</operator> <name>shift</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>+</operator> <name>shift</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>len</name> <operator>+</operator> <name>shift</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>compute_double_colon_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>val</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>common_suf_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>single_suf_len</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_PURE

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>val</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>dir_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>vim_env_iter</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>dir_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>dir_len</name> <operator>+</operator> <call><name>memcnt</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><name>dir_len</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>common_suf_len</name>

<operator>+</operator> <operator>!</operator><call><name>after_pathsep</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dir</name> <operator>+</operator> <name>dir_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">2</literal>

<operator>+</operator> <name>single_suf_len</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_SIZE</name></cpp:macro> <cpp:value>(sizeof("nvim") - 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>add_colon_dirs</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><name>dest</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name>val</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name>suf1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>size_t</name> <name>len1</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name>suf2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>size_t</name> <name>len2</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>bool</name> <name>forward</name></expr></argument>)</argument_list>

<name>FUNC_ATTR_WARN_UNUSED_RESULT</name> <name>FUNC_ATTR_NONNULL_RET</name> <name>FUNC_ATTR_NONNULL_ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>val</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>dest</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>dir_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>forward</name></expr> ?</condition><then> <expr><name>vim_env_iter</name></expr> </then><else>: <expr><name>vim_env_iter_rev</name></expr></else></ternary><operator>)</operator><operator>(</operator><literal type="char">':'</literal><operator>,</operator> <name>val</name><operator>,</operator> <name>iter</name><operator>,</operator> <operator>&amp;</operator><name>dir</name><operator>,</operator>

<operator>&amp;</operator><name>dir_len</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>dir_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>strcpy_comma_escaped</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dir_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>after_pathsep</name><argument_list>(<argument><expr><name>dest</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name>PATHSEP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="string">"nvim"</literal></expr></argument>, <argument><expr><name>NVIM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>NVIM_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>suf1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name>PATHSEP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>suf1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>len1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>suf2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name>PATHSEP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>suf2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>len2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<return>return <expr><name>dest</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>add_dir</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><name>dest</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name>dir</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>size_t</name> <name>dir_len</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>XDGVarType</name> <name>type</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name>suf1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>size_t</name> <name>len1</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name>suf2</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>size_t</name> <name>len2</name></expr></argument>)</argument_list>

<name>FUNC_ATTR_NONNULL_RET</name> <name>FUNC_ATTR_NONNULL_ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list> <name>FUNC_ATTR_WARN_UNUSED_RESULT</name>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dir_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>dest</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>strcpy_comma_escaped</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dir_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>append_nvim</name> <init>= <expr><operator>(</operator><name>type</name> <operator>==</operator> <name>kXDGDataHome</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>kXDGConfigHome</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>append_nvim</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>after_pathsep</name><argument_list>(<argument><expr><name>dest</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name>PATHSEP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>==</operator> <name>kXDGDataHome</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"nvim-data"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>NVIM_SIZE</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>==</operator> <name>kXDGDataHome</name></expr> ?</condition><then> <expr><literal type="string">"nvim-data"</literal></expr> </then><else>: <expr><literal type="string">"nvim"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="string">"nvim"</literal></expr></argument>, <argument><expr><name>NVIM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>NVIM_SIZE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>suf1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name>PATHSEP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>suf1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>len1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>suf2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name>PATHSEP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>suf2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>len2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>

<return>return <expr><name>dest</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_lib_dir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>default_lib_dir</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>os_isdir</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>default_lib_dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>default_lib_dir</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>exe_name</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_get_prefix_from_exepath</name><argument_list>(<argument><expr><name>exe_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>append_path</name><argument_list>(<argument><expr><name>exe_name</name></expr></argument>, <argument><expr><literal type="string">"lib"</literal> <name>_PATHSEPSTR</name> <literal type="string">"nvim"</literal></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>exe_name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_runtimepath_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>rtp_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>data_home</name> <init>= <expr><call><name>stdpaths_get_xdg_var</name><argument_list>(<argument><expr><name>kXDGDataHome</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>config_home</name> <init>= <expr><call><name>stdpaths_get_xdg_var</name><argument_list>(<argument><expr><name>kXDGConfigHome</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vimruntime</name> <init>= <expr><call><name>vim_getenv</name><argument_list>(<argument><expr><literal type="string">"VIMRUNTIME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>libdir</name> <init>= <expr><call><name>get_lib_dir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>data_dirs</name> <init>= <expr><call><name>stdpaths_get_xdg_var</name><argument_list>(<argument><expr><name>kXDGDataDirs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>config_dirs</name> <init>= <expr><call><name>stdpaths_get_xdg_var</name><argument_list>(<argument><expr><name>kXDGConfigDirs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SITE_SIZE</name></cpp:macro> <cpp:value>(sizeof("site") - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AFTER_SIZE</name></cpp:macro> <cpp:value>(sizeof("after") - 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>size_t</name></type> <name>data_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>config_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>vimruntime_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>libdir_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data_home</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>size_t</name></type> <name>nvim_size</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"nvim-data"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>size_t</name></type> <name>nvim_size</name> <init>= <expr><name>NVIM_SIZE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>rtp_size</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>data_len</name> <operator>+</operator> <call><name>memcnt</name><argument_list>(<argument><expr><name>data_home</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call>

<operator>+</operator> <name>nvim_size</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>SITE_SIZE</name> <operator>+</operator> <literal type="number">1</literal>

<operator>+</operator> <operator>!</operator><call><name>after_pathsep</name><argument_list>(<argument><expr><name>data_home</name></expr></argument>, <argument><expr><name>data_home</name> <operator>+</operator> <name>data_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">2</literal>

<operator>+</operator> <name>AFTER_SIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>config_home</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>config_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>config_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>config_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rtp_size</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>config_len</name> <operator>+</operator> <call><name>memcnt</name><argument_list>(<argument><expr><name>config_home</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><name>config_len</name></expr></argument>)</argument_list></call>

<operator>+</operator> <name>NVIM_SIZE</name> <operator>+</operator> <literal type="number">1</literal>

<operator>+</operator> <operator>!</operator><call><name>after_pathsep</name><argument_list>(<argument><expr><name>config_home</name></expr></argument>, <argument><expr><name>config_home</name> <operator>+</operator> <name>config_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">2</literal>

<operator>+</operator> <name>AFTER_SIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vimruntime</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vimruntime_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>vimruntime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vimruntime_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rtp_size</name> <operator>+=</operator> <name>vimruntime_len</name> <operator>+</operator> <call><name>memcnt</name><argument_list>(<argument><expr><name>vimruntime</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><name>vimruntime_len</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>libdir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>libdir_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>libdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>libdir_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rtp_size</name> <operator>+=</operator> <name>libdir_len</name> <operator>+</operator> <call><name>memcnt</name><argument_list>(<argument><expr><name>libdir</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><name>libdir_len</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rtp_size</name> <operator>+=</operator> <call><name>compute_double_colon_len</name><argument_list>(<argument><expr><name>data_dirs</name></expr></argument>, <argument><expr><name>NVIM_SIZE</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>SITE_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>AFTER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rtp_size</name> <operator>+=</operator> <call><name>compute_double_colon_len</name><argument_list>(<argument><expr><name>config_dirs</name></expr></argument>, <argument><expr><name>NVIM_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>AFTER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rtp_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rtp</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>rtp_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rtp_cur</name> <init>= <expr><name>rtp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rtp_cur</name> <operator>=</operator> <call><name>add_dir</name><argument_list>(<argument><expr><name>rtp_cur</name></expr></argument>, <argument><expr><name>config_home</name></expr></argument>, <argument><expr><name>config_len</name></expr></argument>, <argument><expr><name>kXDGConfigHome</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rtp_cur</name> <operator>=</operator> <call><name>add_colon_dirs</name><argument_list>(<argument><expr><name>rtp_cur</name></expr></argument>, <argument><expr><name>config_dirs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rtp_cur</name> <operator>=</operator> <call><name>add_dir</name><argument_list>(<argument><expr><name>rtp_cur</name></expr></argument>, <argument><expr><name>data_home</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><name>kXDGDataHome</name></expr></argument>,

<argument><expr><literal type="string">"site"</literal></expr></argument>, <argument><expr><name>SITE_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rtp_cur</name> <operator>=</operator> <call><name>add_colon_dirs</name><argument_list>(<argument><expr><name>rtp_cur</name></expr></argument>, <argument><expr><name>data_dirs</name></expr></argument>, <argument><expr><literal type="string">"site"</literal></expr></argument>, <argument><expr><name>SITE_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rtp_cur</name> <operator>=</operator> <call><name>add_dir</name><argument_list>(<argument><expr><name>rtp_cur</name></expr></argument>, <argument><expr><name>vimruntime</name></expr></argument>, <argument><expr><name>vimruntime_len</name></expr></argument>, <argument><expr><name>kXDGNone</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rtp_cur</name> <operator>=</operator> <call><name>add_dir</name><argument_list>(<argument><expr><name>rtp_cur</name></expr></argument>, <argument><expr><name>libdir</name></expr></argument>, <argument><expr><name>libdir_len</name></expr></argument>, <argument><expr><name>kXDGNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rtp_cur</name> <operator>=</operator> <call><name>add_colon_dirs</name><argument_list>(<argument><expr><name>rtp_cur</name></expr></argument>, <argument><expr><name>data_dirs</name></expr></argument>, <argument><expr><literal type="string">"site"</literal></expr></argument>, <argument><expr><name>SITE_SIZE</name></expr></argument>,

<argument><expr><literal type="string">"after"</literal></expr></argument>, <argument><expr><name>AFTER_SIZE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rtp_cur</name> <operator>=</operator> <call><name>add_dir</name><argument_list>(<argument><expr><name>rtp_cur</name></expr></argument>, <argument><expr><name>data_home</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><name>kXDGDataHome</name></expr></argument>,

<argument><expr><literal type="string">"site"</literal></expr></argument>, <argument><expr><name>SITE_SIZE</name></expr></argument>, <argument><expr><literal type="string">"after"</literal></expr></argument>, <argument><expr><name>AFTER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rtp_cur</name> <operator>=</operator> <call><name>add_colon_dirs</name><argument_list>(<argument><expr><name>rtp_cur</name></expr></argument>, <argument><expr><name>config_dirs</name></expr></argument>, <argument><expr><literal type="string">"after"</literal></expr></argument>, <argument><expr><name>AFTER_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rtp_cur</name> <operator>=</operator> <call><name>add_dir</name><argument_list>(<argument><expr><name>rtp_cur</name></expr></argument>, <argument><expr><name>config_home</name></expr></argument>, <argument><expr><name>config_len</name></expr></argument>, <argument><expr><name>kXDGConfigHome</name></expr></argument>,

<argument><expr><literal type="string">"after"</literal></expr></argument>, <argument><expr><name>AFTER_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rtp_cur</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>rtp_cur</name> <operator>-</operator> <name>rtp</name><operator>)</operator> <operator>==</operator> <name>rtp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SITE_SIZE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AFTER_SIZE</name></cpp:undef>

<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"runtimepath"</literal></expr></argument>, <argument><expr><name>rtp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"packpath"</literal></expr></argument>, <argument><expr><name>rtp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>data_dirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>config_dirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>data_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>config_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>vimruntime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>libdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NVIM_SIZE</name></cpp:undef>

<function><type><name>void</name></type> <name>set_init_1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>langmap_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shell</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"SHELL"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shell</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"sh"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>shell</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>names</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">""</literal></expr>, <expr><literal type="string">"TMPDIR"</literal></expr>, <expr><literal type="string">"TEMP"</literal></expr>, <expr><literal type="string">"TMP"</literal></expr>}</block></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>names</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"TMPDIR"</literal></expr>, <expr><literal type="string">"TEMP"</literal></expr>, <expr><literal type="string">"TMP"</literal></expr>}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>mustfree</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>names</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"/private/tmp"</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"/tmp"</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>mustfree</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_getenv</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mustfree</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"bsk"</literal></expr></argument>, <argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cdpath</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cdpath</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>vim_getenv</name><argument_list>(<argument><expr><literal type="string">"CDPATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cdpath</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>cdpath</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cdpath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_ispathlistsep</name><argument_list>(<argument><expr><name><name>cdpath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cdpath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>cdpath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cdpath</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><literal type="string">"cdpath"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_DEF_ALLOCED</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>cdpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"printencoding"</literal></expr></argument>, <argument><expr><literal type="string">"hp-roman8"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"printexpr"</literal></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><literal type="string">"system(['lpr'] "</literal>

<literal type="string">"+ (empty(&amp;printdevice)?[]:['-P', &amp;printdevice]) "</literal>

<literal type="string">"+ [v:fname_in])"</literal>

<literal type="string">". delete(v:fname_in)"</literal>

<literal type="string">"+ v:shell_error"</literal></expr></argument>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<argument><expr><literal type="string">"system(['copy', v:fname_in, "</literal>

<literal type="string">"empty(&amp;printdevice)?'LPT1':&amp;printdevice])"</literal>

<literal type="string">". delete(v:fname_in)"</literal></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><literal type="string">""</literal></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>backupdir</name> <init>= <expr><call><name>stdpaths_user_data_subpath</name><argument_list>(<argument><expr><literal type="string">"backup"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>backupdir_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>backupdir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>backupdir</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>backupdir</name></expr></argument>, <argument><expr><name>backupdir_len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>backupdir</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>backupdir</name></expr></argument>, <argument><expr><name>backupdir_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>backupdir</name></expr></argument>, <argument><expr><literal type="string">".,"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"viewdir"</literal></expr></argument>, <argument><expr><call><name>stdpaths_user_data_subpath</name><argument_list>(<argument><expr><literal type="string">"view"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"backupdir"</literal></expr></argument>, <argument><expr><name>backupdir</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"directory"</literal></expr></argument>, <argument><expr><call><name>stdpaths_user_data_subpath</name><argument_list>(<argument><expr><literal type="string">"swap"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"undodir"</literal></expr></argument>, <argument><expr><call><name>stdpaths_user_data_subpath</name><argument_list>(<argument><expr><literal type="string">"undo"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_runtimepath_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_options_default</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ar</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name> <operator>=</operator> <name>NO_LOCAL_UNDOLEVEL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_buf_options</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_win_options</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_options_default</name><argument_list>(<argument><expr><name>OPT_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>last_status</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>didset_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_spell_chartab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>opt_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_NO_DEF_EXP</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_GETTEXT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>option_expand</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_DEF_ALLOCED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_DEF_ALLOCED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>save_file_ff</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>os_env_exists</name><argument_list>(<argument><expr><literal type="string">"MLTERM"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"tbidi"</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>didset_options2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lang_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>enc_locale</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmemdupz</name><argument_list>(<argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fenc_default</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WORKING_LIBINTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>bind_textdomain_codeset</name><argument_list>(<argument><expr><name>PROJECT_NAME</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>set_helplang_default</name><argument_list>(<argument><expr><call><name>get_mess_lang</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_option_default</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>compatible</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dvi</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>both</name> <init>= <expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><ternary><condition><expr><name>both</name></expr> ?</condition><then> <expr><name>OPT_LOCAL</name></expr> </then><else>: <expr><name>opt_flags</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name> <init>= <expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>dvi</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_VI_DEF</name><operator>)</operator> <operator>||</operator> <name>compatible</name><operator>)</operator></expr> ?</condition><then> <expr><name>VI_DEFAULT</name></expr> </then><else>: <expr><name>VIM_DEFAULT</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_STRING</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>!=</operator> <name>PV_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opt_idx</name></expr></argument>,

<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>dvi</name></expr>]</index></name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_FREE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_ALLOCED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>dvi</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>P_ALLOCED</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>==</operator> <name>PV_SCROLL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>win_comp_scroll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>def_val</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>dvi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name>

<operator>||</operator> <operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <name>def_val</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>both</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call> <operator>=</operator>

<name>def_val</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>dvi</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>==</operator> <name>PV_ML</name> <operator>&amp;&amp;</operator> <call><name>getuid</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ROOT_UID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>both</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call> <operator>=</operator>

<operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>flagsp</name> <init>= <expr><call><name>insecure_flag</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>flagsp</name> <operator>=</operator> <operator>*</operator><name>flagsp</name> <operator>&amp;</operator> <operator>~</operator><name>P_INSECURE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_option_sctx_idx</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>current_sctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_options_default</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_NODEFAULT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_option_default</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>p_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>win_comp_scroll</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>parse_cino</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_string_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>allocated</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name> <init>= <expr><call><name>findoption</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_DEF_ALLOCED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <operator>(</operator>

<ternary><condition><expr><name>allocated</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <name>val</name></expr>

</then><else>: <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_DEF_ALLOCED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_number_default</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type> <name>free_all_options</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>==</operator> <name>PV_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_ALLOCED</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_DEF_ALLOCED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>!=</operator> <name>VAR_WIN</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_STRING</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>set_init_2</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>headless</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><literal type="string">"scroll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_option_default</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>, <argument><expr><name>p_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>comp_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><literal type="string">"window"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_window</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_number_default</name><argument_list>(<argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>parse_printoptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_init_3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>parse_shape_opt</name><argument_list>(<argument><expr><name>SHAPE_CURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>idx_srr</name> <init>= <expr><call><name>findoption</name><argument_list>(<argument><expr><literal type="string">"srr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_srr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>idx_srr</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>

?</condition><then> <expr><name>false</name></expr>

</then><else>: <expr><operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx_srr</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx_sp</name> <init>= <expr><call><name>findoption</name><argument_list>(<argument><expr><literal type="string">"sp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_sp</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>idx_sp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>

?</condition><then> <expr><name>false</name></expr>

</then><else>: <expr><operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx_sp</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>invocation_path_tail</name><argument_list>(<argument><expr><name>p_sh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"csh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"tcsh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>

)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_sp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_sp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"|&amp; tee"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx_sp</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p_sp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_srr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_srr</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&gt;&amp;"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx_srr</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p_srr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"sh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ksh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"mksh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"pdksh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"zsh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"zsh-beta"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"bash"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"fish"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>

)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_sp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_sp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"2&gt;&amp;1| tee"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx_sp</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p_sp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_srr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_srr</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&gt;%s 2&gt;&amp;1"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx_srr</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>p_srr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><call><name>BUFEMPTY</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx_ffs</name> <init>= <expr><call><name>findoption_len</name><argument_list>(<argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"ffs"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx_ffs</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>idx_ffs</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_fileformat</name><argument_list>(<argument><expr><call><name>default_fileformat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_title_defaults</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_helplang_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lang</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>lang_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lang_len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>findoption</name><argument_list>(<argument><expr><literal type="string">"hlg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_ALLOCED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>p_hlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_hlg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xmemdupz</name><argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name>lang_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>p_hlg</name></expr></argument>, <argument><expr><literal type="string">"zh_"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_hlg</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_hlg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>p_hlg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_hlg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>p_hlg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_hlg</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_hlg</name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_hlg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_hlg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_hlg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_ALLOCED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_title_defaults</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx1</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_title</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx1</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><literal type="string">"icon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_icon</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_set</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>errmsg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>startarg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prefix</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name>nextchar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>afterchar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>did_show</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>adding</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>prepending</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>removing</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cp_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>showoptions</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_show</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>startarg</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_MODELINE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_options_default</name><argument_list>(<argument><expr><name>OPT_FREE</name> <operator>|</operator> <name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>didset_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>didset_options2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_refresh_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>showoptions</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_show</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"inv"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption_len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>find_key_option</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption_len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>find_key_option</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>afterchar</name> <operator>=</operator> <name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>adding</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prepending</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>removing</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>adding</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prepending</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>removing</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nextchar</name> <operator>=</operator> <name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>key</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E518: Unknown option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"=:!&amp;&lt;"</literal></expr></argument>, <argument><expr><name>nextchar</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_BOOL</name><operator>)</operator>

<operator>||</operator> <name>nextchar</name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>e_unsupportedoption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>P_STRING</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_WINONLY</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>opt_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>!=</operator> <name>VAR_WIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_NOWIN</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>VAR_WIN</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_MODELINE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>P_SECURE</name> <operator>|</operator> <name>P_NO_ML</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E520: Not allowed in a modeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_MLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_mle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(

<argument><expr><literal type="string">"E992: Not allowed in a modeline when 'modelineexpr' is off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name>

<operator>&amp;&amp;</operator> <name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> 

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>==</operator> <name>PV_FDM</name>

<operator>||</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>==</operator> <name>PV_WRAP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sandbox</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_SECURE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>e_sandbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"?=:!&amp;&lt;"</literal></expr></argument>, <argument><expr><name>nextchar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp_val</name> <operator>=</operator> <name>p_cp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>cp_val</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>cp_val</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"?!&amp;&lt;"</literal></expr></argument>, <argument><expr><name>nextchar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_trailing</name></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'?'</literal>

<operator>||</operator> <operator>(</operator><name>prefix</name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"=:&amp;&lt;"</literal></expr></argument>, <argument><expr><name>nextchar</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_BOOL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>did_show</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>gotocmdline</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>did_show</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>showoneopt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>option_last_set_msg</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>last_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_WIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>option_last_set_msg</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_script_ctx</name><index>[

<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_BUF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>option_last_set_msg</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_script_ctx</name><index>[

<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E846: Key code not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>!=</operator> <literal type="char">'?'</literal>

<operator>&amp;&amp;</operator> <name>nextchar</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>afterchar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_trailing</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>value_is_replaced</name> <init>= <expr><operator>!</operator><name>prepending</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>adding</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>removing</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>value_checked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_BOOL</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <name>nextchar</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[

<expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_VI_DEF</name><operator>)</operator> <operator>||</operator> <name>cp_val</name><operator>)</operator></expr>

?</condition><then> <expr><name>VI_DEFAULT</name></expr> </then><else>: <expr><name>VIM_DEFAULT</name></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ar</name></name>

<operator>&amp;&amp;</operator> <name>opt_flags</name> <operator>==</operator> <name>OPT_LOCAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>afterchar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_trailing</name></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>set_bool_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>value</name></expr></argument>,

<argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"=:&amp;&lt;"</literal></expr></argument>, <argument><expr><name>nextchar</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>prefix</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[

<expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_VI_DEF</name><operator>)</operator> <operator>||</operator> <name>cp_val</name><operator>)</operator></expr> ?</condition><then> <expr><name>VI_DEFAULT</name></expr> </then><else>: <expr><name>VIM_DEFAULT</name></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name> <operator>&amp;&amp;</operator> <name>opt_flags</name> <operator>==</operator> <name>OPT_LOCAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NO_LOCAL_UNDOLEVEL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(

<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wc</name>

<operator>||</operator> <operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wcm</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&lt;'</literal>

<operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'^'</literal>

<operator>||</operator> <operator>(</operator><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>string_to_key</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>!=</operator> <operator>&amp;</operator><name>p_wcm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_str2nr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>STR2NR_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E521: Number required after ="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>adding</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>+</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prepending</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>*</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>removing</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>-</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>set_num_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>value</name></expr></argument>,

<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>origval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saved_origval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saved_newval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>newlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>comma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_value_alloced</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_BOTH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oldval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_BOTH</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>opt_flags</name>

<operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>origval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_varp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>origval</name> <operator>=</operator> <name>oldval</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>newval</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[

<expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_VI_DEF</name><operator>)</operator> <operator>||</operator> <name>cp_val</name><operator>)</operator></expr>

?</condition><then> <expr><name>VI_DEFAULT</name></expr> </then><else>: <expr><name>VIM_DEFAULT</name></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_value_alloced</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newval</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newval</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_NO_DEF_EXP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>option_expand</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>newval</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>xstrdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nextchar</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(

<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_value_alloced</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_kp</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">":help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>save_arg</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>errbuf</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bs</name>

<operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>getdigits_int</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"indent,eol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"indent,eol,start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>origval</name> <operator>==</operator> <name>oldval</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>origval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oldval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_ww</name>

<operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>errbuf</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>getdigits_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"b,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"s,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"h,l,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"&lt;,&gt;,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"[,],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>errbuf</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>errbuf</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>save_arg</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>errbuf</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&gt;'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>varp</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_dir</name>

<operator>||</operator> <name>varp</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bdir</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newlen</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>adding</name> <operator>||</operator> <name>prepending</name> <operator>||</operator> <name>removing</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>origval</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_EXPAND</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vim_isfilec</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal>

<operator>||</operator> <operator>(</operator><name>s</name> <operator>==</operator> <name>newval</name>

<operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>arg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>adding</name> <operator>||</operator> <name>prepending</name> <operator>||</operator> <name>removing</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>option_expand</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newlen</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>adding</name> <operator>||</operator> <name>prepending</name> <operator>||</operator> <name>removing</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>origval</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>removing</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_NODUP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>origval</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name><operator>)</operator>

<operator>||</operator> <name>s</name> <operator>==</operator> <name>origval</name>

<operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>bs</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name><operator>)</operator>

<operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal>

<operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>&gt;</operator> <name>origval</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>s</name> <operator>==</operator> <name>origval</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bs</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>adding</name> <operator>||</operator> <name>prepending</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prepending</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>adding</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name>origval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>adding</name> <operator>||</operator> <name>prepending</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>comma</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>origval</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name>newval</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>adding</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>origval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>comma</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_ONECOMMA</name><operator>)</operator> <operator>==</operator> <name>P_ONECOMMA</name>

<operator>&amp;&amp;</operator> <name><name>origval</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal>

<operator>&amp;&amp;</operator> <name><name>origval</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newval</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>comma</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>,

<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name>origval</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>newval</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>comma</name></expr></argument>, <argument><expr><name>origval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>newval</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>removing</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name>origval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>origval</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>newval</name> <operator>+</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>origval</name><operator>)</operator></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_FLAGLIST</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>newval</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_ONECOMMA</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">','</literal>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name><operator>)</operator> <operator>||</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>save_arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>save_arg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_value_alloced</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_origval</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>origval</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>xstrdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>origval</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_newval</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>newval</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>xstrdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newval</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>insecure_flag</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>secure_saved</name> <init>= <expr><name>secure</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_MODELINE</name><operator>)</operator>

<operator>||</operator> <name>sandbox</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>value_is_replaced</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <name>P_INSECURE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>did_set_string_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr></argument>,

<argument><expr><name>new_value_alloced</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>,

<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <name>secure_saved</name></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>starting</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>trigger_optionsset_string</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>saved_origval</name></expr></argument>,

<argument><expr><name>saved_newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_UI_OPTION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_call_option_set</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name>saved_newval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>saved_origval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>saved_newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>did_set_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>value_is_replaced</name></expr></argument>, <argument><expr><name>value_checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>skip</name>:</label>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name><operator>++</operator> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>arg</name> <operator>-</operator> <name>startarg</name><operator>)</operator> <operator>&lt;</operator> <name>IOSIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>arg</name> <operator>&gt;=</operator> <name>startarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>IObuff</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>startarg</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>arg</name> <operator>-</operator> <name>startarg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>arg</name> <operator>-</operator> <name>startarg</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>trans_characters</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>no_wait_return</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>no_wait_return</name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<label><name>theend</name>:</label>

<if_stmt><if>if <condition>(<expr><name>silent_mode</name> <operator>&amp;&amp;</operator> <name>did_show</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>silent_mode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>info_message</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>silent_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>info_message</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>did_set_option</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>new_value</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>value_checked</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_WAS_SET</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>insecure_flag</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value_checked</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>secure</name>

<operator>||</operator> <name>sandbox</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_MODELINE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>|</operator> <name>P_INSECURE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>new_value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <operator>~</operator><name>P_INSECURE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>illegal_char</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>errbuflen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E539: Illegal character &lt;%s&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>transchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>errbuf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>string_to_key</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>find_key_option</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>Ctrl_chr</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>*</operator><name>arg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>check_cedit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_cedit</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cedit_key</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>string_to_key</name><argument_list>(<argument><expr><name>p_cedit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>e_invarg</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cedit_key</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>did_set_title</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>!=</operator> <name>NO_SCREEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_options_bin</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>oldval</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>newval</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oldval</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw_nobin</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm_nobin</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ml_nobin</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ml</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et_nobin</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_tw_nobin</name> <operator>=</operator> <name>p_tw</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_wm_nobin</name> <operator>=</operator> <name>p_wm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ml_nobin</name> <operator>=</operator> <name>p_ml</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_et_nobin</name> <operator>=</operator> <name>p_et</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ml</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_tw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_wm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ml</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_et</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_bin</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>oldval</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw_nobin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm_nobin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ml</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ml_nobin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et_nobin</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_tw</name> <operator>=</operator> <name>p_tw_nobin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_wm</name> <operator>=</operator> <name>p_wm_nobin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ml</name> <operator>=</operator> <name>p_ml_nobin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_et</name> <operator>=</operator> <name>p_et_nobin</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_shada_parameter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_shada_parameter</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>find_shada_parameter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p_shada</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>option_expand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_EXPAND</name><operator>)</operator> <operator>||</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAXPATHL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>expand_env_esc</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <operator>&amp;</operator><name>p_tags</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <operator>&amp;</operator><name>p_sps</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"file:"</literal></expr> </then><else>:

<expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NameBuff</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>didset_options</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>init_chartab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_cmp</name></expr></argument>, <argument><expr><name>p_cmp_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_bkc</name></expr></argument>, <argument><expr><name>p_bkc_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bkc_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>p_bo_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bo_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_ssop</name></expr></argument>, <argument><expr><name>p_ssop_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssop_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_vop</name></expr></argument>, <argument><expr><name>p_ssop_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vop_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_fdo</name></expr></argument>, <argument><expr><name>p_fdo_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdo_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_dy</name></expr></argument>, <argument><expr><name>p_dy_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dy_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_rdb</name></expr></argument>, <argument><expr><name>p_rdb_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdb_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_tc</name></expr></argument>, <argument><expr><name>p_tc_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc_flags</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_ve</name></expr></argument>, <argument><expr><name>p_ve_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ve_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_wop</name></expr></argument>, <argument><expr><name>p_wop_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wop_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_jop</name></expr></argument>, <argument><expr><name>p_jop_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jop_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>spell_check_msm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>spell_check_sps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>compile_cap_prog</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>did_set_spell_option</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>check_cedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>briopt_check</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_breakat_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>didset_options2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>highlight_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_cb</name></expr></argument>, <argument><expr><name>p_cb_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_chars_option</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fcs</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_chars_option</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_opt_wim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_options</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>opt_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_STRING</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_varp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_buf_options</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_def</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_inc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_inex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_inde</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_indk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_fex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_kp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_mps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_fo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_flp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_com</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_nf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_qe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_syn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_syn_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_p_spc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_p_spf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_p_spl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_sua</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_cino</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cinw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cpt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cfu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ofu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_keymap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_gp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_mp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_efm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_tfu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_tc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_tsr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_lw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bkc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_menc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_string_option</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>empty_option</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear_string_option</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp</name> <operator>!=</operator> <name>empty_option</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_string_option</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>was_set_insecurely</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>flagp</name> <init>= <expr><call><name>insecure_flag</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>*</operator><name>flagp</name> <operator>&amp;</operator> <name>P_INSECURE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"was_set_insecurely()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>insecure_flag</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PV_STL</name></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_stl_flags</name></name></expr>;</return>

<case>case <expr><name>PV_FDE</name></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fde_flags</name></name></expr>;</return>

<case>case <expr><name>PV_FDT</name></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdt_flags</name></name></expr>;</return>

<case>case <expr><name>PV_INDE</name></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inde_flags</name></name></expr>;</return>

<case>case <expr><name>PV_FEX</name></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fex_flags</name></name></expr>;</return>

<case>case <expr><name>PV_INEX</name></expr>:</case> <return>return <expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inex_flags</name></name></expr>;</return>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redraw_titles</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>need_maketitle</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>shada_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>set_string_option_direct</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>set_sid</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>both</name> <init>= <expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>opt_idx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"set_string_option_direct()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IEMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"For option %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>!=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>p_shada</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><ternary><condition><expr><name>both</name></expr> ?</condition><then> <expr><name>OPT_LOCAL</name></expr> </then><else>: <expr><name>opt_flags</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_FREE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_ALLOCED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>varp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>both</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_string_option_global</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_ALLOCED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_BOTH</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>both</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>varp</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>set_sid</name> <operator>!=</operator> <name>SID_NONE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>sctx_T</name></type> <name>script_ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>set_sid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>script_ctx</name> <operator>=</operator> <name>current_sctx</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>script_ctx</name><operator>.</operator><name>sc_sid</name></name> <operator>=</operator> <name>set_sid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>script_ctx</name><operator>.</operator><name>sc_seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>set_option_sctx_idx</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>script_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_string_option_global</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>varp</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>VAR_WIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>GLOBAL_WO</name><argument_list>(<argument><expr><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>!=</operator> <name>PV_NONE</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>varp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>set_string_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2</function>) <macro><name>FUNC_ATTR_WARN_UNUSED_RESULT</name></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>varp</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(

<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_BOTH</name><operator>)</operator></expr>

?</condition><then> <expr><name>OPT_GLOBAL</name></expr> </then><else>: <expr><name>OPT_LOCAL</name></expr></else></ternary><operator>)</operator></expr>

</then><else>: <expr><name>opt_flags</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>oldval</name> <init>= <expr><operator>*</operator><name>varp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>varp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>saved_oldval</name> <init>= <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>saved_newval</name> <init>= <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>value_checked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>r</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>did_set_string_option</name><argument_list>(

<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>true</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>oldval</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_checked</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>did_set_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>value_checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>starting</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>trigger_optionsset_string</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>saved_oldval</name></expr></argument>, <argument><expr><name>saved_newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_UI_OPTION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_call_option_set</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name>saved_newval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>saved_oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>saved_newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>valid_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>allowed</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>val</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>allowed</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>valid_filetype</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<return>return <expr><call><name>valid_name</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">".-_"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>valid_spellang</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<return>return <expr><call><name>valid_name</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">".-_,@"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>valid_spellfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>val</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isfilec</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>did_set_string_option</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>varp</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>new_value_alloced</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>errbuflen</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value_checked</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_chartab</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>gvarp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>free_oldval</name> <init>= <expr><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_ALLOCED</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>value_changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>gvarp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>secure</name> <operator>||</operator> <name>sandbox</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_SECURE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_secure</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_NFNAME</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vim_strpbrk</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>secure</name></expr> ?</condition><then> <expr><literal type="string">"/\\*?[|;&amp;&lt;&gt;\r\n"</literal></expr>

</then><else>: <expr><literal type="string">"/\\*?[&lt;&gt;\r\n"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_NDNAME</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vim_strpbrk</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"*?[|;&amp;&lt;&gt;\r\n"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bkc</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>bkc</name> <init>= <expr><name>p_bkc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><operator>&amp;</operator><name>bkc_flags</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bkc</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bkc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_bkc_flags</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>bkc</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>bkc</name></expr></argument>, <argument><expr><name>p_bkc_values</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>BKC_AUTO</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>BKC_YES</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>BKC_NO</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>p_bkc_values</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bex</name> <operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_pm</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>p_bex</name> <operator>==</operator> <literal type="char">'.'</literal></expr> ?</condition><then> <expr><name>p_bex</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>p_bex</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>*</operator><name>p_pm</name> <operator>==</operator> <literal type="char">'.'</literal></expr> ?</condition><then> <expr><name>p_pm</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>p_pm</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E589: 'backupext' and 'patchmode' are equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_briopt</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>briopt_check</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_isi</name>

<operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_isk</name></name><operator>)</operator>

<operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_isp</name>

<operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_isf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>init_chartab</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_chartab</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_hf</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>didset_vim</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_setenv</name><argument_list>(<argument><expr><literal type="string">"VIM"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didset_vim</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>didset_vimruntime</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_setenv</name><argument_list>(<argument><expr><literal type="string">"VIMRUNTIME"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didset_vimruntime</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cc</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>check_colorcolumn</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_hlg</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>p_hlg</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_hl</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>varp</name><operator>)</operator></expr></argument>, <argument><expr><name>HIGHLIGHT_INIT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_unsupportedoption</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_jop</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_jop</name></expr></argument>, <argument><expr><name>p_jop_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jop_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_nf</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><name>p_nf_values</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ssop</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_ssop</name></expr></argument>, <argument><expr><name>p_ssop_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssop_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_CURDIR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_SESDIR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>p_ssop_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssop_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_vop</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_vop</name></expr></argument>, <argument><expr><name>p_ssop_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vop_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_rdb</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_rdb</name></expr></argument>, <argument><expr><name>p_rdb_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdb_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_sbo</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_sbo</name></expr></argument>, <argument><expr><name>p_scbopt_values</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ambw</name> <operator>||</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_emoji</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_ambw</name></expr></argument>, <argument><expr><name>p_ambw_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>set_chars_option</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E834: Conflicts with value of 'listchars'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>ambw_end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_chars_option</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E835: Conflicts with value of 'fillchars'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>ambw_end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<label><name>ambw_end</name>:</label>

<block>{<block_content/>}</block> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bg</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_bg</name></expr></argument>, <argument><expr><name>p_bg_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dark</name> <init>= <expr><operator>(</operator><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_highlight</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dark</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>get_var_value</name><argument_list>(<argument><expr><literal type="string">"g:colors_name"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"g:colors_name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>p_bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_bg</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>dark</name></expr> ?</condition><then> <expr><literal type="string">"dark"</literal></expr> </then><else>: <expr><literal type="string">"light"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_highlight</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wim</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>check_opt_wim</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wop</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_wop</name></expr></argument>, <argument><expr><name>p_wop_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wop_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wak</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_wak</name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_wak</name></expr></argument>, <argument><expr><name>p_wak_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ei</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>check_ei</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_enc</name> <operator>||</operator> <name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_fenc</name> <operator>||</operator> <name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_menc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_fenc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MODIFIABLE</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>opt_flags</name> <operator>!=</operator> <name>OPT_GLOBAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_modifiable</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_setflags</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_canonize</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>varp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_enc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_unsupportedoption</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_penc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_canonize</name><argument_list>(<argument><expr><name>p_penc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p_penc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_penc</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_keymap</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_filetype</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>secure_save</name> <init>= <expr><name>secure</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>keymap_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <name>secure_save</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>value_checked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_keymap</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>=</operator> <name>B_IMODE_LMAP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>!=</operator> <name>B_IMODE_USE_INSERT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>=</operator> <name>B_IMODE_LMAP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>==</operator> <name>B_IMODE_LMAP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>=</operator> <name>B_IMODE_NONE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>==</operator> <name>B_IMODE_LMAP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>=</operator> <name>B_IMODE_USE_INSERT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_iminsert_global</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_imsearch_global</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>status_redraw_curbuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ff</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MODIFIABLE</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_modifiable</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><name>p_ff_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_setflags</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_fileformat</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOL_MAC</name> <operator>||</operator> <operator>*</operator><name>oldval</name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ffs</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_ffs</name></expr></argument>, <argument><expr><name>p_ff_values</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_mps</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x3</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x2</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>||</operator> <name>x3</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_com</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>COM_ALL</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>illegal_char</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name><operator>++</operator> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E524: Missing colon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E525: Zero length string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skip_to_option_part</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_lcs</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>set_chars_option</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errmsg</name></expr>)</condition> <block>{<block_content>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>set_chars_option</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>set_chars_option</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_fcs</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>set_chars_option</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errmsg</name></expr>)</condition> <block>{<block_content>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>set_chars_option</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fcs</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>set_chars_option</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cedit</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>check_cedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_vfile</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>verbose_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_vfile</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>verbose_open</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_shada</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>fullname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>shada_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>

?</condition><then> <expr><operator>(</operator><operator>(</operator><name>shada_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><literal type="string">"shada"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>

</then><else>: <expr><name>shada_idx</name></expr></else></ternary><operator>)</operator></expr>

</then><else>: <expr><name>opt_idx</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>free_oldval</name> <operator>=</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_ALLOCED</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>p_shada</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"!\"%'/:&lt;@cfhnrs"</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>illegal_char</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition> <block>{<block_content> 

<while>while <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content/>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content/>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'!'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'h'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content> 

<while>while <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content/>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E526: Missing number after &lt;%s&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>transchar_byte</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>errbuf</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E527: Missing comma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_shada</name> <operator>&amp;&amp;</operator> <name>errmsg</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>get_shada_parameter</name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E528: Must specify a ' value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_sbr</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>p_sbr</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E595: contains unprintable or wide character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_guicursor</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>parse_shape_opt</name><argument_list>(<argument><expr><name>SHAPE_CURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_popt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>parse_printoptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_pmfn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>parse_printmbfont</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_langmap</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>langmap_set</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_breakat</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>fill_breakat_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_titlestring</name> <operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_iconstring</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flagval</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_titlestring</name><operator>)</operator></expr> ?</condition><then> <expr><name>STL_IN_TITLE</name></expr> </then><else>: <expr><name>STL_IN_ICON</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>check_stl_option</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stl_syntax</name> <operator>|=</operator> <name>flagval</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>stl_syntax</name> <operator>&amp;=</operator> <operator>~</operator><name>flagval</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>did_set_title</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_sel</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_sel</name></expr></argument>, <argument><expr><name>p_sel_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_slm</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_slm</name></expr></argument>, <argument><expr><name>p_slm_values</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_km</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_km</name></expr></argument>, <argument><expr><name>p_km_values</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>km_stopsel</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_km</name></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>km_startsel</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_km</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_mousem</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_mousem</name></expr></argument>, <argument><expr><name>p_mousem_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_swb</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_swb</name></expr></argument>, <argument><expr><name>p_swb_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>swb_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_debug</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_debug</name></expr></argument>, <argument><expr><name>p_debug_values</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_dy</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_dy</name></expr></argument>, <argument><expr><name>p_dy_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dy_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>init_chartab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_grid_validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ead</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_ead</name></expr></argument>, <argument><expr><name>p_ead_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cb</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_cb</name></expr></argument>, <argument><expr><name>p_cb_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spl</name></name><operator>)</operator> 

<operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spf</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_spellfile</name> <init>= <expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spf</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>is_spellfile</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>valid_spellfile</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>is_spellfile</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>valid_spellang</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>did_set_spell_option</name><argument_list>(<argument><expr><name>is_spellfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spc</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>compile_cap_prog</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_sps</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>spell_check_sps</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_msm</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>spell_check_msm</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bh</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bh</name></name></expr></argument>, <argument><expr><name>p_bufhidden_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>terminal</name></name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'t'</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>terminal</name></name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal><operator>)</operator>

<operator>||</operator> <call><name>check_opt_strings</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bt</name></name></expr></argument>, <argument><expr><name>p_buftype_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_help</name></name> <operator>=</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_stl</name> <operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ruf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ruf</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>ru_wid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ruf</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wid</name> <operator>=</operator> <call><name>getdigits_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wid</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>errmsg</name> <operator>=</operator> <call><name>check_stl_option</name><argument_list>(<argument><expr><name>p_ruf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ru_wid</name> <operator>=</operator> <name>wid</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>check_stl_option</name><argument_list>(<argument><expr><name>p_ruf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ruf</name> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'%'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>check_stl_option</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ruf</name> <operator>&amp;&amp;</operator> <name>errmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>comp_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cpt</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".wbuksid]tU"</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>illegal_char</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'k'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E535: Illegal character after &lt;%c&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>*</operator><operator>--</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>errbuf</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cot</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_cot</name></expr></argument>, <argument><expr><name>p_cot_values</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>completeopt_was_set</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scl</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><name>p_scl_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdc</name></name> <operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_allbuf_opt</name><operator>.</operator><name>wo_fdc</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><name>p_fdc_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_pt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_pt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>replace_termcodes</name><argument_list>(<argument><expr><name>p_pt</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_pt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name>CPO_TO_CPO_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_value_alloced</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>p_pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_pt</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_value_alloced</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bs</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p_bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_bs</name> <operator>&gt;</operator><literal type="char">'2'</literal> <operator>||</operator> <name><name>p_bs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><name>p_bs_values</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bo</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>p_bo_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bo_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_tc</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_tc_flags</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_tc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>&amp;</operator><name>tc_flags</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_tc_values</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cmp</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_cmp</name></expr></argument>, <argument><expr><name>p_cmp_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_dip</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>diffopt_changed</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_allbuf_opt</name><operator>.</operator><name>wo_fdm</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><name>p_fdm_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name>

<operator>||</operator> <operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdm</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsDiff</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>newFoldLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fde</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsExpr</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_allbuf_opt</name><operator>.</operator><name>wo_fmr</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E536: comma required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>==</operator> <operator>*</operator><name>varp</name> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>foldmethodIsMarker</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cms</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>varp</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>varp</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E537: 'commentstring' must be empty or contain %s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_fdo</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_fdo</name></expr></argument>, <argument><expr><name>p_fdo_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdo_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_fcl</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_fcl</name></expr></argument>, <argument><expr><name>p_fcl_values</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_allbuf_opt</name><operator>.</operator><name>wo_fdi</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsIndent</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ve</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_ve</name></expr></argument>, <argument><expr><name>p_ve_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ve_flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_ve</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_csqf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_csqf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_csqf</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CSQF_CMDS</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CSQF_FLAGS</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cino</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>parse_cino</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_icm</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_icm</name></expr></argument>, <argument><expr><name>p_icm_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ft</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_filetype</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>value_changed</name> <operator>=</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>, <argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>value_checked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_syn</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_filetype</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>value_changed</name> <operator>=</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>, <argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>value_checked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_winhl</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_winhl_opt</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ww</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>WW_ALL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_shm</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>SHM_ALL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name>p_cpo</name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CPO_VI</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fo</name></name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FO_ALL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cocu</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>COCU_ALL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_mouse</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>MOUSE_ALL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>illegal_char</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_value_alloced</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>varp</name> <operator>=</operator> <name>oldval</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>did_chartab</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>init_chartab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_option_sctx_idx</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>current_sctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>free_oldval</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_value_alloced</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_ALLOCED</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>P_ALLOCED</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name> <operator>&amp;</operator> <name>PV_BOTH</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>p</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>opt_flags</name> <operator>!=</operator> <name>OPT_GLOBAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_string_option_global</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_syn</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>syn_recursive</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_SYNTAX</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_syn</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>,

<argument><expr><name>value_changed</name> <operator>||</operator> <name>syn_recursive</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>syn_recursive</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ft</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_MODELINE</name><operator>)</operator> <operator>||</operator> <name>value_changed</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ft_recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>secure_save</name> <init>= <expr><name>secure</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ft_recursive</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>did_filetype</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_FILETYPE</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ft</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>,

<argument><expr><name>value_changed</name> <operator>||</operator> <name>ft_recursive</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ft_recursive</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>!=</operator> <operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ft</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <name>secure_save</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spl</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>fname</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spl</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"cjk,"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"spell/%.*s.vim"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>q</name><operator>)</operator></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>source_runtime</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>DIP_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_mouse</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_mouse</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_call_mouse_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>!=</operator> <name>MAXCOL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>P_CURSWANT</name> <operator>|</operator> <name>P_RALL</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_redraw</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>errmsg</name></expr>;</return>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>int_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>a</name> <operator>-</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>check_colorcolumn</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>color_cols</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_cc</name></name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>e_invarg</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>col</name> <operator>*</operator> <call><name>getdigits_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>skip</name>;</goto> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>&lt;=</operator> <name>INT_MAX</name> <operator>-</operator> <name>col</name>

<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>+</operator> <name>col</name> <operator>&gt;=</operator> <name>INT_MIN</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>&gt;=</operator> <name>INT_MIN</name> <operator>-</operator> <name>col</name>

<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>+</operator> <name>col</name> <operator>&lt;=</operator> <name>INT_MAX</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_tw</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>getdigits_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>e_invarg</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>color_cols</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<label><name>skip</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>e_invarg</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>e_invarg</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>color_cols</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>int_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>color_cols</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>color_cols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>set_chars_option</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>varp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>set</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>chars_tab</name> <block>{

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>def</name></decl>;</decl_stmt> 

}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>chars_tab</name></name> <modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>chars_tab</name></name></type> <name><name>fcs_tab</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>stl</name></name></expr>, <expr><literal type="string">"stl"</literal></expr>, <expr><literal type="char">' '</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>stlnc</name></name></expr>, <expr><literal type="string">"stlnc"</literal></expr>, <expr><literal type="char">' '</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>vert</name></name></expr>, <expr><literal type="string">"vert"</literal></expr>, <expr><literal type="number">9474</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>fold</name></name></expr>, <expr><literal type="string">"fold"</literal></expr>, <expr><literal type="number">183</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>foldopen</name></name></expr>, <expr><literal type="string">"foldopen"</literal></expr>, <expr><literal type="char">'-'</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>foldclosed</name></name></expr>, <expr><literal type="string">"foldclose"</literal></expr>, <expr><literal type="char">'+'</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>foldsep</name></name></expr>, <expr><literal type="string">"foldsep"</literal></expr>, <expr><literal type="number">9474</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>diff</name></name></expr>, <expr><literal type="string">"diff"</literal></expr>, <expr><literal type="char">'-'</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>msgsep</name></name></expr>, <expr><literal type="string">"msgsep"</literal></expr>, <expr><literal type="char">' '</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>eob</name></name></expr>, <expr><literal type="string">"eob"</literal></expr>, <expr><literal type="char">'~'</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>chars_tab</name></name></type> <name><name>lcs_tab</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>eol</name></name></expr>, <expr><literal type="string">"eol"</literal></expr>, <expr><name>NUL</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>ext</name></name></expr>, <expr><literal type="string">"extends"</literal></expr>, <expr><name>NUL</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>nbsp</name></name></expr>, <expr><literal type="string">"nbsp"</literal></expr>, <expr><name>NUL</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>prec</name></name></expr>, <expr><literal type="string">"precedes"</literal></expr>, <expr><name>NUL</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>space</name></name></expr>, <expr><literal type="string">"space"</literal></expr>, <expr><name>NUL</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab2</name></name></expr>, <expr><literal type="string">"tab"</literal></expr>, <expr><name>NUL</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>trail</name></name></expr>, <expr><literal type="string">"trail"</literal></expr>, <expr><name>NUL</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>conceal</name></name></expr>, <expr><literal type="string">"conceal"</literal></expr>, <expr><name>NUL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_lcs</name> <operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <name>lcs_tab</name></expr>;</expr_stmt>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>lcs_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <operator>&amp;</operator><name>p_lcs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <name>fcs_tab</name></expr>;</expr_stmt>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>fcs_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <operator>&amp;</operator><name>p_fcs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_ambw</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fcs_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>def</name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcs_tab</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>def</name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcs_tab</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>def</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fcs_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>def</name> <operator>=</operator> <literal type="number">9474</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>fcs_tab</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>def</name> <operator>=</operator> <literal type="number">9474</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>fcs_tab</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>def</name> <operator>=</operator> <literal type="number">183</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><ternary><condition><expr><name>round</name> <operator>&lt;=</operator> <name>set</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</condition> <incr><expr><name>round</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cp</name><operator>)</operator> <operator>=</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>def</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_lcs</name> <operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab1</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab3</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal>

<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c1len</name> <init>= <expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>mb_cptr2char_adv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mb_char2cells</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>c1len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cp</name> <operator>==</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab2</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c2len</name> <init>= <expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>mb_cptr2char_adv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mb_char2cells</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>c2len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c3len</name> <init>= <expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c3</name> <operator>=</operator> <call><name>mb_cptr2char_adv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mb_char2cells</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>c3len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c3</name> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cp</name> <operator>==</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab1</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab2</name></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab3</name></name> <operator>=</operator> <name>c3</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cp</name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>entries</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>e_invarg</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>check_stl_option</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>itemcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>groupdepth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <name>itemcnt</name> <operator>&lt;</operator> <name>STL_MAX_ITEM</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>itemcnt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>STL_TRUNCMARK</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>STL_SEPARATE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>groupdepth</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>STL_USER_HL</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>groupdepth</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>STL_ALL</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>illegal_char</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'}'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E540: Unclosed expression sequence"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>itemcnt</name> <operator>&gt;=</operator> <name>STL_MAX_ITEM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E541: too many items"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>groupdepth</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E542: unbalanced groups"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>did_set_spell_option</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is_spellfile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_spellfile</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>l</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spf</name></name> <operator>+</operator> <name>l</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">".add"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>curbuf</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_spell</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>did_set_spelllang</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>errmsg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>compile_cap_prog</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>synblock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name><name>synblock</name><operator>-&gt;</operator><name>b_cap_prog</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>re</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>synblock</name><operator>-&gt;</operator><name>b_p_spc</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>synblock</name><operator>-&gt;</operator><name>b_cap_prog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>re</name> <operator>=</operator> <call><name>concat_str</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"^"</literal></expr></argument>, <argument><expr><name><name>synblock</name><operator>-&gt;</operator><name>b_p_spc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>synblock</name><operator>-&gt;</operator><name>b_cap_prog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>synblock</name><operator>-&gt;</operator><name>b_cap_prog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>synblock</name><operator>-&gt;</operator><name>b_cap_prog</name></name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt> 

<return>return <expr><name>e_invarg</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_winhl_opt</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w_hl_id_normal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>w_hl_ids</name><index>[<expr><name>HLF_COUNT</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hlf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_winhl</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>colon</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>colon</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>colon</name><operator>-</operator><name>p</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hi</name> <init>= <expr><name>colon</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>commap</name> <init>= <expr><call><name>xstrchrnul</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>commap</name><operator>-</operator><name>hi</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hl_id</name> <init>= <expr><ternary><condition><expr><name>len</name></expr> ?</condition><then> <expr><call><name>syn_check_group</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>hi</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"Normal"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w_hl_id_normal</name> <operator>=</operator> <name>hl_id</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>hlf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hlf</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_COUNT</name></expr>;</condition> <incr><expr><name>hlf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>hlf_names</name><index>[<expr><name>hlf</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nlen</name>

<operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>hlf_names</name><index>[<expr><name>hlf</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>w_hl_ids</name><index>[<expr><name>hlf</name></expr>]</index></name> <operator>=</operator> <name>hl_id</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>hlf</name> <operator>==</operator> <name>HLF_COUNT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>commap</name></expr> ?</condition><then> <expr><name>commap</name><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_id_normal</name></name> <operator>=</operator> <name>w_hl_id_normal</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_ids</name></name></expr></argument>, <argument><expr><name>w_hl_ids</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>w_hl_ids</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_needs_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_option_sctx_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, <parameter><decl><type><name>sctx_T</name></type> <name>script_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>both</name> <init>= <expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indir</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>indir</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>LastSet</name></type> <name>last_set</name> <init>= <expr><block>{ <expr><operator>.</operator><name>script_ctx</name> <operator>=</operator>

<block>{ <expr><name><name>script_ctx</name><operator>.</operator><name>sc_sid</name></name></expr>, <expr><name><name>script_ctx</name><operator>.</operator><name>sc_seq</name></name></expr>,

<expr><name><name>script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>+</operator> <name>sourcing_lnum</name></expr> }</block></expr>,

<expr><name>current_channel_id</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>both</name> <operator>||</operator> <operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>indir</name> <operator>&amp;</operator> <operator>(</operator><name>PV_BUF</name><operator>|</operator><name>PV_WIN</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>last_set</name> <operator>=</operator> <name>last_set</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>both</name> <operator>||</operator> <operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>indir</name> <operator>&amp;</operator> <name>PV_BUF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_script_ctx</name><index>[<expr><name>indir</name> <operator>&amp;</operator> <name>PV_MASK</name></expr>]</index></name> <operator>=</operator> <name>last_set</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>indir</name> <operator>&amp;</operator> <name>PV_WIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_script_ctx</name><index>[<expr><name>indir</name> <operator>&amp;</operator> <name>PV_MASK</name></expr>]</index></name> <operator>=</operator> <name>last_set</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>set_bool_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>varp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>value</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_value</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>secure</name> <operator>||</operator> <name>sandbox</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_SECURE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_secure</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>set_option_sctx_idx</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>current_sctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_force_on</name> <operator>&amp;&amp;</operator> <name>p_force_on</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_force_on</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_unsupportedoption</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_force_off</name> <operator>&amp;&amp;</operator> <name>p_force_off</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_force_off</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_unsupportedoption</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_lrm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_lnr</name> <operator>=</operator> <operator>!</operator><name>p_lrm</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_lnr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_lrm</name> <operator>=</operator> <operator>!</operator><name>p_lnr</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>value</name> <operator>&amp;&amp;</operator> <name>old_value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reset_cursorline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_udf</name></name> <operator>||</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_udf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_udf</name></name> <operator>||</operator> <name>p_udf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>hash</name><index>[<expr><name>UNDO_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>save_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>bp</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curbuf</name> <operator>==</operator> <name>save_curbuf</name>

<operator>||</operator> <operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator> <operator>||</operator> <name>opt_flags</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>curbufIsChanged</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>u_compute_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u_read_undo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>save_curbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ro</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ro</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>readonlymode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ro</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_did_warn</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_eol</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fixeol</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bomb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_options_bin</name><argument_list>(<argument><expr><name>old_value</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bl</name></name> <operator>&amp;&amp;</operator> <name>old_value</name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bl</name></name></expr> ?</condition><then> <expr><name>EVENT_BUFADD</name></expr> </then><else>: <expr><name>EVENT_BUFDELETE</name></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_swf</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_swf</name></name> <operator>&amp;&amp;</operator> <name>p_uc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ml_open_file</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mf_close_file</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_terse</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_shm</name></expr></argument>, <argument><expr><name>SHM_SEARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_terse</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>p_shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"shm"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>p_terse</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_paste</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>paste_option_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_im</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_im</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>need_start_insertmode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stop_insert_mode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>old_value</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>need_start_insertmode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stop_insert_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mode_displayed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ic</name> <operator>&amp;&amp;</operator> <name>p_hls</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_hls</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_no_hlsearch</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_check_scrollbind</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_scbind_pos</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_pvw</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_pvw</name></name></expr>)</condition> <block>{<block_content>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>win</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_p_pvw</name></name> <operator>&amp;&amp;</operator> <name>win</name> <operator>!=</operator> <name>curwin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_pvw</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E590: A preview window already exists"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lisp</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>buf_init_chartab</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_title</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>did_set_title</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_icon</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>did_set_title</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>save_file_ff</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>modified_was_set</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ssl</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_ssl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>psepc</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psepcN</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pseps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>psepc</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psepcN</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pseps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>buflist_slash_adjust</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alist_slash_adjust</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scriptnames_slash_adjust</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ea</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_ea</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>old_value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>win_equal</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_acd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_autochdir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>diff_buf_adjust</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsDiff</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_spell</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_spell</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><call><name>did_set_spelllang</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_arab</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_arab</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_tbidi</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_window_setting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_arshape</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_arshape</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>w_arabic</name> <init>= <expr><call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"W17: Arabic requires UTF-8, do ':set encoding=utf-8'"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_source</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_W</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>w_arabic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_W</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_WARNINGMSG</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>w_arabic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_deco</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"keymap"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="string">"arabic"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_tbidi</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_window_setting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>=</operator> <name>B_IMODE_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>=</operator> <name>B_IMODE_USE_INSERT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_WAS_SET</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>starting</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_OPTION_TYPE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf_old</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf_new</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf_type</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf_old</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf_old</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>old_value</name></expr> ?</condition><then> <expr><name>true</name></expr></then><else>: <expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf_new</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf_new</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>true</name></expr></then><else>: <expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf_type</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"local"</literal></expr> </then><else>: <expr><literal type="string">"global"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_NEW</name></expr></argument>, <argument><expr><name>buf_new</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLD</name></expr></argument>, <argument><expr><name>buf_old</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_TYPE</name></expr></argument>, <argument><expr><name>buf_type</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_OPTIONSET</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_v_option_vars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_UI_OPTION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_call_option_set</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>comp_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>!=</operator> <name>MAXCOL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>P_CURSWANT</name> <operator>|</operator> <name>P_RALL</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_redraw</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>set_num_option</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>errbuflen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>old_value</name> <init>= <expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>old_Rows</name> <init>= <expr><name>Rows</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>secure</name> <operator>||</operator> <name>sandbox</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_SECURE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_secure</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>INT_MIN</name> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_invarg</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wh</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p_wmh</name> <operator>&gt;</operator> <name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_winheight</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_hh</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wmh</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>p_wh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_winheight</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wiw</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p_wmw</name> <operator>&gt;</operator> <name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_winwidth</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wmw</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>p_wiw</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_winwidth</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_mco</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>MAX_MCO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_titlelen</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_uc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ch</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>minval</name> <init>= <expr><ternary><condition><expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name>minval</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_tm</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_hi</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">10000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_re</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_report</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_so</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_siso</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cwh</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ut</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ss</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_allbuf_opt</name><operator>.</operator><name>wo_fdl</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_allbuf_opt</name><operator>.</operator><name>wo_cole</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nuw</name></name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_allbuf_opt</name><operator>.</operator><name>wo_nuw</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_iminsert</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>B_IMODE_LAST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_imsearch</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>B_IMODE_LAST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_channel</name></name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_channel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_scbk</name></name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_scbk</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>SB_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sw</name></name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_sw</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ts</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_tw</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wd</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_positive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>errmsg</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_option_sctx_idx</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>current_sctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_window</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_window</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_window</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p_window</name> <operator>&gt;=</operator> <name>Rows</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_window</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ch</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ch</name> <operator>&gt;</operator> <name>Rows</name> <operator>-</operator> <call><name>min_rows</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <call><name>min_rows</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wh</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ONE_WINDOW</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&lt;</operator> <name>p_wh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>p_wh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_hh</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ONE_WINDOW</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_help</name></name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&lt;</operator> <name>p_hh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>p_hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wmh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>win_setminheight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wiw</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ONE_WINDOW</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&lt;</operator> <name>p_wiw</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>win_setwidth</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>p_wiw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wmw</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>win_setminwidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ls</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>last_status</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_stal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shell_new_rows</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>newFoldLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fml</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdn</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsSyntax</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>foldmethodIsIndent</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sw</name></name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsIndent</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sw</name></name> <operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sw</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_cino</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_redraw_curbuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_titlelen</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>!=</operator> <name>NO_SCREEN</name> <operator>&amp;&amp;</operator> <name>old_value</name> <operator>!=</operator> <name>p_titlelen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>need_maketitle</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ch</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_ch</name> <operator>!=</operator> <name>old_value</name> <operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>command_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_uc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_uc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>old_value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ml_open_files</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_pb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_pb</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>p_pb</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hl_invalidate_blends</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pum_grid</name><operator>.</operator><name>blending</name></name> <operator>=</operator> <operator>(</operator><name>p_pb</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pum_drawn</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pum_redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_pyx</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_pyx</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_pyx</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>p_pyx</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ul</name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>old_value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name></expr>)</condition> <block>{<block_content>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>check_colorcolumn</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_scbk</name></name> <operator>||</operator> <name>pp</name> <operator>==</operator> <operator>&amp;</operator><name>p_scbk</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>terminal</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>terminal_check_size</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>terminal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nuw</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_nrwidth_line_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_winbl</name></name> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <name>old_value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_winbl</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_winbl</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_hl_needs_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>blending</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_winbl</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_lines</name> <operator>&lt;</operator> <call><name>min_rows</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E593: Need at least %d lines"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>min_rows</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>errbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_lines</name> <operator>=</operator> <call><name>min_rows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_columns</name> <operator>&lt;</operator> <name>MIN_COLUMNS</name> <operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>errbuf</name></expr></argument>, <argument><expr><name>errbuflen</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E594: Need at least %d columns"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MIN_COLUMNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>errbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_columns</name> <operator>=</operator> <name>MIN_COLUMNS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_lines</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>p_lines</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_columns</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>p_columns</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_lines</name> <operator>!=</operator> <name>Rows</name> <operator>||</operator> <name>p_columns</name> <operator>!=</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>updating_screen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>old_value</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>full_screen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>screen_resize</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>p_columns</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>p_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_lines</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_columns</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdline_row</name> <operator>&gt;</operator> <name>Rows</name> <operator>-</operator> <name>p_ch</name> <operator>&amp;&amp;</operator> <name>Rows</name> <operator>&gt;</operator> <name>p_ch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_ch</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>Rows</name> <operator>-</operator> <name>p_ch</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Rows</name> <operator>-</operator> <name>p_ch</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_window</name> <operator>&gt;=</operator> <name>Rows</name> <operator>||</operator> <operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><literal type="string">"window"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_window</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>&lt;=</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_scroll</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>win_comp_scroll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p_sj</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">100</literal> <operator>||</operator> <name>p_sj</name> <operator>&gt;=</operator> <name>Rows</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Rows</name> <operator>!=</operator> <name>old_Rows</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p_sj</name> <operator>=</operator> <name>Rows</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_scroll</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sj</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>P_WAS_SET</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>starting</name> <operator>&amp;&amp;</operator> <name>errmsg</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_OPTION_TYPE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf_old</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf_new</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf_type</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf_old</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf_old</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>old_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf_new</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf_new</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf_type</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"local"</literal></expr> </then><else>: <expr><literal type="string">"global"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_NEW</name></expr></argument>, <argument><expr><name>buf_new</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLD</name></expr></argument>, <argument><expr><name>buf_old</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_TYPE</name></expr></argument>, <argument><expr><name>buf_type</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_OPTIONSET</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_v_option_vars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_UI_OPTION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_call_option_set</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>comp_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>!=</operator> <name>MAXCOL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>P_CURSWANT</name> <operator>|</operator> <name>P_RALL</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_redraw</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>errmsg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trigger_optionsset_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>oldval</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>oldval</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>newval</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>*</operator><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_OPTION_TYPE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf_type</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf_type</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"local"</literal></expr> </then><else>: <expr><literal type="string">"global"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLD</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_NEW</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_TYPE</name></expr></argument>, <argument><expr><name>buf_type</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_OPTIONSET</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_v_option_vars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_redraw</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>doclear</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_RCLR</name><operator>)</operator> <operator>==</operator> <name>P_RCLR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>all</name> <init>= <expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_RALL</name><operator>)</operator> <operator>==</operator> <name>P_RALL</name> <operator>||</operator> <name>doclear</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_RSTAT</name><operator>)</operator> <operator>||</operator> <name>all</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>status_redraw_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_RBUF</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_RWIN</name><operator>)</operator> <operator>||</operator> <name>all</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>changed_window_setting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_RBUF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_RWINONLY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>doclear</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>all</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>findoption_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>quick_tab</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>quick_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fullname</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>short</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>s</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fullname</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>quick_tab</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>quick_tab</name><index>[<expr><call><name>CharOrdLow</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'a'</literal> <operator>||</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_term_opt</name> <init>= <expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_term_opt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <name><name>quick_tab</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <name><name>quick_tab</name><index>[<expr><call><name>CharOrdLow</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>(</operator><name>s</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_term_opt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <name><name>quick_tab</name><index>[<expr><call><name>CharOrdLow</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>shortname</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr></argument>, <argument><expr><literal type="string">"viminfo"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>findoption_len</name><argument_list>(<argument><expr><literal type="string">"shada"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr></argument>, <argument><expr><literal type="string">"viminfofile"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>findoption_len</name><argument_list>(<argument><expr><literal type="string">"shadafile"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>opt_idx</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>is_tty_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator>

<operator>||</operator> <call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"term"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ttytype"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCO_BUFFER_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>get_tty_option</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"t_Co"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>TCO_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>, <argument><expr><name>TCO_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>t_colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"term"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <ternary><condition><expr><name>p_term</name></expr> ?</condition><then> <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>p_term</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">"nvim"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ttytype"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <ternary><condition><expr><name>p_ttytype</name></expr> ?</condition><then> <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>p_ttytype</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">"nvim"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_tty_option</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>set_tty_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"term"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_term</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_term</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ttytype"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_ttytype</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p_ttytype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_ttytype</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>findoption</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>findoption_len</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_option_value</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>numval</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>stringval</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_tty_option</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>stringval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name> <init>= <expr><call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name> <init>= <expr><call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_STRING</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stringval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>stringval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>numval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>numval</name> <operator>=</operator> <call><name>curbufIsChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>numval</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_option_value_strict</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>numval</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>stringval</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_type</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_tty_option</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>stringval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>SOPT_STRING</name> <operator>|</operator> <name>SOPT_GLOBAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name> <init>= <expr><call><name>findoption</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vimoption_T</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_BOOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>SOPT_BOOL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>SOPT_NUM</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>SOPT_STRING</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>==</operator> <name>PV_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>opt_type</name> <operator>==</operator> <name>SREQ_GLOBAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>SOPT_GLOBAL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_BOTH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>SOPT_GLOBAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_WIN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>opt_type</name> <operator>==</operator> <name>SREQ_BUF</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>SOPT_WIN</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_BUF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>opt_type</name> <operator>==</operator> <name>SREQ_WIN</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>SOPT_BUF</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stringval</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_type</name> <operator>==</operator> <name>SREQ_GLOBAL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <name>VAR_WIN</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>opt_type</name> <operator>==</operator> <name>SREQ_BUF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>==</operator> <name>PV_MOD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>numval</name> <operator>=</operator> <call><name>bufIsChanged</name><argument_list>(<argument><expr><operator>(</operator><name>buf_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>save_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <operator>(</operator><name>buf_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>save_curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opt_type</name> <operator>==</operator> <name>SREQ_WIN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>save_curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>rv</name> <operator>|</operator> <name>SOPT_UNSET</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>stringval</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>numval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <name>varp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>numval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>set_option_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>number</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_tty_option</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E355: Unknown option: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name> <init>= <expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sandbox</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_SECURE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_sandbox</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_STRING</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>string</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>set_string_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>number</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>string</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>string</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content/>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>string</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG3</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E521: Number required: &amp;%s = '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>set_num_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>set_bool_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>number</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block>

<function><type><name>int</name></type> <name>find_key_option_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>arg_arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>has_lt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>arg_arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>has_lt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>--</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>find_special_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>key</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_key_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>has_lt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>find_key_option_len</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>has_lt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>showoptions</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>all</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimoption_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>item_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>rows</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INC</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><name>vimoption_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vimoption_T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>PARAM_COUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS_TITLE</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Global option values ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS_TITLE</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Local option values ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS_TITLE</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Options ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>run</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>run</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>item_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>message_filtered</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>!=</operator> <name>PV_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>all</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>all</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>optval_default</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_BOOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>option_value2string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&lt;=</operator> <name>INC</name> <operator>-</operator> <name>GAP</name> <operator>&amp;&amp;</operator> <name>run</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>len</name> <operator>&gt;</operator> <name>INC</name> <operator>-</operator> <name>GAP</name> <operator>&amp;&amp;</operator> <name>run</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>items</name><index>[<expr><name>item_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Columns</name> <operator>&lt;=</operator> <name>INT_MAX</name> <operator>-</operator> <name>GAP</name>

<operator>&amp;&amp;</operator> <name>Columns</name> <operator>+</operator> <name>GAP</name> <operator>&gt;=</operator> <name>INT_MIN</name> <operator>+</operator> <literal type="number">3</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>Columns</name> <operator>+</operator> <name>GAP</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <name>INC</name> <operator>&gt;=</operator> <name>INT_MIN</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>Columns</name> <operator>+</operator> <name>GAP</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <name>INC</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>Columns</name> <operator>+</operator> <name>GAP</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <name>INC</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rows</name> <operator>=</operator> <operator>(</operator><name>item_count</name> <operator>+</operator> <name>cols</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>cols</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>rows</name> <operator>=</operator> <name>item_count</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>rows</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>row</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>rows</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>showoneopt</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>INC</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>optval_default</name><parameter_list>(<parameter><decl><type><name>vimoption_T</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dvi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dvi</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_VI_DEF</name><operator>)</operator> <operator>||</operator> <name>p_cp</name><operator>)</operator></expr> ?</condition><then> <expr><name>VI_DEFAULT</name></expr> </then><else>: <expr><name>VIM_DEFAULT</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>def_val</name><index>[<expr><name>dvi</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_BOOL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>def_val</name><index>[<expr><name>dvi</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>STRCMP</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>def_val</name><index>[<expr><name>dvi</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_refresh_options</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>opt_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name> <init>= <expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_UI_OPTION</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>varp</name> <init>= <expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><name>OBJECT_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_BOOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ui_call_option_set</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p_mouse</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_mouse</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_call_mouse_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>showoneopt</name><parameter_list>(

<parameter><decl><type><name>vimoption_T</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_silent</name> <init>= <expr><name>silent_mode</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>silent_mode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>info_message</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_BOOL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name></expr>

?</condition><then> <expr><operator>!</operator><call><name>curbufIsChanged</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>!</operator><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_BOOL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_BOOL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>option_value2string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>silent_mode</name> <operator>=</operator> <name>save_silent</name></expr>;</expr_stmt>

<expr_stmt><expr><name>info_message</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>makeset</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>local_only</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimoption_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp_fresh</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp_local</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pri</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pri</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>pri</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>pri</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NO_MKRC</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>pri</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_PRI_MKRC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>==</operator> <name>PV_NONE</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NOGLOB</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>varp</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>optval_default</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>!=</operator> <name>PV_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <name>VAR_WIN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>local_only</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>varp_fresh</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>optval_default</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>varp_fresh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>varp_local</name> <operator>=</operator> <name>varp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <name>varp_fresh</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>varp</name> <operator>=</operator> <name>varp_local</name></expr><operator>,</operator> <expr><name>round</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"set"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"setlocal"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_BOOL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>put_setbool</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>put_setnum</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>do_endif</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>==</operator> <name>PV_SYN</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>==</operator> <name>PV_FT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"if &amp;%s != '%s'"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>do_endif</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_setstring</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_EXPAND</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_endif</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"endif"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>makefoldset</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>put_setstring</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fdm"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdm</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>put_setstring</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fde"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fde</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>put_setstring</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fmr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fmr</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>put_setstring</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fdi"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdi</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>put_setnum</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fdl"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>put_setnum</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fml"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fml</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>put_setnum</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fdn"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>put_setbool</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><literal type="string">"fen"</literal></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>

)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_setstring</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>valuep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expand</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s %s="</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>valuep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>valuep</name> <operator>==</operator> <operator>&amp;</operator><name>p_pt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>valuep</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>put_escstr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>str2special</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>expand</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>*</operator><name>valuep</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_escstr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>put_escstr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>*</operator><name>valuep</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_setnum</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>valuep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>wc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s %s="</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wc_use_keyname</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>valuep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>get_special_key_name</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>wc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>valuep</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_setbool</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s %s%s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_RULER</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 

<function><type><name>void</name></type> <name>comp_col</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last_has_status</name> <init>= <expr><operator>(</operator><name>p_ls</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>p_ls</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>ONE_WINDOW</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sc_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ru_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ru</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ru_col</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>ru_wid</name></expr> ?</condition><then> <expr><name>ru_wid</name></expr> </then><else>: <expr><name>COL_RULER</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last_has_status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sc_col</name> <operator>=</operator> <name>ru_col</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_sc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sc_col</name> <operator>+=</operator> <name>SHOWCMD_COLS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_ru</name> <operator>||</operator> <name>last_has_status</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>sc_col</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sc_col</name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>INT_MIN</name> <operator>+</operator> <name>sc_col</name> <operator>&lt;=</operator> <name>Columns</name>

<operator>&amp;&amp;</operator> <name>Columns</name> <operator>-</operator> <name>sc_col</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sc_col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Columns</name> <operator>-</operator> <name>sc_col</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ru_col</name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>INT_MIN</name> <operator>+</operator> <name>ru_col</name> <operator>&lt;=</operator> <name>Columns</name>

<operator>&amp;&amp;</operator> <name>Columns</name> <operator>-</operator> <name>ru_col</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ru_col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Columns</name> <operator>-</operator> <name>ru_col</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sc_col</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>sc_col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ru_col</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ru_col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_ECHOSPACE</name></expr></argument>, <argument><expr><name>sc_col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>unset_global_local_option</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimoption_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>buf_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name> <init>= <expr><call><name>findoption</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E355: Unknown option: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>indir</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>PV_EP</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_KP</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_kp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_PATH</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_AR</name></expr>:</case>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ar</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_BKC</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bkc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_bkc_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_TAGS</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_TC</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_tc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_tc_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_SISO</name></expr>:</case>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_SO</name></expr>:</case>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_DEF</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_def</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_INC</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_inc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_DICT</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_TSR</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_tsr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_FP</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_EFM</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_efm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_GP</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_gp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_MP</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_mp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_STL</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name><operator>)</operator><operator>-&gt;</operator><name>w_p_stl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_UL</name></expr>:</case>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ul</name></name> <operator>=</operator> <name>NO_LOCAL_UNDOLEVEL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_LW</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_lw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_MENC</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_menc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_LCS</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name><operator>)</operator><operator>-&gt;</operator><name>w_p_lcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_chars_option</name><argument_list>(<argument><expr><operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name><operator>)</operator><operator>-&gt;</operator><name>w_p_lcs</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PV_FCS</name></expr>:</case>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name><operator>)</operator><operator>-&gt;</operator><name>w_p_fcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_chars_option</name><argument_list>(<argument><expr><operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name><operator>)</operator><operator>-&gt;</operator><name>w_p_fcs</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>get_varp_scope</name><parameter_list>(<parameter><decl><type><name>vimoption_T</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>!=</operator> <name>PV_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <name>VAR_WIN</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>GLOBAL_WO</name><argument_list>(<argument><expr><call><name>get_varp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_BOTH</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>indir</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PV_FP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fp</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_EFM</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_efm</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_GP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_gp</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_MP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_mp</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_EP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ep</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_KP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_kp</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_PATH</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_path</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_AR</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ar</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_TAGS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tags</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_TC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tc</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SISO</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SO</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_DEF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_def</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_INC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inc</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_DICT</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_dict</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_TSR</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tsr</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_TFU</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tfu</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_STL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_stl</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_UL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_LW</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lw</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_BKC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bkc</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_MENC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_menc</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FCS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fcs</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_LCS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>get_varp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>get_varp</name><parameter_list>(<parameter><decl><type><name>vimoption_T</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>indir</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PV_NONE</name></expr>:</case> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr>;</return>

<case>case <expr><name>PV_EP</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ep</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ep</name></name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_KP</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_kp</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_kp</name></name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_PATH</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_path</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_path</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_AR</name></expr>:</case> <return>return <expr><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ar</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ar</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_TAGS</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tags</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tags</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_TC</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tc</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tc</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_SISO</name></expr>:</case> <return>return <expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_SO</name></expr>:</case> <return>return <expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_BKC</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bkc</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bkc</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_DEF</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_def</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_def</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_INC</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inc</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inc</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_DICT</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_dict</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_dict</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_TSR</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tsr</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tsr</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_FP</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fp</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fp</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_EFM</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_efm</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_efm</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_GP</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_gp</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_gp</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_MP</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_mp</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_mp</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_STL</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_stl</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_stl</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_UL</name></expr>:</case> <return>return <expr><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name> <operator>!=</operator> <name>NO_LOCAL_UNDOLEVEL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_LW</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lw</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lw</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_MENC</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_menc</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_menc</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_FCS</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fcs</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fcs</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_LCS</name></expr>:</case> <return>return <expr><ternary><condition><expr><operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs</name></name> <operator>!=</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs</name></name><operator>)</operator></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name></name></expr></else></ternary></expr>;</return>

<case>case <expr><name>PV_ARAB</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_arab</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_LIST</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SPELL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_spell</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_CUC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cuc</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_CUL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cul</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_CC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cc</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_DIFF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FDC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdc</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FEN</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FDI</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdi</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FDL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FDM</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdm</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FML</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fml</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FDN</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdn</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FDE</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fde</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FDT</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdt</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FMR</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fmr</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_NU</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nu</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_RNU</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_NUW</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nuw</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_WFH</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wfh</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_WFW</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wfw</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_PVW</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_pvw</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_RL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_RLC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rlc</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SCROLL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_WRAP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_LBR</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_BRI</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_bri</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_BRIOPT</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_briopt</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SCBIND</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_CRBIND</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_crb</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_COCU</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cocu</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_COLE</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_AI</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ai</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_BIN</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_BOMB</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bomb</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_BH</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bh</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_BT</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bt</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_BL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bl</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_CHANNEL</name></expr>:</case><return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_channel</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_CI</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ci</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_CIN</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cin</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_CINK</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cink</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_CINO</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cino</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_CINW</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cinw</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_COM</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_com</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_CMS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cms</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_CPT</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cpt</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_CFU</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cfu</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_OFU</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ofu</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_EOL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_eol</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FIXEOL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fixeol</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_ET</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FENC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ff</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FT</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ft</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FO</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fo</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FLP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_flp</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_IMI</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_IMS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_INF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inf</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_ISK</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_isk</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_INEX</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inex</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_INDE</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inde</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_INDK</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_indk</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_FEX</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fex</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_LISP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lisp</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_ML</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ml</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_MPS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_mps</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_MA</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_MOD</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_NF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_nf</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_PI</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_pi</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_QE</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_qe</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_RO</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ro</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SCBK</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_scbk</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SI</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_si</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_STS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sts</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SUA</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sua</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SWF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_swf</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SMC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_smc</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SYN</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_syn</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SPC</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spc</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SPF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spf</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SPL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spl</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SW</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sw</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_TFU</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tfu</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_TS</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_TW</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_UDF</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_udf</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_WM</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_KMAP</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_keymap</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_SCL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scl</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_WINHL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_winhl</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>PV_WINBL</name></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_winbl</name></name><operator>)</operator></expr>;</return>

<default>default:</default> <expr_stmt><expr><call><name>IEMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E356: get_varp ERROR"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_equalprg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ep</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>p_ep</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ep</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>win_copy_options</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp_from</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp_to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>copy_winopt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp_from</name><operator>-&gt;</operator><name>w_onebuf_opt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp_to</name><operator>-&gt;</operator><name>w_onebuf_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_winopt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp_from</name><operator>-&gt;</operator><name>w_allbuf_opt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp_to</name><operator>-&gt;</operator><name>w_allbuf_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>copy_winopt</name><parameter_list>(<parameter><decl><type><name>winopt_T</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>winopt_T</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_arab</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_arab</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_list</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_nu</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_nu</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_rnu</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_rnu</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_nuw</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_nuw</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_rl</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_rl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_rlc</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_rlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_stl</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_stl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_wrap</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_wrap</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_wrap_save</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_wrap_save</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_lbr</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_lbr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_bri</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_bri</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_briopt</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_briopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_scb</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_scb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_scb_save</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_scb_save</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_crb</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_crb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_crb_save</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_crb_save</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_spell</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_spell</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_cuc</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_cuc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_cul</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_cul</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_cc</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_diff</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_diff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_diff_saved</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_diff_saved</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_cocu</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_cocu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_cole</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_cole</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdc</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fdc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdc_save</name></name> <operator>=</operator> <ternary><condition><expr><name><name>from</name><operator>-&gt;</operator><name>wo_diff_saved</name></name></expr>

?</condition><then> <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fdc_save</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>empty_option</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fen</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_fen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fen_save</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_fen_save</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdi</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fdi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fml</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_fml</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdl</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_fdl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdl_save</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_fdl_save</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdm</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fdm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdm_save</name></name> <operator>=</operator> <ternary><condition><expr><name><name>from</name><operator>-&gt;</operator><name>wo_diff_saved</name></name></expr>

?</condition><then> <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fdm_save</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>empty_option</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdn</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_fdn</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fde</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fde</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fdt</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fdt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fmr</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fmr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_scl</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_scl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_winhl</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_winhl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_fcs</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_fcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_lcs</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>wo_lcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>wo_winbl</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>wo_winbl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_winopt</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_win_options</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>check_winopt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>w_onebuf_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_winopt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>w_allbuf_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_winopt</name><parameter_list>(<parameter><decl><type><name>winopt_T</name> <modifier>*</modifier></type><name>wop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdc_save</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdm_save</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fde</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fmr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_scl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_rlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_stl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_cocu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_briopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_winhl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_lcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear_winopt</name><parameter_list>(<parameter><decl><type><name>winopt_T</name> <modifier>*</modifier></type><name>wop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdc_save</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdm_save</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fde</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fdt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fmr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_scl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_rlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_stl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_cocu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_briopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_winhl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_fcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wop</name><operator>-&gt;</operator><name>wo_lcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>didset_window_options</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>check_colorcolumn</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>briopt_check</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_chars_option</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_chars_option</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_winhl_opt</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>blending</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_winbl</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>buf_copy_options</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>should_copy</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_p_isk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dont_do_help</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_isk</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_cpo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_BUFOPTGLOB</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BCO_ENTER</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_initialized</name></name>

<operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BCO_ENTER</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_BUFOPT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>should_copy</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>should_copy</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BCO_ALWAYS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dont_do_help</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BCO_NOHELP</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_help</name></name><operator>)</operator>

<operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_initialized</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dont_do_help</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>save_p_isk</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_isk</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_isk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_initialized</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_buf_options</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ro</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_fenc</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_fenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>p_ffs</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FF_MAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FF_DOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'u'</literal></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FF_UNIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bh</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bt</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>free_buf_options</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ai</name></name> <operator>=</operator> <name>p_ai</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ai_nopaste</name></name> <operator>=</operator> <name>p_ai_nopaste</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sw</name></name> <operator>=</operator> <name>p_sw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_scbk</name></name> <operator>=</operator> <name>p_scbk</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>=</operator> <name>p_tw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tw_nopaste</name></name> <operator>=</operator> <name>p_tw_nopaste</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tw_nobin</name></name> <operator>=</operator> <name>p_tw_nobin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_wm</name></name> <operator>=</operator> <name>p_wm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_wm_nopaste</name></name> <operator>=</operator> <name>p_wm_nopaste</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_wm_nobin</name></name> <operator>=</operator> <name>p_wm_nobin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bin</name></name> <operator>=</operator> <name>p_bin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bomb</name></name> <operator>=</operator> <name>p_bomb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_et</name></name> <operator>=</operator> <name>p_et</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_fixeol</name></name> <operator>=</operator> <name>p_fixeol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_et_nobin</name></name> <operator>=</operator> <name>p_et_nobin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_et_nopaste</name></name> <operator>=</operator> <name>p_et_nopaste</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ml</name></name> <operator>=</operator> <name>p_ml</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ml_nobin</name></name> <operator>=</operator> <name>p_ml_nobin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_inf</name></name> <operator>=</operator> <name>p_inf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_swf</name></name> <operator>=</operator> <ternary><condition><expr><name><name>cmdmod</name><operator>.</operator><name>noswapfile</name></name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>p_swf</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cpt</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_cpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cfu</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_cfu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ofu</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_ofu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tfu</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_tfu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sts</name></name> <operator>=</operator> <name>p_sts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sts_nopaste</name></name> <operator>=</operator> <name>p_sts_nopaste</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_com</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_com</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cms</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_cms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_fo</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_fo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_flp</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_flp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_nf</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_mps</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_mps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_si</name></name> <operator>=</operator> <name>p_si</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_channel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ci</name></name> <operator>=</operator> <name>p_ci</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cin</name></name> <operator>=</operator> <name>p_cin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cink</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_cink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cino</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_cino</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ft</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_pi</name></name> <operator>=</operator> <name>p_pi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cinw</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_cinw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_lisp</name></name> <operator>=</operator> <name>p_lisp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_syn</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_smc</name></name> <operator>=</operator> <name>p_smc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_syn_isk</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_p_spc</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_spc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>compile_cap_prog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_p_spf</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_spf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_p_spl</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_spl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_inde</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_inde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_indk</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_indk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_fp</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_fex</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_fex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sua</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_sua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_keymap</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_keymap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_kmap_state</name></name> <operator>|=</operator> <name>KEYMAP_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>=</operator> <name>p_iminsert</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>=</operator> <name>p_imsearch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ar</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ul</name></name> <operator>=</operator> <name>NO_LOCAL_UNDOLEVEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bkc</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_bkc_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_gp</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_mp</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_efm</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ep</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_kp</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_path</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tags</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tc</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_tc_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_def</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_inc</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_inex</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_inex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_dict</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tsr</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_qe</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_qe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_udf</name></name> <operator>=</operator> <name>p_udf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_lw</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_menc</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dont_do_help</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_isk</name></name> <operator>=</operator> <name>save_p_isk</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_isk</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_isk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_isk</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>=</operator> <name>p_ts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_help</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>p_ma</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>should_copy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_buf_options</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>did_isk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>buf_init_chartab</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_modifiable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ma</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><literal type="string">"ma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name><name>def_val</name><index>[<expr><name>VI_DEFAULT</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_iminsert_global</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>p_iminsert</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_imsearch_global</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>p_imsearch</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expand_option_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>expand_option_name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>NUL</name></expr>, <expr><name>NUL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expand_option_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>set_context_in_set_cmd</name><parameter_list>(

<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name>nextchar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_term_option</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><name>expand_option_flags</name> <operator>=</operator> <name>opt_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_SETTINGS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_BOOL_SETTINGS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"inv"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_BOOL_SETTINGS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>arg</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>get_special_key_code</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nextchar</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_term_option</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>expand_option_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><call><name>KEY2TERMCAP0</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>expand_option_name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>KEY2TERMCAP1</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nextchar</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_term_option</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>expand_option_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>expand_option_name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nextchar</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption_len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_BOOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nextchar</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>nextchar</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>nextchar</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nextchar</name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nextchar</name> <operator>!=</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name>nextchar</name> <operator>!=</operator> <literal type="char">':'</literal><operator>)</operator>

<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_BOOL_SETTINGS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_UNSUCCESSFUL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_OLD_SETTING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_term_option</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>expand_option_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>expand_option_idx</name> <operator>=</operator> <name>opt_idx</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_term_option</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_NUM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>P_EXPAND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_bdir</name>

<operator>||</operator> <name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_dir</name>

<operator>||</operator> <name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_path</name>

<operator>||</operator> <name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_pp</name>

<operator>||</operator> <name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_rtp</name>

<operator>||</operator> <name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cdpath</name>

<operator>||</operator> <name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_vdir</name></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_DIRECTORIES</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_path</name>

<operator>||</operator> <name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_cdpath</name></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>=</operator> <name>XP_BS_THREE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>=</operator> <name>XP_BS_ONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_FILES</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_tags</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>=</operator> <name>XP_BS_THREE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>=</operator> <name>XP_BS_ONE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>p</name> <operator>&gt;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&gt;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_backslash</name></name> <operator>==</operator> <name>XP_BS_THREE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>P_COMMA</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_sps</name>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"file:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ExpandSettings</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_normal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>loop</name></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>names</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"all"</literal></expr> }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ic</name> <init>= <expr><name><name>regmatch</name><operator>-&gt;</operator><name>rm_ic</name></name></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>loop</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>loop</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>regmatch</name><operator>-&gt;</operator><name>rm_ic</name></name> <operator>=</operator> <name>ic</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_BOOL_SETTINGS</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>match</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</condition>

<incr><expr><name>match</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>names</name><index>[<expr><name>match</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>loop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_normal</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>file</name><operator>)</operator><index>[<expr><name>count</name><operator>++</operator></expr>]</index> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>names</name><index>[<expr><name>match</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>opt_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_BOOL_SETTINGS</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_BOOL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>shortname</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>shortname</name></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>loop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_normal</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>file</name><operator>)</operator><index>[<expr><name>count</name><operator>++</operator></expr>]</index> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>loop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>num_normal</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <name>num_normal</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>num_file</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExpandOldSetting</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expand_option_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>expand_option_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>expand_option_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>expand_option_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>option_value2string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><index>[<expr><name>expand_option_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>expand_option_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name>NameBuff</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>escape_chars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>var</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition><expr><operator>*</operator><name>var</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>var</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>

<operator>&amp;&amp;</operator> <name>expand_option_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>options</name><index>[<expr><name>expand_option_idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_EXPAND</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vim_isfilec</name><argument_list>(<argument><expr><name><name>var</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>var</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>(</operator><name>var</name> <operator>==</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name><name>var</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>var</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>option_value2string</name><parameter_list>(

<parameter><decl><type><name>vimoption_T</name> <modifier>*</modifier></type><name>opp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>varp</name> <operator>=</operator> <call><name>get_varp_scope</name><argument_list>(<argument><expr><name>opp</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>wc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wc_use_keyname</name><argument_list>(<argument><expr><name>varp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><call><name>get_special_key_name</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>wc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>wc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><call><name>transchar</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>wc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NameBuff</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>varp</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>varp</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>NameBuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_EXPAND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>opp</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <operator>&amp;</operator><name>p_pt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>str2specialbuf</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_pt</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wc_use_keyname</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>wcp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wcm</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>wcp</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><operator>*</operator><name>wcp</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>find_special_key_in_table</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>wcp</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>;</decl_stmt>

}</block></struct></type> <name>langmap_entry_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>langmap_mapga</name> <init>= <expr><name>GA_EMPTY_INIT_VALUE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>langmap_set_entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>langmap_entry_T</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><operator>(</operator><name>langmap_entry_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>langmap_mapga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>langmap_mapga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>langmap_mapga</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>-</operator> <name>from</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>langmap_mapga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <operator>(</operator><name>langmap_entry_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>langmap_mapga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>entries</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>entries</name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>langmap_mapga</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <name>a</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>langmap_entry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>langmap_mapga</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>langmap_adjust_mb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>langmap_entry_T</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><operator>(</operator><name>langmap_entry_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>langmap_mapga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>langmap_mapga</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>-</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>c</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>langmap_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>langmap_mapchar</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>i</name></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>langmap_mapga</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>langmap_entry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>langmap_set</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>langmap_mapga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>langmap_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p_langmap</name></expr>;</init> <condition><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>p2</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">';'</literal></expr>;</condition>

<incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>to</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E357: 'langmap': Matching character missing for %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>transchar</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>langmap_set_entry</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>to</name> <operator>&lt;=</operator> <name>UCHAR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>langmap_mapchar</name><index>[<expr><name>from</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>to</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(

<argument><expr><literal type="string">"E358: 'langmap': Extra characters after semicolon: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>has_format_option</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_paste</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fo</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>shortmess</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>p_shm</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_shm</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_shm</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>SHM_ALL_ABBREVIATIONS</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>paste_option_changed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_p_paste</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>save_sm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>save_sta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>save_ru</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>save_ri</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>save_hkmap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_paste</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_p_paste</name></expr>)</condition> <block>{<block_content>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tw_nopaste</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_tw</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_wm_nopaste</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_wm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sts_nopaste</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_sts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ai_nopaste</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_ai</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_et_nopaste</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_et</name></name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>save_sm</name> <operator>=</operator> <name>p_sm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_sta</name> <operator>=</operator> <name>p_sta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_ru</name> <operator>=</operator> <name>p_ru</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_ri</name> <operator>=</operator> <name>p_ri</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_hkmap</name> <operator>=</operator> <name>p_hkmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ai_nopaste</name> <operator>=</operator> <name>p_ai</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_et_nopaste</name> <operator>=</operator> <name>p_et</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sts_nopaste</name> <operator>=</operator> <name>p_sts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_tw_nopaste</name> <operator>=</operator> <name>p_tw</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_wm_nopaste</name> <operator>=</operator> <name>p_wm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_wm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ai</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_et</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block>

<expr_stmt><expr><name>p_sm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_sta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>p_ru</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>status_redraw_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_ru</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_ri</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_hkmap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_tw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_wm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ai</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>old_p_paste</name></expr>)</condition> <block>{<block_content>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_tw_nopaste</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_wm</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_wm_nopaste</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sts</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_sts_nopaste</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ai</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_ai_nopaste</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_et</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_et_nopaste</name></name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>p_sm</name> <operator>=</operator> <name>save_sm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sta</name> <operator>=</operator> <name>save_sta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ru</name> <operator>!=</operator> <name>save_ru</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>status_redraw_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_ru</name> <operator>=</operator> <name>save_ru</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ri</name> <operator>=</operator> <name>save_ri</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_hkmap</name> <operator>=</operator> <name>save_hkmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ai</name> <operator>=</operator> <name>p_ai_nopaste</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_et</name> <operator>=</operator> <name>p_et_nopaste</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sts</name> <operator>=</operator> <name>p_sts_nopaste</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_tw</name> <operator>=</operator> <name>p_tw_nopaste</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_wm</name> <operator>=</operator> <name>p_wm_nopaste</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_p_paste</name> <operator>=</operator> <name>p_paste</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vimrc_found</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>envname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>envname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>vim_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>envname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>FullName_save</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_setenv</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>envname</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>option_was_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>P_WAS_SET</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_option_was_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name> <init>= <expr><call><name>findoption</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>P_WAS_SET</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_breakat_flags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>breakat_flags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p_breakat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p_breakat</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>breakat_flags</name><index>[<expr><operator>*</operator><name>p</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_opt_strings</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_strings_flags</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>, 

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>list</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>new_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>val</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>list</name> <operator>&amp;&amp;</operator> <name><name>val</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator> <operator>||</operator> <name><name>val</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <operator>(</operator><name><name>val</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_flags</name> <operator>|=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>flagp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <name>new_flags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_opt_wim</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>new_wim_flags</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>new_wim_flags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p_wim</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content/>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"longest"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_wim_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>|=</operator> <name>WIM_LONGEST</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"full"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_wim_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>|=</operator> <name>WIM_FULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_wim_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>|=</operator> <name>WIM_LIST</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_wim_flags</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>new_wim_flags</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>wim_flags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>new_wim_flags</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>can_bs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <name>BS_START</name> <operator>&amp;&amp;</operator> <call><name>bt_prompt</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>p_bs</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'2'</literal></expr>:</case> <return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="char">'1'</literal></expr>:</case> <return>return <expr><name>what</name> <operator>!=</operator> <name>BS_START</name></expr>;</return>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> <return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>save_file_ff</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_start_ffc</name></name> <operator>=</operator> <operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_start_eol</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_eol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_start_bomb</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_bomb</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_start_fenc</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_start_fenc</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_start_fenc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_start_fenc</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>file_ff_differs</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignore_empty</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;</operator> <name>BF_NEVERLOADED</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ignore_empty</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;</operator> <name>BF_NEW</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>*</operator><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_start_ffc</name></name> <operator>!=</operator> <operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bin</name></name> <operator>||</operator> <operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_fixeol</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_start_eol</name></name> <operator>!=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_eol</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bin</name></name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_start_bomb</name></name> <operator>!=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_bomb</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_start_fenc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_fenc</name></name> <operator>!=</operator> <name>NUL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_start_fenc</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>check_ff_value</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_ff_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_sw_value</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sw</name></name></expr> ?</condition><then> <expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sw</name></name></expr> </then><else>: <expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>result</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_sts_value</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sts</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>get_sw_value</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sts</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>result</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>find_mps_values</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>initc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>findc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>backwards</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>switchit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_mps</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>*</operator><name>initc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>switchit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>findc</name> <operator>=</operator> <operator>*</operator><name>initc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>initc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>backwards</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>findc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>backwards</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>*</operator><name>initc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>switchit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>findc</name> <operator>=</operator> <operator>*</operator><name>initc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>initc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>backwards</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>findc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>backwards</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>briopt_check</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bri_shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bri_min</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bri_sbr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_briopt</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"shift:"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bri_shift</name> <operator>=</operator> <call><name>getdigits_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"min:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bri_min</name> <operator>=</operator> <call><name>getdigits_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"sbr"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bri_sbr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_brishift</name></name> <operator>=</operator> <name>bri_shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_brimin</name></name> <operator>=</operator> <name>bri_min</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_brisbr</name></name> <operator>=</operator> <name>bri_sbr</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>get_bkc_value</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>b_bkc_flags</name></name></expr> ?</condition><then> <expr><name><name>buf</name><operator>-&gt;</operator><name>b_bkc_flags</name></name></expr> </then><else>: <expr><name>bkc_flags</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_fileformat</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bin</name></name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>EOL_UNIX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>EOL_MAC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>EOL_DOS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_fileformat_force</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eap</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>eap</name><operator>-&gt;</operator><name>force_ff</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>force_ff</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><operator>(</operator><name>eap</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>eap</name><operator>-&gt;</operator><name>force_bin</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>force_bin</name></name> <operator>==</operator> <name>FORCE_BIN</name><operator>)</operator></expr> </then><else>: <expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bin</name></name></expr></else></ternary></expr>)</condition> <block>{<block_content>

<return>return <expr><name>EOL_UNIX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>EOL_UNIX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>EOL_MAC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>EOL_DOS</name></expr>;</return>

</block_content>}</block>

<function><type><name>int</name></type> <name>default_fileformat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>p_ffs</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <return>return <expr><name>EOL_MAC</name></expr>;</return>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <return>return <expr><name>EOL_DOS</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>EOL_UNIX</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_fileformat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eol_style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>eol_style</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EOL_UNIX</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>FF_UNIX</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EOL_MAC</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>FF_MAC</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EOL_DOS</name></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>FF_DOS</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ff"</literal></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>,

<argument><expr><name>OPT_FREE</name> <operator>|</operator> <name>opt_flags</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_status</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_maketitle</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>skip_to_option_part</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>copy_option_part</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sep_chars</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>option</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>sep_chars</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>sep_chars</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>maxlen</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skip_to_option_part</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>option</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>csh_like_shell</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail</name><argument_list>(<argument><expr><name>p_sh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"csh"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>win_signcol_count</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>maximum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>needed_signcols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scl</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_scl</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scl</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>needed_signcols</name> <operator>=</operator> <call><name>buf_signcols</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>scl</name></expr></argument>, <argument><expr><literal type="string">"yes:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>scl</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scl</name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>scl</name></expr></argument>, <argument><expr><literal type="string">"auto:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maximum</name> <operator>=</operator> <name><name>scl</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>MIN</name><argument_list>(<argument><expr><name>maximum</name></expr></argument>, <argument><expr><name>needed_signcols</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>dict_T</name> <modifier>*</modifier></type><name>get_winbuf_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bufopt</name></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>d</name> <init>= <expr><call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>opt_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name><operator>.</operator><name>fullname</name></expr>;</condition> <incr><expr><name>opt_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vimoption</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>options</name><index>[<expr><name>opt_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bufopt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_BUF</name><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>bufopt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>indir</name></name> <operator>&amp;</operator> <name>PV_WIN</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>varp</name> <init>= <expr><call><name>get_varp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_add_str</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_NUM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>fullname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name></type> <name>get_scrolloff_value</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>p_so</name></expr> </then><else>: <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name></type> <name>get_sidescrolloff_value</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>p_siso</name></expr> </then><else>: <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_siso</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

</unit>
