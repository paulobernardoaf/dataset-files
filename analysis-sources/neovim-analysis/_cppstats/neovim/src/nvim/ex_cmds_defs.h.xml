<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\ex_cmds_defs.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/pos.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/normal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/regexp_defs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ex_cmds_enum.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BANG</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRA</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XFILE</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOSPC</name></cpp:macro> <cpp:value>0x010</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLALL</name></cpp:macro> <cpp:value>0x020</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WHOLEFOLD</name></cpp:macro> <cpp:value>0x040</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEEDARG</name></cpp:macro> <cpp:value>0x080</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRLBAR</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGSTR</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COUNT</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTRLCOM</name></cpp:macro> <cpp:value>0x800</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZEROR</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USECTRLV</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTADR</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDITCMD</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFNAME</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFUNL</name></cpp:macro> <cpp:value>0x20000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGOPT</name></cpp:macro> <cpp:value>0x40000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBOXOK</name></cpp:macro> <cpp:value>0x80000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDWIN</name></cpp:macro> <cpp:value>0x100000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODIFY</name></cpp:macro> <cpp:value>0x200000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXFLAGS</name></cpp:macro> <cpp:value>0x400000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTRICT</name></cpp:macro> <cpp:value>0x800000L</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILES</name></cpp:macro> <cpp:value>(XFILE | EXTRA)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD1</name></cpp:macro> <cpp:value>(EXTRA | NOSPC)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE1</name></cpp:macro> <cpp:value>(FILES | NOSPC)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_LINES</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_WINDOWS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_ARGUMENTS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_LOADED_BUFFERS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_BUFFERS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_TABS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_TABS_RELATIVE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_QUICKFIX</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDR_OTHER</name></cpp:macro> <cpp:value>99</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>exarg</name></name></type> <name>exarg_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAD_REPLACE</name></cpp:macro> <cpp:value>'?'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAD_KEEP</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAD_DROP</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define> 

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ex_func_T</name>)<parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>char_u</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>LineGetter</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>cmdname</name> <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ex_func_T</name></type> <name>cmd_func</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmd_argt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cmd_addr_type</name></decl>;</decl_stmt> 

}</block></struct></type> <name>CommandDefinition</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>eslist_elem</name></name></type> <name>eslist_T</name>;</typedef>

<struct>struct <name>eslist_elem</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>saved_emsg_silent</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>eslist_T</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 

}</block>;</struct>

<enum>enum <block>{

<decl><name>CSTACK_LEN</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name><name>cs_flags</name><index>[<expr><name>CSTACK_LEN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>cs_pending</name><index>[<expr><name>CSTACK_LEN</name></expr>]</index></name></decl>;</decl_stmt> 

<union>union <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>csp_rv</name><index>[<expr><name>CSTACK_LEN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>csp_ex</name><index>[<expr><name>CSTACK_LEN</name></expr>]</index></name></decl>;</decl_stmt> 

}</block> <decl><name>cs_pend</name></decl>;</union>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>cs_forinfo</name><index>[<expr><name>CSTACK_LEN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>cs_line</name><index>[<expr><name>CSTACK_LEN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cs_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cs_looplevel</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cs_trylevel</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>eslist_T</name> <modifier>*</modifier></type><name>cs_emsg_silent_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cs_lflags</name></decl>;</decl_stmt> 

}</block></struct></type> <name>cstack_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cs_rettv</name></cpp:macro> <cpp:value>cs_pend.csp_rv</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cs_exception</name></cpp:macro> <cpp:value>cs_pend.csp_ex</cpp:value></cpp:define>

<enum>enum <block>{

<decl><name>CSL_HAD_LOOP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>CSL_HAD_ENDLOOP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>CSL_HAD_CONT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 

<decl><name>CSL_HAD_FINA</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 

}</block>;</enum>

<struct>struct <name>exarg</name> <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>nextcmd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>cmdlinep</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>cmdidx_T</name></type> <name>cmdidx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>argt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>forceit</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>addr_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>line1</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>line2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>addr_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>do_ecmd_cmd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>do_ecmd_lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>append</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>usefilter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>amount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>regname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>force_bin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>read_edit</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>force_ff</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>force_enc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bad_char</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>useridx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>errmsg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>LineGetter</name></type> <name>getline</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>cstack_T</name> <modifier>*</modifier></type><name>cstack</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_BIN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_NOBIN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXFLAG_LIST</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXFLAG_NR</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXFLAG_PRINT</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 

<struct>struct <name>expand</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>xp_context</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>xp_pattern</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>xp_pattern_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>xp_arg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>sctx_T</name></type> <name>xp_script_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>xp_backslash</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>xp_shell</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>xp_numfiles</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>xp_files</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>xp_line</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>xp_col</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XP_BS_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XP_BS_ONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XP_BS_THREE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>split</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>browse</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>confirm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>hide</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>keepalt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>keepjumps</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>keepmarks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>keeppatterns</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>lockmarks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>noswapfile</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_ei</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>filter_regmatch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>filter_force</name></decl>;</decl_stmt> 

}</block></struct></type> <name>cmdmod_T</name>;</typedef>

</unit>
