<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\hardcopy.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/hardcopy.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>option_table_T</name></type> <name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_NUM_OPTIONS</name></expr>]</index></name>

<init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"top"</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bottom"</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"left"</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"right"</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"header"</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"syntax"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"number"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wrap"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"duplex"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"portrait"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"paper"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"collate"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jobsplit"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"formfeed"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

}</block></expr></init></decl>

;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>cterm_color_8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x000000</literal></expr>, <expr><literal type="number">0xff0000</literal></expr>, <expr><literal type="number">0x00ff00</literal></expr>, <expr><literal type="number">0xffff00</literal></expr>,

<expr><literal type="number">0x0000ff</literal></expr>, <expr><literal type="number">0xff00ff</literal></expr>, <expr><literal type="number">0x00ffff</literal></expr>, <expr><literal type="number">0xffffff</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>cterm_color_16</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x000000</literal></expr>, <expr><literal type="number">0x0000c0</literal></expr>, <expr><literal type="number">0x008000</literal></expr>, <expr><literal type="number">0x004080</literal></expr>,

<expr><literal type="number">0xc00000</literal></expr>, <expr><literal type="number">0xc000c0</literal></expr>, <expr><literal type="number">0x808000</literal></expr>, <expr><literal type="number">0xc0c0c0</literal></expr>,

<expr><literal type="number">0x808080</literal></expr>, <expr><literal type="number">0x6060ff</literal></expr>, <expr><literal type="number">0x00ff00</literal></expr>, <expr><literal type="number">0x00ffff</literal></expr>,

<expr><literal type="number">0xff8080</literal></expr>, <expr><literal type="number">0xff40ff</literal></expr>, <expr><literal type="number">0xffff00</literal></expr>, <expr><literal type="number">0xffffff</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_syn_id</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRCOLOR_BLACK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRCOLOR_WHITE</name></cpp:macro> <cpp:value>0xffffff</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>TriState</name></type> <name>curr_italic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>TriState</name></type> <name>curr_bold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>TriState</name></type> <name>curr_underline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>curr_bg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>curr_fg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>page_count</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_MBFONT_USECOURIER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_MBFONT_ASCII</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_MBFONT_REGULAR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_MBFONT_BOLD</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_MBFONT_OBLIQUE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_MBFONT_BOLDOBLIQUE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_MBFONT_NUM_OPTIONS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>option_table_T</name></type> <name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_NUM_OPTIONS</name></expr>]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"a"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"b"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"i"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"o"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>lead_spaces</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>print_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>column</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>file_line</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_printed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ff</name></decl>;</decl_stmt> 

}</block></struct></type> <name>prt_pos_T</name>;</typedef>

<struct>struct <name>prt_mediasize_S</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>height</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>prt_ps_font_S</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>wx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uline_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uline_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bbox_min_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bbox_max_y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>char</name> <argument_list>*<argument><expr><operator>(</operator><name><name>ps_fontname</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr></argument>;</argument_list></call></expr></expr_stmt>

}</block>;</struct>

<struct>struct <name>prt_ps_encoding_S</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmap_encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>needs_charset</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>prt_ps_charset_S</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>charset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmap_charset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_charset</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>prt_ps_mbfont_S</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>num_encodings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>prt_ps_encoding_S</name></name> <modifier>*</modifier></type><name>encodings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_charsets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>prt_ps_charset_S</name></name> <modifier>*</modifier></type><name>charsets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ascii_enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>defcs</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>prt_ps_resource_S</name> <block>{

<decl_stmt><decl><type><name>char_u</name></type> <name><name>name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>filename</name><index>[<expr><name>MAXPATHL</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>title</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>version</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>prt_dsc_comment_S</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>prt_dsc_line_S</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_FILE_BUFFER_LEN</name></cpp:macro> <cpp:value>(2048)</cpp:value></cpp:define>

<struct>struct <name>prt_resfile_buffer_S</name> <block>{

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buffer</name><index>[<expr><name>PRT_FILE_BUFFER_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line_end</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hardcopy.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>parse_printoptions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>parse_list_options</name><argument_list>(<argument><expr><name>p_popt</name></expr></argument>, <argument><expr><name>printer_opts</name></expr></argument>, <argument><expr><name>OPT_PRINT_NUM_OPTIONS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>parse_printmbfont</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>parse_list_options</name><argument_list>(<argument><expr><name>p_pmfn</name></expr></argument>, <argument><expr><name>mbfont_opts</name></expr></argument>, <argument><expr><name>OPT_MBFONT_NUM_OPTIONS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>parse_list_options</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>option_str</name></decl></parameter>, <parameter><decl><type><name>option_table_T</name> <modifier>*</modifier></type><name>table</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>table_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>option_table_T</name> <modifier>*</modifier></type><name>old_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>stringp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>colonp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>commap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_opts</name> <operator>=</operator> <operator>(</operator><name>option_table_T</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>option_table_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>table_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>table_size</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>old_opts</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>present</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>stringp</name> <operator>=</operator> <name>option_str</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>stringp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>colonp</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>stringp</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>colonp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E550: Missing colon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>commap</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>stringp</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>commap</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>commap</name> <operator>=</operator> <name>option_str</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>option_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>colonp</name> <operator>-</operator> <name>stringp</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>table_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>stringp</name></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>table_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E551: Illegal component"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>colonp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>present</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>hasnum</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E552: digit expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>number</name> <operator>=</operator> <call><name>getdigits_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>string</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>strlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>commap</name> <operator>-</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>stringp</name> <operator>=</operator> <name>commap</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>stringp</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>stringp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>table_size</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>old_opts</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>old_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>darken_rgb</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>rgb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>rgb</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name>rgb</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>prt_get_term_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>colorindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>cterm_color_16</name><index>[<expr><name>colorindex</name> <operator>%</operator> <literal type="number">16</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>cterm_color_8</name><index>[<expr><name>colorindex</name> <operator>%</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_get_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hl_id</name></decl></parameter>, <parameter><decl><type><name>prt_text_attr_T</name> <modifier>*</modifier></type><name>pattr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>colorindex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fg_color</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pattr</name><operator>-&gt;</operator><name>bold</name></name> <operator>=</operator> <operator>(</operator><call><name>highlight_has_attr</name><argument_list>(<argument><expr><name>hl_id</name></expr></argument>, <argument><expr><name>HL_BOLD</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pattr</name><operator>-&gt;</operator><name>italic</name></name> <operator>=</operator> <operator>(</operator><call><name>highlight_has_attr</name><argument_list>(<argument><expr><name>hl_id</name></expr></argument>, <argument><expr><name>HL_ITALIC</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pattr</name><operator>-&gt;</operator><name>underline</name></name> <operator>=</operator> <operator>(</operator><call><name>highlight_has_attr</name><argument_list>(<argument><expr><name>hl_id</name></expr></argument>, <argument><expr><name>HL_UNDERLINE</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pattr</name><operator>-&gt;</operator><name>undercurl</name></name> <operator>=</operator> <operator>(</operator><call><name>highlight_has_attr</name><argument_list>(<argument><expr><name>hl_id</name></expr></argument>, <argument><expr><name>HL_UNDERCURL</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><call><name>highlight_color</name><argument_list>(<argument><expr><name>hl_id</name></expr></argument>, <argument><expr><literal type="string">"fg"</literal></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>colorindex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>colorindex</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>colorindex</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>colorindex</name> <operator>&lt;</operator> <name>t_colors</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fg_color</name> <operator>=</operator> <call><name>prt_get_term_color</name><argument_list>(<argument><expr><name>colorindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fg_color</name> <operator>=</operator> <name>PRCOLOR_BLACK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>fg_color</name> <operator>==</operator> <name>PRCOLOR_WHITE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fg_color</name> <operator>=</operator> <name>PRCOLOR_BLACK</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fg_color</name> <operator>=</operator> <call><name>darken_rgb</name><argument_list>(<argument><expr><name>fg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pattr</name><operator>-&gt;</operator><name>fg_color</name></name> <operator>=</operator> <name>fg_color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pattr</name><operator>-&gt;</operator><name>bg_color</name></name> <operator>=</operator> <name>PRCOLOR_WHITE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_set_fg</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>fg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>!=</operator> <name>curr_fg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curr_fg</name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_print_set_fg</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_set_bg</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>bg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bg</name> <operator>!=</operator> <name>curr_bg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curr_bg</name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_print_set_bg</name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_set_font</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TriState</name></type> <name>bold</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TriState</name></type> <name>italic</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>TriState</name></type> <name>underline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>curr_bold</name> <operator>!=</operator> <name>bold</name>

<operator>||</operator> <name>curr_italic</name> <operator>!=</operator> <name>italic</name>

<operator>||</operator> <name>curr_underline</name> <operator>!=</operator> <name>underline</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curr_underline</name> <operator>=</operator> <name>underline</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_italic</name> <operator>=</operator> <name>italic</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_bold</name> <operator>=</operator> <name>bold</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_print_set_font</name><argument_list>(<argument><expr><name>bold</name></expr></argument>, <argument><expr><name>italic</name></expr></argument>, <argument><expr><name>underline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_line_number</name><parameter_list>(<parameter><decl><type><name>prt_settings_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>psettings</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>page_line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>prt_set_fg</name><argument_list>(<argument><expr><name><name>psettings</name><operator>-&gt;</operator><name>number</name><operator>.</operator><name>fg_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_set_bg</name><argument_list>(<argument><expr><name><name>psettings</name><operator>-&gt;</operator><name>number</name><operator>.</operator><name>bg_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_set_font</name><argument_list>(<argument><expr><name><name>psettings</name><operator>-&gt;</operator><name>number</name><operator>.</operator><name>bold</name></name></expr></argument>, <argument><expr><name><name>psettings</name><operator>-&gt;</operator><name>number</name><operator>.</operator><name>italic</name></name></expr></argument>,

<argument><expr><name><name>psettings</name><operator>-&gt;</operator><name>number</name><operator>.</operator><name>underline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_print_start_line</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>page_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%6ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mch_print_text_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>psettings</name><operator>-&gt;</operator><name>do_syntax</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_syn_id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>prt_set_fg</name><argument_list>(<argument><expr><name>PRCOLOR_BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_set_bg</name><argument_list>(<argument><expr><name>PRCOLOR_WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_set_font</name><argument_list>(<argument><expr><name>kFalse</name></expr></argument>, <argument><expr><name>kFalse</name></expr></argument>, <argument><expr><name>kFalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>prt_header_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_HEADERHEIGHT</name></expr>]</index></name><operator>.</operator><name>present</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_HEADERHEIGHT</name></expr>]</index></name><operator>.</operator><name>number</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>prt_use_number</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_NUMBER</name></expr>]</index></name><operator>.</operator><name>present</name>

<operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_NUMBER</name></expr>]</index></name><operator>.</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'y'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>prt_get_unit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name>PRT_UNIT_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>units</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <name>PRT_UNIT_NAMES</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>printer_opts</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>present</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>printer_opts</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>, <argument><expr><name><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<return>return <expr><name>u</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_header</name><parameter_list>(<parameter><decl><type><name>prt_settings_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>psettings</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>pagenum</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>psettings</name><operator>-&gt;</operator><name>chars_per_line</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prt_use_number</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>+=</operator> <name>PRINT_NUMBER_WIDTH</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>width</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>tbuf_size</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name> <operator>+</operator> <name>IOSIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tbuf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>tbuf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_header</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>tmp_lnum</name></decl>, <decl><type ref="prev"/><name>tmp_topline</name></decl>, <decl><type ref="prev"/><name>tmp_botline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_sandbox</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_lnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_topline</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_botline</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">63</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>printer_page_num</name> <operator>=</operator> <name>pagenum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>use_sandbox</name> <operator>=</operator> <call><name>was_set_insecurely</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"printheader"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>build_stl_str_hl</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name> <operator>+</operator> <name>IOSIZE</name></expr></argument>,

<argument><expr><name>p_header</name></expr></argument>, <argument><expr><name>use_sandbox</name></expr></argument>,

<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>tmp_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name>tmp_topline</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>tmp_botline</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tbuf</name></expr></argument>, <argument><expr><name>tbuf_size</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Page %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pagenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>prt_set_fg</name><argument_list>(<argument><expr><name>PRCOLOR_BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_set_bg</name><argument_list>(<argument><expr><name>PRCOLOR_WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_set_font</name><argument_list>(<argument><expr><name>kTrue</name></expr></argument>, <argument><expr><name>kFalse</name></expr></argument>, <argument><expr><name>kFalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>page_line</name> <init>= <expr><literal type="number">0</literal> <operator>-</operator> <call><name>prt_header_height</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_print_start_line</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>page_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>tbuf</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l</name> <init>= <expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>l</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_print_text_out</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>l</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>page_line</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>page_line</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_print_start_line</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>page_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>psettings</name><operator>-&gt;</operator><name>do_syntax</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_syn_id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>prt_set_fg</name><argument_list>(<argument><expr><name>PRCOLOR_BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_set_bg</name><argument_list>(<argument><expr><name>PRCOLOR_WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_set_font</name><argument_list>(<argument><expr><name>kFalse</name></expr></argument>, <argument><expr><name>kFalse</name></expr></argument>, <argument><expr><name>kFalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_message</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grid_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_hardcopy</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>collated_copies</name></decl>, <decl><type ref="prev"/><name>uncollated_copies</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>prt_settings_T</name></type> <name>settings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_to_print</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>page_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>jobsplit</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_settings_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>has_color</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>errormsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>expand_filename</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdlinep</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errormsg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errormsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>outfile</name></name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>arguments</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_print_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>buf_spname</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_sfname</name></name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr>

</then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_sfname</name></name></expr></else></ternary></expr></else></ternary></expr></argument>,

<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>modec</name></name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syntax_present</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>do_syntax</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_SYNTAX</name></expr>]</index></name><operator>.</operator><name>present</name>

<operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_SYNTAX</name></expr>]</index></name><operator>.</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'a'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>do_syntax</name></name> <operator>=</operator>

<operator>(</operator><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_SYNTAX</name></expr>]</index></name><operator>.</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'y'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>do_syntax</name></name> <operator>=</operator> <name><name>settings</name><operator>.</operator><name>has_color</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>number</name><operator>.</operator><name>fg_color</name></name> <operator>=</operator> <name>PRCOLOR_BLACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>number</name><operator>.</operator><name>bg_color</name></name> <operator>=</operator> <name>PRCOLOR_WHITE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>number</name><operator>.</operator><name>bold</name></name> <operator>=</operator> <name>kFalse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>number</name><operator>.</operator><name>italic</name></name> <operator>=</operator> <name>kTrue</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>number</name><operator>.</operator><name>underline</name></name> <operator>=</operator> <name>kFalse</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prt_use_number</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>settings</name><operator>.</operator><name>do_syntax</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LineNr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_get_final_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prt_get_attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>settings</name><operator>.</operator><name>number</name></name></expr></argument>, <argument><expr><name><name>settings</name><operator>.</operator><name>modec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</condition> <incr><expr><name>lnum</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>bytes_to_print</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><call><name>skipwhite</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>bytes_to_print</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No text to be printed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>print_fail_no_begin</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curr_bg</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_fg</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_italic</name> <operator>=</operator> <name>kNone</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_bold</name> <operator>=</operator> <name>kNone</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_underline</name> <operator>=</operator> <name>kNone</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_set_fg</name><argument_list>(<argument><expr><name>PRCOLOR_BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_set_bg</name><argument_list>(<argument><expr><name>PRCOLOR_WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_set_font</name><argument_list>(<argument><expr><name>kFalse</name></expr></argument>, <argument><expr><name>kFalse</name></expr></argument>, <argument><expr><name>kFalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_syn_id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>jobsplit</name> <operator>=</operator> <operator>(</operator><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_JOBSPLIT</name></expr>]</index></name><operator>.</operator><name>present</name>

<operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_JOBSPLIT</name></expr>]</index></name><operator>.</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'y'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mch_print_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>print_fail_no_begin</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>page_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>collated_copies</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name>collated_copies</name> <operator>&lt;</operator> <name><name>settings</name><operator>.</operator><name>n_collated_copies</name></name></expr>;</condition>

<incr><expr><name>collated_copies</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>prt_pos_T</name></type> <name>prtpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>prt_pos_T</name></type> <name>page_prtpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>side</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>page_prtpos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_pos_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>page_prtpos</name><operator>.</operator><name>file_line</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prtpos</name> <operator>=</operator> <name>page_prtpos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>jobsplit</name> <operator>&amp;&amp;</operator> <name>collated_copies</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mch_print_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mch_print_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>print_fail_no_begin</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>page_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>prtpos</name><operator>.</operator><name>file_line</name></name> <operator>&lt;=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>page_count</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>uncollated_copies</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name>uncollated_copies</name> <operator>&lt;</operator> <name><name>settings</name><operator>.</operator><name>n_uncollated_copies</name></name></expr>;</condition>

<incr><expr><name>uncollated_copies</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>prtpos</name> <operator>=</operator> <name>page_prtpos</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>side</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>side</name> <operator>&lt;=</operator> <name><name>settings</name><operator>.</operator><name>duplex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>side</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>os_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name> <operator>||</operator> <name><name>settings</name><operator>.</operator><name>user_abort</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>print_fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>prtpos</name><operator>.</operator><name>bytes_printed</name></name> <operator>&lt;=</operator> <name>SIZE_MAX</name> <operator>/</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Printing page %d (%zu%%)"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>page_count</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>side</name></expr></argument>,

<argument><expr><name><name>prtpos</name><operator>.</operator><name>bytes_printed</name></name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>bytes_to_print</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mch_print_begin_page</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>print_fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>settings</name><operator>.</operator><name>n_collated_copies</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Copy %d of %d"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>collated_copies</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>settings</name><operator>.</operator><name>n_collated_copies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prt_message</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prt_header_height</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>, <argument><expr><name>page_count</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>side</name></expr></argument>,

<argument><expr><name><name>prtpos</name><operator>.</operator><name>file_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>page_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>page_line</name> <operator>&lt;</operator> <name><name>settings</name><operator>.</operator><name>lines_per_page</name></name></expr>;</condition>

<incr><expr><operator>++</operator><name>page_line</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>prtpos</name><operator>.</operator><name>column</name></name> <operator>=</operator> <call><name>hardcopy_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>,

<argument><expr><name>page_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prtpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prtpos</name><operator>.</operator><name>column</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>prtpos</name><operator>.</operator><name>bytes_printed</name></name> <operator>+=</operator>

<call><name>STRLEN</name><argument_list>(<argument><expr><call><name>skipwhite</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>prtpos</name><operator>.</operator><name>file_line</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>prtpos</name><operator>.</operator><name>file_line</name></name> <operator>&gt;</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>prtpos</name><operator>.</operator><name>ff</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mch_print_end_page</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>print_fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prtpos</name><operator>.</operator><name>file_line</name></name> <operator>&gt;</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>prtpos</name><operator>.</operator><name>file_line</name></name> <operator>&gt;</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>&amp;&amp;</operator> <name><name>settings</name><operator>.</operator><name>duplex</name></name>

<operator>&amp;&amp;</operator> <name>side</name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>uncollated_copies</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>settings</name><operator>.</operator><name>n_uncollated_copies</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mch_print_blank_page</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>print_fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>settings</name><operator>.</operator><name>duplex</name></name> <operator>&amp;&amp;</operator> <name><name>prtpos</name><operator>.</operator><name>file_line</name></name> <operator>&lt;=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>page_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>page_prtpos</name> <operator>=</operator> <name>prtpos</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Printed: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>settings</name><operator>.</operator><name>jobname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_message</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>print_fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>got_int</name> <operator>||</operator> <name><name>settings</name><operator>.</operator><name>user_abort</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Printing aborted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_message</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_print_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>print_fail_no_begin</name>:</label>

<expr_stmt><expr><call><name>mch_print_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>colnr_T</name></type> <name>hardcopy_line</name><parameter_list>(<parameter><decl><type><name>prt_settings_T</name> <modifier>*</modifier></type><name>psettings</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>page_line</name></decl></parameter>, <parameter><decl><type><name>prt_pos_T</name> <modifier>*</modifier></type><name>ppos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_break</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>outputlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tab_spaces</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>print_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>prt_text_attr_T</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ppos</name><operator>-&gt;</operator><name>column</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ppos</name><operator>-&gt;</operator><name>ff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>print_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tab_spaces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ppos</name><operator>-&gt;</operator><name>ff</name></name> <operator>&amp;&amp;</operator> <call><name>prt_use_number</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_line_number</name><argument_list>(<argument><expr><name>psettings</name></expr></argument>, <argument><expr><name>page_line</name></expr></argument>, <argument><expr><name><name>ppos</name><operator>-&gt;</operator><name>file_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ppos</name><operator>-&gt;</operator><name>ff</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>print_pos</name> <operator>=</operator> <name><name>ppos</name><operator>-&gt;</operator><name>print_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tab_spaces</name> <operator>=</operator> <name><name>ppos</name><operator>-&gt;</operator><name>lead_spaces</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mch_print_start_line</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>page_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>ppos</name><operator>-&gt;</operator><name>file_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <name><name>ppos</name><operator>-&gt;</operator><name>column</name></name></expr>;</init> <condition><expr><name><name>line</name><index>[<expr><name>col</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>need_break</name></expr>;</condition> <incr><expr><name>col</name> <operator>+=</operator> <name>outputlen</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>outputlen</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>outputlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>psettings</name><operator>-&gt;</operator><name>do_syntax</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_get_id</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>ppos</name><operator>-&gt;</operator><name>file_line</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_get_final_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>ppos</name><operator>-&gt;</operator><name>file_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>current_syn_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_syn_id</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_get_attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name><name>psettings</name><operator>-&gt;</operator><name>modec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_set_font</name><argument_list>(<argument><expr><name><name>attr</name><operator>.</operator><name>bold</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>.</operator><name>italic</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>.</operator><name>underline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_set_fg</name><argument_list>(<argument><expr><name><name>attr</name><operator>.</operator><name>fg_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_set_bg</name><argument_list>(<argument><expr><name><name>attr</name><operator>.</operator><name>bg_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name>TAB</name> <operator>||</operator> <name>tab_spaces</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tab_spaces</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tab_spaces</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>-</operator> <operator>(</operator><name>print_pos</name> <operator>%</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>tab_spaces</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>need_break</name> <operator>=</operator> <call><name>mch_print_text_out</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>print_pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tab_spaces</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_break</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>need_break</name> <operator>&amp;&amp;</operator> <name>tab_spaces</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>line</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name>FF</name>

<operator>&amp;&amp;</operator> <name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_FORMFEED</name></expr>]</index></name><operator>.</operator><name>present</name>

<operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_FORMFEED</name></expr>]</index></name><operator>.</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ppos</name><operator>-&gt;</operator><name>ff</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_break</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>need_break</name> <operator>=</operator> <call><name>mch_print_text_out</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>outputlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>print_pos</name> <operator>+=</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ppos</name><operator>-&gt;</operator><name>lead_spaces</name></name> <operator>=</operator> <name>tab_spaces</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppos</name><operator>-&gt;</operator><name>print_pos</name></name> <operator>=</operator> <name>print_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ppos</name><operator>-&gt;</operator><name>ff</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>line</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <operator>(</operator><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_WRAP</name></expr>]</index></name><operator>.</operator><name>present</name>

<operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_WRAP</name></expr>]</index></name><operator>.</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>==</operator> <literal type="char">'n'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>col</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_PS_DEFAULT_DPI</name></cpp:macro> <cpp:value>(72)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_PS_DEFAULT_FONTSIZE</name></cpp:macro> <cpp:value>(10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_PS_DEFAULT_BUFFER_SIZE</name></cpp:macro> <cpp:value>(80)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_MEDIASIZE_LEN</name></cpp:macro> <cpp:value>(sizeof(prt_mediasize) / sizeof(struct prt_mediasize_S))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_mediasize_S</name></name></type> <name><name>prt_mediasize</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"A4"</literal></expr>, <expr><literal type="number">595.0</literal></expr>, <expr><literal type="number">842.0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"letter"</literal></expr>, <expr><literal type="number">612.0</literal></expr>, <expr><literal type="number">792.0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"10x14"</literal></expr>, <expr><literal type="number">720.0</literal></expr>, <expr><literal type="number">1008.0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"A3"</literal></expr>, <expr><literal type="number">842.0</literal></expr>, <expr><literal type="number">1191.0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"A5"</literal></expr>, <expr><literal type="number">420.0</literal></expr>, <expr><literal type="number">595.0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"B4"</literal></expr>, <expr><literal type="number">729.0</literal></expr>, <expr><literal type="number">1032.0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"B5"</literal></expr>, <expr><literal type="number">516.0</literal></expr>, <expr><literal type="number">729.0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"executive"</literal></expr>, <expr><literal type="number">522.0</literal></expr>, <expr><literal type="number">756.0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"folio"</literal></expr>, <expr><literal type="number">595.0</literal></expr>, <expr><literal type="number">935.0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ledger"</literal></expr>, <expr><literal type="number">1224.0</literal></expr>, <expr><literal type="number">792.0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"legal"</literal></expr>, <expr><literal type="number">612.0</literal></expr>, <expr><literal type="number">1008.0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"quarto"</literal></expr>, <expr><literal type="number">610.0</literal></expr>, <expr><literal type="number">780.0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"statement"</literal></expr>, <expr><literal type="number">396.0</literal></expr>, <expr><literal type="number">612.0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tabloid"</literal></expr>, <expr><literal type="number">792.0</literal></expr>, <expr><literal type="number">1224.0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_PS_FONT_ROMAN</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_PS_FONT_BOLD</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_PS_FONT_OBLIQUE</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_PS_FONT_BOLDOBLIQUE</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_ps_font_S</name></name></type> <name>prt_ps_courier_font</name> <init>=

<expr><block>{

<expr><literal type="number">600</literal></expr>,

<expr><operator>-</operator><literal type="number">100</literal></expr>, <expr><literal type="number">50</literal></expr>,

<expr><operator>-</operator><literal type="number">250</literal></expr>, <expr><literal type="number">805</literal></expr>,

<expr><block>{<expr><literal type="string">"Courier"</literal></expr>, <expr><literal type="string">"Courier-Bold"</literal></expr>, <expr><literal type="string">"Courier-Oblique"</literal></expr>, <expr><literal type="string">"Courier-BoldOblique"</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_ps_font_S</name></name></type> <name>prt_ps_mb_font</name> <init>=

<expr><block>{

<expr><literal type="number">1000</literal></expr>,

<expr><operator>-</operator><literal type="number">100</literal></expr>, <expr><literal type="number">50</literal></expr>,

<expr><operator>-</operator><literal type="number">250</literal></expr>, <expr><literal type="number">805</literal></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_ps_font_S</name></name><modifier>*</modifier></type> <name>prt_ps_font</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_JIS_C_1978</name></cpp:macro> <cpp:value>(0x01)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_JIS_X_1983</name></cpp:macro> <cpp:value>(0x02)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_JIS_X_1990</name></cpp:macro> <cpp:value>(0x04)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_NEC</name></cpp:macro> <cpp:value>(0x08)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_MSWINDOWS</name></cpp:macro> <cpp:value>(0x10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_CP932</name></cpp:macro> <cpp:value>(0x20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_KANJITALK6</name></cpp:macro> <cpp:value>(0x40)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_KANJITALK7</name></cpp:macro> <cpp:value>(0x80)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_ps_encoding_S</name></name></type> <name><name>j_encodings</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"iso-2022-jp"</literal></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>CS_JIS_C_1978</name><operator>|</operator><name>CS_JIS_X_1983</name><operator>|</operator><name>CS_JIS_X_1990</name><operator>|</operator>

<name>CS_NEC</name><operator>)</operator></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"euc-jp"</literal></expr>, <expr><literal type="string">"EUC"</literal></expr>, <expr><operator>(</operator><name>CS_JIS_C_1978</name><operator>|</operator><name>CS_JIS_X_1983</name><operator>|</operator><name>CS_JIS_X_1990</name><operator>)</operator></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sjis"</literal></expr>, <expr><literal type="string">"RKSJ"</literal></expr>, <expr><operator>(</operator><name>CS_JIS_C_1978</name><operator>|</operator><name>CS_JIS_X_1983</name><operator>|</operator><name>CS_MSWINDOWS</name><operator>|</operator>

<name>CS_KANJITALK6</name><operator>|</operator><name>CS_KANJITALK7</name><operator>)</operator></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cp932"</literal></expr>, <expr><literal type="string">"RKSJ"</literal></expr>, <expr><name>CS_JIS_X_1983</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ucs-2"</literal></expr>, <expr><literal type="string">"UCS2"</literal></expr>, <expr><name>CS_JIS_X_1990</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"utf-8"</literal></expr>, <expr><literal type="string">"UTF8"</literal></expr>, <expr><name>CS_JIS_X_1990</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_ps_charset_S</name></name></type> <name><name>j_charsets</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"JIS_C_1978"</literal></expr>, <expr><literal type="string">"78"</literal></expr>, <expr><name>CS_JIS_C_1978</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"JIS_X_1983"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CS_JIS_X_1983</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"JIS_X_1990"</literal></expr>, <expr><literal type="string">"Hojo"</literal></expr>, <expr><name>CS_JIS_X_1990</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"NEC"</literal></expr>, <expr><literal type="string">"Ext"</literal></expr>, <expr><name>CS_NEC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"MSWINDOWS"</literal></expr>, <expr><literal type="string">"90ms"</literal></expr>, <expr><name>CS_MSWINDOWS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CP932"</literal></expr>, <expr><literal type="string">"90ms"</literal></expr>, <expr><name>CS_JIS_X_1983</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"KANJITALK6"</literal></expr>, <expr><literal type="string">"83pv"</literal></expr>, <expr><name>CS_KANJITALK6</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"KANJITALK7"</literal></expr>, <expr><literal type="string">"90pv"</literal></expr>, <expr><name>CS_KANJITALK7</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_GB_2312_80</name></cpp:macro> <cpp:value>(0x01)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_GBT_12345_90</name></cpp:macro> <cpp:value>(0x02)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_GBK2K</name></cpp:macro> <cpp:value>(0x04)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_SC_MAC</name></cpp:macro> <cpp:value>(0x08)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_GBT_90_MAC</name></cpp:macro> <cpp:value>(0x10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_GBK</name></cpp:macro> <cpp:value>(0x20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_SC_ISO10646</name></cpp:macro> <cpp:value>(0x40)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_ps_encoding_S</name></name></type> <name><name>sc_encodings</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"iso-2022"</literal></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>CS_GB_2312_80</name><operator>|</operator><name>CS_GBT_12345_90</name><operator>)</operator></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gb18030"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CS_GBK2K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"euc-cn"</literal></expr>, <expr><literal type="string">"EUC"</literal></expr>, <expr><operator>(</operator><name>CS_GB_2312_80</name><operator>|</operator><name>CS_GBT_12345_90</name><operator>|</operator><name>CS_SC_MAC</name><operator>|</operator>

<name>CS_GBT_90_MAC</name><operator>)</operator></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gbk"</literal></expr>, <expr><literal type="string">"EUC"</literal></expr>, <expr><name>CS_GBK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ucs-2"</literal></expr>, <expr><literal type="string">"UCS2"</literal></expr>, <expr><name>CS_SC_ISO10646</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"utf-8"</literal></expr>, <expr><literal type="string">"UTF8"</literal></expr>, <expr><name>CS_SC_ISO10646</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_ps_charset_S</name></name></type> <name><name>sc_charsets</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"GB_2312-80"</literal></expr>, <expr><literal type="string">"GB"</literal></expr>, <expr><name>CS_GB_2312_80</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"GBT_12345-90"</literal></expr>,<expr><literal type="string">"GBT"</literal></expr>, <expr><name>CS_GBT_12345_90</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"MAC"</literal></expr>, <expr><literal type="string">"GBpc"</literal></expr>, <expr><name>CS_SC_MAC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"GBT-90_MAC"</literal></expr>, <expr><literal type="string">"GBTpc"</literal></expr>, <expr><name>CS_GBT_90_MAC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"GBK"</literal></expr>, <expr><literal type="string">"GBK"</literal></expr>, <expr><name>CS_GBK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"GB18030"</literal></expr>, <expr><literal type="string">"GBK2K"</literal></expr>, <expr><name>CS_GBK2K</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ISO10646"</literal></expr>, <expr><literal type="string">"UniGB"</literal></expr>, <expr><name>CS_SC_ISO10646</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_CNS_PLANE_1</name></cpp:macro> <cpp:value>(0x01)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_CNS_PLANE_2</name></cpp:macro> <cpp:value>(0x02)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_CNS_PLANE_1_2</name></cpp:macro> <cpp:value>(0x04)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_B5</name></cpp:macro> <cpp:value>(0x08)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_ETEN</name></cpp:macro> <cpp:value>(0x10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_HK_GCCS</name></cpp:macro> <cpp:value>(0x20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_HK_SCS</name></cpp:macro> <cpp:value>(0x40)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_HK_SCS_ETEN</name></cpp:macro> <cpp:value>(0x80)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_MTHKL</name></cpp:macro> <cpp:value>(0x100)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_MTHKS</name></cpp:macro> <cpp:value>(0x200)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_DLHKL</name></cpp:macro> <cpp:value>(0x400)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_DLHKS</name></cpp:macro> <cpp:value>(0x800)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_TC_ISO10646</name></cpp:macro> <cpp:value>(0x1000)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_ps_encoding_S</name></name></type> <name><name>tc_encodings</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"iso-2022"</literal></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>CS_CNS_PLANE_1</name><operator>|</operator><name>CS_CNS_PLANE_2</name><operator>)</operator></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"euc-tw"</literal></expr>, <expr><literal type="string">"EUC"</literal></expr>, <expr><name>CS_CNS_PLANE_1_2</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"big5"</literal></expr>, <expr><literal type="string">"B5"</literal></expr>, <expr><operator>(</operator><name>CS_B5</name><operator>|</operator><name>CS_ETEN</name><operator>|</operator><name>CS_HK_GCCS</name><operator>|</operator><name>CS_HK_SCS</name><operator>|</operator>

<name>CS_HK_SCS_ETEN</name><operator>|</operator><name>CS_MTHKL</name><operator>|</operator><name>CS_MTHKS</name><operator>|</operator><name>CS_DLHKL</name><operator>|</operator>

<name>CS_DLHKS</name><operator>)</operator></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cp950"</literal></expr>, <expr><literal type="string">"B5"</literal></expr>, <expr><name>CS_B5</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ucs-2"</literal></expr>, <expr><literal type="string">"UCS2"</literal></expr>, <expr><name>CS_TC_ISO10646</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"utf-8"</literal></expr>, <expr><literal type="string">"UTF8"</literal></expr>, <expr><name>CS_TC_ISO10646</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"utf-16"</literal></expr>, <expr><literal type="string">"UTF16"</literal></expr>, <expr><name>CS_TC_ISO10646</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"utf-32"</literal></expr>, <expr><literal type="string">"UTF32"</literal></expr>, <expr><name>CS_TC_ISO10646</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_ps_charset_S</name></name></type> <name><name>tc_charsets</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"CNS_1992_1"</literal></expr>, <expr><literal type="string">"CNS1"</literal></expr>, <expr><name>CS_CNS_PLANE_1</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CNS_1992_2"</literal></expr>, <expr><literal type="string">"CNS2"</literal></expr>, <expr><name>CS_CNS_PLANE_2</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CNS_1993"</literal></expr>, <expr><literal type="string">"CNS"</literal></expr>, <expr><name>CS_CNS_PLANE_1_2</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BIG5"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CS_B5</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CP950"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CS_B5</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ETEN"</literal></expr>, <expr><literal type="string">"ETen"</literal></expr>, <expr><name>CS_ETEN</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"HK_GCCS"</literal></expr>, <expr><literal type="string">"HKgccs"</literal></expr>, <expr><name>CS_HK_GCCS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SCS"</literal></expr>, <expr><literal type="string">"HKscs"</literal></expr>, <expr><name>CS_HK_SCS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SCS_ETEN"</literal></expr>, <expr><literal type="string">"ETHK"</literal></expr>, <expr><name>CS_HK_SCS_ETEN</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"MTHKL"</literal></expr>, <expr><literal type="string">"HKm471"</literal></expr>, <expr><name>CS_MTHKL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"MTHKS"</literal></expr>, <expr><literal type="string">"HKm314"</literal></expr>, <expr><name>CS_MTHKS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"DLHKL"</literal></expr>, <expr><literal type="string">"HKdla"</literal></expr>, <expr><name>CS_DLHKL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"DLHKS"</literal></expr>, <expr><literal type="string">"HKdlb"</literal></expr>, <expr><name>CS_DLHKS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ISO10646"</literal></expr>, <expr><literal type="string">"UniCNS"</literal></expr>, <expr><name>CS_TC_ISO10646</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_KR_X_1992</name></cpp:macro> <cpp:value>(0x01)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_KR_MAC</name></cpp:macro> <cpp:value>(0x02)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_KR_X_1992_MS</name></cpp:macro> <cpp:value>(0x04)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CS_KR_ISO10646</name></cpp:macro> <cpp:value>(0x08)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_ps_encoding_S</name></name></type> <name><name>k_encodings</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"iso-2022-kr"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CS_KR_X_1992</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"euc-kr"</literal></expr>, <expr><literal type="string">"EUC"</literal></expr>, <expr><operator>(</operator><name>CS_KR_X_1992</name><operator>|</operator><name>CS_KR_MAC</name><operator>)</operator></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"johab"</literal></expr>, <expr><literal type="string">"Johab"</literal></expr>, <expr><name>CS_KR_X_1992</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cp1361"</literal></expr>, <expr><literal type="string">"Johab"</literal></expr>, <expr><name>CS_KR_X_1992</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"uhc"</literal></expr>, <expr><literal type="string">"UHC"</literal></expr>, <expr><name>CS_KR_X_1992_MS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cp949"</literal></expr>, <expr><literal type="string">"UHC"</literal></expr>, <expr><name>CS_KR_X_1992_MS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ucs-2"</literal></expr>, <expr><literal type="string">"UCS2"</literal></expr>, <expr><name>CS_KR_ISO10646</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"utf-8"</literal></expr>, <expr><literal type="string">"UTF8"</literal></expr>, <expr><name>CS_KR_ISO10646</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_ps_charset_S</name></name></type> <name><name>k_charsets</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"KS_X_1992"</literal></expr>, <expr><literal type="string">"KSC"</literal></expr>, <expr><name>CS_KR_X_1992</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CP1361"</literal></expr>, <expr><literal type="string">"KSC"</literal></expr>, <expr><name>CS_KR_X_1992</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"MAC"</literal></expr>, <expr><literal type="string">"KSCpc"</literal></expr>, <expr><name>CS_KR_MAC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"MSWINDOWS"</literal></expr>, <expr><literal type="string">"KSCms"</literal></expr>, <expr><name>CS_KR_X_1992_MS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CP949"</literal></expr>, <expr><literal type="string">"KSCms"</literal></expr>, <expr><name>CS_KR_X_1992_MS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"WANSUNG"</literal></expr>, <expr><literal type="string">"KSCms"</literal></expr>, <expr><name>CS_KR_X_1992_MS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ISO10646"</literal></expr>, <expr><literal type="string">"UniKS"</literal></expr>, <expr><name>CS_KR_ISO10646</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_ps_mbfont_S</name></name></type> <name><name>prt_ps_mbfonts</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{

<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>j_encodings</name></expr></argument>)</argument_list></call></expr>,

<expr><name>j_encodings</name></expr>,

<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>j_charsets</name></expr></argument>)</argument_list></call></expr>,

<expr><name>j_charsets</name></expr>,

<expr><literal type="string">"jis_roman"</literal></expr>,

<expr><literal type="string">"JIS_X_1983"</literal></expr>

}</block></expr>,

<expr><block>{

<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>sc_encodings</name></expr></argument>)</argument_list></call></expr>,

<expr><name>sc_encodings</name></expr>,

<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>sc_charsets</name></expr></argument>)</argument_list></call></expr>,

<expr><name>sc_charsets</name></expr>,

<expr><literal type="string">"gb_roman"</literal></expr>,

<expr><literal type="string">"GB_2312-80"</literal></expr>

}</block></expr>,

<expr><block>{

<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>tc_encodings</name></expr></argument>)</argument_list></call></expr>,

<expr><name>tc_encodings</name></expr>,

<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>tc_charsets</name></expr></argument>)</argument_list></call></expr>,

<expr><name>tc_charsets</name></expr>,

<expr><literal type="string">"cns_roman"</literal></expr>,

<expr><literal type="string">"BIG5"</literal></expr>

}</block></expr>,

<expr><block>{

<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>k_encodings</name></expr></argument>)</argument_list></call></expr>,

<expr><name>k_encodings</name></expr>,

<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>k_charsets</name></expr></argument>)</argument_list></call></expr>,

<expr><name>k_charsets</name></expr>,

<expr><literal type="string">"ks_roman"</literal></expr>,

<expr><literal type="string">"KS_X_1992"</literal></expr>

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_RESOURCE_TYPE_PROCSET</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_RESOURCE_TYPE_ENCODING</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_RESOURCE_TYPE_CMAP</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_PROLOG_VERSION</name></cpp:macro> <cpp:value>((char_u *)"1.4")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_CID_PROLOG_VERSION</name></cpp:macro> <cpp:value>((char_u *)"1.0")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>prt_resource_types</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"procset"</literal></expr>,

<expr><literal type="string">"encoding"</literal></expr>,

<expr><literal type="string">"cmap"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_RESOURCE_HEADER</name></cpp:macro> <cpp:value>"%!PS-Adobe-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_RESOURCE_RESOURCE</name></cpp:macro> <cpp:value>"Resource-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_RESOURCE_PROCSET</name></cpp:macro> <cpp:value>"ProcSet"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_RESOURCE_ENCODING</name></cpp:macro> <cpp:value>"Encoding"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_RESOURCE_CMAP</name></cpp:macro> <cpp:value>"CMap"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_DSC_MISC_TYPE</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_DSC_TITLE_TYPE</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_DSC_VERSION_TYPE</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_DSC_ENDCOMMENTS_TYPE</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_DSC_TITLE</name></cpp:macro> <cpp:value>"%%Title:"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_DSC_VERSION</name></cpp:macro> <cpp:value>"%%Version:"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_DSC_ENDCOMMENTS</name></cpp:macro> <cpp:value>"%%EndComments:"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_CSTR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(s) - 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_dsc_comment_S</name></name></type> <name><name>prt_dsc_table</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>PRT_DSC_TITLE</name></expr>, <expr><call><name>SIZEOF_CSTR</name><argument_list>(<argument><expr><name>PRT_DSC_TITLE</name></expr></argument>)</argument_list></call></expr>, <expr><name>PRT_DSC_TITLE_TYPE</name></expr>}</block></expr>,

<expr><block>{<expr><name>PRT_DSC_VERSION</name></expr>, <expr><call><name>SIZEOF_CSTR</name><argument_list>(<argument><expr><name>PRT_DSC_VERSION</name></expr></argument>)</argument_list></call></expr>,

<expr><name>PRT_DSC_VERSION_TYPE</name></expr>}</block></expr>,

<expr><block>{<expr><name>PRT_DSC_ENDCOMMENTS</name></expr>, <expr><call><name>SIZEOF_CSTR</name><argument_list>(<argument><expr><name>PRT_DSC_ENDCOMMENTS</name></expr></argument>)</argument_list></call></expr>,

<expr><name>PRT_DSC_ENDCOMMENTS_TYPE</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>prt_ps_fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_file_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>prt_ps_file_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_page_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_page_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_left_margin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_right_margin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_top_margin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_bottom_margin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_line_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_first_line_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_char_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_number_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_bgcol_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_pos_x_moveto</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_pos_y_moveto</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_need_moveto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_do_moveto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_need_font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_need_underline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>TriState</name></type> <name>prt_underline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>TriState</name></type> <name>prt_do_underline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_need_fgcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>prt_fgcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_need_bgcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_do_bgcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>prt_bgcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>prt_new_bgcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_attribute_change</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_text_run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_page_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_bufsiz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_media</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_portrait</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_num_copies</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_duplex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_tumble</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_collate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>prt_line_buffer</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>prt_ps_buffer</name> <init>= <expr><name>GA_EMPTY_INIT_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_do_conv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>vimconv_T</name></type> <name>prt_conv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_out_mbyte</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_custom_cmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>prt_cmap</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_use_courier</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_in_ascii</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prt_half_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>prt_ascii_encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>prt_hexchar</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_write_file_raw_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_file_error</name>

<operator>&amp;&amp;</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>prt_ps_fd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>bytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E455: Error writing to PostScript output file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_file_error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_write_file</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>prt_write_file_len</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_write_file_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>prt_write_file_raw_len</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_write_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_write_int</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_write_boolean</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><literal type="string">"T"</literal></expr> </then><else>: <expr><literal type="string">"F"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_def_font</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>encoding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"/_%s /VIM-%s /%s ref\n"</literal></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><literal type="string">"/%s %d %f /_%s sffs\n"</literal></expr></argument>,

<argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">500.</literal><operator>/</operator><name><name>prt_ps_courier_font</name><operator>.</operator><name>wx</name></name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"/%s %d /_%s ffs\n"</literal></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_def_cidfont</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cidfont</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"/_%s /%s[/%s] vim_composefont\n"</literal></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>prt_cmap</name></expr></argument>, <argument><expr><name>cidfont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"/%s %d /_%s ffs\n"</literal></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_dup_cidfont</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>original_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"/%s %s d\n"</literal></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>original_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_real_bits</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>real</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pinteger</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pfraction</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>integer</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>real</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>fraction</name> <init>= <expr><name>real</name> <operator>-</operator> <name>integer</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>real</name> <operator>&lt;</operator> <name>integer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fraction</name> <operator>=</operator> <operator>-</operator><name>fraction</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>precision</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>fraction</name> <operator>*=</operator> <literal type="number">10.0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>pinteger</name> <operator>=</operator> <name>integer</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pfraction</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fraction</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_write_real</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>integer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fraction</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prt_real_bits</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>integer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fraction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>integer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fraction</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>fraction</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prec</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fraction</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><literal type="string">".%0*d"</literal></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name>fraction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_def_var</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"/%s "</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><literal type="string">"d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_PS_FONT_TO_USER</name><parameter_list>(<parameter><type><name>scale</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size) * ((scale)/1000.0))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_flush_buffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prt_do_bgcol</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>prt_new_bgcol</name> <operator>!=</operator> <name>PRCOLOR_WHITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_do_moveto</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>prt_pos_x_moveto</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>prt_pos_y_moveto</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"m\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_do_moveto</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>prt_text_run</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>prt_line_height</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>prt_new_bgcol</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>prt_new_bgcol</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>prt_new_bgcol</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>r</name> <operator>/</operator> <literal type="number">255.0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>g</name> <operator>/</operator> <literal type="number">255.0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>b</name> <operator>/</operator> <literal type="number">255.0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"bg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_do_underline</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prt_do_moveto</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>prt_pos_x_moveto</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>prt_pos_y_moveto</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"m\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_do_moveto</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>prt_text_run</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"ul\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>prt_ps_buffer</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file_raw_len</name><argument_list>(<argument><expr><name><name>prt_ps_buffer</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>prt_ps_buffer</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_do_moveto</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>prt_pos_x_moveto</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>prt_pos_y_moveto</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"ms\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_do_moveto</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"s\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>prt_bufsiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_resource_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>resource_filename</name> <init>= <expr><name>cookie</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MAXPATHL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>resource_filename</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>resource_filename</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prt_find_resource</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>prt_ps_resource_S</name></name> <modifier>*</modifier></type><name>resource</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>xmallocz</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name><name>resource</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"print"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xstrlcat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xstrlcat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">".ps"</literal></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>resource</name><operator>-&gt;</operator><name>filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><call><name>do_in_runtimepath</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>prt_resource_name</name></expr></argument>, <argument><expr><name><name>resource</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>resource</name><operator>-&gt;</operator><name>filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSLF</name></cpp:macro> <cpp:value>(0x0a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSCR</name></cpp:macro> <cpp:value>(0x0d)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>prt_resfile_buffer_S</name></name></type> <name>prt_resfile</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prt_resfile_next_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>prt_resfile</name><operator>.</operator><name>line_end</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>prt_resfile</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prt_resfile</name><operator>.</operator><name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>PSLF</name> <operator>&amp;&amp;</operator> <name><name>prt_resfile</name><operator>.</operator><name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>PSCR</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>prt_resfile</name><operator>.</operator><name>line_start</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>prt_resfile</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prt_resfile</name><operator>.</operator><name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>PSLF</name> <operator>||</operator> <name><name>prt_resfile</name><operator>.</operator><name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>PSCR</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>prt_resfile</name><operator>.</operator><name>line_end</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<return>return <expr><name>idx</name> <operator>&lt;</operator> <name><name>prt_resfile</name><operator>.</operator><name>len</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prt_resfile_strncmp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name><name>prt_resfile</name><operator>.</operator><name>line_end</name></name> <operator>-</operator> <operator>(</operator><name><name>prt_resfile</name><operator>.</operator><name>line_start</name></name> <operator>+</operator> <name>offset</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prt_resfile</name><operator>.</operator><name>buffer</name><index>[<expr><name><name>prt_resfile</name><operator>.</operator><name>line_start</name></name> <operator>+</operator> <name>offset</name></expr>]</index></name></expr></argument>,

<argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prt_resfile_skip_nonws</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>prt_resfile</name><operator>.</operator><name>line_start</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>prt_resfile</name><operator>.</operator><name>line_end</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>prt_resfile</name><operator>.</operator><name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>idx</name> <operator>-</operator> <name><name>prt_resfile</name><operator>.</operator><name>line_start</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prt_resfile_skip_ws</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>prt_resfile</name><operator>.</operator><name>line_start</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>prt_resfile</name><operator>.</operator><name>line_end</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>prt_resfile</name><operator>.</operator><name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>idx</name> <operator>-</operator> <name><name>prt_resfile</name><operator>.</operator><name>line_start</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prt_next_dsc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prt_dsc_line_S</name></name> <modifier>*</modifier></type><name>p_dsc_line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>comment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_resfile_next_line</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prt_resfile_strncmp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%%"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>comment</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>comment</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>prt_dsc_table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>comment</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>prt_resfile_strncmp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>prt_dsc_table</name><index>[<expr><name>comment</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>,

<argument><expr><name><name>prt_dsc_table</name><index>[<expr><name>comment</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>comment</name> <operator>!=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>prt_dsc_table</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_dsc_line</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>prt_dsc_table</name><index>[<expr><name>comment</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>prt_dsc_table</name><index>[<expr><name>comment</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p_dsc_line</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PRT_DSC_MISC_TYPE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>prt_resfile_skip_nonws</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>prt_resfile_skip_ws</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dsc_line</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>prt_resfile</name><operator>.</operator><name>buffer</name><index>[<expr><name><name>prt_resfile</name><operator>.</operator><name>line_start</name></name> <operator>+</operator> <name>offset</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dsc_line</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>prt_resfile</name><operator>.</operator><name>line_end</name></name> <operator>-</operator> <operator>(</operator><name><name>prt_resfile</name><operator>.</operator><name>line_start</name></name> <operator>+</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prt_open_resource</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prt_ps_resource_S</name></name> <modifier>*</modifier></type><name>resource</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seen_all</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seen_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seen_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd_resource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>prt_dsc_line_S</name></name></type> <name>dsc_line</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd_resource</name> <operator>=</operator> <call><name>os_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>resource</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>READBIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd_resource</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E624: Can't open file \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>resource</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>prt_resfile</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>PRT_FILE_BUFFER_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prt_resfile</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>fread</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>prt_resfile</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>PRT_FILE_BUFFER_LEN</name></expr></argument>, <argument><expr><name>fd_resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fd_resource</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E457: Can't read PostScript resource file \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>resource</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd_resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd_resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prt_resfile</name><operator>.</operator><name>line_end</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prt_resfile</name><operator>.</operator><name>line_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_resfile_next_line</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prt_resfile_strncmp</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>PRT_RESOURCE_HEADER</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>PRT_RESOURCE_HEADER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E618: file \"%s\" is not a PostScript resource file"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>resource</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>PRT_RESOURCE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>prt_resfile_skip_nonws</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>prt_resfile_skip_ws</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prt_resfile_strncmp</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>PRT_RESOURCE_RESOURCE</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>PRT_RESOURCE_RESOURCE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E619: file \"%s\" is not a supported PostScript resource file"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>resource</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>PRT_RESOURCE_RESOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prt_resfile_strncmp</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>PRT_RESOURCE_PROCSET</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>PRT_RESOURCE_PROCSET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>resource</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PRT_RESOURCE_TYPE_PROCSET</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>prt_resfile_strncmp</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>PRT_RESOURCE_ENCODING</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>PRT_RESOURCE_ENCODING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>resource</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PRT_RESOURCE_TYPE_ENCODING</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>prt_resfile_strncmp</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>PRT_RESOURCE_CMAP</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>PRT_RESOURCE_CMAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>resource</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PRT_RESOURCE_TYPE_CMAP</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E619: file \"%s\" is not a supported PostScript resource file"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>resource</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>resource</name><operator>-&gt;</operator><name>title</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>resource</name><operator>-&gt;</operator><name>version</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>seen_title</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>seen_version</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>seen_all</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>seen_all</name> <operator>&amp;&amp;</operator> <call><name>prt_next_dsc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dsc_line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>dsc_line</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PRT_DSC_TITLE_TYPE</name></expr>:</case>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name><name>resource</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>dsc_line</name><operator>.</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>dsc_line</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seen_title</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seen_version</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seen_all</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>PRT_DSC_VERSION_TYPE</name></expr>:</case>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name><name>resource</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>dsc_line</name><operator>.</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>dsc_line</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seen_version</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seen_title</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seen_all</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>PRT_DSC_ENDCOMMENTS_TYPE</name></expr>:</case>

<expr_stmt><expr><name>seen_all</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PRT_DSC_MISC_TYPE</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seen_title</name> <operator>||</operator> <operator>!</operator><name>seen_version</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E619: file \"%s\" is not a supported PostScript resource file"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>resource</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prt_check_resource</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prt_ps_resource_S</name></name> <modifier>*</modifier></type><name>resource</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>version</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>resource</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E621: \"%s\" resource file has wrong version"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>resource</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_dsc_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"%!PS-Adobe-3.0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_dsc_noarg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%%%%%s\n"</literal></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_dsc_textline</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%%%%%s: %s\n"</literal></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_dsc_text</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%%%%%s: (%s)\n"</literal></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prt_dsc_atend</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>prt_dsc_text((c), "atend")</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_dsc_ints</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ints</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%%%%%s:"</literal></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name><name>ints</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> 

<name>prt_dsc_resources</name> <parameter_list>(

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>comment</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>comment</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%%%%%s: %s"</literal></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%%%%+ %s"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_dsc_font_resource</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>resource</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>prt_ps_font_S</name></name> <modifier>*</modifier></type><name>ps_font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>,

<argument><expr><name><name>ps_font</name><operator>-&gt;</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_ROMAN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>PRT_PS_FONT_BOLD</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>PRT_PS_FONT_BOLDOBLIQUE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ps_font</name><operator>-&gt;</operator><name>ps_fontname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>, <argument><expr><name><name>ps_font</name><operator>-&gt;</operator><name>ps_fontname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_dsc_requirements</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>duplex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tumble</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>collate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_copies</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>duplex</name> <operator>||</operator> <name>collate</name> <operator>||</operator> <name>color</name> <operator>||</operator> <operator>(</operator><name>num_copies</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><literal type="string">"%%%%Requirements:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>duplex</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">" duplex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tumble</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"(tumble)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>collate</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">" collate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">" color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_copies</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">" numcopies("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>num_copies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_dsc_docmedia</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>paper_name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>weight</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>colour</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_line_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%%%%DocumentMedia: %s "</literal></expr></argument>, <argument><expr><name>paper_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><name>prt_line_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>weight</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>colour</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><name>colour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mch_print_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>PRT_PS_FONT_ROMAN</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>PRT_PS_FONT_BOLDOBLIQUE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_do_conv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_do_conv</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_ps_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>prt_ps_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_ps_fd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_file_error</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_ps_file_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>prt_ps_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>to_device_units</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>physsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def_number</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>prt_get_unit</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>PRT_UNIT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name>PRT_UNIT_PERC</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <name>def_number</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <name><name>printer_opts</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>number</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>u</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PRT_UNIT_INCH</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>nr</name> <operator>*</operator> <name>PRT_PS_DEFAULT_DPI</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PRT_UNIT_MM</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>nr</name> <operator>*</operator> <name>PRT_PS_DEFAULT_DPI</name> <operator>/</operator> <literal type="number">25.4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PRT_UNIT_POINT</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PRT_UNIT_PERC</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>physsize</name> <operator>*</operator> <name>nr</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_page_margins</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>right</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>bottom</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <call><name>to_device_units</name><argument_list>(<argument><expr><name>OPT_PRINT_LEFT</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <name>width</name> <operator>-</operator> <call><name>to_device_units</name><argument_list>(<argument><expr><name>OPT_PRINT_RIGHT</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>top</name> <operator>=</operator> <name>height</name> <operator>-</operator> <call><name>to_device_units</name><argument_list>(<argument><expr><name>OPT_PRINT_TOP</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bottom</name> <operator>=</operator> <call><name>to_device_units</name><argument_list>(<argument><expr><name>OPT_PRINT_BOT</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_font_metrics</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>font_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>prt_line_height</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>font_scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_char_width</name> <operator>=</operator> <call><name>PRT_PS_FONT_TO_USER</name><argument_list>(<argument><expr><name>font_scale</name></expr></argument>, <argument><expr><name><name>prt_ps_font</name><operator>-&gt;</operator><name>wx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prt_get_cpl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>prt_use_number</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_number_width</name> <operator>=</operator> <name>PRINT_NUMBER_WIDTH</name> <operator>*</operator> <name>prt_char_width</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prt_number_width</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prt_left_margin</name> <operator>+=</operator> <name>prt_number_width</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prt_number_width</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>prt_right_margin</name> <operator>-</operator> <name>prt_left_margin</name><operator>)</operator> <operator>/</operator> <name>prt_char_width</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prt_build_cid_fontname</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name_len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fontname</name> <init>= <expr><call><name>xstrndup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>name_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>font</name></expr>]</index></name> <operator>=</operator> <name>fontname</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prt_get_lpp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lpp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prt_bgcol_offset</name> <operator>=</operator> <call><name>PRT_PS_FONT_TO_USER</name><argument_list>(<argument><expr><name>prt_line_height</name></expr></argument>,

<argument><expr><name><name>prt_ps_font</name><operator>-&gt;</operator><name>bbox_min_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>prt_ps_font</name><operator>-&gt;</operator><name>bbox_max_y</name></name> <operator>-</operator> <name><name>prt_ps_font</name><operator>-&gt;</operator><name>bbox_min_y</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">1000.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_bgcol_offset</name> <operator>-=</operator> <call><name>PRT_PS_FONT_TO_USER</name><argument_list>(<argument><expr><name>prt_line_height</name></expr></argument>,

<argument><expr><operator>(</operator><literal type="number">1000.0</literal> <operator>-</operator> <operator>(</operator><name><name>prt_ps_font</name><operator>-&gt;</operator><name>bbox_max_y</name></name> <operator>-</operator>

<name><name>prt_ps_font</name><operator>-&gt;</operator><name>bbox_min_y</name></name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prt_first_line_height</name> <operator>=</operator> <name>prt_line_height</name> <operator>+</operator> <name>prt_bgcol_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lpp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>prt_top_margin</name> <operator>-</operator> <name>prt_bottom_margin</name><operator>)</operator> <operator>/</operator> <name>prt_line_height</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_top_margin</name> <operator>-=</operator> <name>prt_line_height</name> <operator>*</operator> <call><name>prt_header_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>lpp</name> <operator>-</operator> <call><name>prt_header_height</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prt_match_encoding</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p_encoding</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>prt_ps_mbfont_S</name></name> <modifier>*</modifier></type><name>p_cmap</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>prt_ps_encoding_S</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_mbenc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mbenc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enc_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>prt_ps_encoding_S</name></name> <modifier>*</modifier></type><name>p_mbenc</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_mbenc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_mbenc</name> <operator>=</operator> <name><name>p_cmap</name><operator>-&gt;</operator><name>encodings</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mbenc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mbenc</name> <operator>&lt;</operator> <name><name>p_cmap</name><operator>-&gt;</operator><name>num_encodings</name></name></expr>;</condition> <incr><expr><name>mbenc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>p_mbenc</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>, <argument><expr><name>p_encoding</name></expr></argument>, <argument><expr><name>enc_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_mbenc</name> <operator>=</operator> <name>p_mbenc</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_mbenc</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prt_match_charset</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p_charset</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>prt_ps_mbfont_S</name></name> <modifier>*</modifier></type><name>p_cmap</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>prt_ps_charset_S</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_mbchar</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mbchar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>char_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>prt_ps_charset_S</name></name> <modifier>*</modifier></type><name>p_mbchar</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_charset</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_charset</name> <operator>=</operator> <name><name>p_cmap</name><operator>-&gt;</operator><name>defcs</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>char_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_mbchar</name> <operator>=</operator> <name><name>p_cmap</name><operator>-&gt;</operator><name>charsets</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mbchar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mbchar</name> <operator>&lt;</operator> <name><name>p_cmap</name><operator>-&gt;</operator><name>num_charsets</name></name></expr>;</condition> <incr><expr><name>mbchar</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>p_mbchar</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>, <argument><expr><name>p_charset</name></expr></argument>, <argument><expr><name>char_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_mbchar</name> <operator>=</operator> <name>p_mbchar</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_mbchar</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mch_print_init</name><parameter_list>(<parameter><decl><type><name>prt_settings_T</name> <modifier>*</modifier></type><name>psettings</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>jobname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>paper_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>paper_strlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fontsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p_encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>prt_ps_encoding_S</name></name> <modifier>*</modifier></type><name>p_mbenc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>prt_ps_encoding_S</name></name> <modifier>*</modifier></type><name>p_mbenc_first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>prt_ps_charset_S</name></name> <modifier>*</modifier></type><name>p_mbchar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_encoding</name> <operator>=</operator> <call><name>enc_skip</name><argument_list>(<argument><expr><name>p_penc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_encoding</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_encoding</name> <operator>=</operator> <call><name>enc_skip</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_mbenc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>enc_canon_props</name><argument_list>(<argument><expr><name>p_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>props</name> <operator>&amp;</operator> <name>ENC_8BIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>p_pmcs</name> <operator>!=</operator> <name>NUL</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>props</name> <operator>&amp;</operator> <name>ENC_UNICODE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_mbenc_first</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>effective_cmap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cmap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cmap</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>prt_ps_mbfonts</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cmap</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>prt_match_encoding</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_encoding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prt_ps_mbfonts</name><index>[<expr><name>cmap</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_mbenc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_mbenc_first</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_mbenc_first</name> <operator>=</operator> <name>p_mbenc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>effective_cmap</name> <operator>=</operator> <name>cmap</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prt_match_charset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_pmcs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prt_ps_mbfonts</name><index>[<expr><name>cmap</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_mbchar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>p_mbenc_first</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p_mbchar</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_mbenc</name> <operator>=</operator> <name>p_mbenc_first</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmap</name> <operator>=</operator> <name>effective_cmap</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_mbenc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cmap</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>prt_ps_mbfonts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prt_out_mbyte</name> <operator>=</operator> <operator>(</operator><name>p_mbenc</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>prt_cmap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_custom_cmap</name> <operator>=</operator> <operator>(</operator><name>p_mbchar</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_custom_cmap</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_mbenc</name><operator>-&gt;</operator><name>needs_charset</name></name> <operator>&amp;</operator> <name><name>p_mbchar</name><operator>-&gt;</operator><name>has_charset</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E673: Incompatible multi-byte encoding and character set."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_mbchar</name><operator>-&gt;</operator><name>cmap_charset</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>prt_cmap</name></expr></argument>, <argument><expr><name><name>p_mbchar</name><operator>-&gt;</operator><name>cmap_charset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_cmap</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>prt_cmap</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_pmcs</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E674: printmbcharset cannot be empty with multi-byte encoding."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>prt_cmap</name></expr></argument>, <argument><expr><name>p_pmcs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prt_cmap</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>prt_cmap</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_mbenc</name><operator>-&gt;</operator><name>cmap_encoding</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>prt_cmap</name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>p_mbenc</name><operator>-&gt;</operator><name>cmap_encoding</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>prt_cmap</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>prt_cmap</name></expr></argument>, <argument><expr><name><name>p_mbenc</name><operator>-&gt;</operator><name>cmap_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>prt_cmap</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>prt_cmap</name></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_REGULAR</name></expr>]</index></name><operator>.</operator><name>present</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E675: No default font specified for multi-byte printing."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prt_build_cid_fontname</name><argument_list>(<argument><expr><name>PRT_PS_FONT_ROMAN</name></expr></argument>,

<argument><expr><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_REGULAR</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>,

<argument><expr><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_REGULAR</name></expr>]</index></name><operator>.</operator><name>strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_BOLD</name></expr>]</index></name><operator>.</operator><name>present</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_build_cid_fontname</name><argument_list>(<argument><expr><name>PRT_PS_FONT_BOLD</name></expr></argument>,

<argument><expr><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_BOLD</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>,

<argument><expr><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_BOLD</name></expr>]</index></name><operator>.</operator><name>strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_OBLIQUE</name></expr>]</index></name><operator>.</operator><name>present</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_build_cid_fontname</name><argument_list>(<argument><expr><name>PRT_PS_FONT_OBLIQUE</name></expr></argument>,

<argument><expr><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_OBLIQUE</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>,

<argument><expr><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_OBLIQUE</name></expr>]</index></name><operator>.</operator><name>strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_BOLDOBLIQUE</name></expr>]</index></name><operator>.</operator><name>present</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_build_cid_fontname</name><argument_list>(<argument><expr><name>PRT_PS_FONT_BOLDOBLIQUE</name></expr></argument>,

<argument><expr><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_BOLDOBLIQUE</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>,

<argument><expr><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_BOLDOBLIQUE</name></expr>]</index></name><operator>.</operator><name>strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prt_use_courier</name> <operator>=</operator> <operator>(</operator>

<name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_USECOURIER</name></expr>]</index></name><operator>.</operator><name>present</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_USECOURIER</name></expr>]</index></name><operator>.</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'y'</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_use_courier</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_ASCII</name></expr>]</index></name><operator>.</operator><name>present</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>mbfont_opts</name><index>[<expr><name>OPT_MBFONT_ASCII</name></expr>]</index></name><operator>.</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'y'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_ascii_encoding</name> <operator>=</operator> <literal type="string">"ascii"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>prt_ascii_encoding</name> <operator>=</operator> <name><name>prt_ps_mbfonts</name><index>[<expr><name>cmap</name></expr>]</index></name><operator>.</operator><name>ascii_enc</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prt_ps_font</name> <operator>=</operator> <operator>&amp;</operator><name>prt_ps_mb_font</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>prt_use_courier</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_ps_font</name> <operator>=</operator> <operator>&amp;</operator><name>prt_ps_courier_font</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prt_portrait</name> <operator>=</operator> <operator>(</operator><operator>!</operator><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_PORTRAIT</name></expr>]</index></name><operator>.</operator><name>present</name>

<operator>||</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_PORTRAIT</name></expr>]</index></name><operator>.</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator>

<literal type="char">'y'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_PAPER</name></expr>]</index></name><operator>.</operator><name>present</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>paper_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_PAPER</name></expr>]</index></name><operator>.</operator><name>string</name></expr>;</expr_stmt>

<expr_stmt><expr><name>paper_strlen</name> <operator>=</operator> <name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_PAPER</name></expr>]</index></name><operator>.</operator><name>strlen</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>paper_name</name> <operator>=</operator> <literal type="string">"A4"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>paper_strlen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>PRT_MEDIASIZE_LEN</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>prt_mediasize</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>paper_strlen</name>

<operator>&amp;&amp;</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>prt_mediasize</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>paper_name</name></expr></argument>,

<argument><expr><name>paper_strlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>PRT_MEDIASIZE_LEN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prt_media</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_portrait</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_page_width</name> <operator>=</operator> <name><name>prt_mediasize</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_page_height</name> <operator>=</operator> <name><name>prt_mediasize</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>prt_page_width</name> <operator>=</operator> <name><name>prt_mediasize</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_page_height</name> <operator>=</operator> <name><name>prt_mediasize</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>bottom</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prt_page_margins</name><argument_list>(<argument><expr><name>prt_page_width</name></expr></argument>, <argument><expr><name>prt_page_height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_left_margin</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_right_margin</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_top_margin</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_bottom_margin</name> <operator>=</operator> <name>bottom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fontsize</name> <operator>=</operator> <name>PRT_PS_DEFAULT_FONTSIZE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p_pfn</name></expr>;</init> <condition><expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal> <operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fontsize</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>prt_font_metrics</name><argument_list>(<argument><expr><name>fontsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>chars_per_line</name></name> <operator>=</operator> <call><name>prt_get_cpl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>lines_per_page</name></name> <operator>=</operator> <call><name>prt_get_lpp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>psettings</name><operator>-&gt;</operator><name>chars_per_line</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>psettings</name><operator>-&gt;</operator><name>lines_per_page</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>n_collated_copies</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>n_uncollated_copies</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_num_copies</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_collate</name> <operator>=</operator> <operator>(</operator><operator>!</operator><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_COLLATE</name></expr>]</index></name><operator>.</operator><name>present</name>

<operator>||</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_COLLATE</name></expr>]</index></name><operator>.</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator>

<literal type="char">'y'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_collate</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>jobname</name></name> <operator>=</operator> <name>jobname</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_duplex</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_tumble</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>duplex</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_DUPLEX</name></expr>]</index></name><operator>.</operator><name>present</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_DUPLEX</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_duplex</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>duplex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_DUPLEX</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>, <argument><expr><literal type="string">"short"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call>

<operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prt_tumble</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>psettings</name><operator>-&gt;</operator><name>user_abort</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>psettings</name><operator>-&gt;</operator><name>outfile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_ps_file_name</name> <operator>=</operator> <call><name>vim_tempname</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_ps_file_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prt_ps_fd</name> <operator>=</operator> <call><name>os_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prt_ps_file_name</name></expr></argument>, <argument><expr><name>WRITEBIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>expand_env_save</name><argument_list>(<argument><expr><name><name>psettings</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_ps_fd</name> <operator>=</operator> <call><name>os_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>WRITEBIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_ps_fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E324: Can't open PostScript output file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_print_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prt_bufsiz</name> <operator>=</operator> <name><name>psettings</name><operator>-&gt;</operator><name>chars_per_line</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prt_bufsiz</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>prt_bufsiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_page_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_attribute_change</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_moveto</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_font</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_fgcol</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_bgcol</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_underline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_file_error</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prt_add_resource</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prt_ps_resource_S</name></name> <modifier>*</modifier></type><name>resource</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fd_resource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>resource_buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd_resource</name> <operator>=</operator> <call><name>os_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>resource</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>READBIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd_resource</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E456: Can't open file \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>resource</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><literal type="string">"BeginResource"</literal></expr></argument>, <argument><expr><name><name>prt_resource_types</name><index>[<expr><name><name>resource</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>resource</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_textline</name><argument_list>(<argument><expr><literal type="string">"BeginDocument"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>resource</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>resource_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>resource_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fd_resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fd_resource</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E457: Can't read PostScript resource file \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>resource</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd_resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prt_write_file_raw_len</name><argument_list>(<argument><expr><name>resource_buffer</name></expr></argument>, <argument><expr><name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_file_error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd_resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd_resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_noarg</name><argument_list>(<argument><expr><literal type="string">"EndDocument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_noarg</name><argument_list>(<argument><expr><literal type="string">"EndResource"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mch_print_begin</name><parameter_list>(<parameter><decl><type><name>prt_settings_T</name> <modifier>*</modifier></type><name>psettings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>bbox</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>prt_ps_resource_S</name></name></type> <name>res_prolog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>prt_ps_resource_S</name></name></type> <name>res_encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p_encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>prt_ps_resource_S</name></name></type> <name>res_cidfont</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>prt_ps_resource_S</name></name></type> <name>res_cmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prt_dsc_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_textline</name><argument_list>(<argument><expr><literal type="string">"Title"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>psettings</name><operator>-&gt;</operator><name>jobname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_get_user_name</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prt_dsc_textline</name><argument_list>(<argument><expr><literal type="string">"For"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_textline</name><argument_list>(<argument><expr><literal type="string">"Creator"</literal></expr></argument>, <argument><expr><name>longVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_time</name> <operator>=</operator> <call><name>ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p_time</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prt_dsc_textline</name><argument_list>(<argument><expr><literal type="string">"CreationDate"</literal></expr></argument>, <argument><expr><name>p_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_textline</name><argument_list>(<argument><expr><literal type="string">"DocumentData"</literal></expr></argument>, <argument><expr><literal type="string">"Clean8Bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_textline</name><argument_list>(<argument><expr><literal type="string">"Orientation"</literal></expr></argument>, <argument><expr><literal type="string">"Portrait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_atend</name><argument_list>(<argument><expr><literal type="string">"Pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_textline</name><argument_list>(<argument><expr><literal type="string">"PageOrder"</literal></expr></argument>, <argument><expr><literal type="string">"Ascend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_page_margins</name><argument_list>(<argument><expr><name><name>prt_mediasize</name><index>[<expr><name>prt_media</name></expr>]</index></name><operator>.</operator><name>width</name></expr></argument>,

<argument><expr><name><name>prt_mediasize</name><index>[<expr><name>prt_media</name></expr>]</index></name><operator>.</operator><name>height</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bbox</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>left</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_portrait</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bbox</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>top</name> <operator>-</operator> <operator>(</operator><name><name>psettings</name><operator>-&gt;</operator><name>lines_per_page</name></name> <operator>+</operator> <call><name>prt_header_height</name><argument_list>()</argument_list></call><operator>)</operator>

<operator>*</operator> <name>prt_line_height</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bbox</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>left</name> <operator>+</operator> <name><name>psettings</name><operator>-&gt;</operator><name>chars_per_line</name></name> <operator>*</operator> <name>prt_char_width</name>

<operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bbox</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>top</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bbox</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>bottom</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bbox</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>left</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>psettings</name><operator>-&gt;</operator><name>lines_per_page</name></name>

<operator>+</operator> <call><name>prt_header_height</name><argument_list>()</argument_list></call><operator>)</operator> <operator>*</operator> <name>prt_line_height</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bbox</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>bottom</name> <operator>+</operator> <name><name>psettings</name><operator>-&gt;</operator><name>chars_per_line</name></name> <operator>*</operator> <name>prt_char_width</name>

<operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>prt_dsc_ints</name><argument_list>(<argument><expr><literal type="string">"BoundingBox"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>bbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_docmedia</name><argument_list>(<argument><expr><name><name>prt_mediasize</name><index>[<expr><name>prt_media</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,

<argument><expr><name><name>prt_mediasize</name><index>[<expr><name>prt_media</name></expr>]</index></name><operator>.</operator><name>width</name></expr></argument>,

<argument><expr><name><name>prt_mediasize</name><index>[<expr><name>prt_media</name></expr>]</index></name><operator>.</operator><name>height</name></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_out_mbyte</name> <operator>||</operator> <name>prt_use_courier</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_dsc_font_resource</name><argument_list>(<argument><expr><literal type="string">"DocumentNeededResources"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>prt_ps_courier_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_dsc_font_resource</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>prt_use_courier</name></expr> ?</condition><then> <expr><name>NULL</name></expr>

</then><else>: <expr><literal type="string">"DocumentNeededResources"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>prt_ps_mb_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_custom_cmap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cmap"</literal></expr></argument>, <argument><expr><name>prt_cmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_find_resource</name><argument_list>(<argument><expr><literal type="string">"prolog"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_prolog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E456: Can't find PostScript resource file \"prolog.ps\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_open_resource</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_prolog</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_check_resource</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_prolog</name></expr></argument>, <argument><expr><name>PRT_PROLOG_VERSION</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_find_resource</name><argument_list>(<argument><expr><literal type="string">"cidfont"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_cidfont</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E456: Can't find PostScript resource file \"cidfont.ps\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_open_resource</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_cidfont</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_check_resource</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_cidfont</name></expr></argument>, <argument><expr><name>PRT_CID_PROLOG_VERSION</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_out_mbyte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_encoding</name> <operator>=</operator> <call><name>enc_skip</name><argument_list>(<argument><expr><name>p_penc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_encoding</name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <operator>!</operator><call><name>prt_find_resource</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_encoding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>props</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_encoding</name> <operator>=</operator> <call><name>enc_skip</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>enc_canon_props</name><argument_list>(<argument><expr><name>p_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>props</name> <operator>&amp;</operator> <name>ENC_8BIT</name><operator>)</operator>

<operator>||</operator> <operator>!</operator><call><name>prt_find_resource</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_encoding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_encoding</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"latin1"</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_find_resource</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_encoding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E456: Can't find PostScript resource file \"%s.ps\""</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>p_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_open_resource</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p_encoding</name> <operator>=</operator> <call><name>enc_skip</name><argument_list>(<argument><expr><name>p_penc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_encoding</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_encoding</name> <operator>=</operator> <call><name>enc_skip</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_use_courier</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_find_resource</name><argument_list>(<argument><expr><name>prt_ascii_encoding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E456: Can't find PostScript resource file \"%s.ps\""</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>prt_ascii_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_open_resource</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>prt_conv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>enc_canon_props</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>enc_canon_props</name><argument_list>(<argument><expr><name>p_encoding</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ENC_8BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_conv</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_encoding</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E620: Unable to convert to print encoding \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>p_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prt_do_conv</name> <operator>=</operator> <name><name>prt_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name> <operator>&amp;&amp;</operator> <name>prt_custom_cmap</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_find_resource</name><argument_list>(<argument><expr><name>prt_cmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_cmap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E456: Can't find PostScript resource file \"%s.ps\""</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>prt_cmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_open_resource</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_cmap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>res_prolog</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>res_prolog</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><literal type="string">"DocumentSuppliedResources"</literal></expr></argument>, <argument><expr><literal type="string">"procset"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>res_cidfont</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>res_cidfont</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"procset"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_custom_cmap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>res_cmap</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>res_cmap</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cmap"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_out_mbyte</name> <operator>||</operator> <name>prt_use_courier</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>res_encoding</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>res_encoding</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"encoding"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prt_dsc_requirements</name><argument_list>(<argument><expr><name>prt_duplex</name></expr></argument>, <argument><expr><name>prt_tumble</name></expr></argument>, <argument><expr><name>prt_collate</name></expr></argument>,

<argument><expr><name><name>psettings</name><operator>-&gt;</operator><name>do_syntax</name></name></expr></argument>

, <argument><expr><name>prt_num_copies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_noarg</name><argument_list>(<argument><expr><literal type="string">"EndComments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_noarg</name><argument_list>(<argument><expr><literal type="string">"BeginDefaults"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_out_mbyte</name> <operator>||</operator> <name>prt_use_courier</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_dsc_font_resource</name><argument_list>(<argument><expr><literal type="string">"PageResources"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>prt_ps_courier_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_dsc_font_resource</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>prt_use_courier</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><literal type="string">"PageResources"</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>&amp;</operator><name>prt_ps_mb_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_custom_cmap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cmap"</literal></expr></argument>, <argument><expr><name>prt_cmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prt_dsc_textline</name><argument_list>(<argument><expr><literal type="string">"PageMedia"</literal></expr></argument>, <argument><expr><name><name>prt_mediasize</name><index>[<expr><name>prt_media</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_noarg</name><argument_list>(<argument><expr><literal type="string">"EndDefaults"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_noarg</name><argument_list>(<argument><expr><literal type="string">"BeginProlog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_add_resource</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_prolog</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_add_resource</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_cidfont</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_custom_cmap</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>prt_add_resource</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_cmap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_out_mbyte</name> <operator>||</operator> <name>prt_use_courier</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prt_add_resource</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res_encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prt_dsc_noarg</name><argument_list>(<argument><expr><literal type="string">"EndProlog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_noarg</name><argument_list>(<argument><expr><literal type="string">"BeginSetup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_int</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>prt_mediasize</name><index>[<expr><name>prt_media</name></expr>]</index></name><operator>.</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_int</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>prt_mediasize</name><index>[<expr><name>prt_media</name></expr>]</index></name><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_int</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"sps\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_int</name><argument_list>(<argument><expr><name>prt_num_copies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"nc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_boolean</name><argument_list>(<argument><expr><name>prt_duplex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_boolean</name><argument_list>(<argument><expr><name>prt_tumble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"dt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_boolean</name><argument_list>(<argument><expr><name>prt_collate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"c\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_out_mbyte</name> <operator>||</operator> <name>prt_use_courier</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prt_use_courier</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_encoding</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>prt_ascii_encoding</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><literal type="string">"IncludeResource"</literal></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>,

<argument><expr><name><name>prt_ps_courier_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_ROMAN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_def_font</name><argument_list>(<argument><expr><literal type="string">"F0"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_encoding</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>prt_line_height</name></expr></argument>,

<argument><expr><name><name>prt_ps_courier_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_ROMAN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><literal type="string">"IncludeResource"</literal></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>,

<argument><expr><name><name>prt_ps_courier_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_BOLD</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_def_font</name><argument_list>(<argument><expr><literal type="string">"F1"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_encoding</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>prt_line_height</name></expr></argument>,

<argument><expr><name><name>prt_ps_courier_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_BOLD</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><literal type="string">"IncludeResource"</literal></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>,

<argument><expr><name><name>prt_ps_courier_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_OBLIQUE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_def_font</name><argument_list>(<argument><expr><literal type="string">"F2"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_encoding</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>prt_line_height</name></expr></argument>,

<argument><expr><name><name>prt_ps_courier_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_OBLIQUE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><literal type="string">"IncludeResource"</literal></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>,

<argument><expr><name><name>prt_ps_courier_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_BOLDOBLIQUE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_def_font</name><argument_list>(<argument><expr><literal type="string">"F3"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_encoding</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>prt_line_height</name></expr></argument>,

<argument><expr><name><name>prt_ps_courier_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_BOLDOBLIQUE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><literal type="string">"IncludeResource"</literal></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>,

<argument><expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_ROMAN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_custom_cmap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><literal type="string">"IncludeResource"</literal></expr></argument>, <argument><expr><literal type="string">"cmap"</literal></expr></argument>, <argument><expr><name>prt_cmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prt_def_cidfont</name><argument_list>(<argument><expr><literal type="string">"CF0"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>prt_line_height</name></expr></argument>,

<argument><expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_ROMAN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_BOLD</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><literal type="string">"IncludeResource"</literal></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>,

<argument><expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_BOLD</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_custom_cmap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><literal type="string">"IncludeResource"</literal></expr></argument>, <argument><expr><literal type="string">"cmap"</literal></expr></argument>, <argument><expr><name>prt_cmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prt_def_cidfont</name><argument_list>(<argument><expr><literal type="string">"CF1"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>prt_line_height</name></expr></argument>,

<argument><expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_BOLD</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_dup_cidfont</name><argument_list>(<argument><expr><literal type="string">"CF0"</literal></expr></argument>, <argument><expr><literal type="string">"CF1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_OBLIQUE</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><literal type="string">"IncludeResource"</literal></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>,

<argument><expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_OBLIQUE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_custom_cmap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><literal type="string">"IncludeResource"</literal></expr></argument>, <argument><expr><literal type="string">"cmap"</literal></expr></argument>, <argument><expr><name>prt_cmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prt_def_cidfont</name><argument_list>(<argument><expr><literal type="string">"CF2"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>prt_line_height</name></expr></argument>,

<argument><expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_OBLIQUE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_dup_cidfont</name><argument_list>(<argument><expr><literal type="string">"CF0"</literal></expr></argument>, <argument><expr><literal type="string">"CF2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_BOLDOBLIQUE</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><literal type="string">"IncludeResource"</literal></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>,

<argument><expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_BOLDOBLIQUE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_custom_cmap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_dsc_resources</name><argument_list>(<argument><expr><literal type="string">"IncludeResource"</literal></expr></argument>, <argument><expr><literal type="string">"cmap"</literal></expr></argument>, <argument><expr><name>prt_cmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prt_def_cidfont</name><argument_list>(<argument><expr><literal type="string">"CF3"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>prt_line_height</name></expr></argument>,

<argument><expr><name><name>prt_ps_mb_font</name><operator>.</operator><name>ps_fontname</name><index>[<expr><name>PRT_PS_FONT_BOLDOBLIQUE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_dup_cidfont</name><argument_list>(<argument><expr><literal type="string">"CF1"</literal></expr></argument>, <argument><expr><literal type="string">"CF3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prt_def_var</name><argument_list>(<argument><expr><literal type="string">"UO"</literal></expr></argument>, <argument><expr><call><name>PRT_PS_FONT_TO_USER</name><argument_list>(<argument><expr><name>prt_line_height</name></expr></argument>,

<argument><expr><name><name>prt_ps_font</name><operator>-&gt;</operator><name>uline_offset</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_def_var</name><argument_list>(<argument><expr><literal type="string">"UW"</literal></expr></argument>, <argument><expr><call><name>PRT_PS_FONT_TO_USER</name><argument_list>(<argument><expr><name>prt_line_height</name></expr></argument>,

<argument><expr><name><name>prt_ps_font</name><operator>-&gt;</operator><name>uline_width</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_def_var</name><argument_list>(<argument><expr><literal type="string">"BO"</literal></expr></argument>, <argument><expr><name>prt_bgcol_offset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_noarg</name><argument_list>(<argument><expr><literal type="string">"EndSetup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>!</operator><name>prt_file_error</name></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mch_print_end</name><parameter_list>(<parameter><decl><type><name>prt_settings_T</name> <modifier>*</modifier></type><name>psettings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>prt_dsc_noarg</name><argument_list>(<argument><expr><literal type="string">"Trailer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_ints</name><argument_list>(<argument><expr><literal type="string">"Pages"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>prt_page_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_noarg</name><argument_list>(<argument><expr><literal type="string">"EOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_file</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\004"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_file_error</name> <operator>&amp;&amp;</operator> <name><name>psettings</name><operator>-&gt;</operator><name>outfile</name></name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>psettings</name><operator>-&gt;</operator><name>user_abort</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prt_ps_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>prt_ps_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_ps_fd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prt_message</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Sending to printer..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eval_printexpr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>prt_ps_file_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>psettings</name><operator>-&gt;</operator><name>arguments</name></name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E365: Failed to print PostScript file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>prt_message</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Print job sent."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_print_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mch_print_end_page</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>prt_flush_buffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"re sp\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_noarg</name><argument_list>(<argument><expr><literal type="string">"PageTrailer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><name>prt_file_error</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mch_print_begin_page</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>page_num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>prt_page_num</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>page_num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>page_num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>prt_page_num</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_ints</name><argument_list>(<argument><expr><literal type="string">"Page"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>page_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_dsc_noarg</name><argument_list>(<argument><expr><literal type="string">"BeginPageSetup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"sv\n0 g\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_in_ascii</name> <operator>=</operator> <operator>!</operator><name>prt_out_mbyte</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"CF0 sf\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"F0 sf\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>prt_fgcol</name> <operator>=</operator> <name>PRCOLOR_BLACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_bgcol</name> <operator>=</operator> <name>PRCOLOR_WHITE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_font</name> <operator>=</operator> <name>PRT_PS_FONT_ROMAN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_portrait</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_write_int</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>prt_mediasize</name><index>[<expr><name>prt_media</name></expr>]</index></name><operator>.</operator><name>width</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"sl\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prt_dsc_noarg</name><argument_list>(<argument><expr><literal type="string">"EndPageSetup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_bg</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_fg</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_bold</name> <operator>=</operator> <name>kNone</name></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><name>prt_file_error</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mch_print_blank_page</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>mch_print_begin_page</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><call><name>mch_print_end_page</name><argument_list>()</argument_list></call><operator>)</operator></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_pos_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>prt_pos_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>mch_print_start_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>margin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>page_line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>prt_pos_x</name> <operator>=</operator> <name>prt_left_margin</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>margin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_pos_x</name> <operator>-=</operator> <name>prt_number_width</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prt_pos_y</name> <operator>=</operator> <name>prt_top_margin</name> <operator>-</operator> <name>prt_first_line_height</name> <operator>-</operator>

<name>page_line</name> <operator>*</operator> <name>prt_line_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_attribute_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_moveto</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_half_width</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mch_print_text_out</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>textp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>textp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>ch_buff</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>char_width</name> <init>= <expr><name>prt_char_width</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_use_courier</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>in_ascii</name> <init>= <expr><operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">0x80</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_in_ascii</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_ascii</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_in_ascii</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_font</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_attribute_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>in_ascii</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_in_ascii</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_font</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_attribute_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>half_width</name> <init>= <expr><operator>(</operator><call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>half_width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>char_width</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_half_width</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>half_width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_half_width</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_pos_x</name> <operator>+=</operator> <name>prt_char_width</name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_moveto</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_attribute_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>half_width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_half_width</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_pos_x</name> <operator>+=</operator> <name>prt_char_width</name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_moveto</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_attribute_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_attribute_change</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_flush_buffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_text_run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_need_moveto</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_pos_x_moveto</name> <operator>=</operator> <name>prt_pos_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_pos_y_moveto</name> <operator>=</operator> <name>prt_pos_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_do_moveto</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_moveto</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_need_font</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prt_in_ascii</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"CF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>prt_write_int</name><argument_list>(<argument><expr><name>prt_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"sf\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_font</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_need_fgcol</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>prt_fgcol</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>prt_fgcol</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>prt_fgcol</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>r</name> <operator>/</operator> <literal type="number">255.0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>g</name> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"g\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>g</name> <operator>/</operator> <literal type="number">255.0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_real</name><argument_list>(<argument><expr><name>b</name> <operator>/</operator> <literal type="number">255.0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prt_write_string</name><argument_list>(<argument><expr><literal type="string">"r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prt_need_fgcol</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_bgcol</name> <operator>!=</operator> <name>PRCOLOR_WHITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_new_bgcol</name> <operator>=</operator> <name>prt_bgcol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_need_bgcol</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prt_do_bgcol</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prt_do_bgcol</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>prt_need_bgcol</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_need_underline</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prt_do_underline</name> <operator>=</operator> <name>prt_underline</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prt_need_underline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_attribute_change</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_do_conv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tofree</name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_conv</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_out_mbyte</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>prt_hexchar</name><index>[<expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>prt_hexchar</name><index>[<expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'('</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">')'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BS</name></expr>:</case> <expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TAB</name></expr>:</case> <expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>NL</name></expr>:</case> <expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FF</name></expr>:</case> <expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>CAR</name></expr>:</case> <expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'('</literal></expr>:</case> <expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">')'</literal></expr>:</case> <expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case> <expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ch_buff</name></expr></argument>, <argument><expr><literal type="string">"%03o"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name><name>ch_buff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name><name>ch_buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name><name>ch_buff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prt_ps_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_text_run</name> <operator>+=</operator> <name>char_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_pos_x</name> <operator>+=</operator> <name>char_width</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>next_pos</name> <init>= <expr><name>prt_pos_x</name> <operator>+</operator> <name>prt_char_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>need_break</name> <init>= <expr><operator>(</operator><name>next_pos</name> <operator>&gt;</operator> <name>prt_right_margin</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>next_pos</name> <operator>-</operator> <name>prt_right_margin</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>prt_right_margin</name> <operator>*</operator> <literal type="number">1e-5</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>need_break</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prt_flush_buffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>need_break</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mch_print_set_font</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TriState</name></type> <name>iBold</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TriState</name></type> <name>iItalic</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>TriState</name></type> <name>iUnderline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>font</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>iBold</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>font</name> <operator>|=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iItalic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>font</name> <operator>|=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>!=</operator> <name>prt_font</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_font</name> <operator>=</operator> <name>font</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_attribute_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_font</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prt_underline</name> <operator>!=</operator> <name>iUnderline</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_underline</name> <operator>=</operator> <name>iUnderline</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_attribute_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_underline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mch_print_set_bg</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>bgcol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>prt_bgcol</name> <operator>=</operator> <name>bgcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_attribute_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_bgcol</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mch_print_set_fg</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>fgcol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fgcol</name> <operator>!=</operator> <name>prt_fgcol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prt_fgcol</name> <operator>=</operator> <name>fgcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_attribute_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prt_need_fgcol</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
