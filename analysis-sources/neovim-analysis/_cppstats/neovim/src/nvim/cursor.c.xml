<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\cursor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/assert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/change.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fold.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/state.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cursor.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>getviscol</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>getviscol2</name><parameter_list>(<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>coladd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <name>coladd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>coladvance_force</name><parameter_list>(<parameter><decl><type><name>colnr_T</name></type> <name>wcol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>coladvance2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>wcol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wcol</name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VALID_VIRTCOL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_VIRTCOL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>=</operator> <name>wcol</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>coladvance</name><parameter_list>(<parameter><decl><type><name>colnr_T</name></type> <name>wcol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>getvpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>wcol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wcol</name> <operator>==</operator> <name>MAXCOL</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VALID_VIRTCOL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_VIRTCOL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>=</operator> <name>wcol</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>coladvance2</name><parameter_list>(

<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>addspaces</name></decl></parameter>, 

<parameter><decl><type><name>bool</name></type> <name>finetune</name></decl></parameter>, 

<parameter><decl><type><name>colnr_T</name></type> <name>wcol_arg</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>wcol</name> <init>= <expr><name>wcol_arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>csize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>one_more</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>head</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>one_more</name> <operator>=</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator>

<operator>||</operator> <name>restart_edit</name> <operator>!=</operator> <name>NUL</name>

<operator>||</operator> <operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sel</name> <operator>!=</operator> <literal type="char">'o'</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>ve_flags</name> <operator>&amp;</operator> <name>VE_ONEMORE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>wcol</name> <operator>&lt;</operator> <name>MAXCOL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wcol</name> <operator>&gt;=</operator> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>one_more</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>wcol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addspaces</name> <operator>||</operator> <name>finetune</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <call><name>linetabsize</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>one_more</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>finetune</name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>wcol</name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>csize</name> <operator>=</operator> <call><name>linetabsize</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>csize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>csize</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wcol</name> <operator>/</operator> <name>width</name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>csize</name> <operator>/</operator> <name>width</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name>wcol</name> <operator>&gt;</operator> <name>csize</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wcol</name> <operator>=</operator> <operator>(</operator><name>csize</name> <operator>/</operator> <name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>col</name> <operator>&lt;=</operator> <name>wcol</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>csize</name> <operator>=</operator> <call><name>win_lbr_chartabsize</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>csize</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <name>wcol</name> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>virtual_active</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>one_more</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>csize</name> <operator>-=</operator> <name>head</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>csize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <name>addspaces</name>

<operator>&amp;&amp;</operator> <name>wcol</name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>col</name> <operator>!=</operator> <name>wcol</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>!=</operator> <name>wcol</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>csize</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>correct</name> <init>= <expr><name>wcol</name> <operator>-</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>newline_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRICT_ADD</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>correct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newline_size</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newline</name> <init>= <expr><call><name>xmallocz</name><argument_list>(<argument><expr><name>newline_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newline</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newline</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>correct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>newline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_bytes</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>correct</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>wcol</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>linelen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>correct</name> <init>= <expr><name>wcol</name> <operator>-</operator> <name>col</name> <operator>-</operator> <name>csize</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newline</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>-</operator><name>correct</name> <operator>&gt;</operator> <name>csize</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRICT_ADD</name><argument_list>(<argument><expr><name>linelen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>csize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <call><name>xmallocz</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newline</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newline</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>csize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRICT_SUB</name><argument_list>(<argument><expr><name>linelen</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRICT_SUB</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newline</name> <operator>+</operator> <name>idx</name> <operator>+</operator> <name>csize</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>newline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_bytes</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <operator>(</operator><name>csize</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>correct</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>correct</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>finetune</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wcol</name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>one_more</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>scol</name></decl>, <decl><type ref="prev"/><name>ecol</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>coladd</name></name> <operator>=</operator> <name>ecol</name> <operator>-</operator> <name>scol</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>wcol</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;</operator> <operator>(</operator><name>MAXCOL</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>coladd</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mark_mb_adjustpos</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wcol</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <name>wcol</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>getvpos</name><parameter_list>(<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>wcol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>coladvance2</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><call><name>virtual_active</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>wcol</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>inc_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dec_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>linenr_T</name></type> <name>get_cursor_rel_lnum</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>cursor</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name>cursor</name> <operator>||</operator> <operator>!</operator><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>lnum</name> <operator>-</operator> <name>cursor</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>from_line</name> <init>= <expr><ternary><condition><expr><name>lnum</name> <operator>&lt;</operator> <name>cursor</name></expr> ?</condition><then> <expr><name>lnum</name></expr> </then><else>: <expr><name>cursor</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>to_line</name> <init>= <expr><ternary><condition><expr><name>lnum</name> <operator>&gt;</operator> <name>cursor</name></expr> ?</condition><then> <expr><name>lnum</name></expr> </then><else>: <expr><name>cursor</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>from_line</name> <operator>&lt;</operator> <name>to_line</name></expr>;</condition> <incr><expr><name>from_line</name><operator>++</operator></expr><operator>,</operator> <expr><name>retval</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>from_line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from_line</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>from_line</name> <operator>&gt;</operator> <name>to_line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>lnum</name> <operator>&lt;</operator> <name>cursor</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>retval</name></expr> </then><else>: <expr><name>retval</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_pos</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_cursor_lnum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_cursor_col</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>check_cursor_col_win</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_cursor_col_win</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>oldcol</name> <init>= <expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>oldcoladd</name> <init>= <expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>||</operator> <name>restart_edit</name>

<operator>||</operator> <operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sel</name> <operator>!=</operator> <literal type="char">'o'</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>ve_flags</name> <operator>&amp;</operator> <name>VE_ONEMORE</name><operator>)</operator>

<operator>||</operator> <call><name>virtual_active</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mark_mb_adjustpos</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>oldcol</name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ve_flags</name> <operator>==</operator> <name>VE_ALL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>oldcoladd</name> <operator>&gt;</operator> <name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <name>oldcoladd</name> <operator>-</operator> <name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cs</name></decl>, <decl><type ref="prev"/><name>ce</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>&gt;</operator> <name>ce</name> <operator>-</operator> <name>cs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <name>ce</name> <operator>-</operator> <name>cs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>check_cursor_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>adjust_cursor_col</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>VIsual_active</name> <operator>||</operator> <operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'o'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>leftcol_changed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>lastcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>changed_cline_bef_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lastcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <call><name>curwin_col_off</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>lastcol</name> <operator>-</operator> <name>p_siso</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>lastcol</name> <operator>-</operator> <name>p_siso</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>+</operator> <name>p_siso</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>+</operator> <name>p_siso</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>lastcol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>coladvance</name><argument_list>(<argument><expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>changed_cline_bef_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>gchar_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>pchar_cursor</name><parameter_list>(<parameter><decl><type><name>char_u</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call>

<operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name><operator>)</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_cursor_line_ptr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_cursor_pos_ptr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>+</operator>

<name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
