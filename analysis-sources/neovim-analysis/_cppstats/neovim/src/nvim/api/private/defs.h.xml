<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\api\private\defs.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_DICT_INIT</name></cpp:macro> <cpp:value>{.size = 0, .capacity = 0, .items = NULL}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_INIT</name></cpp:macro> <cpp:value>{.data = NULL, .size = 0}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJECT_INIT</name></cpp:macro> <cpp:value>{ .type = kObjectTypeNil }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_INIT</name></cpp:macro> <cpp:value>{ .type = kErrorTypeNone, .msg = NULL }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REMOTE_TYPE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef handle_T type</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_SET</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((e)-&gt;type != kErrorTypeNone)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ArrayOf</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Array</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DictionaryOf</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Dictionary</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{

<decl><name>kErrorTypeNone</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>kErrorTypeException</name></decl>,

<decl><name>kErrorTypeValidation</name></decl>

}</block></enum></type> <name>ErrorType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>kMessageTypeUnknown</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>kMessageTypeRequest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>kMessageTypeResponse</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>kMessageTypeNotification</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

}</block></enum></type> <name>MessageType</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERNAL_CALL_MASK</name></cpp:macro> <cpp:value>(((uint64_t)1) &lt;&lt; (sizeof(uint64_t) * 8 - 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIML_INTERNAL_CALL</name></cpp:macro> <cpp:value>INTERNAL_CALL_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_INTERNAL_CALL</name></cpp:macro> <cpp:value>(VIML_INTERNAL_CALL + 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_internal_call</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint64_t</name> <name>channel_id</name></expr></argument>)</argument_list>

<name>REAL_FATTR_ALWAYS_INLINE</name> <name>REAL_FATTR_CONST</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_internal_call</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>channel_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name>channel_id</name> <operator>&amp;</operator> <name>INTERNAL_CALL_MASK</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ErrorType</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

}</block></struct></type> <name>Error</name>;</typedef>

<typedef>typedef <type><name>bool</name></type> <name>Boolean</name>;</typedef>

<typedef>typedef <type><name>int64_t</name></type> <name>Integer</name>;</typedef>

<typedef>typedef <type><name>double</name></type> <name>Float</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>API_INTEGER_MAX</name></cpp:macro> <cpp:value>INT64_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>API_INTEGER_MIN</name></cpp:macro> <cpp:value>INT64_MIN</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>String</name>;</typedef>

<expr_stmt><expr><call><name>REMOTE_TYPE</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REMOTE_TYPE</name><argument_list>(<argument><expr><name>Window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REMOTE_TYPE</name><argument_list>(<argument><expr><name>Tabpage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><name><name>struct</name> <name>object</name></name></type> <name>Object</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>Object</name> <modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <name>capacity</name>;</decl_stmt>

}</block></struct></type> <name>Array</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>key_value_pair</name></name></type> <name>KeyValuePair</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>KeyValuePair</name> <modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <name>capacity</name>;</decl_stmt>

}</block></struct></type> <name>Dictionary</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>kObjectTypeNil</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>kObjectTypeBoolean</name></decl>,

<decl><name>kObjectTypeInteger</name></decl>,

<decl><name>kObjectTypeFloat</name></decl>,

<decl><name>kObjectTypeString</name></decl>,

<decl><name>kObjectTypeArray</name></decl>,

<decl><name>kObjectTypeDictionary</name></decl>,

<decl><name>kObjectTypeLuaRef</name></decl>,

<decl><name>kObjectTypeBuffer</name></decl>,

<decl><name>kObjectTypeWindow</name></decl>,

<decl><name>kObjectTypeTabpage</name></decl>,

}</block></enum></type> <name>ObjectType</name>;</typedef>

<struct>struct <name>object</name> <block>{

<decl_stmt><decl><type><name>ObjectType</name></type> <name>type</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>Boolean</name></type> <name>boolean</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Integer</name></type> <name>integer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Float</name></type> <name>floating</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>String</name></type> <name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dictionary</name></type> <name>dictionary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LuaRef</name></type> <name>luaref</name></decl>;</decl_stmt>

}</block> <decl><name>data</name></decl>;</union>

}</block>;</struct>

<struct>struct <name>key_value_pair</name> <block>{

<decl_stmt><decl><type><name>String</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Object</name></type> <name>value</name></decl>;</decl_stmt>

}</block>;</struct>

</unit>
