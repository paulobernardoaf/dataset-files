<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\api\ui.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/channel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/popupmnu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor_shape.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"api/ui.c.generated.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui_events_remote.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hl_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Integer</name></type> <name>cursor_row</name></decl>, <name>cursor_col</name>;</decl_stmt> 

<decl_stmt><decl><type><name>Integer</name></type> <name>client_row</name></decl>, <name>client_col</name>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>wildmenu_active</name></decl>;</decl_stmt>

}</block></struct></type> <name>UIData</name>;</typedef>

<expr_stmt><expr><specifier>static</specifier> <call><name>PMap</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>connected_uis</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>remote_ui_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

FUNC_API_NOEXPORT

<block>{<block_content>

<expr_stmt><expr><name>connected_uis</name> <operator>=</operator> <call><call><name>pmap_new</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>remote_ui_disconnect</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>)</parameter_list>

FUNC_API_NOEXPORT

<block>{<block_content>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><call><call><name>pmap_get</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>connected_uis</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ui</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>UIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<function_decl><type><name>pmap_del</name></type>(<name>uint64_t</name>)<parameter_list>(<parameter><decl><type><name>connected_uis</name></type></decl></parameter>, <parameter><decl><type><name>channel_id</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ui_detach_impl</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>remote_ui_wait_for_attach</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

FUNC_API_NOEXPORT

<block>{<block_content>

<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>find_channel</name><argument_list>(<argument><expr><name>CHAN_STDIO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>channel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LOOP_PROCESS_EVENTS_UNTIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><name><name>channel</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><call><call><name>pmap_has</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>connected_uis</name></expr></argument>, <argument><expr><name>CHAN_STDIO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>nvim_ui_attach</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>Dictionary</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>) <macro><name>FUNC_API_REMOTE_ONLY</name></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><call><name>pmap_has</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>connected_uis</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>,

<argument><expr><literal type="string">"UI already attached to channel: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,

<argument><expr><literal type="string">"Expected width &gt; 0 and height &gt; 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UI</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>pum_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>override</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>grid_resize</name></name> <operator>=</operator> <name>remote_ui_grid_resize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>grid_clear</name></name> <operator>=</operator> <name>remote_ui_grid_clear</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>grid_cursor_goto</name></name> <operator>=</operator> <name>remote_ui_grid_cursor_goto</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>mode_info_set</name></name> <operator>=</operator> <name>remote_ui_mode_info_set</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>update_menu</name></name> <operator>=</operator> <name>remote_ui_update_menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>busy_start</name></name> <operator>=</operator> <name>remote_ui_busy_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>busy_stop</name></name> <operator>=</operator> <name>remote_ui_busy_stop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>mouse_on</name></name> <operator>=</operator> <name>remote_ui_mouse_on</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>mouse_off</name></name> <operator>=</operator> <name>remote_ui_mouse_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>mode_change</name></name> <operator>=</operator> <name>remote_ui_mode_change</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>grid_scroll</name></name> <operator>=</operator> <name>remote_ui_grid_scroll</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>hl_attr_define</name></name> <operator>=</operator> <name>remote_ui_hl_attr_define</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>hl_group_set</name></name> <operator>=</operator> <name>remote_ui_hl_group_set</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>raw_line</name></name> <operator>=</operator> <name>remote_ui_raw_line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>bell</name></name> <operator>=</operator> <name>remote_ui_bell</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>visual_bell</name></name> <operator>=</operator> <name>remote_ui_visual_bell</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>default_colors_set</name></name> <operator>=</operator> <name>remote_ui_default_colors_set</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>remote_ui_flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>suspend</name></name> <operator>=</operator> <name>remote_ui_suspend</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>set_title</name></name> <operator>=</operator> <name>remote_ui_set_title</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>set_icon</name></name> <operator>=</operator> <name>remote_ui_set_icon</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>option_set</name></name> <operator>=</operator> <name>remote_ui_option_set</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>msg_set_pos</name></name> <operator>=</operator> <name>remote_ui_msg_set_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <name>remote_ui_event</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>inspect</name></name> <operator>=</operator> <name>remote_ui_inspect</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>options</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ui_set_option</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUIHlState</name></expr>]</index></name> <operator>||</operator> <name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUIMultigrid</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUIMessages</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUICmdline</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>UIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UIData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>channel_id</name></name> <operator>=</operator> <name>channel_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>hl_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>client_col</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>wildmenu_active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<function_decl><type><name>pmap_put</name></type>(<name>uint64_t</name>)<parameter_list>(<parameter><decl><type><name>connected_uis</name></type></decl></parameter>, <parameter><decl><type><name>channel_id</name></type></decl></parameter>, <parameter><decl><type><name>ui</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>ui_attach_impl</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<function><type><name>void</name></type> <name>ui_attach</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name></type> <name>enable_rgb</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Dictionary</name></type> <name>opts</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"rgb"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>enable_rgb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nvim_ui_attach</name><argument_list>(<argument><expr><name>channel_id</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>api_free_dictionary</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>nvim_ui_detach</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>) <macro><name>FUNC_API_REMOTE_ONLY</name></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>pmap_has</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>connected_uis</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>,

<argument><expr><literal type="string">"UI not attached to channel: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>remote_ui_disconnect</name><argument_list>(<argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<function><type><name>void</name></type> <name>nvim_ui_try_resize</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>) <macro><name>FUNC_API_REMOTE_ONLY</name></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>pmap_has</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>connected_uis</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>,

<argument><expr><literal type="string">"UI not attached to channel: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,

<argument><expr><literal type="string">"Expected width &gt; 0 and height &gt; 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><call><call><name>pmap_get</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>connected_uis</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<function><type><name>void</name></type> <name>nvim_ui_set_option</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>,

<parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>

FUNC_API_SINCE<parameter_list>(</parameter_list>1</function>) <macro><name>FUNC_API_REMOTE_ONLY</name></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>pmap_has</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>connected_uis</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>,

<argument><expr><literal type="string">"UI not attached to channel: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><call><call><name>pmap_get</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>connected_uis</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ui_set_option</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_set_option</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>init</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>,

<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"override"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeBoolean</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"override must be a Boolean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>override</name></name> <operator>=</operator> <name><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>boolean</name></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"rgb"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeBoolean</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"rgb must be a Boolean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name> <operator>=</operator> <name><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>boolean</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_popupmenu</name> <init>= <expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"popupmenu_external"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>UIExtension</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kUIExtCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ui_ext_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>kUIPopupmenu</name> <operator>&amp;&amp;</operator> <name>is_popupmenu</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeBoolean</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"%s must be a Boolean"</literal></expr></argument>,

<argument><expr><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>boolval</name> <init>= <expr><name><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>boolean</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>kUILinegrid</name> <operator>&amp;&amp;</operator> <name>boolval</name> <operator>!=</operator> <name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,

<argument><expr><literal type="string">"ext_linegrid option cannot be changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>boolval</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_set_ext_option</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>boolval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"No such UI option: %s"</literal></expr></argument>,

<argument><expr><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>nvim_ui_try_resize_grid</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>grid</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>) <macro><name>FUNC_API_REMOTE_ONLY</name></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>pmap_has</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>connected_uis</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>,

<argument><expr><literal type="string">"UI not attached to channel: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ui_grid_resize</name><argument_list>(<argument><expr><operator>(</operator><name>handle_T</name><operator>)</operator><name>grid</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>height</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<function><type><name>void</name></type> <name>nvim_ui_pum_set_height</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

FUNC_API_SINCE<parameter_list>(</parameter_list>6</function>) <macro><name>FUNC_API_REMOTE_ONLY</name></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><call><name>pmap_has</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>connected_uis</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>,

<argument><expr><literal type="string">"UI not attached to channel: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Expected pum height &gt; 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><call><call><name>pmap_get</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>connected_uis</name></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUIPopupmenu</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,

<argument><expr><literal type="string">"It must support the ext_popupmenu option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>pum_height</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>height</name></expr>;</expr_stmt>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>push_call</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>call</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>call</name> <operator>=</operator> <call><name>kv_A</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>array</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>kv_size</name><argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>kv_A</name><argument_list>(<argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>call</name> <operator>=</operator> <operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>call</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>call</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>array</name></name> <operator>=</operator> <name>call</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remote_ui_grid_clear</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>grid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"grid_clear"</literal></expr> </then><else>: <expr><literal type="string">"clear"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remote_ui_grid_resize</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>grid</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"grid_resize"</literal></expr> </then><else>: <expr><literal type="string">"resize"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remote_ui_grid_scroll</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>grid</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>top</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>bot</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>right</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>cols</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>bot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"grid_scroll"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>bot</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>right</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"set_scroll_region"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>args</name> <operator>=</operator> <operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"scroll"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>args</name> <operator>=</operator> <operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>height</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>width</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"set_scroll_region"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remote_ui_default_colors_set</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>rgb_fg</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>rgb_bg</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>rgb_sp</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>cterm_fg</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>cterm_bg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUITermColors</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HL_SET_DEFAULT_COLORS</name><argument_list>(<argument><expr><name>rgb_fg</name></expr></argument>, <argument><expr><name>rgb_bg</name></expr></argument>, <argument><expr><name>rgb_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>rgb_fg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>rgb_bg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>rgb_sp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>cterm_fg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>cterm_bg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"default_colors_set"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>args</name> <operator>=</operator> <operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name></expr> ?</condition><then> <expr><name>rgb_fg</name></expr> </then><else>: <expr><name>cterm_fg</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"update_fg"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>args</name> <operator>=</operator> <operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name></expr> ?</condition><then> <expr><name>rgb_bg</name></expr> </then><else>: <expr><name>cterm_bg</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"update_bg"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>args</name> <operator>=</operator> <operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name></expr> ?</condition><then> <expr><name>rgb_sp</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"update_sp"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remote_ui_hl_attr_define</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>HlAttrs</name></type> <name>rgb_attrs</name></decl></parameter>,

<parameter><decl><type><name>HlAttrs</name></type> <name>cterm_attrs</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><call><name>hlattrs2dict</name><argument_list>(<argument><expr><name>rgb_attrs</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><call><name>hlattrs2dict</name><argument_list>(<argument><expr><name>cterm_attrs</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUIHlState</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><call><name>copy_array</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"hl_attr_define"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remote_ui_highlight_set</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>hl_id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>hl_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Dictionary</name></type> <name>hl</name> <init>= <expr><call><name>hlattrs2dict</name><argument_list>(<argument><expr><call><name>syn_attr2entry</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"highlight_set"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remote_ui_grid_cursor_goto</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>grid</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"grid_cursor_goto"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>UIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cursor_row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cursor_col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remote_ui_cursor_goto</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remote_ui_cursor_goto</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>client_row</name></name> <operator>==</operator> <name>row</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>client_col</name></name> <operator>==</operator> <name>col</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>client_row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>client_col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"cursor_goto"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remote_ui_put</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cell</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>client_col</name></name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"put"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remote_ui_raw_line</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>grid</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>startcol</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>endcol</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>clearcol</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>clearattr</name></decl></parameter>,

<parameter><decl><type><name>LineFlags</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>schar_T</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>sattr_T</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>startcol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>cells</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>repeat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ncells</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>endcol</name><operator>-</operator><name>startcol</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_hl</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncells</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>repeat</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ncells</name><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>attrs</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>chunk</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>cell</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>cell</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>chunk</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>last_hl</name> <operator>||</operator> <name>repeat</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>cell</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_hl</name> <operator>=</operator> <name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>repeat</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>cell</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>repeat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>cells</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>endcol</name> <operator>&lt;</operator> <name>clearcol</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>cell</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>cell</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>cell</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>clearattr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>cell</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>clearcol</name><operator>-</operator><name>endcol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>cells</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>cells</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"grid_line"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>endcol</name><operator>-</operator><name>startcol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>remote_ui_cursor_goto</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>startcol</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remote_ui_highlight_set</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remote_ui_put</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>chunk</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utf_ambiguous_width</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>client_col</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>endcol</name> <operator>&lt;</operator> <name>clearcol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remote_ui_cursor_goto</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>endcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remote_ui_highlight_set</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>clearattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clearattr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>clearcol</name> <operator>==</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"eol_clear"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><decl><type><name>Integer</name></type> <name>c</name> <init>= <expr><name>endcol</name></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>clearcol</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>remote_ui_put</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remote_ui_flush</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remote_ui_cursor_goto</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cursor_row</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cursor_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"flush"</literal></expr></argument>, <argument><expr><operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rpc_send_event</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>channel_id</name></name></expr></argument>, <argument><expr><literal type="string">"redraw"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Array</name></type> <name>translate_contents</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>contents</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>new_contents</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>contents</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>item</name> <init>= <expr><name><name>contents</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>new_item</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>item</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>integer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Dictionary</name></type> <name>rgb_attrs</name> <init>= <expr><call><name>hlattrs2dict</name><argument_list>(<argument><expr><call><name>syn_attr2entry</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>new_item</name></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><name>rgb_attrs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>new_item</name></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Dictionary</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>new_item</name></expr></argument>, <argument><expr><call><name>copy_object</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>new_contents</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>new_item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>new_contents</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Array</name></type> <name>translate_firstarg</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>new_args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>contents</name> <init>= <expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>new_args</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><call><name>translate_contents</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>new_args</name></expr></argument>, <argument><expr><call><name>copy_object</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>new_args</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remote_ui_event</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>args_consumed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"cmdline_show"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>new_args</name> <init>= <expr><call><name>translate_firstarg</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"cmdline_block_show"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>new_args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>block</name> <init>= <expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>new_block</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>block</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>new_block</name></expr></argument>,

<argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><call><name>translate_contents</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>block</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>new_args</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>new_block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"cmdline_block_append"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>new_args</name> <init>= <expr><call><name>translate_firstarg</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUIWildmenu</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"popupmenu_show"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>wildmenu_active</name></name> <operator>=</operator> <operator>(</operator><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator>

<operator>||</operator> <operator>!</operator><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUIPopupmenu</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>wildmenu_active</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>new_args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>items</name> <init>= <expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>new_items</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>items</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>new_items</name></expr></argument>, <argument><expr><call><name>copy_object</name><argument_list>(<argument><expr><name><name>items</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>array</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>new_args</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>new_items</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"wildmenu_show"</literal></expr></argument>, <argument><expr><name>new_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>integer</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>new_args2</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>new_args2</name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="string">"wildmenu_select"</literal></expr></argument>, <argument><expr><name>new_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"popupmenu_select"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>wildmenu_active</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"wildmenu_select"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"popupmenu_hide"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>wildmenu_active</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"wildmenu_hide"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>my_args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>args_consumed</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>my_args</name></expr></argument>, <argument><expr><call><name>copy_object</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>my_args</name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>args_consumed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>push_call</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>my_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remote_ui_inspect</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Dictionary</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"chan"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>channel_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
