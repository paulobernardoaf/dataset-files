<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\event\stream.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/rbuffer.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>stream</name></name></type> <name>Stream</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>stream_read_cb</name>)<parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>eof</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>stream_write_cb</name>)<parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>stream_close_cb</name>)<parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>stream</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>closed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_eof</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>uv_pipe_t</name></type> <name>pipe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_tcp_t</name></type> <name>tcp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_idle_t</name></type> <name>idle</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uv_tty_t</name></type> <name>tty</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block> <decl><name>uv</name></decl>;</union>

<decl_stmt><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>uvstream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_buf_t</name></type> <name>uvbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_file</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_read_cb</name></type> <name>read_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_write_cb</name></type> <name>write_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_close_cb</name></type> <name>close_cb</name></decl>, <decl><type ref="prev"/><name>internal_close_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>close_cb_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>internal_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>fpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>curmem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>maxmem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pending_reqs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/stream.h.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
