<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\event\loop.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/process.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/loop.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>loop_init</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>uv_loop_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loop</name><operator>-&gt;</operator><name>recursive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loop</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loop</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>kl_init</name><argument_list>(<argument><expr><name>WatcherPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loop</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <call><name>multiqueue_new_parent</name><argument_list>(<argument><expr><name>loop_on_put</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loop</name><operator>-&gt;</operator><name>fast_events</name></name> <operator>=</operator> <call><name>multiqueue_new_child</name><argument_list>(<argument><expr><name><name>loop</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loop</name><operator>-&gt;</operator><name>thread_events</name></name> <operator>=</operator> <call><name>multiqueue_new_parent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_async_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>async</name></name></expr></argument>, <argument><expr><name>async_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_signal_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>children_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_timer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>children_kill_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_timer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>poll_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loop</name><operator>-&gt;</operator><name>poll_timer</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>loop_poll_events</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>loop</name><operator>-&gt;</operator><name>recursive</name></name><operator>++</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uv_run_mode</name></type> <name>mode</name> <init>= <expr><name>UV_RUN_ONCE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>timeout_expired</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ms</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name><name>loop</name><operator>-&gt;</operator><name>poll_timer</name><operator>.</operator><name>data</name></name><operator>)</operator> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>uv_timer_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>poll_timer</name></name></expr></argument>, <argument><expr><name>timer_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ms</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ms</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>UV_RUN_NOWAIT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ms</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout_expired</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name><name>loop</name><operator>-&gt;</operator><name>poll_timer</name><operator>.</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_timer_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>poll_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>loop</name><operator>-&gt;</operator><name>recursive</name></name><operator>--</operator></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>multiqueue_process_events</name><argument_list>(<argument><expr><name><name>loop</name><operator>-&gt;</operator><name>fast_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>timeout_expired</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>loop_schedule_fast</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multiqueue_put_event</name><argument_list>(<argument><expr><name><name>loop</name><operator>-&gt;</operator><name>thread_events</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_async_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>async</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>loop_schedule_deferred</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Event</name> <modifier>*</modifier></type><name>eventp</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>eventp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>eventp</name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>loop_schedule_fast</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><call><name>event_create</name><argument_list>(<argument><expr><name>loop_deferred_event</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>loop</name></expr></argument>, <argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>loop_deferred_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Event</name> <modifier>*</modifier></type><name>eventp</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>multiqueue_put_event</name><argument_list>(<argument><expr><name><name>loop</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><operator>*</operator><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>loop_on_put</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uv_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>loop_walk_cb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>bool</name></type> <name>loop_close</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wait</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>rv</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uv_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>children_watcher</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>children_kill_timer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>poll_timer</name></name></expr></argument>, <argument><expr><name>timer_close_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>async</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>start</name> <init>= <expr><ternary><condition><expr><name>wait</name></expr> ?</condition><then> <expr><call><name>os_hrtime</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>didstop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>didstop</name></expr> ?</condition><then> <expr><name>UV_RUN_DEFAULT</name></expr> </then><else>: <expr><name>UV_RUN_NOWAIT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>uv_loop_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>UV_EBUSY</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name>wait</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>elapsed_s</name> <init>= <expr><operator>(</operator><call><name>os_hrtime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>elapsed_s</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"uv_loop_close() hang?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_uv_handles</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>didstop</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>didstop</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_walk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><name>loop_walk_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didstop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></while>

<expr_stmt><expr><call><name>multiqueue_free</name><argument_list>(<argument><expr><name><name>loop</name><operator>-&gt;</operator><name>fast_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multiqueue_free</name><argument_list>(<argument><expr><name><name>loop</name><operator>-&gt;</operator><name>thread_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multiqueue_free</name><argument_list>(<argument><expr><name><name>loop</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kl_destroy</name><argument_list>(<argument><expr><name>WatcherPtr</name></expr></argument>, <argument><expr><name><name>loop</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>loop_purge</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multiqueue_purge_events</name><argument_list>(<argument><expr><name><name>loop</name><operator>-&gt;</operator><name>thread_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multiqueue_purge_events</name><argument_list>(<argument><expr><name><name>loop</name><operator>-&gt;</operator><name>fast_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>loop_size</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>rv</name> <init>= <expr><call><name>multiqueue_size</name><argument_list>(<argument><expr><name><name>loop</name><operator>-&gt;</operator><name>thread_events</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>async_cb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Loop</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>loop</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>multiqueue_empty</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>thread_events</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Event</name></type> <name>ev</name> <init>= <expr><call><name>multiqueue_get</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>thread_events</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>multiqueue_put_event</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>fast_events</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timer_cb</name><parameter_list>(<parameter><decl><type><name>uv_timer_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>timeout_expired</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>timeout_expired</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timer_close_cb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
