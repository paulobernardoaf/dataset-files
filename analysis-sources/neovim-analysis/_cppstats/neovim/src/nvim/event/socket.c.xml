<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\event\socket.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/socket.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/rstream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/wstream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/socket.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>socket_watcher_init</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>SocketWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>endpoint</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host_end</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>host_end</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <name>host_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>host_end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><name>host_end</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intmax_t</name></type> <name>iport</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <macro><name>try_getdigits</name><argument_list>(<argument>&amp;(char_u *){ (char_u *)port }</argument>, <argument>&amp;iport</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name> <operator>||</operator> <name><name>iport</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>iport</name></expr></argument> &gt;</argument_list></name> <name>UINT16_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"Invalid port: %s"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>UV_EINVAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>port</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>port</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uv_getaddrinfo_t</name></type> <name>request</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <macro><name>uv_getaddrinfo</name><argument_list>(<argument>&amp;loop-&gt;uv</argument>, <argument>&amp;request</argument>, <argument>NULL</argument>, <argument>addr</argument>, <argument>port</argument>,

<argument>&amp;(struct addrinfo){

.ai_family = AF_UNSPEC</argument>,

<argument>.ai_socktype = SOCK_STREAM</argument>,

<argument>}</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"Host lookup failed: %s"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>tcp</name><operator>.</operator><name>addrinfo</name></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>addrinfo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_tcp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>tcp</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_tcp_nodelay</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>tcp</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <call><name>STRUCT_CAST</name><argument_list>(<argument><expr><name>uv_stream_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>tcp</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>pipe</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <call><name>STRUCT_CAST</name><argument_list>(<argument><expr><name>uv_stream_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>pipe</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>watcher</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>close_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>socket_watcher_start</name><parameter_list>(<parameter><decl><type><name>SocketWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>, <parameter><decl><type><name>socket_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>UV_EINVAL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>watcher</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UV_TCP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name> <init>= <expr><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>tcp</name><operator>.</operator><name>addrinfo</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>ai</name></expr>;</condition> <incr><expr><name>ai</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>uv_tcp_bind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>tcp</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>uv_listen</name><argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>, <argument><expr><name>connection_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sas</name></decl>;</decl_stmt>

<macro><name>uv_tcp_getsockname</name><argument_list>(<argument>&amp;watcher-&gt;uv.tcp.handle</argument>, <argument>(struct sockaddr *)&amp;sas</argument>,

<argument>&amp;(int){ sizeof(sas) }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator>

<ternary><condition><expr><operator>(</operator><name><name>sas</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><call><name>STRUCT_CAST</name><argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sas</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>sin_port</name></expr>

</then><else>: <expr><operator>(</operator><call><name>STRUCT_CAST</name><argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sas</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>sin6_port</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name><operator>+</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">":%"</literal> <name>PRIu16</name></expr></argument>,

<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>uv_freeaddrinfo</name><argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>tcp</name><operator>.</operator><name>addrinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>uv_pipe_bind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>pipe</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>uv_listen</name><argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>, <argument><expr><name>connection_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>UV_EACCES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>path_tail</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_path_exists</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>UV_ENOENT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>socket_watcher_accept</name><parameter_list>(<parameter><decl><type><name>SocketWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>) <macro><name>FUNC_ATTR_NONNULL_ARG</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>watcher</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UV_TCP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>STRUCT_CAST</name><argument_list>(<argument><expr><name>uv_stream_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_tcp_init</name><argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>tcp</name><operator>.</operator><name>handle</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uv_tcp_t</name> <operator>*</operator><operator>)</operator><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_tcp_nodelay</name><argument_list>(<argument><expr><operator>(</operator><name>uv_tcp_t</name> <operator>*</operator><operator>)</operator><name>client</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>STRUCT_CAST</name><argument_list>(<argument><expr><name>uv_stream_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>pipe</name><operator>.</operator><name>handle</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uv_pipe_t</name> <operator>*</operator><operator>)</operator><name>client</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>uv_accept</name><argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><name>client</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stream_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<function><type><name>void</name></type> <name>socket_watcher_close</name><parameter_list>(<parameter><decl><type><name>SocketWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>socket_close_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)

<block>{<block_content>

<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>close_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><call><name>STRUCT_CAST</name><argument_list>(<argument><expr><name>uv_handle_t</name></expr></argument>, <argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>close_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>connection_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SocketWatcher</name> <modifier>*</modifier></type><name>watcher</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>watcher</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name>watcher</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>connection_cb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SocketWatcher</name> <modifier>*</modifier></type><name>watcher</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CREATE_EVENT</name><argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>connection_event</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>watcher</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_cb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SocketWatcher</name> <modifier>*</modifier></type><name>watcher</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>watcher</name><operator>-&gt;</operator><name>close_cb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>watcher</name><operator>-&gt;</operator><name>close_cb</name></name><argument_list>(<argument><expr><name>watcher</name></expr></argument>, <argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>connect_cb</name><parameter_list>(<parameter><decl><type><name>uv_connect_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_status</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_status</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>socket_connect</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_tcp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_connect_t</name></type> <name>req</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name>status</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>uv_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_tcp_t</name> <modifier>*</modifier></type><name>tcp</name> <init>= <expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>tcp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_getaddrinfo_t</name></type> <name>addr_req</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>addr_req</name><operator>.</operator><name>addrinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addrinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_tcp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host_end</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>host_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"tcp address must be host:port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>host_end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{ <expr><operator>.</operator><name>ai_family</name> <operator>=</operator> <name>AF_UNSPEC</name></expr>,

<expr><operator>.</operator><name>ai_socktype</name> <operator>=</operator> <name>SOCK_STREAM</name></expr>,

<expr><operator>.</operator><name>ai_flags</name> <operator>=</operator> <name>AI_NUMERICSERV</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>uv_getaddrinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>host_end</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to lookup host or port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name><name>addr_req</name><operator>.</operator><name>addrinfo</name></name></expr>;</expr_stmt>

<label><name>tcp_retry</name>:</label>

<expr_stmt><expr><call><name>uv_tcp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><name>tcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_tcp_nodelay</name><argument_list>(<argument><expr><name>tcp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_tcp_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>tcp</name></expr></argument>, <argument><expr><name><name>addrinfo</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name>connect_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uv_stream</name> <operator>=</operator> <operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><name>tcp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uv_pipe_t</name> <modifier>*</modifier></type><name>pipe</name> <init>= <expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><name>pipe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_pipe_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>pipe</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>connect_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uv_stream</name> <operator>=</operator> <call><name>STRUCT_CAST</name><argument_list>(<argument><expr><name>uv_stream_t</name></expr></argument>, <argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOOP_PROCESS_EVENTS_UNTIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>status</name> <operator>!=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>stream_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>uv_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_tcp</name> <operator>&amp;&amp;</operator> <name><name>addrinfo</name><operator>-&gt;</operator><name>ai_next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name><name>addrinfo</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>

<goto>goto <name>tcp_retry</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"connection refused"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>cleanup</name>:</label>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_freeaddrinfo</name><argument_list>(<argument><expr><name><name>addr_req</name><operator>.</operator><name>addrinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

</unit>
