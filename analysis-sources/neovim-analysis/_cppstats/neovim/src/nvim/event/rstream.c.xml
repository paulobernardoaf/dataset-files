<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\event\rstream.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/rstream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/rstream.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>rstream_init_fd</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 2</function>)

<block>{<block_content>

<expr_stmt><expr><call><name>stream_init</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rstream_init</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<function><type><name>void</name></type> <name>rstream_init_stream</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>uvstream</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 2</function>)

<block>{<block_content>

<expr_stmt><expr><call><name>stream_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>uvstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rstream_init</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<function><type><name>void</name></type> <name>rstream_init</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)

<block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>rbuffer_new</name><argument_list>(<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>full_cb</name></name> <operator>=</operator> <name>on_rbuffer_full</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>nonfull_cb</name></name> <operator>=</operator> <name>on_rbuffer_nonfull</name></expr>;</expr_stmt>

</block_content>}</block>

<function><type><name>void</name></type> <name>rstream_start</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>stream_read_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)

<block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>cb_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>uvstream</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>uvstream</name></name></expr></argument>, <argument><expr><name>alloc_cb</name></expr></argument>, <argument><expr><name>read_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>uv_idle_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>idle</name></name></expr></argument>, <argument><expr><name>fread_idle_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<function><type><name>void</name></type> <name>rstream_stop</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>uvstream</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_read_stop</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>uvstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>uv_idle_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_rbuffer_full</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rstream_stop</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_rbuffer_nonfull</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>read_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rstream_start</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>read_cb</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>cb_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>alloc_cb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggested</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>write_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>rbuffer_write_ptr</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>UV_BUF_LEN</name><argument_list>(<argument><expr><name>write_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_cb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>uvstream</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>uvstream</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <name>UV_ENOBUFS</name> <operator>||</operator> <name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cnt</name> <operator>==</operator> <name>UV_EOF</name> <operator>&amp;&amp;</operator> <name><name>uvstream</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UV_TTY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>invoke_read_cb</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"closing Stream (%p): %s (%s)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>stream</name></expr></argument>,

<argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cnt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>os_strerror</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_read_stop</name><argument_list>(<argument><expr><name>uvstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invoke_read_cb</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cnt</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>num_bytes</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rbuffer_produced</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invoke_read_cb</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fread_idle_cb</name><parameter_list>(<parameter><decl><type><name>uv_idle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uv_fs_t</name></type> <name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>write_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>uvbuf</name><operator>.</operator><name>base</name></name> <operator>=</operator> <call><name>rbuffer_write_ptr</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>uvbuf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>UV_BUF_LEN</name><argument_list>(<argument><expr><name>write_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uintmax_t</name></type> <name>fpos_intmax</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>fpos</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fpos_intmax</name> <operator>&gt;</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"stream offset overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>preserve_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>uv_fs_read</name><argument_list>(

<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>uvbuf</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fpos</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_fs_req_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>result</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_idle_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invoke_read_cb</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>req</name><operator>.</operator><name>result</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rbuffer_produced</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fpos</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invoke_read_cb</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>read_cb</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>eof</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>did_eof</name></name> <operator>=</operator> <name>eof</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>stream</name><operator>-&gt;</operator><name>read_cb</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>cb_data</name></name></expr></argument>, <argument><expr><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pending_reqs</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>closed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>pending_reqs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_close_handle</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>invoke_read_cb</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>eof</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pending_reqs</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CREATE_EVENT</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>events</name></name></expr></argument>,

<argument><expr><name>read_event</name></expr></argument>,

<argument><expr><literal type="number">3</literal></expr></argument>,

<argument><expr><name>stream</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name> <operator>*</operator><operator>)</operator><name>count</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
