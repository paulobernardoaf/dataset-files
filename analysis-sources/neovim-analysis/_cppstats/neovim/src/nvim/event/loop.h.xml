<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\event\loop.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/klist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/multiqueue.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>void</name> <modifier>*</modifier></type> <name>WatcherPtr</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_noop</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<macro><name>KLIST_INIT</name><argument_list>(<argument>WatcherPtr</argument>, <argument>WatcherPtr</argument>, <argument>_noop</argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct <name>loop</name> <block>{

<decl_stmt><decl><type><name>uv_loop_t</name></type> <name>uv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>thread_events</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>fast_events</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>klist_t</name><argument_list>(<argument><expr><name>WatcherPtr</name></expr></argument>)</argument_list></call> <operator>*</operator><name>children</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uv_signal_t</name></type> <name>children_watcher</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_timer_t</name></type> <name>children_kill_timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_timer_t</name></type> <name>poll_timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_async_t</name></type> <name>async</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>recursive</name></decl>;</decl_stmt>

}</block></struct></type> <name>Loop</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_EVENT</name><parameter_list>(<parameter><type><name>multiqueue</name></type></parameter>, <parameter><type><name>handler</name></type></parameter>, <parameter><type><name>argc</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (multiqueue) { multiqueue_put((multiqueue), (handler), argc, __VA_ARGS__); } else { void *argv[argc] = { __VA_ARGS__ }; (handler)(argv); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOP_PROCESS_EVENTS_UNTIL</name><parameter_list>(<parameter><type><name>loop</name></type></parameter>, <parameter><type><name>multiqueue</name></type></parameter>, <parameter><type><name>timeout</name></type></parameter>, <parameter><type><name>condition</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int remaining = timeout; uint64_t before = (remaining &gt; 0) ? os_hrtime() : 0; while (!(condition)) { LOOP_PROCESS_EVENTS(loop, multiqueue, remaining); if (remaining == 0) { break; } else if (remaining &gt; 0) { uint64_t now = os_hrtime(); remaining -= (int) ((now - before) / 1000000); before = now; if (remaining &lt;= 0) { break; } } } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOP_PROCESS_EVENTS</name><parameter_list>(<parameter><type><name>loop</name></type></parameter>, <parameter><type><name>multiqueue</name></type></parameter>, <parameter><type><name>timeout</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (multiqueue &amp;&amp; !multiqueue_empty(multiqueue)) { multiqueue_process_events(multiqueue); } else { loop_poll_events(loop, timeout); } } while (0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/loop.h.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
