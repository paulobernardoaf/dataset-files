<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\ex_eval.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/regexp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ex_eval.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THROW_ON_ERROR</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THROW_ON_ERROR_TRUE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THROW_ON_INTERRUPT</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THROW_ON_INTERRUPT_TRUE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_SKIP</name></cpp:macro> <cpp:value>(did_emsg || got_int || current_exception || (cstack-&gt;cs_idx &gt; 0 &amp;&amp; !(cstack-&gt;cs_flags[cstack-&gt;cs_idx - 1] &amp; CSF_ACTIVE)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>discard_pending_return</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tv_free((typval_T *)(p))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cause_abort</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>aborting</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>did_emsg</name> <operator>&amp;&amp;</operator> <name>force_abort</name><operator>)</operator> <operator>||</operator> <name>got_int</name> <operator>||</operator> <name>current_exception</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>update_force_abort</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cause_abort</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>force_abort</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>should_abort</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>retcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>retcode</name> <operator>==</operator> <name>FAIL</name> <operator>&amp;&amp;</operator> <name>trylevel</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>emsg_silent</name><operator>)</operator> <operator>||</operator> <call><name>aborting</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>aborted_in_try</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>force_abort</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cause_errthrow</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mesg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>severe</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ignore</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>msglist</name></name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>msglist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>plist</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>suppress_errthrow</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_emsg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cause_abort</name> <operator>=</operator> <name>force_abort</name></expr>;</expr_stmt>

<expr_stmt><expr><name>force_abort</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>trylevel</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>cause_abort</name><operator>)</operator> <operator>||</operator> <name>emsg_silent</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>current_exception</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mesg</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>e_interr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ignore</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cause_abort</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_exception</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current_exception</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ET_INTERRUPT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>discard_current_exception</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THROW_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>THROW_ON_ERROR</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>plist</name> <operator>=</operator> <name>msg_list</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>plist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>plist</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>plist</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>elem</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>msglist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>throw_msg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>plist</name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>plist</name> <operator>==</operator> <name>msg_list</name> <operator>||</operator> <name>severe</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmsg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmsg</name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>msg</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>tmsg</name></expr></argument>, <argument><expr><literal type="string">"Vim E"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>tmsg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>tmsg</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>tmsg</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>tmsg</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal>

<operator>&amp;&amp;</operator> <name><name>tmsg</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>msg_list</name><operator>)</operator><operator>-&gt;</operator><name>throw_msg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>tmsg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>msg_list</name><operator>)</operator><operator>-&gt;</operator><name>throw_msg</name></name> <operator>=</operator> <name>tmsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_msglist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>msglist</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>msglist</name></name> <modifier>*</modifier></type><name>messages</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>messages</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>messages</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>messages</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>messages</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>messages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>messages</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_global_msglist</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_msglist</name><argument_list>(<argument><expr><operator>*</operator><name>msg_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>msg_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_errthrow</name><parameter_list>(<parameter><decl><type><name>cstack_T</name> <modifier>*</modifier></type><name>cstack</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmdname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cause_abort</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cause_abort</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>force_abort</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>msg_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>throw_exception</name><argument_list>(<argument><expr><operator>*</operator><name>msg_list</name></expr></argument>, <argument><expr><name>ET_ERROR</name></expr></argument>, <argument><expr><name>cmdname</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_msglist</name><argument_list>(<argument><expr><operator>*</operator><name>msg_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cstack</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_throw</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>need_rethrow</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>msg_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_intthrow</name><parameter_list>(<parameter><decl><type><name>cstack_T</name> <modifier>*</modifier></type><name>cstack</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name> <operator>||</operator> <operator>(</operator><name>trylevel</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>current_exception</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THROW_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>THROW_ON_INTERRUPT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current_exception</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>discard_current_exception</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>current_exception</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current_exception</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ET_INTERRUPT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>discard_current_exception</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>throw_exception</name><argument_list>(<argument><expr><literal type="string">"Vim:Interrupt"</literal></expr></argument>, <argument><expr><name>ET_INTERRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_throw</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THROW_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_exception_string</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>except_type_T</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmdname</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>should_free</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ret</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mesg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ET_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>should_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mesg</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>msglist</name> <operator>*</operator><operator>)</operator><name>value</name><operator>)</operator><operator>-&gt;</operator><name>throw_msg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmdname</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>cmdlen</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>cmdname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Vim("</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <name>cmdlen</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>cmdlen</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"):"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>ret</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>cmdlen</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Vim:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>ret</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>mesg</name></expr>;</init><condition>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'E'</literal>

<operator>&amp;&amp;</operator> <call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal>

<operator>||</operator> <operator>(</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal>

<operator>||</operator> <operator>(</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name>p</name> <operator>==</operator> <name>mesg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mesg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>p</name><operator>-</operator><literal type="number">2</literal> <operator>&lt;</operator> <operator>&amp;</operator><name><name>mesg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>

<operator>||</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'"'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>val</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="string">" (%s)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mesg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>should_free</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>throw_exception</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>except_type_T</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmdname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>except_T</name> <modifier>*</modifier></type><name>excp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>should_free</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ET_USER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>, <argument><expr><literal type="string">"Vim"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>value</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>value</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>==</operator> <literal type="char">':'</literal>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>value</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>==</operator> <literal type="char">'('</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E608: Cannot :throw exceptions with 'Vim' prefix"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>excp</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>except_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ET_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>excp</name><operator>-&gt;</operator><name>messages</name></name> <operator>=</operator> <operator>(</operator>struct <name>msglist</name> <operator>*</operator><operator>)</operator><name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>excp</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>get_exception_string</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>cmdname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>excp</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>should_free</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>nomem</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>excp</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>excp</name><operator>-&gt;</operator><name>throw_name</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><ternary><condition><expr><name>sourcing_name</name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> </then><else>: <expr><name>sourcing_name</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>excp</name><operator>-&gt;</operator><name>throw_lnum</name></name> <operator>=</operator> <name>sourcing_lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">13</literal> <operator>||</operator> <name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_msg_silent</name> <init>= <expr><name>msg_silent</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>p_vfile</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Exception thrown: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>excp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>p_vfile</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>save_msg_silent</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_exception</name> <operator>=</operator> <name>excp</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

<label><name>nomem</name>:</label>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>excp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>suppress_errthrow</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_outofmem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><name>current_exception</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>discard_exception</name><parameter_list>(<parameter><decl><type><name>except_T</name> <modifier>*</modifier></type><name>excp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>was_finished</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_IObuff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>excp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"discard_exception()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">13</literal> <operator>||</operator> <name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_msg_silent</name> <init>= <expr><name>msg_silent</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>saved_IObuff</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>p_vfile</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><ternary><condition><expr><name>was_finished</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Exception finished: %s"</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Exception discarded: %s"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><name><name>excp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>p_vfile</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>no_wait_return</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>save_msg_silent</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>saved_IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>saved_IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>excp</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ET_INTERRUPT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>excp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>excp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ET_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_msglist</name><argument_list>(<argument><expr><name><name>excp</name><operator>-&gt;</operator><name>messages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>excp</name><operator>-&gt;</operator><name>throw_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>excp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>discard_current_exception</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current_exception</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>discard_exception</name><argument_list>(<argument><expr><name>current_exception</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_exception</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>need_rethrow</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>catch_exception</name><parameter_list>(<parameter><decl><type><name>except_T</name> <modifier>*</modifier></type><name>excp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>excp</name><operator>-&gt;</operator><name>caught</name></name> <operator>=</operator> <name>caught_stack</name></expr>;</expr_stmt>

<expr_stmt><expr><name>caught_stack</name> <operator>=</operator> <name>excp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_EXCEPTION</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>excp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>excp</name><operator>-&gt;</operator><name>throw_name</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>excp</name><operator>-&gt;</operator><name>throw_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s, line %"</literal> <name>PRId64</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>excp</name><operator>-&gt;</operator><name>throw_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>excp</name><operator>-&gt;</operator><name>throw_lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>excp</name><operator>-&gt;</operator><name>throw_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_THROWPOINT</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>IObuff</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_THROWPOINT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">13</literal> <operator>||</operator> <name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_msg_silent</name> <init>= <expr><name>msg_silent</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>p_vfile</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Exception caught: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>excp</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>p_vfile</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>save_msg_silent</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_exception</name><parameter_list>(<parameter><decl><type><name>except_T</name> <modifier>*</modifier></type><name>excp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>excp</name> <operator>!=</operator> <name>caught_stack</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"finish_exception()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>caught_stack</name> <operator>=</operator> <name><name>caught_stack</name><operator>-&gt;</operator><name>caught</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>caught_stack</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_EXCEPTION</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>caught_stack</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>caught_stack</name><operator>-&gt;</operator><name>throw_name</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>caught_stack</name><operator>-&gt;</operator><name>throw_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s, line %"</literal> <name>PRId64</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>caught_stack</name><operator>-&gt;</operator><name>throw_name</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>caught_stack</name><operator>-&gt;</operator><name>throw_lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>caught_stack</name><operator>-&gt;</operator><name>throw_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_THROWPOINT</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>IObuff</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_THROWPOINT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_EXCEPTION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_THROWPOINT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>discard_exception</name><argument_list>(<argument><expr><name>excp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RP_MAKE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RP_RESUME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RP_DISCARD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>report_pending</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pending</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mesg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_msg_silent</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>pending</name> <operator>&amp;</operator> <name>CSTP_THROW</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>action</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RP_MAKE</name></expr>:</case>

<expr_stmt><expr><name>mesg</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s made pending"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RP_RESUME</name></expr>:</case>

<expr_stmt><expr><name>mesg</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s resumed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>mesg</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s discarded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>pending</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CSTP_NONE</name></expr>:</case>

<return>return;</return>

<case>case <expr><name>CSTP_CONTINUE</name></expr>:</case>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">":continue"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CSTP_BREAK</name></expr>:</case>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">":break"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CSTP_FINISH</name></expr>:</case>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">":finish"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CSTP_RETURN</name></expr>:</case>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>get_return_cmd</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>&amp;</operator> <name>CSTP_THROW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><name>mesg</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Exception"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mesg</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>concat_str</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">": %s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>except_T</name> <operator>*</operator><operator>)</operator><name>value</name><operator>)</operator><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>pending</name> <operator>&amp;</operator> <name>CSTP_ERROR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pending</name> <operator>&amp;</operator> <name>CSTP_INTERRUPT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error and interrupt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>pending</name> <operator>&amp;</operator> <name>CSTP_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Interrupt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>save_msg_silent</name> <operator>=</operator> <name>msg_silent</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>save_msg_silent</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>==</operator> <name>CSTP_RETURN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>pending</name> <operator>&amp;</operator> <name>CSTP_THROW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>report_make_pending</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pending</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">14</literal> <operator>||</operator> <name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report_pending</name><argument_list>(<argument><expr><name>RP_MAKE</name></expr></argument>, <argument><expr><name>pending</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>report_resume_pending</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pending</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">14</literal> <operator>||</operator> <name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report_pending</name><argument_list>(<argument><expr><name>RP_RESUME</name></expr></argument>, <argument><expr><name>pending</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>report_discard_pending</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pending</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">14</literal> <operator>||</operator> <name>debug_break_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report_pending</name><argument_list>(<argument><expr><name>RP_DISCARD</name></expr></argument>, <argument><expr><name>pending</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_break_level</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_if</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cstack_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cstack</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name> <operator>==</operator> <name>CSTACK_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E579: :if nesting too deep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>CHECK_SKIP</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>eval_to_bool</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator> <name>CSF_ACTIVE</name> <operator>|</operator> <name>CSF_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator> <name>CSF_TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_endif</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>did_endif</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name>

<operator>&amp;</operator> <operator>(</operator><name>CSF_WHILE</name> <operator>|</operator> <name>CSF_FOR</name> <operator>|</operator> <name>CSF_TRY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E580: :endif without :if"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRUE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>dbg_check_skipped</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_intthrow</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name><name>eap</name><operator>-&gt;</operator><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_else</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cstack_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cstack</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>CHECK_SKIP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name>

<operator>&amp;</operator> <operator>(</operator><name>CSF_WHILE</name> <operator>|</operator> <name>CSF_FOR</name> <operator>|</operator> <name>CSF_TRY</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_else</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E581: :else without :if"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E582: :elseif without :if"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_ELSE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_else</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E583: multiple :else"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E584: :elseif after :else"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>||</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRUE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator> <name>CSF_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator> <name>CSF_ACTIVE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <call><name>dbg_check_skipped</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_intthrow</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_elseif</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>eval_to_bool</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator> <name>CSF_ACTIVE</name> <operator>|</operator> <name>CSF_TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator> <name>CSF_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>|=</operator> <name>CSF_ELSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_while</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cstack_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cstack</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name> <operator>==</operator> <name>CSTACK_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E585: :while/:for nesting too deep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_lflags</name></name> <operator>&amp;</operator> <name>CSL_HAD_LOOP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_looplevel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_line</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator>

<ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_while</name></expr> ?</condition><then> <expr><name>CSF_WHILE</name></expr> </then><else>: <expr><name>CSF_FOR</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>CHECK_SKIP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_while</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>eval_to_bool</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>fi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_lflags</name></name> <operator>&amp;</operator> <name>CSL_HAD_LOOP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_forinfo</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>eval_for_line</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_forinfo</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator> <name>fi</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <name>fi</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>skip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>next_for_item</name><argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_for_info</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_forinfo</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>CSF_ACTIVE</name> <operator>|</operator> <name>CSF_TRUE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_lflags</name></name> <operator>^=</operator> <name>CSL_HAD_LOOP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_lflags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CSL_HAD_LOOP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>|=</operator> <name>CSF_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_continue</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cstack_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cstack</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_looplevel</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E586: :continue without :while or :for"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>cleanup_conditionals</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>CSF_WHILE</name> <operator>|</operator> <name>CSF_FOR</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>CSF_WHILE</name> <operator>|</operator> <name>CSF_FOR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rewind_conditionals</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>CSF_TRY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_trylevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_lflags</name></name> <operator>|=</operator> <name>CSL_HAD_CONT</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>CSTP_CONTINUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>report_make_pending</name><argument_list>(<argument><expr><name>CSTP_CONTINUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_break</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cstack_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cstack</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_looplevel</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E587: :break without :while or :for"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>cleanup_conditionals</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>CSF_WHILE</name> <operator>|</operator> <name>CSF_FOR</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>CSF_WHILE</name> <operator>|</operator> <name>CSF_FOR</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>CSTP_BREAK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>report_make_pending</name><argument_list>(<argument><expr><name>CSTP_BREAK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_endwhile</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cstack_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cstack</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>csf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_endwhile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>e_while</name></expr>;</expr_stmt>

<expr_stmt><expr><name>csf</name> <operator>=</operator> <name>CSF_WHILE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>e_for</name></expr>;</expr_stmt>

<expr_stmt><expr><name>csf</name> <operator>=</operator> <name>CSF_FOR</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_looplevel</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>fl</name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fl</name> <operator>&amp;</operator> <name>csf</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fl</name> <operator>&amp;</operator> <name>CSF_WHILE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E732: Using :endfor with :while"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>fl</name> <operator>&amp;</operator> <name>CSF_FOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E733: Using :endwhile with :for"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fl</name> <operator>&amp;</operator> <operator>(</operator><name>CSF_WHILE</name> <operator>|</operator> <name>CSF_FOR</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fl</name> <operator>&amp;</operator> <name>CSF_TRY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <name>e_endif</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>fl</name> <operator>&amp;</operator> <name>CSF_FINALLY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <name>e_endtry</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>;</init> <condition><expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>fl</name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fl</name> <operator>&amp;</operator> <name>CSF_TRY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>fl</name> <operator>&amp;</operator> <name>CSF_FINALLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fl</name> <operator>&amp;</operator> <name>csf</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cleanup_conditionals</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>CSF_WHILE</name> <operator>|</operator> <name>CSF_FOR</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rewind_conditionals</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>CSF_TRY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_trylevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRUE</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_ACTIVE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>dbg_check_skipped</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_intthrow</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_lflags</name></name> <operator>|=</operator> <name>CSL_HAD_ENDLOOP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_throw</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'|'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>eval_to_string_skip</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>bool</name><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_argreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>throw_exception</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>, <argument><expr><name>ET_USER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>do_throw</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_throw</name><parameter_list>(<parameter><decl><type><name>cstack_T</name> <modifier>*</modifier></type><name>cstack</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inactivate_try</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>THROW_ON_ERROR_TRUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>did_emsg</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>THROW_ON_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inactivate_try</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>THROW_ON_INTERRUPT_TRUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>got_int</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>THROW_ON_INTERRUPT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inactivate_try</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>cleanup_conditionals</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>inactivate_try</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_CAUGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>|=</operator> <name>CSF_THROWN</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>CSF_THROWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>CSF_ACTIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_exception</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>current_exception</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_try</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cstack_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cstack</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name> <operator>==</operator> <name>CSTACK_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E601: :try nesting too deep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_trylevel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator> <name>CSF_TRY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator> <name>CSTP_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>CHECK_SKIP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>|=</operator> <name>CSF_ACTIVE</name> <operator>|</operator> <name>CSF_TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>emsg_silent</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>eslist_T</name> <modifier>*</modifier></type><name>elem</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>elem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>saved_emsg_silent</name></name> <operator>=</operator> <name>emsg_silent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_emsg_silent_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_emsg_silent_list</name></name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>|=</operator> <name>CSF_SILENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg_silent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_catch</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>give_up</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>caught</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>save_char</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_cpo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_got_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cstack_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cstack</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_trylevel</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E603: :catch without :try"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>give_up</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <call><name>get_end_emsg</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>;</init> <condition><expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRY</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_FINALLY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E604: :catch after :finally"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>give_up</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rewind_conditionals</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>CSF_WHILE</name> <operator>|</operator> <name>CSF_FOR</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_looplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>pat</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".*"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>skip_regexp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>give_up</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_exception</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRUE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_THROWN</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_CAUGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbg_check_skipped</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>do_intthrow</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>save_char</name> <operator>=</operator> <operator>*</operator><name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>save_cpo</name> <operator>=</operator> <name>p_cpo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg_off</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>RE_MAGIC</name> <operator>+</operator> <name>RE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg_off</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>save_char</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>save_cpo</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>prev_got_int</name> <operator>=</operator> <name>got_int</name></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>caught</name> <operator>=</operator> <call><name>vim_regexec_nl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name><name>current_exception</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>|=</operator> <name>prev_got_int</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>caught</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>|=</operator> <name>CSF_ACTIVE</name> <operator>|</operator> <name>CSF_CAUGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>got_int</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>catch_exception</name><argument_list>(<argument><expr><operator>(</operator><name>except_T</name> <operator>*</operator><operator>)</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_exception</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_exception</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>!=</operator> <name>current_exception</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"ex_catch()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_exception</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cleanup_conditionals</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>CSF_TRY</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_finally</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pending</name> <init>= <expr><name>CSTP_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cstack_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cstack</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_trylevel</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E606: :finally without :try"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <call><name>get_end_emsg</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRY</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>pending</name> <operator>=</operator> <name>CSTP_ERROR</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_FINALLY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E607: multiple :finally"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rewind_conditionals</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>CSF_WHILE</name> <operator>|</operator> <name>CSF_FOR</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_looplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRUE</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>dbg_check_skipped</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_intthrow</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cleanup_conditionals</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>CSF_TRY</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>==</operator> <name>CSTP_ERROR</name> <operator>||</operator> <name>did_emsg</name> <operator>||</operator> <name>got_int</name> <operator>||</operator> <name>current_exception</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>==</operator> <name>CSTP_RETURN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>report_discard_pending</name><argument_list>(<argument><expr><name>CSTP_RETURN</name></expr></argument>,

<argument><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_rettv</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>discard_pending_return</name><argument_list>(<argument><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_rettv</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>==</operator> <name>CSTP_ERROR</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_emsg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pending</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><name>THROW_ON_ERROR</name></expr> ?</condition><then> <expr><name>CSTP_THROW</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pending</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><name>current_exception</name></expr> ?</condition><then> <expr><name>CSTP_THROW</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pending</name> <operator>|=</operator> <ternary><condition><expr><name>did_emsg</name></expr> ?</condition><then> <expr><name>CSTP_ERROR</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>pending</name> <operator>|=</operator> <ternary><condition><expr><name>got_int</name></expr> ?</condition><then> <expr><name>CSTP_INTERRUPT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pending</name> <operator>&gt;=</operator> <name>CHAR_MIN</name> <operator>&amp;&amp;</operator> <name>pending</name> <operator>&lt;=</operator> <name>CHAR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>pending</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_exception</name>

<operator>&amp;&amp;</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_exception</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>!=</operator> <name>current_exception</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"ex_finally()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_lflags</name></name> <operator>|=</operator> <name>CSL_HAD_FINA</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_endtry</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rethrow</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pending</name> <init>= <expr><name>CSTP_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rettv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cstack_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cstack</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_trylevel</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E602: :endtry without :try"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <operator>(</operator><name>did_emsg</name> <operator>||</operator> <name>got_int</name> <operator>||</operator> <name>current_exception</name>

<operator>||</operator> <operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRUE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>errmsg</name></name> <operator>=</operator> <call><name>get_end_emsg</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>;</expr_stmt>

<do>do<block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>idx</name></expr>;</expr_stmt></block_content></block>

while <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRY</name><operator>)</operator></expr>)</condition>;</do>

<expr_stmt><expr><call><name>rewind_conditionals</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>CSF_WHILE</name> <operator>|</operator> <name>CSF_FOR</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_looplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_exception</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>discard_current_exception</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_exception</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRUE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_FINALLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rethrow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rethrow</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>skip</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_FINALLY</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>dbg_check_skipped</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_intthrow</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rethrow</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_exception</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_FINALLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rethrow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pending</name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>CSTP_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>==</operator> <name>CSTP_RETURN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rettv</name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_rettv</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>pending</name> <operator>&amp;</operator> <name>CSTP_THROW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>current_exception</name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_exception</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cleanup_conditionals</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>CSF_TRY</name> <operator>|</operator> <name>CSF_SILENT</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_trylevel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>report_resume_pending</name><argument_list>(<argument><expr><name>pending</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>pending</name> <operator>==</operator> <name>CSTP_RETURN</name><operator>)</operator></expr> ?</condition><then> <expr><name>rettv</name></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>pending</name> <operator>&amp;</operator> <name>CSTP_THROW</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>current_exception</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>pending</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CSTP_NONE</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>CSTP_CONTINUE</name></expr>:</case>

<expr_stmt><expr><call><name>ex_continue</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CSTP_BREAK</name></expr>:</case>

<expr_stmt><expr><call><name>ex_break</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CSTP_RETURN</name></expr>:</case>

<expr_stmt><expr><call><name>do_return</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CSTP_FINISH</name></expr>:</case>

<expr_stmt><expr><call><name>do_finish</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>&amp;</operator> <name>CSTP_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>&amp;</operator> <name>CSTP_INTERRUPT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>&amp;</operator> <name>CSTP_THROW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rethrow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rethrow</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_throw</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>enter_cleanup</name><parameter_list>(<parameter><decl><type><name>cleanup_T</name> <modifier>*</modifier></type><name>csp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pending</name> <init>= <expr><name>CSTP_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>did_emsg</name> <operator>||</operator> <name>got_int</name> <operator>||</operator> <name>current_exception</name> <operator>||</operator> <name>need_rethrow</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>csp</name><operator>-&gt;</operator><name>pending</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>did_emsg</name></expr> ?</condition><then> <expr><name>CSTP_ERROR</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><name>got_int</name></expr> ?</condition><then> <expr><name>CSTP_INTERRUPT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><name>current_exception</name></expr> ?</condition><then> <expr><name>CSTP_THROW</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><name>need_rethrow</name></expr> ?</condition><then> <expr><name>CSTP_THROW</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_exception</name> <operator>||</operator> <name>need_rethrow</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>csp</name><operator>-&gt;</operator><name>exception</name></name> <operator>=</operator> <name>current_exception</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_exception</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>csp</name><operator>-&gt;</operator><name>exception</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>did_emsg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>force_abort</name> <operator>|=</operator> <name>cause_abort</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cause_abort</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>got_int</name> <operator>=</operator> <name>need_rethrow</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_exception</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>report_make_pending</name><argument_list>(<argument><expr><name>pending</name></expr></argument>, <argument><expr><name><name>csp</name><operator>-&gt;</operator><name>exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>csp</name><operator>-&gt;</operator><name>pending</name></name> <operator>=</operator> <name>CSTP_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csp</name><operator>-&gt;</operator><name>exception</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>leave_cleanup</name><parameter_list>(<parameter><decl><type><name>cleanup_T</name> <modifier>*</modifier></type><name>csp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pending</name> <init>= <expr><name><name>csp</name><operator>-&gt;</operator><name>pending</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>==</operator> <name>CSTP_NONE</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call> <operator>||</operator> <name>need_rethrow</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>&amp;</operator> <name>CSTP_THROW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>discard_exception</name><argument_list>(<argument><expr><name><name>csp</name><operator>-&gt;</operator><name>exception</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>report_discard_pending</name><argument_list>(<argument><expr><name>pending</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_global_msglist</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>&amp;</operator> <name>CSTP_THROW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>current_exception</name> <operator>=</operator> <name><name>csp</name><operator>-&gt;</operator><name>exception</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>pending</name> <operator>&amp;</operator> <name>CSTP_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cause_abort</name> <operator>=</operator> <name>force_abort</name></expr>;</expr_stmt>

<expr_stmt><expr><name>force_abort</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>&amp;</operator> <name>CSTP_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>&amp;</operator> <name>CSTP_INTERRUPT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>&amp;</operator> <name>CSTP_THROW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>need_rethrow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>report_resume_pending</name><argument_list>(

<argument><expr><name>pending</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>pending</name> <operator>&amp;</operator> <name>CSTP_THROW</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>current_exception</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cleanup_conditionals</name><parameter_list>(<parameter><decl><type><name>cstack_T</name> <modifier>*</modifier></type><name>cstack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>searched_cond</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inclusive</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stop</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>;</init> <condition><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>did_emsg</name> <operator>||</operator> <name>got_int</name> <operator>||</operator> <operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_FINALLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CSTP_NONE</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>CSTP_CONTINUE</name></expr>:</case>

<case>case <expr><name>CSTP_BREAK</name></expr>:</case>

<case>case <expr><name>CSTP_FINISH</name></expr>:</case>

<expr_stmt><expr><call><name>report_discard_pending</name><argument_list>(<argument><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>CSTP_NONE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CSTP_RETURN</name></expr>:</case>

<expr_stmt><expr><call><name>report_discard_pending</name><argument_list>(<argument><expr><name>CSTP_RETURN</name></expr></argument>,

<argument><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_rettv</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>discard_pending_return</name><argument_list>(<argument><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_rettv</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>CSTP_NONE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_FINALLY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSTP_THROW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>discard_exception</name><argument_list>(<argument><expr><operator>(</operator><name>except_T</name> <operator>*</operator><operator>)</operator>

<name><name>cstack</name><operator>-&gt;</operator><name>cs_exception</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>report_discard_pending</name><argument_list>(<argument><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_pending</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>CSTP_NONE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_FINALLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_ACTIVE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_CAUGHT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>finish_exception</name><argument_list>(<argument><expr><operator>(</operator><name>except_T</name> <operator>*</operator><operator>)</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_exception</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRUE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>searched_cond</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>inclusive</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>searched_cond</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inclusive</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>CSF_ACTIVE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stop</name> <operator>&amp;&amp;</operator> <name>searched_cond</name> <operator>!=</operator> <operator>(</operator><name>CSF_TRY</name> <operator>|</operator> <name>CSF_SILENT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_TRY</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_SILENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>eslist_T</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>

<expr_stmt><expr><name>elem</name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>cs_emsg_silent_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_emsg_silent_list</name></name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg_silent</name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>saved_emsg_silent</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>CSF_SILENT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stop</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>idx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>get_end_emsg</name><parameter_list>(<parameter><decl><type><name>cstack_T</name> <modifier>*</modifier></type><name>cstack</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_WHILE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>e_endwhile</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_FOR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>e_endfor</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>e_endif</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>rewind_conditionals</name><parameter_list>(<parameter><decl><type><name>cstack_T</name> <modifier>*</modifier></type><name>cstack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cond_type</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cond_level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name> <operator>&gt;</operator> <name>idx</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>&amp;</operator> <name>cond_type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><operator>*</operator><name>cond_level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_flags</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name> <operator>&amp;</operator> <name>CSF_FOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_for_info</name><argument_list>(<argument><expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_forinfo</name><index>[<expr><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name><name>cstack</name><operator>-&gt;</operator><name>cs_idx</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ex_endfunction</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E193: :endfunction not inside a function"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>has_loop_cmd</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>modifier_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

</unit>
