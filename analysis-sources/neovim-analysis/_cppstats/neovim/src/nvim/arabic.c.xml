<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\arabic.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/arabic.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_COMMA</name></cpp:macro> <cpp:value>0x060C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_SEMICOLON</name></cpp:macro> <cpp:value>0x061B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_QUESTION</name></cpp:macro> <cpp:value>0x061F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_HAMZA</name></cpp:macro> <cpp:value>0x0621</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ALEF_MADDA</name></cpp:macro> <cpp:value>0x0622</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ALEF_HAMZA_ABOVE</name></cpp:macro> <cpp:value>0x0623</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_WAW_HAMZA</name></cpp:macro> <cpp:value>0x0624</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ALEF_HAMZA_BELOW</name></cpp:macro> <cpp:value>0x0625</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_YEH_HAMZA</name></cpp:macro> <cpp:value>0x0626</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ALEF</name></cpp:macro> <cpp:value>0x0627</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_BEH</name></cpp:macro> <cpp:value>0x0628</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_TEH_MARBUTA</name></cpp:macro> <cpp:value>0x0629</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_TEH</name></cpp:macro> <cpp:value>0x062a</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_THEH</name></cpp:macro> <cpp:value>0x062b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_JEEM</name></cpp:macro> <cpp:value>0x062c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_HAH</name></cpp:macro> <cpp:value>0x062d</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_KHAH</name></cpp:macro> <cpp:value>0x062e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_DAL</name></cpp:macro> <cpp:value>0x062f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_THAL</name></cpp:macro> <cpp:value>0x0630</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_REH</name></cpp:macro> <cpp:value>0x0631</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ZAIN</name></cpp:macro> <cpp:value>0x0632</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_SEEN</name></cpp:macro> <cpp:value>0x0633</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_SHEEN</name></cpp:macro> <cpp:value>0x0634</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_SAD</name></cpp:macro> <cpp:value>0x0635</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_DAD</name></cpp:macro> <cpp:value>0x0636</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_TAH</name></cpp:macro> <cpp:value>0x0637</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ZAH</name></cpp:macro> <cpp:value>0x0638</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_AIN</name></cpp:macro> <cpp:value>0x0639</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_GHAIN</name></cpp:macro> <cpp:value>0x063a</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_TATWEEL</name></cpp:macro> <cpp:value>0x0640</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_FEH</name></cpp:macro> <cpp:value>0x0641</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_QAF</name></cpp:macro> <cpp:value>0x0642</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_KAF</name></cpp:macro> <cpp:value>0x0643</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_LAM</name></cpp:macro> <cpp:value>0x0644</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_MEEM</name></cpp:macro> <cpp:value>0x0645</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_NOON</name></cpp:macro> <cpp:value>0x0646</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_HEH</name></cpp:macro> <cpp:value>0x0647</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_WAW</name></cpp:macro> <cpp:value>0x0648</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ALEF_MAKSURA</name></cpp:macro> <cpp:value>0x0649</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_YEH</name></cpp:macro> <cpp:value>0x064a</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_FATHATAN</name></cpp:macro> <cpp:value>0x064b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_DAMMATAN</name></cpp:macro> <cpp:value>0x064c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_KASRATAN</name></cpp:macro> <cpp:value>0x064d</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_FATHA</name></cpp:macro> <cpp:value>0x064e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_DAMMA</name></cpp:macro> <cpp:value>0x064f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_KASRA</name></cpp:macro> <cpp:value>0x0650</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_SHADDA</name></cpp:macro> <cpp:value>0x0651</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_SUKUN</name></cpp:macro> <cpp:value>0x0652</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_MADDA_ABOVE</name></cpp:macro> <cpp:value>0x0653</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_HAMZA_ABOVE</name></cpp:macro> <cpp:value>0x0654</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_HAMZA_BELOW</name></cpp:macro> <cpp:value>0x0655</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ZERO</name></cpp:macro> <cpp:value>0x0660</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ONE</name></cpp:macro> <cpp:value>0x0661</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_TWO</name></cpp:macro> <cpp:value>0x0662</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_THREE</name></cpp:macro> <cpp:value>0x0663</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_FOUR</name></cpp:macro> <cpp:value>0x0664</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_FIVE</name></cpp:macro> <cpp:value>0x0665</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_SIX</name></cpp:macro> <cpp:value>0x0666</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_SEVEN</name></cpp:macro> <cpp:value>0x0667</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_EIGHT</name></cpp:macro> <cpp:value>0x0668</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_NINE</name></cpp:macro> <cpp:value>0x0669</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_PERCENT</name></cpp:macro> <cpp:value>0x066a</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_DECIMAL</name></cpp:macro> <cpp:value>0x066b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_THOUSANDS</name></cpp:macro> <cpp:value>0x066c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_STAR</name></cpp:macro> <cpp:value>0x066d</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_MINI_ALEF</name></cpp:macro> <cpp:value>0x0670</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_FATHATAN</name></cpp:macro> <cpp:value>0xfe70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_TATWEEL_FATHATAN</name></cpp:macro> <cpp:value>0xfe71</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_DAMMATAN</name></cpp:macro> <cpp:value>0xfe72</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_KASRATAN</name></cpp:macro> <cpp:value>0xfe74</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_FATHA</name></cpp:macro> <cpp:value>0xfe76</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_FATHA</name></cpp:macro> <cpp:value>0xfe77</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_DAMMA</name></cpp:macro> <cpp:value>0xfe78</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_DAMMA</name></cpp:macro> <cpp:value>0xfe79</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_KASRA</name></cpp:macro> <cpp:value>0xfe7a</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_KASRA</name></cpp:macro> <cpp:value>0xfe7b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_SHADDA</name></cpp:macro> <cpp:value>0xfe7c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_SHADDA</name></cpp:macro> <cpp:value>0xfe7d</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_SUKUN</name></cpp:macro> <cpp:value>0xfe7e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_SUKUN</name></cpp:macro> <cpp:value>0xfe7f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_HAMZA</name></cpp:macro> <cpp:value>0xfe80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_ALEF_MADDA</name></cpp:macro> <cpp:value>0xfe81</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_ALEF_MADDA</name></cpp:macro> <cpp:value>0xfe82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_ALEF_HAMZA_ABOVE</name></cpp:macro> <cpp:value>0xfe83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_ALEF_HAMZA_ABOVE</name></cpp:macro> <cpp:value>0xfe84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_WAW_HAMZA</name></cpp:macro> <cpp:value>0xfe85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_WAW_HAMZA</name></cpp:macro> <cpp:value>0xfe86</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_ALEF_HAMZA_BELOW</name></cpp:macro> <cpp:value>0xfe87</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_ALEF_HAMZA_BELOW</name></cpp:macro> <cpp:value>0xfe88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_YEH_HAMZA</name></cpp:macro> <cpp:value>0xfe89</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_YEH_HAMZA</name></cpp:macro> <cpp:value>0xfe8a</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_YEH_HAMZA</name></cpp:macro> <cpp:value>0xfe8b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_YEH_HAMZA</name></cpp:macro> <cpp:value>0xfe8c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_ALEF</name></cpp:macro> <cpp:value>0xfe8d</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_ALEF</name></cpp:macro> <cpp:value>0xfe8e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_BEH</name></cpp:macro> <cpp:value>0xfe8f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_BEH</name></cpp:macro> <cpp:value>0xfe90</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_BEH</name></cpp:macro> <cpp:value>0xfe91</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_BEH</name></cpp:macro> <cpp:value>0xfe92</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_TEH_MARBUTA</name></cpp:macro> <cpp:value>0xfe93</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_TEH_MARBUTA</name></cpp:macro> <cpp:value>0xfe94</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_TEH</name></cpp:macro> <cpp:value>0xfe95</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_TEH</name></cpp:macro> <cpp:value>0xfe96</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_TEH</name></cpp:macro> <cpp:value>0xfe97</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_TEH</name></cpp:macro> <cpp:value>0xfe98</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_THEH</name></cpp:macro> <cpp:value>0xfe99</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_THEH</name></cpp:macro> <cpp:value>0xfe9a</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_THEH</name></cpp:macro> <cpp:value>0xfe9b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_THEH</name></cpp:macro> <cpp:value>0xfe9c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_JEEM</name></cpp:macro> <cpp:value>0xfe9d</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_JEEM</name></cpp:macro> <cpp:value>0xfe9e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_JEEM</name></cpp:macro> <cpp:value>0xfe9f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_JEEM</name></cpp:macro> <cpp:value>0xfea0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_HAH</name></cpp:macro> <cpp:value>0xfea1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_HAH</name></cpp:macro> <cpp:value>0xfea2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_HAH</name></cpp:macro> <cpp:value>0xfea3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_HAH</name></cpp:macro> <cpp:value>0xfea4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_KHAH</name></cpp:macro> <cpp:value>0xfea5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_KHAH</name></cpp:macro> <cpp:value>0xfea6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_KHAH</name></cpp:macro> <cpp:value>0xfea7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_KHAH</name></cpp:macro> <cpp:value>0xfea8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_DAL</name></cpp:macro> <cpp:value>0xfea9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_DAL</name></cpp:macro> <cpp:value>0xfeaa</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_THAL</name></cpp:macro> <cpp:value>0xfeab</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_THAL</name></cpp:macro> <cpp:value>0xfeac</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_REH</name></cpp:macro> <cpp:value>0xfead</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_REH</name></cpp:macro> <cpp:value>0xfeae</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_ZAIN</name></cpp:macro> <cpp:value>0xfeaf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_ZAIN</name></cpp:macro> <cpp:value>0xfeb0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_SEEN</name></cpp:macro> <cpp:value>0xfeb1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_SEEN</name></cpp:macro> <cpp:value>0xfeb2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_SEEN</name></cpp:macro> <cpp:value>0xfeb3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_SEEN</name></cpp:macro> <cpp:value>0xfeb4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_SHEEN</name></cpp:macro> <cpp:value>0xfeb5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_SHEEN</name></cpp:macro> <cpp:value>0xfeb6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_SHEEN</name></cpp:macro> <cpp:value>0xfeb7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_SHEEN</name></cpp:macro> <cpp:value>0xfeb8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_SAD</name></cpp:macro> <cpp:value>0xfeb9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_SAD</name></cpp:macro> <cpp:value>0xfeba</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_SAD</name></cpp:macro> <cpp:value>0xfebb</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_SAD</name></cpp:macro> <cpp:value>0xfebc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_DAD</name></cpp:macro> <cpp:value>0xfebd</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_DAD</name></cpp:macro> <cpp:value>0xfebe</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_DAD</name></cpp:macro> <cpp:value>0xfebf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_DAD</name></cpp:macro> <cpp:value>0xfec0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_TAH</name></cpp:macro> <cpp:value>0xfec1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_TAH</name></cpp:macro> <cpp:value>0xfec2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_TAH</name></cpp:macro> <cpp:value>0xfec3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_TAH</name></cpp:macro> <cpp:value>0xfec4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_ZAH</name></cpp:macro> <cpp:value>0xfec5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_ZAH</name></cpp:macro> <cpp:value>0xfec6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_ZAH</name></cpp:macro> <cpp:value>0xfec7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_ZAH</name></cpp:macro> <cpp:value>0xfec8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_AIN</name></cpp:macro> <cpp:value>0xfec9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_AIN</name></cpp:macro> <cpp:value>0xfeca</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_AIN</name></cpp:macro> <cpp:value>0xfecb</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_AIN</name></cpp:macro> <cpp:value>0xfecc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_GHAIN</name></cpp:macro> <cpp:value>0xfecd</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_GHAIN</name></cpp:macro> <cpp:value>0xfece</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_GHAIN</name></cpp:macro> <cpp:value>0xfecf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_GHAIN</name></cpp:macro> <cpp:value>0xfed0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_FEH</name></cpp:macro> <cpp:value>0xfed1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_FEH</name></cpp:macro> <cpp:value>0xfed2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_FEH</name></cpp:macro> <cpp:value>0xfed3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_FEH</name></cpp:macro> <cpp:value>0xfed4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_QAF</name></cpp:macro> <cpp:value>0xfed5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_QAF</name></cpp:macro> <cpp:value>0xfed6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_QAF</name></cpp:macro> <cpp:value>0xfed7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_QAF</name></cpp:macro> <cpp:value>0xfed8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_KAF</name></cpp:macro> <cpp:value>0xfed9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_KAF</name></cpp:macro> <cpp:value>0xfeda</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_KAF</name></cpp:macro> <cpp:value>0xfedb</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_KAF</name></cpp:macro> <cpp:value>0xfedc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_LAM</name></cpp:macro> <cpp:value>0xfedd</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_LAM</name></cpp:macro> <cpp:value>0xfede</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_LAM</name></cpp:macro> <cpp:value>0xfedf</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_LAM</name></cpp:macro> <cpp:value>0xfee0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_MEEM</name></cpp:macro> <cpp:value>0xfee1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_MEEM</name></cpp:macro> <cpp:value>0xfee2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_MEEM</name></cpp:macro> <cpp:value>0xfee3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_MEEM</name></cpp:macro> <cpp:value>0xfee4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_NOON</name></cpp:macro> <cpp:value>0xfee5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_NOON</name></cpp:macro> <cpp:value>0xfee6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_NOON</name></cpp:macro> <cpp:value>0xfee7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_NOON</name></cpp:macro> <cpp:value>0xfee8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_HEH</name></cpp:macro> <cpp:value>0xfee9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_HEH</name></cpp:macro> <cpp:value>0xfeea</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_HEH</name></cpp:macro> <cpp:value>0xfeeb</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_HEH</name></cpp:macro> <cpp:value>0xfeec</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_WAW</name></cpp:macro> <cpp:value>0xfeed</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_WAW</name></cpp:macro> <cpp:value>0xfeee</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_ALEF_MAKSURA</name></cpp:macro> <cpp:value>0xfeef</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_ALEF_MAKSURA</name></cpp:macro> <cpp:value>0xfef0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_YEH</name></cpp:macro> <cpp:value>0xfef1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_YEH</name></cpp:macro> <cpp:value>0xfef2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_i_YEH</name></cpp:macro> <cpp:value>0xfef3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_m_YEH</name></cpp:macro> <cpp:value>0xfef4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_LAM_ALEF_MADDA_ABOVE</name></cpp:macro> <cpp:value>0xfef5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_LAM_ALEF_MADDA_ABOVE</name></cpp:macro> <cpp:value>0xfef6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_LAM_ALEF_HAMZA_ABOVE</name></cpp:macro> <cpp:value>0xfef7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_LAM_ALEF_HAMZA_ABOVE</name></cpp:macro> <cpp:value>0xfef8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_LAM_ALEF_HAMZA_BELOW</name></cpp:macro> <cpp:value>0xfef9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_LAM_ALEF_HAMZA_BELOW</name></cpp:macro> <cpp:value>0xfefa</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_s_LAM_ALEF</name></cpp:macro> <cpp:value>0xfefb</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_f_LAM_ALEF</name></cpp:macro> <cpp:value>0xfefc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_BYTE_ORDER_MARK</name></cpp:macro> <cpp:value>0xfeff</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arabic.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>A_is_a</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur_c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>cur_c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>a_HAMZA</name></expr>:</case>

<case>case <expr><name>a_ALEF_MADDA</name></expr>:</case>

<case>case <expr><name>a_ALEF_HAMZA_ABOVE</name></expr>:</case>

<case>case <expr><name>a_WAW_HAMZA</name></expr>:</case>

<case>case <expr><name>a_ALEF_HAMZA_BELOW</name></expr>:</case>

<case>case <expr><name>a_YEH_HAMZA</name></expr>:</case>

<case>case <expr><name>a_ALEF</name></expr>:</case>

<case>case <expr><name>a_BEH</name></expr>:</case>

<case>case <expr><name>a_TEH_MARBUTA</name></expr>:</case>

<case>case <expr><name>a_TEH</name></expr>:</case>

<case>case <expr><name>a_THEH</name></expr>:</case>

<case>case <expr><name>a_JEEM</name></expr>:</case>

<case>case <expr><name>a_HAH</name></expr>:</case>

<case>case <expr><name>a_KHAH</name></expr>:</case>

<case>case <expr><name>a_DAL</name></expr>:</case>

<case>case <expr><name>a_THAL</name></expr>:</case>

<case>case <expr><name>a_REH</name></expr>:</case>

<case>case <expr><name>a_ZAIN</name></expr>:</case>

<case>case <expr><name>a_SEEN</name></expr>:</case>

<case>case <expr><name>a_SHEEN</name></expr>:</case>

<case>case <expr><name>a_SAD</name></expr>:</case>

<case>case <expr><name>a_DAD</name></expr>:</case>

<case>case <expr><name>a_TAH</name></expr>:</case>

<case>case <expr><name>a_ZAH</name></expr>:</case>

<case>case <expr><name>a_AIN</name></expr>:</case>

<case>case <expr><name>a_GHAIN</name></expr>:</case>

<case>case <expr><name>a_TATWEEL</name></expr>:</case>

<case>case <expr><name>a_FEH</name></expr>:</case>

<case>case <expr><name>a_QAF</name></expr>:</case>

<case>case <expr><name>a_KAF</name></expr>:</case>

<case>case <expr><name>a_LAM</name></expr>:</case>

<case>case <expr><name>a_MEEM</name></expr>:</case>

<case>case <expr><name>a_NOON</name></expr>:</case>

<case>case <expr><name>a_HEH</name></expr>:</case>

<case>case <expr><name>a_WAW</name></expr>:</case>

<case>case <expr><name>a_ALEF_MAKSURA</name></expr>:</case>

<case>case <expr><name>a_YEH</name></expr>:</case>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>A_is_s</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur_c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>cur_c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>a_s_HAMZA</name></expr>:</case>

<case>case <expr><name>a_s_ALEF_MADDA</name></expr>:</case>

<case>case <expr><name>a_s_ALEF_HAMZA_ABOVE</name></expr>:</case>

<case>case <expr><name>a_s_WAW_HAMZA</name></expr>:</case>

<case>case <expr><name>a_s_ALEF_HAMZA_BELOW</name></expr>:</case>

<case>case <expr><name>a_s_YEH_HAMZA</name></expr>:</case>

<case>case <expr><name>a_s_ALEF</name></expr>:</case>

<case>case <expr><name>a_s_BEH</name></expr>:</case>

<case>case <expr><name>a_s_TEH_MARBUTA</name></expr>:</case>

<case>case <expr><name>a_s_TEH</name></expr>:</case>

<case>case <expr><name>a_s_THEH</name></expr>:</case>

<case>case <expr><name>a_s_JEEM</name></expr>:</case>

<case>case <expr><name>a_s_HAH</name></expr>:</case>

<case>case <expr><name>a_s_KHAH</name></expr>:</case>

<case>case <expr><name>a_s_DAL</name></expr>:</case>

<case>case <expr><name>a_s_THAL</name></expr>:</case>

<case>case <expr><name>a_s_REH</name></expr>:</case>

<case>case <expr><name>a_s_ZAIN</name></expr>:</case>

<case>case <expr><name>a_s_SEEN</name></expr>:</case>

<case>case <expr><name>a_s_SHEEN</name></expr>:</case>

<case>case <expr><name>a_s_SAD</name></expr>:</case>

<case>case <expr><name>a_s_DAD</name></expr>:</case>

<case>case <expr><name>a_s_TAH</name></expr>:</case>

<case>case <expr><name>a_s_ZAH</name></expr>:</case>

<case>case <expr><name>a_s_AIN</name></expr>:</case>

<case>case <expr><name>a_s_GHAIN</name></expr>:</case>

<case>case <expr><name>a_s_FEH</name></expr>:</case>

<case>case <expr><name>a_s_QAF</name></expr>:</case>

<case>case <expr><name>a_s_KAF</name></expr>:</case>

<case>case <expr><name>a_s_LAM</name></expr>:</case>

<case>case <expr><name>a_s_MEEM</name></expr>:</case>

<case>case <expr><name>a_s_NOON</name></expr>:</case>

<case>case <expr><name>a_s_HEH</name></expr>:</case>

<case>case <expr><name>a_s_WAW</name></expr>:</case>

<case>case <expr><name>a_s_ALEF_MAKSURA</name></expr>:</case>

<case>case <expr><name>a_s_YEH</name></expr>:</case>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>A_is_f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur_c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>cur_c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>a_f_ALEF_MADDA</name></expr>:</case>

<case>case <expr><name>a_f_ALEF_HAMZA_ABOVE</name></expr>:</case>

<case>case <expr><name>a_f_WAW_HAMZA</name></expr>:</case>

<case>case <expr><name>a_f_ALEF_HAMZA_BELOW</name></expr>:</case>

<case>case <expr><name>a_f_YEH_HAMZA</name></expr>:</case>

<case>case <expr><name>a_f_ALEF</name></expr>:</case>

<case>case <expr><name>a_f_BEH</name></expr>:</case>

<case>case <expr><name>a_f_TEH_MARBUTA</name></expr>:</case>

<case>case <expr><name>a_f_TEH</name></expr>:</case>

<case>case <expr><name>a_f_THEH</name></expr>:</case>

<case>case <expr><name>a_f_JEEM</name></expr>:</case>

<case>case <expr><name>a_f_HAH</name></expr>:</case>

<case>case <expr><name>a_f_KHAH</name></expr>:</case>

<case>case <expr><name>a_f_DAL</name></expr>:</case>

<case>case <expr><name>a_f_THAL</name></expr>:</case>

<case>case <expr><name>a_f_REH</name></expr>:</case>

<case>case <expr><name>a_f_ZAIN</name></expr>:</case>

<case>case <expr><name>a_f_SEEN</name></expr>:</case>

<case>case <expr><name>a_f_SHEEN</name></expr>:</case>

<case>case <expr><name>a_f_SAD</name></expr>:</case>

<case>case <expr><name>a_f_DAD</name></expr>:</case>

<case>case <expr><name>a_f_TAH</name></expr>:</case>

<case>case <expr><name>a_f_ZAH</name></expr>:</case>

<case>case <expr><name>a_f_AIN</name></expr>:</case>

<case>case <expr><name>a_f_GHAIN</name></expr>:</case>

<case>case <expr><name>a_f_FEH</name></expr>:</case>

<case>case <expr><name>a_f_QAF</name></expr>:</case>

<case>case <expr><name>a_f_KAF</name></expr>:</case>

<case>case <expr><name>a_f_LAM</name></expr>:</case>

<case>case <expr><name>a_f_MEEM</name></expr>:</case>

<case>case <expr><name>a_f_NOON</name></expr>:</case>

<case>case <expr><name>a_f_HEH</name></expr>:</case>

<case>case <expr><name>a_f_WAW</name></expr>:</case>

<case>case <expr><name>a_f_ALEF_MAKSURA</name></expr>:</case>

<case>case <expr><name>a_f_YEH</name></expr>:</case>

<case>case <expr><name>a_f_LAM_ALEF_MADDA_ABOVE</name></expr>:</case>

<case>case <expr><name>a_f_LAM_ALEF_HAMZA_ABOVE</name></expr>:</case>

<case>case <expr><name>a_f_LAM_ALEF_HAMZA_BELOW</name></expr>:</case>

<case>case <expr><name>a_f_LAM_ALEF</name></expr>:</case>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chg_c_a2s</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur_c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>cur_c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>a_HAMZA</name></expr>:</case> <return>return <expr><name>a_s_HAMZA</name></expr>;</return>

<case>case <expr><name>a_ALEF_MADDA</name></expr>:</case> <return>return <expr><name>a_s_ALEF_MADDA</name></expr>;</return>

<case>case <expr><name>a_ALEF_HAMZA_ABOVE</name></expr>:</case> <return>return <expr><name>a_s_ALEF_HAMZA_ABOVE</name></expr>;</return>

<case>case <expr><name>a_WAW_HAMZA</name></expr>:</case> <return>return <expr><name>a_s_WAW_HAMZA</name></expr>;</return>

<case>case <expr><name>a_ALEF_HAMZA_BELOW</name></expr>:</case> <return>return <expr><name>a_s_ALEF_HAMZA_BELOW</name></expr>;</return>

<case>case <expr><name>a_YEH_HAMZA</name></expr>:</case> <return>return <expr><name>a_s_YEH_HAMZA</name></expr>;</return>

<case>case <expr><name>a_ALEF</name></expr>:</case> <return>return <expr><name>a_s_ALEF</name></expr>;</return>

<case>case <expr><name>a_TEH_MARBUTA</name></expr>:</case> <return>return <expr><name>a_s_TEH_MARBUTA</name></expr>;</return>

<case>case <expr><name>a_DAL</name></expr>:</case> <return>return <expr><name>a_s_DAL</name></expr>;</return>

<case>case <expr><name>a_THAL</name></expr>:</case> <return>return <expr><name>a_s_THAL</name></expr>;</return>

<case>case <expr><name>a_REH</name></expr>:</case> <return>return <expr><name>a_s_REH</name></expr>;</return>

<case>case <expr><name>a_ZAIN</name></expr>:</case> <return>return <expr><name>a_s_ZAIN</name></expr>;</return>

<case>case <expr><name>a_TATWEEL</name></expr>:</case> <return>return <expr><name>cur_c</name></expr>;</return> 

<case>case <expr><name>a_WAW</name></expr>:</case> <return>return <expr><name>a_s_WAW</name></expr>;</return>

<case>case <expr><name>a_ALEF_MAKSURA</name></expr>:</case> <return>return <expr><name>a_s_ALEF_MAKSURA</name></expr>;</return>

<case>case <expr><name>a_BEH</name></expr>:</case> <return>return <expr><name>a_s_BEH</name></expr>;</return>

<case>case <expr><name>a_TEH</name></expr>:</case> <return>return <expr><name>a_s_TEH</name></expr>;</return>

<case>case <expr><name>a_THEH</name></expr>:</case> <return>return <expr><name>a_s_THEH</name></expr>;</return>

<case>case <expr><name>a_JEEM</name></expr>:</case> <return>return <expr><name>a_s_JEEM</name></expr>;</return>

<case>case <expr><name>a_HAH</name></expr>:</case> <return>return <expr><name>a_s_HAH</name></expr>;</return>

<case>case <expr><name>a_KHAH</name></expr>:</case> <return>return <expr><name>a_s_KHAH</name></expr>;</return>

<case>case <expr><name>a_SEEN</name></expr>:</case> <return>return <expr><name>a_s_SEEN</name></expr>;</return>

<case>case <expr><name>a_SHEEN</name></expr>:</case> <return>return <expr><name>a_s_SHEEN</name></expr>;</return>

<case>case <expr><name>a_SAD</name></expr>:</case> <return>return <expr><name>a_s_SAD</name></expr>;</return>

<case>case <expr><name>a_DAD</name></expr>:</case> <return>return <expr><name>a_s_DAD</name></expr>;</return>

<case>case <expr><name>a_TAH</name></expr>:</case> <return>return <expr><name>a_s_TAH</name></expr>;</return>

<case>case <expr><name>a_ZAH</name></expr>:</case> <return>return <expr><name>a_s_ZAH</name></expr>;</return>

<case>case <expr><name>a_AIN</name></expr>:</case> <return>return <expr><name>a_s_AIN</name></expr>;</return>

<case>case <expr><name>a_GHAIN</name></expr>:</case> <return>return <expr><name>a_s_GHAIN</name></expr>;</return>

<case>case <expr><name>a_FEH</name></expr>:</case> <return>return <expr><name>a_s_FEH</name></expr>;</return>

<case>case <expr><name>a_QAF</name></expr>:</case> <return>return <expr><name>a_s_QAF</name></expr>;</return>

<case>case <expr><name>a_KAF</name></expr>:</case> <return>return <expr><name>a_s_KAF</name></expr>;</return>

<case>case <expr><name>a_LAM</name></expr>:</case> <return>return <expr><name>a_s_LAM</name></expr>;</return>

<case>case <expr><name>a_MEEM</name></expr>:</case> <return>return <expr><name>a_s_MEEM</name></expr>;</return>

<case>case <expr><name>a_NOON</name></expr>:</case> <return>return <expr><name>a_s_NOON</name></expr>;</return>

<case>case <expr><name>a_HEH</name></expr>:</case> <return>return <expr><name>a_s_HEH</name></expr>;</return>

<case>case <expr><name>a_YEH</name></expr>:</case> <return>return <expr><name>a_s_YEH</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chg_c_a2i</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur_c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>cur_c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>a_YEH_HAMZA</name></expr>:</case> <return>return <expr><name>a_i_YEH_HAMZA</name></expr>;</return>

<case>case <expr><name>a_HAMZA</name></expr>:</case> <return>return <expr><name>a_s_HAMZA</name></expr>;</return> 

<case>case <expr><name>a_ALEF_MADDA</name></expr>:</case> <return>return <expr><name>a_s_ALEF_MADDA</name></expr>;</return> 

<case>case <expr><name>a_ALEF_HAMZA_ABOVE</name></expr>:</case> <return>return <expr><name>a_s_ALEF_HAMZA_ABOVE</name></expr>;</return> 

<case>case <expr><name>a_WAW_HAMZA</name></expr>:</case> <return>return <expr><name>a_s_WAW_HAMZA</name></expr>;</return> 

<case>case <expr><name>a_ALEF_HAMZA_BELOW</name></expr>:</case> <return>return <expr><name>a_s_ALEF_HAMZA_BELOW</name></expr>;</return> 

<case>case <expr><name>a_ALEF</name></expr>:</case> <return>return <expr><name>a_s_ALEF</name></expr>;</return> 

<case>case <expr><name>a_TEH_MARBUTA</name></expr>:</case> <return>return <expr><name>a_s_TEH_MARBUTA</name></expr>;</return> 

<case>case <expr><name>a_DAL</name></expr>:</case> <return>return <expr><name>a_s_DAL</name></expr>;</return> 

<case>case <expr><name>a_THAL</name></expr>:</case> <return>return <expr><name>a_s_THAL</name></expr>;</return> 

<case>case <expr><name>a_REH</name></expr>:</case> <return>return <expr><name>a_s_REH</name></expr>;</return> 

<case>case <expr><name>a_ZAIN</name></expr>:</case> <return>return <expr><name>a_s_ZAIN</name></expr>;</return> 

<case>case <expr><name>a_TATWEEL</name></expr>:</case> <return>return <expr><name>cur_c</name></expr>;</return> 

<case>case <expr><name>a_WAW</name></expr>:</case> <return>return <expr><name>a_s_WAW</name></expr>;</return> 

<case>case <expr><name>a_ALEF_MAKSURA</name></expr>:</case> <return>return <expr><name>a_s_ALEF_MAKSURA</name></expr>;</return> 

<case>case <expr><name>a_BEH</name></expr>:</case> <return>return <expr><name>a_i_BEH</name></expr>;</return>

<case>case <expr><name>a_TEH</name></expr>:</case> <return>return <expr><name>a_i_TEH</name></expr>;</return>

<case>case <expr><name>a_THEH</name></expr>:</case> <return>return <expr><name>a_i_THEH</name></expr>;</return>

<case>case <expr><name>a_JEEM</name></expr>:</case> <return>return <expr><name>a_i_JEEM</name></expr>;</return>

<case>case <expr><name>a_HAH</name></expr>:</case> <return>return <expr><name>a_i_HAH</name></expr>;</return>

<case>case <expr><name>a_KHAH</name></expr>:</case> <return>return <expr><name>a_i_KHAH</name></expr>;</return>

<case>case <expr><name>a_SEEN</name></expr>:</case> <return>return <expr><name>a_i_SEEN</name></expr>;</return>

<case>case <expr><name>a_SHEEN</name></expr>:</case> <return>return <expr><name>a_i_SHEEN</name></expr>;</return>

<case>case <expr><name>a_SAD</name></expr>:</case> <return>return <expr><name>a_i_SAD</name></expr>;</return>

<case>case <expr><name>a_DAD</name></expr>:</case> <return>return <expr><name>a_i_DAD</name></expr>;</return>

<case>case <expr><name>a_TAH</name></expr>:</case> <return>return <expr><name>a_i_TAH</name></expr>;</return>

<case>case <expr><name>a_ZAH</name></expr>:</case> <return>return <expr><name>a_i_ZAH</name></expr>;</return>

<case>case <expr><name>a_AIN</name></expr>:</case> <return>return <expr><name>a_i_AIN</name></expr>;</return>

<case>case <expr><name>a_GHAIN</name></expr>:</case> <return>return <expr><name>a_i_GHAIN</name></expr>;</return>

<case>case <expr><name>a_FEH</name></expr>:</case> <return>return <expr><name>a_i_FEH</name></expr>;</return>

<case>case <expr><name>a_QAF</name></expr>:</case> <return>return <expr><name>a_i_QAF</name></expr>;</return>

<case>case <expr><name>a_KAF</name></expr>:</case> <return>return <expr><name>a_i_KAF</name></expr>;</return>

<case>case <expr><name>a_LAM</name></expr>:</case> <return>return <expr><name>a_i_LAM</name></expr>;</return>

<case>case <expr><name>a_MEEM</name></expr>:</case> <return>return <expr><name>a_i_MEEM</name></expr>;</return>

<case>case <expr><name>a_NOON</name></expr>:</case> <return>return <expr><name>a_i_NOON</name></expr>;</return>

<case>case <expr><name>a_HEH</name></expr>:</case> <return>return <expr><name>a_i_HEH</name></expr>;</return>

<case>case <expr><name>a_YEH</name></expr>:</case> <return>return <expr><name>a_i_YEH</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chg_c_a2m</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur_c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>cur_c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>a_HAMZA</name></expr>:</case> <return>return <expr><name>a_s_HAMZA</name></expr>;</return> 

<case>case <expr><name>a_ALEF_MADDA</name></expr>:</case> <return>return <expr><name>a_f_ALEF_MADDA</name></expr>;</return> 

<case>case <expr><name>a_ALEF_HAMZA_ABOVE</name></expr>:</case> <return>return <expr><name>a_f_ALEF_HAMZA_ABOVE</name></expr>;</return> 

<case>case <expr><name>a_WAW_HAMZA</name></expr>:</case> <return>return <expr><name>a_f_WAW_HAMZA</name></expr>;</return> 

<case>case <expr><name>a_ALEF_HAMZA_BELOW</name></expr>:</case> <return>return <expr><name>a_f_ALEF_HAMZA_BELOW</name></expr>;</return> 

<case>case <expr><name>a_YEH_HAMZA</name></expr>:</case> <return>return <expr><name>a_m_YEH_HAMZA</name></expr>;</return>

<case>case <expr><name>a_ALEF</name></expr>:</case> <return>return <expr><name>a_f_ALEF</name></expr>;</return> 

<case>case <expr><name>a_BEH</name></expr>:</case> <return>return <expr><name>a_m_BEH</name></expr>;</return>

<case>case <expr><name>a_TEH_MARBUTA</name></expr>:</case> <return>return <expr><name>a_f_TEH_MARBUTA</name></expr>;</return> 

<case>case <expr><name>a_TEH</name></expr>:</case> <return>return <expr><name>a_m_TEH</name></expr>;</return>

<case>case <expr><name>a_THEH</name></expr>:</case> <return>return <expr><name>a_m_THEH</name></expr>;</return>

<case>case <expr><name>a_JEEM</name></expr>:</case> <return>return <expr><name>a_m_JEEM</name></expr>;</return>

<case>case <expr><name>a_HAH</name></expr>:</case> <return>return <expr><name>a_m_HAH</name></expr>;</return>

<case>case <expr><name>a_KHAH</name></expr>:</case> <return>return <expr><name>a_m_KHAH</name></expr>;</return>

<case>case <expr><name>a_DAL</name></expr>:</case> <return>return <expr><name>a_f_DAL</name></expr>;</return> 

<case>case <expr><name>a_THAL</name></expr>:</case> <return>return <expr><name>a_f_THAL</name></expr>;</return> 

<case>case <expr><name>a_REH</name></expr>:</case> <return>return <expr><name>a_f_REH</name></expr>;</return> 

<case>case <expr><name>a_ZAIN</name></expr>:</case> <return>return <expr><name>a_f_ZAIN</name></expr>;</return> 

<case>case <expr><name>a_SEEN</name></expr>:</case> <return>return <expr><name>a_m_SEEN</name></expr>;</return>

<case>case <expr><name>a_SHEEN</name></expr>:</case> <return>return <expr><name>a_m_SHEEN</name></expr>;</return>

<case>case <expr><name>a_SAD</name></expr>:</case> <return>return <expr><name>a_m_SAD</name></expr>;</return>

<case>case <expr><name>a_DAD</name></expr>:</case> <return>return <expr><name>a_m_DAD</name></expr>;</return>

<case>case <expr><name>a_TAH</name></expr>:</case> <return>return <expr><name>a_m_TAH</name></expr>;</return>

<case>case <expr><name>a_ZAH</name></expr>:</case> <return>return <expr><name>a_m_ZAH</name></expr>;</return>

<case>case <expr><name>a_AIN</name></expr>:</case> <return>return <expr><name>a_m_AIN</name></expr>;</return>

<case>case <expr><name>a_GHAIN</name></expr>:</case> <return>return <expr><name>a_m_GHAIN</name></expr>;</return>

<case>case <expr><name>a_TATWEEL</name></expr>:</case> <return>return <expr><name>cur_c</name></expr>;</return> 

<case>case <expr><name>a_FEH</name></expr>:</case> <return>return <expr><name>a_m_FEH</name></expr>;</return>

<case>case <expr><name>a_QAF</name></expr>:</case> <return>return <expr><name>a_m_QAF</name></expr>;</return>

<case>case <expr><name>a_KAF</name></expr>:</case> <return>return <expr><name>a_m_KAF</name></expr>;</return>

<case>case <expr><name>a_LAM</name></expr>:</case> <return>return <expr><name>a_m_LAM</name></expr>;</return>

<case>case <expr><name>a_MEEM</name></expr>:</case> <return>return <expr><name>a_m_MEEM</name></expr>;</return>

<case>case <expr><name>a_NOON</name></expr>:</case> <return>return <expr><name>a_m_NOON</name></expr>;</return>

<case>case <expr><name>a_HEH</name></expr>:</case> <return>return <expr><name>a_m_HEH</name></expr>;</return>

<case>case <expr><name>a_WAW</name></expr>:</case> <return>return <expr><name>a_f_WAW</name></expr>;</return> 

<case>case <expr><name>a_ALEF_MAKSURA</name></expr>:</case> <return>return <expr><name>a_f_ALEF_MAKSURA</name></expr>;</return> 

<case>case <expr><name>a_YEH</name></expr>:</case> <return>return <expr><name>a_m_YEH</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chg_c_a2f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur_c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>cur_c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>a_HAMZA</name></expr>:</case> <return>return <expr><name>a_s_HAMZA</name></expr>;</return> 

<case>case <expr><name>a_ALEF_MADDA</name></expr>:</case> <return>return <expr><name>a_f_ALEF_MADDA</name></expr>;</return>

<case>case <expr><name>a_ALEF_HAMZA_ABOVE</name></expr>:</case> <return>return <expr><name>a_f_ALEF_HAMZA_ABOVE</name></expr>;</return>

<case>case <expr><name>a_WAW_HAMZA</name></expr>:</case> <return>return <expr><name>a_f_WAW_HAMZA</name></expr>;</return>

<case>case <expr><name>a_ALEF_HAMZA_BELOW</name></expr>:</case> <return>return <expr><name>a_f_ALEF_HAMZA_BELOW</name></expr>;</return>

<case>case <expr><name>a_YEH_HAMZA</name></expr>:</case> <return>return <expr><name>a_f_YEH_HAMZA</name></expr>;</return>

<case>case <expr><name>a_ALEF</name></expr>:</case> <return>return <expr><name>a_f_ALEF</name></expr>;</return>

<case>case <expr><name>a_BEH</name></expr>:</case> <return>return <expr><name>a_f_BEH</name></expr>;</return>

<case>case <expr><name>a_TEH_MARBUTA</name></expr>:</case> <return>return <expr><name>a_f_TEH_MARBUTA</name></expr>;</return>

<case>case <expr><name>a_TEH</name></expr>:</case> <return>return <expr><name>a_f_TEH</name></expr>;</return>

<case>case <expr><name>a_THEH</name></expr>:</case> <return>return <expr><name>a_f_THEH</name></expr>;</return>

<case>case <expr><name>a_JEEM</name></expr>:</case> <return>return <expr><name>a_f_JEEM</name></expr>;</return>

<case>case <expr><name>a_HAH</name></expr>:</case> <return>return <expr><name>a_f_HAH</name></expr>;</return>

<case>case <expr><name>a_KHAH</name></expr>:</case> <return>return <expr><name>a_f_KHAH</name></expr>;</return>

<case>case <expr><name>a_DAL</name></expr>:</case> <return>return <expr><name>a_f_DAL</name></expr>;</return>

<case>case <expr><name>a_THAL</name></expr>:</case> <return>return <expr><name>a_f_THAL</name></expr>;</return>

<case>case <expr><name>a_REH</name></expr>:</case> <return>return <expr><name>a_f_REH</name></expr>;</return>

<case>case <expr><name>a_ZAIN</name></expr>:</case> <return>return <expr><name>a_f_ZAIN</name></expr>;</return>

<case>case <expr><name>a_SEEN</name></expr>:</case> <return>return <expr><name>a_f_SEEN</name></expr>;</return>

<case>case <expr><name>a_SHEEN</name></expr>:</case> <return>return <expr><name>a_f_SHEEN</name></expr>;</return>

<case>case <expr><name>a_SAD</name></expr>:</case> <return>return <expr><name>a_f_SAD</name></expr>;</return>

<case>case <expr><name>a_DAD</name></expr>:</case> <return>return <expr><name>a_f_DAD</name></expr>;</return>

<case>case <expr><name>a_TAH</name></expr>:</case> <return>return <expr><name>a_f_TAH</name></expr>;</return>

<case>case <expr><name>a_ZAH</name></expr>:</case> <return>return <expr><name>a_f_ZAH</name></expr>;</return>

<case>case <expr><name>a_AIN</name></expr>:</case> <return>return <expr><name>a_f_AIN</name></expr>;</return>

<case>case <expr><name>a_GHAIN</name></expr>:</case> <return>return <expr><name>a_f_GHAIN</name></expr>;</return>

<case>case <expr><name>a_TATWEEL</name></expr>:</case> <return>return <expr><name>cur_c</name></expr>;</return> 

<case>case <expr><name>a_FEH</name></expr>:</case> <return>return <expr><name>a_f_FEH</name></expr>;</return>

<case>case <expr><name>a_QAF</name></expr>:</case> <return>return <expr><name>a_f_QAF</name></expr>;</return>

<case>case <expr><name>a_KAF</name></expr>:</case> <return>return <expr><name>a_f_KAF</name></expr>;</return>

<case>case <expr><name>a_LAM</name></expr>:</case> <return>return <expr><name>a_f_LAM</name></expr>;</return>

<case>case <expr><name>a_MEEM</name></expr>:</case> <return>return <expr><name>a_f_MEEM</name></expr>;</return>

<case>case <expr><name>a_NOON</name></expr>:</case> <return>return <expr><name>a_f_NOON</name></expr>;</return>

<case>case <expr><name>a_HEH</name></expr>:</case> <return>return <expr><name>a_f_HEH</name></expr>;</return>

<case>case <expr><name>a_WAW</name></expr>:</case> <return>return <expr><name>a_f_WAW</name></expr>;</return>

<case>case <expr><name>a_ALEF_MAKSURA</name></expr>:</case> <return>return <expr><name>a_f_ALEF_MAKSURA</name></expr>;</return>

<case>case <expr><name>a_YEH</name></expr>:</case> <return>return <expr><name>a_f_YEH</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static int chg_c_i2m(int cur_c)

{

switch (cur_c) {

case a_i_YEH_HAMZA: return a_m_YEH_HAMZA;

case a_i_BEH: return a_m_BEH;

case a_i_TEH: return a_m_TEH;

case a_i_THEH: return a_m_THEH;

case a_i_JEEM: return a_m_JEEM;

case a_i_HAH: return a_m_HAH;

case a_i_KHAH: return a_m_KHAH;

case a_i_SEEN: return a_m_SEEN;

case a_i_SHEEN: return a_m_SHEEN;

case a_i_SAD: return a_m_SAD;

case a_i_DAD: return a_m_DAD;

case a_i_TAH: return a_m_TAH;

case a_i_ZAH: return a_m_ZAH;

case a_i_AIN: return a_m_AIN;

case a_i_GHAIN: return a_m_GHAIN;

case a_i_FEH: return a_m_FEH;

case a_i_QAF: return a_m_QAF;

case a_i_KAF: return a_m_KAF;

case a_i_LAM: return a_m_LAM;

case a_i_MEEM: return a_m_MEEM;

case a_i_NOON: return a_m_NOON;

case a_i_HEH: return a_m_HEH;

case a_i_YEH: return a_m_YEH;

}

return 0;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chg_c_f2m</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur_c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>cur_c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>a_f_YEH_HAMZA</name></expr>:</case> <return>return <expr><name>a_m_YEH_HAMZA</name></expr>;</return>

<case>case <expr><name>a_f_WAW_HAMZA</name></expr>:</case> 

<case>case <expr><name>a_f_ALEF</name></expr>:</case>

<case>case <expr><name>a_f_TEH_MARBUTA</name></expr>:</case>

<case>case <expr><name>a_f_DAL</name></expr>:</case>

<case>case <expr><name>a_f_THAL</name></expr>:</case>

<case>case <expr><name>a_f_REH</name></expr>:</case>

<case>case <expr><name>a_f_ZAIN</name></expr>:</case>

<case>case <expr><name>a_f_WAW</name></expr>:</case>

<case>case <expr><name>a_f_ALEF_MAKSURA</name></expr>:</case>

<return>return <expr><name>cur_c</name></expr>;</return>

<case>case <expr><name>a_f_BEH</name></expr>:</case> <return>return <expr><name>a_m_BEH</name></expr>;</return>

<case>case <expr><name>a_f_TEH</name></expr>:</case> <return>return <expr><name>a_m_TEH</name></expr>;</return>

<case>case <expr><name>a_f_THEH</name></expr>:</case> <return>return <expr><name>a_m_THEH</name></expr>;</return>

<case>case <expr><name>a_f_JEEM</name></expr>:</case> <return>return <expr><name>a_m_JEEM</name></expr>;</return>

<case>case <expr><name>a_f_HAH</name></expr>:</case> <return>return <expr><name>a_m_HAH</name></expr>;</return>

<case>case <expr><name>a_f_KHAH</name></expr>:</case> <return>return <expr><name>a_m_KHAH</name></expr>;</return>

<case>case <expr><name>a_f_SEEN</name></expr>:</case> <return>return <expr><name>a_m_SEEN</name></expr>;</return>

<case>case <expr><name>a_f_SHEEN</name></expr>:</case> <return>return <expr><name>a_m_SHEEN</name></expr>;</return>

<case>case <expr><name>a_f_SAD</name></expr>:</case> <return>return <expr><name>a_m_SAD</name></expr>;</return>

<case>case <expr><name>a_f_DAD</name></expr>:</case> <return>return <expr><name>a_m_DAD</name></expr>;</return>

<case>case <expr><name>a_f_TAH</name></expr>:</case> <return>return <expr><name>a_m_TAH</name></expr>;</return>

<case>case <expr><name>a_f_ZAH</name></expr>:</case> <return>return <expr><name>a_m_ZAH</name></expr>;</return>

<case>case <expr><name>a_f_AIN</name></expr>:</case> <return>return <expr><name>a_m_AIN</name></expr>;</return>

<case>case <expr><name>a_f_GHAIN</name></expr>:</case> <return>return <expr><name>a_m_GHAIN</name></expr>;</return>

<case>case <expr><name>a_f_FEH</name></expr>:</case> <return>return <expr><name>a_m_FEH</name></expr>;</return>

<case>case <expr><name>a_f_QAF</name></expr>:</case> <return>return <expr><name>a_m_QAF</name></expr>;</return>

<case>case <expr><name>a_f_KAF</name></expr>:</case> <return>return <expr><name>a_m_KAF</name></expr>;</return>

<case>case <expr><name>a_f_LAM</name></expr>:</case> <return>return <expr><name>a_m_LAM</name></expr>;</return>

<case>case <expr><name>a_f_MEEM</name></expr>:</case> <return>return <expr><name>a_m_MEEM</name></expr>;</return>

<case>case <expr><name>a_f_NOON</name></expr>:</case> <return>return <expr><name>a_m_NOON</name></expr>;</return>

<case>case <expr><name>a_f_HEH</name></expr>:</case> <return>return <expr><name>a_m_HEH</name></expr>;</return>

<case>case <expr><name>a_f_YEH</name></expr>:</case> <return>return <expr><name>a_m_YEH</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chg_c_laa2i</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hid_c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>hid_c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>a_ALEF_MADDA</name></expr>:</case> <return>return <expr><name>a_s_LAM_ALEF_MADDA_ABOVE</name></expr>;</return>

<case>case <expr><name>a_ALEF_HAMZA_ABOVE</name></expr>:</case> <return>return <expr><name>a_s_LAM_ALEF_HAMZA_ABOVE</name></expr>;</return>

<case>case <expr><name>a_ALEF_HAMZA_BELOW</name></expr>:</case> <return>return <expr><name>a_s_LAM_ALEF_HAMZA_BELOW</name></expr>;</return>

<case>case <expr><name>a_ALEF</name></expr>:</case> <return>return <expr><name>a_s_LAM_ALEF</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chg_c_laa2f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hid_c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>hid_c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>a_ALEF_MADDA</name></expr>:</case> <return>return <expr><name>a_f_LAM_ALEF_MADDA_ABOVE</name></expr>;</return>

<case>case <expr><name>a_ALEF_HAMZA_ABOVE</name></expr>:</case> <return>return <expr><name>a_f_LAM_ALEF_HAMZA_ABOVE</name></expr>;</return>

<case>case <expr><name>a_ALEF_HAMZA_BELOW</name></expr>:</case> <return>return <expr><name>a_f_LAM_ALEF_HAMZA_BELOW</name></expr>;</return>

<case>case <expr><name>a_ALEF</name></expr>:</case> <return>return <expr><name>a_f_LAM_ALEF</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>half_shape</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>A_is_a</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>chg_c_a2i</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>A_is_valid</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>A_is_f</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>chg_c_f2m</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>arabic_shape</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ccp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c1p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_c1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>next_c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>A_is_ok</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shape_c</name> <init>= <expr><call><name>half_shape</name><argument_list>(<argument><expr><name>prev_c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curr_c</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curr_laa</name> <init>= <expr><call><name>A_firstc_laa</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>c1p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_laa</name> <init>= <expr><call><name>A_firstc_laa</name><argument_list>(<argument><expr><name>prev_c</name></expr></argument>, <argument><expr><name>prev_c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>curr_laa</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>A_is_valid</name><argument_list>(<argument><expr><name>prev_c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>A_is_f</name><argument_list>(<argument><expr><name>shape_c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>A_is_s</name><argument_list>(<argument><expr><name>shape_c</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><name>prev_laa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <call><name>chg_c_laa2f</name><argument_list>(<argument><expr><name>curr_laa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <call><name>chg_c_laa2i</name><argument_list>(<argument><expr><name>curr_laa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>c1p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>A_is_valid</name><argument_list>(<argument><expr><name>prev_c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>A_is_valid</name><argument_list>(<argument><expr><name>next_c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <call><name>chg_c_a2i</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>shape_c</name> <operator>||</operator> <call><name>A_is_f</name><argument_list>(<argument><expr><name>shape_c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>A_is_s</name><argument_list>(<argument><expr><name>shape_c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>prev_laa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <ternary><condition><expr><call><name>A_is_valid</name><argument_list>(<argument><expr><name>next_c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>chg_c_a2i</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>chg_c_a2s</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>A_is_valid</name><argument_list>(<argument><expr><name>next_c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

curr_c = A_is_iso(c) ? chg_c_a2m(c) : chg_c_i2m(c);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <ternary><condition><expr><call><name>A_is_iso</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>chg_c_a2m</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>A_is_valid</name><argument_list>(<argument><expr><name>prev_c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <call><name>chg_c_a2f</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <call><name>chg_c_a2s</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curr_c</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>curr_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curr_c</name> <operator>!=</operator> <name>c</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ccp</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>curr_c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ccp</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>curr_c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>arabic_combine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>one</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>two</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>one</name> <operator>==</operator> <name>a_LAM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>arabic_maycombine</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>arabic_maycombine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>two</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_arshape</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_tbidi</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>two</name> <operator>==</operator> <name>a_ALEF_MADDA</name>

<operator>||</operator> <name>two</name> <operator>==</operator> <name>a_ALEF_HAMZA_ABOVE</name>

<operator>||</operator> <name>two</name> <operator>==</operator> <name>a_ALEF_HAMZA_BELOW</name>

<operator>||</operator> <name>two</name> <operator>==</operator> <name>a_ALEF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>A_firstc_laa</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>!=</operator> <name>NUL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <name>a_LAM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>A_is_harakat</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>c1</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>A_is_harakat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>c</name> <operator>&gt;=</operator> <name>a_FATHATAN</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <name>a_SUKUN</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>A_is_iso</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <name>a_HAMZA</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <name>a_GHAIN</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <name>a_TATWEEL</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <name>a_HAMZA_BELOW</name><operator>)</operator>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>a_MINI_ALEF</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>A_is_formb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <name>a_s_FATHATAN</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <name>a_s_DAMMATAN</name><operator>)</operator>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>a_s_KASRATAN</name>

<operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <name>a_s_FATHA</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <name>a_f_LAM_ALEF</name><operator>)</operator>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>a_BYTE_ORDER_MARK</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>A_is_ok</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>A_is_iso</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>A_is_formb</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>A_is_valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>A_is_ok</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>A_is_special</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>A_is_special</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>c</name> <operator>==</operator> <name>a_HAMZA</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>a_s_HAMZA</name></expr>;</return>

</block_content>}</block></function>

</unit>
