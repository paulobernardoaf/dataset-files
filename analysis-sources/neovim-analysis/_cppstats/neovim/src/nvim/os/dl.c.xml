<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\os\dl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/dl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>gen_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>str_str_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>str_int_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>int_str_fn</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>int_int_fn</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><name>bool</name></type> <name>os_libcall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>argi</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str_out</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>int_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>libname</name> <operator>||</operator> <operator>!</operator><name>funcname</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uv_lib_t</name></type> <name>lib</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uv_dlopen</name><argument_list>(<argument><expr><name>libname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lib</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"dlerror = \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>uv_dlerror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_dlclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>gen_fn</name></type> <name>fn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uv_dlsym</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"dlerror = \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>uv_dlerror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_dlclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str_out</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>str_str_fn</name></type> <name>sfn</name> <init>= <expr><operator>(</operator><name>str_str_fn</name><operator>)</operator> <name>fn</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_str_fn</name></type> <name>ifn</name> <init>= <expr><operator>(</operator><name>int_str_fn</name><operator>)</operator> <name>fn</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><ternary><condition><expr><name>argv</name></expr> ?</condition><then> <expr><call><name>sfn</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ifn</name><argument_list>(<argument><expr><name>argi</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>str_out</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>res</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name>res</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name>res</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>

?</condition><then> <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>str_int_fn</name></type> <name>sfn</name> <init>= <expr><operator>(</operator><name>str_int_fn</name><operator>)</operator> <name>fn</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_int_fn</name></type> <name>ifn</name> <init>= <expr><operator>(</operator><name>int_int_fn</name><operator>)</operator> <name>fn</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>int_out</name> <operator>=</operator> <ternary><condition><expr><name>argv</name></expr> ?</condition><then> <expr><call><name>sfn</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ifn</name><argument_list>(<argument><expr><name>argi</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>uv_dlclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
