<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\os\env.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_getln.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__NSGETENVIRON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crt_externs.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UTSNAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><specifier>static</specifier> <call><name>PMap</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>envmap</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uv_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>env_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>envmap</name> <operator>=</operator> <call><call><name>pmap_new</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_env_var_lock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_env_var_unlock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>os_getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><call><name>pmap_has</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>envmap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>e</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><call><name>pmap_get</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>envmap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pmap_del2</name><argument_list>(<argument><expr><name>envmap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>uv_os_getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>UV_ENOBUFS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>uv_os_getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><call><name>pmap_put</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>envmap</name></expr></argument>, <argument><expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>!=</operator> <name>UV_ENOENT</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>!=</operator> <name>UV_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"uv_os_getenv(%s) failed: %d %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>e</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>e</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>os_env_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>uv_os_getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <name>UV_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>!=</operator> <name>UV_ENOENT</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>!=</operator> <name>UV_ENOBUFS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"uv_os_getenv(%s) failed: %d %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>r</name> <operator>==</operator> <name>UV_ENOBUFS</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_setenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>overwrite</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>overwrite</name> <operator>&amp;&amp;</operator> <call><name>os_getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>os_unsetenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>overwrite</name> <operator>&amp;&amp;</operator> <call><name>os_env_exists</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>striequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"LC_ALL"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>striequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"LANGUAGE"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>striequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"LANG"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>striequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"LC_MESSAGES"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_putenv_s</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>uv_os_setenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <name>UV_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pmap_del2</name><argument_list>(<argument><expr><name>envmap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"uv_os_setenv(%s) failed: %d %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_unsetenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pmap_del2</name><argument_list>(<argument><expr><name>envmap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>uv_os_unsetenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"uv_os_unsetenv(%s) failed: %d %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>os_get_fullenv_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>envstrings</name> <init>= <expr><call><name>GetEnvironmentStringsW</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>envstrings</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>envstrings</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>FreeEnvironmentStringsW</name><argument_list>(<argument><expr><name>envstrings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__NSGETENVIRON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name> <init>= <expr><operator>*</operator><call><name>_NSGetEnviron</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name><name>environ</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_free_fullenv</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>env</name></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>it</name> <init>= <expr><name>env</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>it</name></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_copy_fullenv</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>env_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>envstrings</name> <init>= <expr><call><name>GetEnvironmentStringsW</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>envstrings</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>envstrings</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>env_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf8_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conversion_result</name> <init>= <expr><call><name>utf16_to_utf8</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>utf8_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>conversion_result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><literal type="string">"utf16_to_utf8 failed: %d"</literal></expr></argument>, <argument><expr><name>conversion_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>env</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>utf8_str</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>FreeEnvironmentStringsW</name><argument_list>(<argument><expr><name>envstrings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__NSGETENVIRON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name> <init>= <expr><operator>*</operator><call><name>_NSGetEnviron</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>env_size</name> <operator>&amp;&amp;</operator> <name><name>environ</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>env</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>environ</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>os_getenvname_at_index</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>envstrings</name> <init>= <expr><call><name>GetEnvironmentStringsW</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>envstrings</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>envstrings</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>index</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>index</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf8_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conversion_result</name> <init>= <expr><call><name>utf16_to_utf8</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>utf8_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>conversion_result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><literal type="string">"utf16_to_utf8 failed: %d"</literal></expr></argument>, <argument><expr><name>conversion_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>end</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>utf8_str</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>utf8_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>len</name> <init>= <expr><name>end</name> <operator>-</operator> <name>utf8_str</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>xstrndup</name><argument_list>(<argument><expr><name>utf8_str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>utf8_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>FreeEnvironmentStringsW</name><argument_list>(<argument><expr><name>envstrings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>name</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__NSGETENVIRON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name> <init>= <expr><operator>*</operator><call><name>_NSGetEnviron</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>environ</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>environ</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>end</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>len</name> <init>= <expr><name>end</name> <operator>-</operator> <name>str</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>xstrndup</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>os_get_pid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_get_hostname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UTSNAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>vutsname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vutsname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>hostname</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>vutsname</name><operator>.</operator><name>nodename</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>host_utf16</name><index>[<expr><name>MAX_COMPUTERNAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>host_wsize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>host_utf16</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>host_utf16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetComputerNameW</name><argument_list>(<argument><expr><name>host_utf16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>host_wsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>hostname</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><literal type="string">"GetComputerNameW failed: %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>host_utf16</name><index>[<expr><name>host_wsize</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host_utf8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conversion_result</name> <init>= <expr><call><name>utf16_to_utf8</name><argument_list>(<argument><expr><name>host_utf16</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>host_utf8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>conversion_result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><literal type="string">"utf16_to_utf8 failed: %d"</literal></expr></argument>, <argument><expr><name>conversion_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>host_utf8</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>host_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><literal type="string">"os_get_hostname failed: missing uname()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>hostname</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>homedir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init_homedir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>homedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>homedir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>homedrive</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"HOMEDRIVE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>homepath</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"HOMEPATH"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>homepath</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>homepath</name> <operator>=</operator> <literal type="string">"\\"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>homedrive</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>homedrive</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>homepath</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>os_buf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>homedrive</name></expr></argument>, <argument><expr><name>homepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name>os_buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"USERPROFILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>var</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>var</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>os_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>var</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>var</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><name>os_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>exp</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>os_buf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name>os_buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>*</operator><name>var</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <literal type="string">"C:/"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>os_dirname</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>os_buf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <call><name>os_chdir</name><argument_list>(<argument><expr><name>os_buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_chdir</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>os_dirname</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_chdir</name><argument_list>(<argument><expr><name>os_buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_prev_dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>homedir</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type> <name>free_homedir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>homedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>expand_env_save</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>expand_env_save_opt</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>expand_env_save_opt</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>one</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>expand_env_esc</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>expand_env</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>expand_env_esc</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstlen</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>expand_env_esc</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>srcp</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstlen</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>esc</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>one</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 2</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>copy_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>mustfree</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>at_start</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>prefix_len</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>prefix</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>srcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dstlen</name><operator>--</operator></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>*</operator><name>src</name> <operator>&amp;&amp;</operator> <name>dstlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'`'</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>skip_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>src</name> <operator>-</operator> <name>var</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>dstlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>dstlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>var</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlen</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>copy_char</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'$'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <name>at_start</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mustfree</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>!=</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>src</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>dstlen</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name> <operator>==</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isIDc</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tail</name><operator>++</operator></expr>;</expr_stmt> 

<while>while <condition>(<expr><name>c</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>tail</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>tail</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>var</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>tail</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<while>while <condition>(<expr><name>c</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>tail</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>vim_isIDc</name><argument_list>(<argument><expr><operator>*</operator><name>tail</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>var</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>tail</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>tail</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tail</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>vim_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mustfree</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> 

<operator>||</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" ,\t\n"</literal></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>homedir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>src</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>dstlen</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>c</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>*</operator><name>tail</name>

<operator>&amp;&amp;</operator> <call><name>vim_isfilec</name><argument_list>(<argument><expr><operator>*</operator><name>tail</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>tail</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>var</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>tail</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>dst</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr>

</then><else>: <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>os_get_user_directory</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>mustfree</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>expand_T</name></type> <name>xpc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ExpandInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_FILES</name></expr>;</expr_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>ExpandOne</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>WILD_ADD_SLASH</name><operator>|</operator><name>WILD_SILENT</name></expr></argument>, <argument><expr><name>WILD_EXPAND_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mustfree</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_ssl</name> <operator>&amp;&amp;</operator> <name>var</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mustfree</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mustfree</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>forward_slash</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>esc</name> <operator>&amp;&amp;</operator> <name>var</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_strpbrk</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" \t"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mustfree</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mustfree</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>var</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>dstlen</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlen</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>var</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>after_pathsep</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>c</name></expr></argument>)</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>&amp;&amp;</operator> <name><name>dst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>&amp;&amp;</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>tail</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>tail</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>

<expr_stmt><expr><name>copy_char</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mustfree</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>copy_char</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>dstlen</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>one</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dstlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dstlen</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>src</name> <operator>-</operator> <name>prefix_len</name> <operator>&gt;=</operator> <name>srcp</name>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <name>prefix_len</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>vim_version_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vimdir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vimdir</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>vimdir</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>concat_fnames</name><argument_list>(<argument><expr><name>vimdir</name></expr></argument>, <argument><expr><name>VIM_VERSION_NODOT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_isdir</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>vimdir</name></expr></argument>, <argument><expr><name>RUNTIME_DIRNAME</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_isdir</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>remove_tail</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pend</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_tail</name> <init>= <expr><name>pend</name> <operator>-</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_tail</name> <operator>&gt;=</operator> <name>path</name>

<operator>&amp;&amp;</operator> <call><name>fnamencmp</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>new_tail</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dirname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>new_tail</name> <operator>==</operator> <name>path</name> <operator>||</operator> <call><name>after_pathsep</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>new_tail</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>new_tail</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pend</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vim_env_iter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>delim</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>val</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>iter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>dir</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>len</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2<operator>,</operator> 4<operator>,</operator> 5</function>) <macro><name>FUNC_ATTR_WARN_UNUSED_RESULT</name></macro>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varval</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>iter</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>varval</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>varval</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dir</name> <operator>=</operator> <name>varval</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dirend</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>varval</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dirend</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>varval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>dirend</name> <operator>-</operator> <name>varval</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>dirend</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vim_env_iter_rev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>delim</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>val</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>iter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>dir</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>len</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2<operator>,</operator> 4<operator>,</operator> 5</function>) <macro><name>FUNC_ATTR_WARN_UNUSED_RESULT</name></macro>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varend</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>iter</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>varend</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>varend</name> <operator>=</operator> <name>val</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>varlen</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>varend</name> <operator>-</operator> <name>val</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>colon</name> <init>= <expr><call><name>xmemrchr</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>delim</name></expr></argument>, <argument><expr><name>varlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>colon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>varlen</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dir</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dir</name> <operator>=</operator> <name>colon</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>varend</name> <operator>-</operator> <name>colon</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>colon</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<function><type><name>void</name></type> <name>vim_get_prefix_from_exepath</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>exe_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><name>exe_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_PROGPATH</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>MAXPATHL</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>exe_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path_end</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail_with_sep</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>exe_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>path_end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>path_end</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>exe_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>path_end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>vim_getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_PROGPATH</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>homedir</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kos_env_path</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>kos_env_path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>kos_env_path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>vimruntime</name> <init>= <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"VIMRUNTIME"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vimruntime</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"VIM"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vim_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vimruntime</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PATHDEF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>*</operator><name>default_vimruntime_dir</name> <operator>==</operator> <name>NUL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition> <block>{<block_content>

<expr_stmt><expr><name>kos_env_path</name> <operator>=</operator> <call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"VIM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kos_env_path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vim_path</name> <operator>=</operator> <call><name>vim_version_dir</name><argument_list>(<argument><expr><name>kos_env_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vim_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vim_path</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>kos_env_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vim_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_hf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_hf</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vim_path</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_hf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>exe_name</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vim_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_get_prefix_from_exepath</name><argument_list>(<argument><expr><name>exe_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>append_path</name><argument_list>(

<argument><expr><name>exe_name</name></expr></argument>,

<argument><expr><literal type="string">"share"</literal> <name>_PATHSEPSTR</name> <literal type="string">"nvim"</literal> <name>_PATHSEPSTR</name> <literal type="string">"runtime"</literal> <name>_PATHSEPSTR</name></expr></argument>,

<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vim_path</name> <operator>=</operator> <name>exe_name</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vim_path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vim_path_end</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>vim_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vim_path</name> <operator>==</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_hf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vim_path_end</name> <operator>=</operator> <call><name>remove_tail</name><argument_list>(<argument><expr><name>vim_path</name></expr></argument>, <argument><expr><name>vim_path_end</name></expr></argument>, <argument><expr><literal type="string">"doc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vimruntime</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vim_path_end</name> <operator>=</operator> <call><name>remove_tail</name><argument_list>(<argument><expr><name>vim_path</name></expr></argument>, <argument><expr><name>vim_path_end</name></expr></argument>, <argument><expr><name>RUNTIME_DIRNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vim_path_end</name> <operator>=</operator> <call><name>remove_tail</name><argument_list>(<argument><expr><name>vim_path</name></expr></argument>, <argument><expr><name>vim_path_end</name></expr></argument>, <argument><expr><name>VIM_VERSION_NODOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vim_path_end</name> <operator>&gt;</operator> <name>vim_path</name> <operator>&amp;&amp;</operator> <call><name>after_pathsep</name><argument_list>(<argument><expr><name>vim_path</name></expr></argument>, <argument><expr><name>vim_path_end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vim_path_end</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vim_path_end</name> <operator>&gt;=</operator> <name>vim_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vim_path</name> <operator>=</operator> <call><name>xstrndup</name><argument_list>(<argument><expr><name>vim_path</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>vim_path_end</name> <operator>-</operator> <name>vim_path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_isdir</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>vim_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>vim_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vim_path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vim_path</name> <operator>!=</operator> <name>exe_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PATHDEF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>vim_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vimruntime</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>default_vimruntime_dir</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vim_path</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>default_vimruntime_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>default_vim_dir</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vimruntime</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>vim_path</name> <operator>=</operator> <call><name>vim_version_dir</name><argument_list>(<argument><expr><name>default_vim_dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vim_path</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>default_vim_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>vim_path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vimruntime</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_setenv</name><argument_list>(<argument><expr><literal type="string">"VIMRUNTIME"</literal></expr></argument>, <argument><expr><name>vim_path</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didset_vimruntime</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>os_setenv</name><argument_list>(<argument><expr><literal type="string">"VIM"</literal></expr></argument>, <argument><expr><name>vim_path</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didset_vim</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>vim_path</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>home_replace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>buf_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>one</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>3</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>dirlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>envlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_help</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dlen</name> <init>= <expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dstlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>MIN</name><argument_list>(<argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>dstlen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>homedir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dirlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>homedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>homedir_env</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>homedir_env</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>homedir_env</name> <operator>=</operator> <call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"USERPROFILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>homedir_env_mod</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>homedir_env</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>must_free</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>homedir_env_mod</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>homedir_env_mod</name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>must_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>usedlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>flen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>homedir_env_mod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>modify_fname</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":p"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usedlen</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>homedir_env_mod</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>homedir_env_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>homedir_env_mod</name> <operator>!=</operator> <name>homedir_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>homedir_env_mod</name><index>[<expr><name>flen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>homedir_env_mod</name><index>[<expr><name>flen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>homedir_env_mod</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>envlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>homedir_env_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>one</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst_p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>src</name> <operator>&amp;&amp;</operator> <name>dstlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>homedir</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>dirlen</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name>

<operator>&amp;&amp;</operator> <call><name>fnamencmp</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>one</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <name><name>src</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator><operator>)</operator>

<operator>||</operator> <name><name>src</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>dstlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst_p</name><operator>++</operator> <operator>=</operator> <literal type="char">'~'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>--</operator><name>dstlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst_p</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>homedir_env_mod</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>homedir_env_mod</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>envlen</name></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><operator>*</operator><name>src</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>one</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>src</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>src</name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>--</operator><name>dstlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst_p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>src</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>--</operator><name>dstlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst_p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>src</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>dst_p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>must_free</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>homedir_env_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>dst_p</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator></expr>;</return>

</block_content>}</block>

<function><type><name>char_u</name> <modifier>*</modifier></type> <name>home_replace_save</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_RET

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_env_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENVNAMELEN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>name</name><index>[<expr><name>ENVNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>envname</name> <init>= <expr><call><name>os_getenvname_at_index</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>envname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>envname</name></expr></argument>, <argument><expr><name>ENVNAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>envname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>name</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>os_setenv_append_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ENVPATHLEN</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ENVPATHLEN</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>path_is_absolute</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"os_setenv_append_path()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail_with_sep</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dirlen</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>tail</name> <operator>-</operator> <name>fname</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tail</name> <operator>&gt;=</operator> <name>fname</name> <operator>&amp;&amp;</operator> <name>dirlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>os_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><name>os_buf</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>dirlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>pathlen</name> <init>= <expr><ternary><condition><expr><name>path</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>newlen</name> <init>= <expr><name>pathlen</name> <operator>+</operator> <name>dirlen</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>&lt;</operator> <name>MAX_ENVPATHLEN</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pathlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xstrlcat</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>ENV_SEPSTR</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xstrlcat</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>os_buf</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_setenv</name><argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>os_shell_is_cmdexe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sh</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sh</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>striequal</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><literal type="string">"$COMSPEC"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comspec</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"COMSPEC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>striequal</name><argument_list>(<argument><expr><literal type="string">"cmd.exe"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>comspec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>striequal</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><literal type="string">"cmd.exe"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>striequal</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><literal type="string">"cmd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>striequal</name><argument_list>(<argument><expr><literal type="string">"cmd.exe"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>path_tail</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>sh</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
