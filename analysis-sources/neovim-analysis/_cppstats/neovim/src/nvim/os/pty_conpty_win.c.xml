<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\os\pty_conpty_win.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/pty_conpty_win.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXTENDED_STARTUPINFO_PRESENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENDED_STARTUPINFO_PRESENT</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE</name></cpp:macro> <cpp:value>0x00020016</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pCreatePseudoConsole</name>)<parameter_list>(<parameter><decl><type><name>COORD</name></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>HPCON</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pResizePseudoConsole</name>)<parameter_list>(<parameter><decl><type><name>HPCON</name></type></decl></parameter>, <parameter><decl><type><name>COORD</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pClosePseudoConsole</name>)<parameter_list>(<parameter><decl><type><name>HPCON</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>os_has_conpty_working</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>TriState</name></type> <name>has_conpty</name> <init>= <expr><name>kNone</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>has_conpty</name> <operator>==</operator> <name>kNone</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>has_conpty</name> <operator>=</operator> <call><name>os_dyn_conpty_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>has_conpty</name> <operator>==</operator> <name>kTrue</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>TriState</name></type> <name>os_dyn_conpty_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uv_lib_t</name></type> <name>kernel</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uv_dlopen</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>kernel</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_dlclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kernel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>kFalse</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<struct><specifier>static</specifier> struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FARPROC</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

}</block> <decl><name><name>conpty_entry</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"CreatePseudoConsole"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pCreatePseudoConsole</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ResizePseudoConsole"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pResizePseudoConsole</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ClosePseudoConsole"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pClosePseudoConsole</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>

<condition><expr><name><name>conpty_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>conpty_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>uv_dlsym</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kernel</name></expr></argument>, <argument><expr><name><name>conpty_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>conpty_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_dlclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kernel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>kFalse</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>kTrue</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>conpty_t</name> <modifier>*</modifier></type><name>os_conpty_init</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>in_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_name</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>conpty_t</name> <modifier>*</modifier></type><name>conpty_object</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>conpty_object</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>emsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>in_read</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>out_write</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_ATTRIBUTES</name></type> <name>sa</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>mode</name> <init>= <expr><name>PIPE_ACCESS_INBOUND</name>

<operator>|</operator> <name>PIPE_ACCESS_OUTBOUND</name> <operator>|</operator> <name>FILE_FLAG_FIRST_PIPE_INSTANCE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>nLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\\\.\\pipe\\nvim-term-in-%d-%d"</literal></expr></argument>,

<argument><expr><call><name>os_get_pid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>in_name</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>in_read</name> <operator>=</operator> <call><name>CreateNamedPipeA</name><argument_list>(

<argument><expr><operator>*</operator><name>in_name</name></expr></argument>,

<argument><expr><name>mode</name></expr></argument>,

<argument><expr><name>PIPE_TYPE_BYTE</name> <operator>|</operator> <name>PIPE_READMODE_BYTE</name> <operator>|</operator> <name>PIPE_WAIT</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">30000</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"create input pipe failed"</literal></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\\\.\\pipe\\nvim-term-out-%d-%d"</literal></expr></argument>,

<argument><expr><call><name>os_get_pid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_name</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>out_write</name> <operator>=</operator> <call><name>CreateNamedPipeA</name><argument_list>(

<argument><expr><operator>*</operator><name>out_name</name></expr></argument>,

<argument><expr><name>mode</name></expr></argument>,

<argument><expr><name>PIPE_TYPE_BYTE</name> <operator>|</operator> <name>PIPE_READMODE_BYTE</name> <operator>|</operator> <name>PIPE_WAIT</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">30000</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"create output pipe failed"</literal></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>width</name> <operator>&lt;=</operator> <name>SHRT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>height</name> <operator>&lt;=</operator> <name>SHRT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>size</name> <init>= <expr><block>{ <expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>width</name></expr>, <expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>height</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>pCreatePseudoConsole</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>in_read</name></expr></argument>, <argument><expr><name>out_write</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conpty_object</name><operator>-&gt;</operator><name>pty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"create psudo console failed"</literal></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conpty_object</name><operator>-&gt;</operator><name>si_ex</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>conpty_object</name><operator>-&gt;</operator><name>si_ex</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_required</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitializeProcThreadAttributeList</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator> <name>bytes_required</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conpty_object</name><operator>-&gt;</operator><name>si_ex</name><operator>.</operator><name>lpAttributeList</name></name> <operator>=</operator>

<operator>(</operator><name>PPROC_THREAD_ATTRIBUTE_LIST</name><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><name>bytes_required</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>InitializeProcThreadAttributeList</name><argument_list>(

<argument><expr><name><name>conpty_object</name><operator>-&gt;</operator><name>si_ex</name><operator>.</operator><name>lpAttributeList</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bytes_required</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"InitializeProcThreadAttributeList failed"</literal></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UpdateProcThreadAttribute</name><argument_list>(

<argument><expr><name><name>conpty_object</name><operator>-&gt;</operator><name>si_ex</name><operator>.</operator><name>lpAttributeList</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE</name></expr></argument>,

<argument><expr><name><name>conpty_object</name><operator>-&gt;</operator><name>pty</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>conpty_object</name><operator>-&gt;</operator><name>pty</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"UpdateProcThreadAttribute failed"</literal></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>finished</name>;</goto>

<label><name>failed</name>:</label>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"os_conpty_init:%s : error code: %d"</literal></expr></argument>,

<argument><expr><name>emsg</name></expr></argument>, <argument><expr><call><name>os_translate_sys_error</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_conpty_free</name><argument_list>(<argument><expr><name>conpty_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>conpty_object</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>finished</name>:</label>

<if_stmt><if>if <condition>(<expr><name>in_read</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>in_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_write</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>out_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>conpty_object</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>os_conpty_spawn</name><parameter_list>(<parameter><decl><type><name>conpty_t</name> <modifier>*</modifier></type><name>conpty_object</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name> <modifier>*</modifier></type><name>process_handle</name></decl></parameter>,

<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cmd_line</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cwd</name></decl></parameter>,

<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreateProcessW</name><argument_list>(

<argument><expr><name>name</name></expr></argument>,

<argument><expr><name>cmd_line</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>,

<argument><expr><name>EXTENDED_STARTUPINFO_PRESENT</name> <operator>|</operator> <name>CREATE_UNICODE_ENVIRONMENT</name></expr></argument>,

<argument><expr><name>env</name></expr></argument>,

<argument><expr><name>cwd</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>conpty_object</name><operator>-&gt;</operator><name>si_ex</name><operator>.</operator><name>StartupInfo</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>process_handle</name> <operator>=</operator> <name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_conpty_set_size</name><parameter_list>(<parameter><decl><type><name>conpty_t</name> <modifier>*</modifier></type><name>conpty_object</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>width</name> <operator>&lt;=</operator> <name>SHRT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>height</name> <operator>&lt;=</operator> <name>SHRT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>size</name> <init>= <expr><block>{ <expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>width</name></expr>, <expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>height</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pResizePseudoConsole</name><argument_list>(<argument><expr><name><name>conpty_object</name><operator>-&gt;</operator><name>pty</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"ResizePseudoConsoel failed: error code: %d"</literal></expr></argument>,

<argument><expr><call><name>os_translate_sys_error</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_conpty_free</name><parameter_list>(<parameter><decl><type><name>conpty_t</name> <modifier>*</modifier></type><name>conpty_object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>conpty_object</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>conpty_object</name><operator>-&gt;</operator><name>si_ex</name><operator>.</operator><name>lpAttributeList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DeleteProcThreadAttributeList</name><argument_list>(<argument><expr><name><name>conpty_object</name><operator>-&gt;</operator><name>si_ex</name><operator>.</operator><name>lpAttributeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>conpty_object</name><operator>-&gt;</operator><name>si_ex</name><operator>.</operator><name>lpAttributeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conpty_object</name><operator>-&gt;</operator><name>pty</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pClosePseudoConsole</name><argument_list>(<argument><expr><name><name>conpty_object</name><operator>-&gt;</operator><name>pty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>conpty_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
