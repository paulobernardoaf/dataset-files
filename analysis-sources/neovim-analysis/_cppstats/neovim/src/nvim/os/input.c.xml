<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\os\input.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/rstream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/keymap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/state.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/channel.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_BUFFER_SIZE</name></cpp:macro> <cpp:value>0xfff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_BUFFER_SIZE</name></cpp:macro> <cpp:value>(READ_BUFFER_SIZE * 4)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>kInputNone</name></decl>,

<decl><name>kInputAvail</name></decl>,

<decl><name>kInputEof</name></decl>

}</block></enum></type> <name>InbufPollResult</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>Stream</name></type> <name>read_stream</name> <init>= <expr><block>{ <expr><operator>.</operator><name>closed</name> <operator>=</operator> <name>true</name></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>RBuffer</name> <modifier>*</modifier></type><name>input_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>input_eof</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>global_fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>blocking</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os/input.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>input_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>input_buffer</name> <operator>=</operator> <call><name>rbuffer_new</name><argument_list>(<argument><expr><name>INPUT_BUFFER_SIZE</name> <operator>+</operator> <name>MAX_KEY_CODE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_global_fd_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>global_fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>input_global_fd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>global_fd</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_start</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>read_stream</name><operator>.</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>input_global_fd_init</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rstream_init_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_stream</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>READ_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rstream_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>read_stream</name></expr></argument>, <argument><expr><name>input_read_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>read_stream</name><operator>.</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rstream_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>read_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>read_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cursorhold_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>event_T</name></type> <name>event</name> <init>= <expr><ternary><condition><expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr> ?</condition><then> <expr><name>EVENT_CURSORHOLDI</name></expr> </then><else>: <expr><name>EVENT_CURSORHOLD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_cursorhold</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_cursorhold_event</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>events_enabled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>events_enabled</name> <operator>||</operator> <call><name>multiqueue_empty</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multiqueue_put</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>, <argument><expr><name>cursorhold_event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>os_inchar</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tb_change_cnt</name></decl></parameter>,

<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>maxlen</name> <operator>&amp;&amp;</operator> <call><name>rbuffer_size</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rbuffer_read</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>InbufPollResult</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ms</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>inbuf_poll</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>kInputNone</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>inbuf_poll</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>p_ut</name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>kInputNone</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>read_stream</name><operator>.</operator><name>closed</name></name> <operator>&amp;&amp;</operator> <name>silent_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>read_error_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>trigger_cursorhold</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>typebuf_changed</name><argument_list>(<argument><expr><name>tb_change_cnt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>create_cursorhold_event</name><argument_list>(<argument><expr><name>events</name> <operator>==</operator> <name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>before_blocking</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>inbuf_poll</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>typebuf_changed</name><argument_list>(<argument><expr><name>tb_change_cnt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>maxlen</name> <operator>&amp;&amp;</operator> <call><name>rbuffer_size</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rbuffer_read</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>maxlen</name> <operator>&amp;&amp;</operator> <call><name>pending_events</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>push_event_key</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>kInputEof</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>read_error_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>os_char_avail</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>inbuf_poll</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>kInputAvail</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_breakcheck</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_us</name> <init>= <expr><name>updating_screen</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>updating_screen</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>loop_poll_events</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>updating_screen</name> <operator>=</operator> <name>save_us</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>os_isatty</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>uv_guess_handle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>UV_TTY</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>input_enqueue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>keys</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>ptr</name> <operator>+</operator> <name><name>keys</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>rbuffer_space</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>new_size</name>

<init>= <expr><call><name>trans_special</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_size</name> <operator>=</operator> <call><name>handle_mouse_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rbuffer_write</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_ptr</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>old_ptr</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <name>CSI</name></expr>)</condition> <block>{<block_content>

<macro><name>rbuffer_write</name><argument_list>(<argument>input_buffer</argument>, <argument>(char *)&amp;(uint8_t){K_SPECIAL}</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>rbuffer_write</name><argument_list>(<argument>input_buffer</argument>, <argument>(char *)&amp;(uint8_t){KS_EXTRA}</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>rbuffer_write</name><argument_list>(<argument>input_buffer</argument>, <argument>(char *)&amp;(uint8_t){KE_CSI}</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> <block>{<block_content>

<macro><name>rbuffer_write</name><argument_list>(<argument>input_buffer</argument>, <argument>(char *)&amp;(uint8_t){K_SPECIAL}</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>rbuffer_write</name><argument_list>(<argument>input_buffer</argument>, <argument>(char *)&amp;(uint8_t){KS_SPECIAL}</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>rbuffer_write</name><argument_list>(<argument>input_buffer</argument>, <argument>(char *)&amp;(uint8_t){KE_FILLER}</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rbuffer_write</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>size_t</name></type> <name>rv</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name><name>keys</name><operator>.</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>process_interrupts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>check_multiclick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>orig_num_clicks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>orig_mouse_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>orig_mouse_grid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>orig_mouse_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>orig_mouse_row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>orig_mouse_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>KE_LEFTRELEASE</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>KE_RIGHTRELEASE</name>

<operator>||</operator> <name>code</name> <operator>==</operator> <name>KE_MIDDLERELEASE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>mouse_time</name> <init>= <expr><call><name>os_hrtime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>timediff</name> <init>= <expr><name>mouse_time</name> <operator>-</operator> <name>orig_mouse_time</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>mouset</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>p_mouset</name> <operator>*</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>orig_mouse_code</name>

<operator>&amp;&amp;</operator> <name>timediff</name> <operator>&lt;</operator> <name>mouset</name>

<operator>&amp;&amp;</operator> <name>orig_num_clicks</name> <operator>!=</operator> <literal type="number">4</literal>

<operator>&amp;&amp;</operator> <name>orig_mouse_grid</name> <operator>==</operator> <name>grid</name>

<operator>&amp;&amp;</operator> <name>orig_mouse_col</name> <operator>==</operator> <name>col</name>

<operator>&amp;&amp;</operator> <name>orig_mouse_row</name> <operator>==</operator> <name>row</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>orig_num_clicks</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>orig_num_clicks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>orig_mouse_code</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_mouse_grid</name> <operator>=</operator> <name>grid</name></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_mouse_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_mouse_row</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_mouse_time</name> <operator>=</operator> <name>mouse_time</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>modifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>orig_num_clicks</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_2CLICK</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>orig_num_clicks</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_3CLICK</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>orig_num_clicks</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_4CLICK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>modifiers</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>handle_mouse_event</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mouse_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bufsize</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>KS_EXTRA</name>

<operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>mouse_code</name> <operator>&gt;=</operator> <name>KE_LEFTMOUSE</name> <operator>&amp;&amp;</operator> <name>mouse_code</name> <operator>&lt;=</operator> <name>KE_RIGHTRELEASE</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>mouse_code</name> <operator>&gt;=</operator> <name>KE_MOUSEDOWN</name> <operator>&amp;&amp;</operator> <name>mouse_code</name> <operator>&lt;=</operator> <name>KE_MOUSERIGHT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>bufsize</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>, <decl><type ref="prev"/><name>row</name></decl>, <decl><type ref="prev"/><name>advance</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"&lt;%d,%d&gt;%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>advance</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>advance</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name>Rows</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mouse_grid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>+=</operator> <name>advance</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>modifiers</name> <init>= <expr><call><name>check_multiclick</name><argument_list>(<argument><expr><name>mouse_code</name></expr></argument>, <argument><expr><name>mouse_grid</name></expr></argument>,

<argument><expr><name>mouse_row</name></expr></argument>, <argument><expr><name>mouse_col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>KS_MODIFIER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_MODIFIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>modifiers</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bufsize</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name>modifiers</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bufsize</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>input_enqueue_mouse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>modifier</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>modifier</name> <operator>|=</operator> <call><name>check_multiclick</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>modifier</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_MODIFIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>modifier</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_grid</name> <operator>=</operator> <name>grid</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>written</name> <init>= <expr><literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name><operator>-</operator><name>buf</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rbuffer_write</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>written</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>input_blocking</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>blocking</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>InbufPollResult</name></type> <name>inbuf_poll</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>, <parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>input_ready</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>kInputAvail</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_profiling</name> <operator>==</operator> <name>PROF_YES</name> <operator>&amp;&amp;</operator> <name>ms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prof_inchar_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ms</name> <operator>==</operator> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name>ms</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>events</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>input_eof</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>blocking</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multiqueue_process_events</name><argument_list>(<argument><expr><name>ch_before_blocking_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"blocking... events_enabled=%d events_pending=%d"</literal></expr></argument>, <argument><expr><name>events</name> <operator>!=</operator> <name>NULL</name></expr></argument>,

<argument><expr><name>events</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>multiqueue_empty</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOOP_PROCESS_EVENTS_UNTIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>,

<argument><expr><call><name>input_ready</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>input_eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blocking</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_profiling</name> <operator>==</operator> <name>PROF_YES</name> <operator>&amp;&amp;</operator> <name>ms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prof_inchar_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>input_ready</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>kInputAvail</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>input_eof</name></expr> ?</condition><then> <expr><name>kInputEof</name></expr> </then><else>: <expr><name>kInputNone</name></expr></else></ternary></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>input_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>input_eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>input_available</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rbuffer_size</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>input_read_cb</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>at_eof</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>at_eof</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>input_done</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>rbuffer_space</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>rbuffer_size</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>RBUFFER_UNTIL_EMPTY</name><argument_list>(<argument>buf</argument>, <argument>ptr</argument>, <argument>len</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rbuffer_write</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rbuffer_consumed</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_interrupts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mapped_ctrl_c</name> <operator>|</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_mapped_ctrl_c</name></name><operator>)</operator> <operator>&amp;</operator> <call><name>get_real_state</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>consume_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>RBUFFER_EACH_REVERSE</name><argument_list>(<argument>input_buffer</argument>, <argument>c</argument>, <argument>i</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>c</name> <operator>==</operator> <name>Ctrl_C</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>consume_count</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>got_int</name> <operator>&amp;&amp;</operator> <name>consume_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rbuffer_consumed</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>, <argument><expr><name>consume_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>push_event_key</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>key</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>K_SPECIAL</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><name>KE_EVENT</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>key_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>key</name><index>[<expr><name>key_idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>key_idx</name> <operator>%=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>key_idx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>buf_idx</name> <operator>&lt;</operator> <name>maxlen</name></expr>)</condition>;</do>

<return>return <expr><name>buf_idx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>input_ready</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>typebuf_was_filled</name> 

<operator>||</operator> <call><name>rbuffer_size</name><argument_list>(<argument><expr><name>input_buffer</name></expr></argument>)</argument_list></call> 

<operator>||</operator> <call><name>pending_events</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_error_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>silent_mode</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>getout</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Vim: Error reading input, exiting...\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>preserve_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>pending_events</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>events</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>multiqueue_empty</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
