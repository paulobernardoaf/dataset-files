<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\os\time.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/assert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>uv_mutex_t</name></type> <name>delay_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uv_cond_t</name></type> <name>delay_cond</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os/time.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>time_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>uv_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delay_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delay_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>os_hrtime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<return>return <expr><call><name>uv_hrtime</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>os_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<return>return <expr><call><name>uv_now</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>main_loop</name><operator>.</operator><name>uv</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_delay</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>ms</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreinput</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ignoreinput</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ms</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ms</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LOOP_PROCESS_EVENTS_UNTIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ms</name></expr></argument>, <argument><expr><name>got_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>os_microdelay</name><argument_list>(<argument><expr><name>ms</name> <operator>*</operator> <literal type="number">1000u</literal></expr></argument>, <argument><expr><name>ignoreinput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_microdelay</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>us</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreinput</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>elapsed</name> <init>= <expr><literal type="number">0u</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>base</name> <init>= <expr><call><name>uv_hrtime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>ns</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>us</name> <operator>&lt;</operator> <name>UINT64_MAX</name> <operator>/</operator> <literal type="number">1000u</literal><operator>)</operator></expr> ?</condition><then> <expr><name>us</name> <operator>*</operator> <literal type="number">1000u</literal></expr> </then><else>: <expr><name>UINT64_MAX</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delay_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>elapsed</name> <operator>&lt;</operator> <name>ns</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>ns_delta</name> <init>= <expr><ternary><condition><expr><name>ignoreinput</name></expr>

?</condition><then> <expr><name>ns</name> <operator>-</operator> <name>elapsed</name></expr>

</then><else>: <expr><call><name>MIN</name><argument_list>(<argument><expr><name>ns</name> <operator>-</operator> <name>elapsed</name></expr></argument>, <argument><expr><literal type="number">100000000u</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rv</name> <init>= <expr><call><name>uv_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delay_cond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delay_mutex</name></expr></argument>, <argument><expr><name>ns_delta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>rv</name> <operator>&amp;&amp;</operator> <name>UV_ETIMEDOUT</name> <operator>!=</operator> <name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignoreinput</name> <operator>&amp;&amp;</operator> <call><name>os_char_avail</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>now</name> <init>= <expr><call><name>uv_hrtime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>elapsed</name> <operator>+=</operator> <name>now</name> <operator>-</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delay_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>os_localtime_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>clock</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>result</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>localtime_r</name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>local_time</name> <init>= <expr><call><name>localtime</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local_time</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>*</operator><name>local_time</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>os_localtime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>rawtime</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>os_localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rawtime</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>Timestamp</name></type> <name>os_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<return>return <expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
