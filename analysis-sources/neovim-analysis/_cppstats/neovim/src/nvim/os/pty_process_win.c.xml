<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\os\pty_process_win.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winpty_constants.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/pty_process_win.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/pty_conpty_win.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os/pty_process_win.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <name>CALLBACK</name></type> <name>pty_process_finish1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>BOOLEAN</name></type> <name>unused</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>PtyProcess</name> <modifier>*</modifier></type><name>ptyproc</name> <init>= <expr><operator>(</operator><name>PtyProcess</name> <operator>*</operator><operator>)</operator><name>context</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>(</operator><name>Process</name> <operator>*</operator><operator>)</operator><name>ptyproc</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptyproc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kConpty</name>

<operator>&amp;&amp;</operator> <name><name>ptyproc</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>conpty</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_conpty_free</name><argument_list>(<argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>conpty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>conpty</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>uv_timer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptyproc</name><operator>-&gt;</operator><name>wait_eof_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>wait_eof_timer</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ptyproc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_timer_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ptyproc</name><operator>-&gt;</operator><name>wait_eof_timer</name></name></expr></argument>, <argument><expr><name>wait_eof_timer_cb</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>pty_process_spawn</name><parameter_list>(<parameter><decl><type><name>PtyProcess</name> <modifier>*</modifier></type><name>ptyproc</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>(</operator><name>Process</name> <operator>*</operator><operator>)</operator><name>ptyproc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>winpty_error_ptr_t</name></type> <name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>winpty_config_t</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>winpty_spawn_config_t</name> <modifier>*</modifier></type><name>spawncfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>winpty_t</name> <modifier>*</modifier></type><name>winpty_object</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>conpty_t</name> <modifier>*</modifier></type><name>conpty_object</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>in_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>process_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_connect_t</name> <modifier>*</modifier></type><name>in_req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_connect_t</name> <modifier>*</modifier></type><name>out_req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cmd_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>cwd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>emsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>err</name><operator>.</operator><name>closed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_has_conpty_working</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>conpty_object</name> <operator>=</operator>

<call><name>os_conpty_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_name</name></expr></argument>,

<argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>kConpty</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptyproc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kWinpty</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cfg</name> <operator>=</operator> <call><name>winpty_config_new</name><argument_list>(<argument><expr><name>WINPTY_FLAG_ALLOW_CURPROC_DESKTOP_CREATION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"winpty_config_new failed"</literal></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>winpty_config_set_initial_size</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>winpty_object</name> <operator>=</operator> <call><name>winpty_open</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>winpty_object</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"winpty_open failed"</literal></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>utf16_to_utf8</name><argument_list>(<argument><expr><call><name>winpty_conin_name</name><argument_list>(<argument><expr><name>winpty_object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"utf16_to_utf8(winpty_conin_name) failed"</literal></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>utf16_to_utf8</name><argument_list>(<argument><expr><call><name>winpty_conout_name</name><argument_list>(<argument><expr><name>winpty_object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"utf16_to_utf8(winpty_conout_name) failed"</literal></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in_req</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_connect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_pipe_connect</name><argument_list>(

<argument><expr><name>in_req</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>,

<argument><expr><name>in_name</name></expr></argument>,

<argument><expr><name>pty_process_connect_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out_req</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_connect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_pipe_connect</name><argument_list>(

<argument><expr><name>out_req</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>,

<argument><expr><name>out_name</name></expr></argument>,

<argument><expr><name>pty_process_connect_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>cwd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>utf8_to_utf16</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>cwd</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"utf8_to_utf16(proc-&gt;cwd) failed"</literal></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>build_cmd_line</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd_line</name></expr></argument>,

<argument><expr><call><name>os_shell_is_cmdexe</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"build_cmd_line failed"</literal></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptyproc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kConpty</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_conpty_spawn</name><argument_list>(<argument><expr><name>conpty_object</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>process_handle</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>cmd_line</name></expr></argument>,

<argument><expr><name>cwd</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"os_conpty_spawn failed"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>spawncfg</name> <operator>=</operator> <call><name>winpty_spawn_config_new</name><argument_list>(

<argument><expr><name>WINPTY_SPAWN_FLAG_AUTO_SHUTDOWN</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><name>cmd_line</name></expr></argument>,

<argument><expr><name>cwd</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spawncfg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"winpty_spawn_config_new failed"</literal></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>win_err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>winpty_spawn</name><argument_list>(<argument><expr><name>winpty_object</name></expr></argument>,

<argument><expr><name>spawncfg</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>process_handle</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>win_err</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>win_err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>win_err</name></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"failed to spawn process"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>emsg</name> <operator>=</operator> <literal type="string">"winpty_spawn failed"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>GetProcessId</name><argument_list>(<argument><expr><name>process_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RegisterWaitForSingleObject</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>ptyproc</name><operator>-&gt;</operator><name>finish_wait</name></name></expr></argument>,

<argument><expr><name>process_handle</name></expr></argument>,

<argument><expr><name>pty_process_finish1</name></expr></argument>,

<argument><expr><name>ptyproc</name></expr></argument>,

<argument><expr><name>INFINITE</name></expr></argument>,

<argument><expr><name>WT_EXECUTEDEFAULT</name> <operator>|</operator> <name>WT_EXECUTEONLYONCE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>in_req</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>in_req</name><operator>-&gt;</operator><name>handle</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>out_req</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>out_req</name><operator>-&gt;</operator><name>handle</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><name>UV_RUN_ONCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name><name>ptyproc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kConpty</name><operator>)</operator></expr> ?</condition><then>

<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ptyproc</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>conpty</name></name> <operator>=</operator> <name>conpty_object</name><operator>)</operator></expr> </then><else>:

<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ptyproc</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>winpty</name></name> <operator>=</operator> <name>winpty_object</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>process_handle</name></name> <operator>=</operator> <name>process_handle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>winpty_object</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>conpty_object</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>process_handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"pty_process_spawn: %s: error code: %d"</literal></expr></argument>, <argument><expr><name>emsg</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>os_translate_sys_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>winpty_error_code</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"pty_process_spawn: %s: error code: %d"</literal></expr></argument>, <argument><expr><name>emsg</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>translate_winpty_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>winpty_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>winpty_config_free</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>winpty_spawn_config_free</name><argument_list>(<argument><expr><name>spawncfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>winpty_free</name><argument_list>(<argument><expr><name>winpty_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_conpty_free</name><argument_list>(<argument><expr><name>conpty_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>in_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>out_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>process_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>process_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>in_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>out_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>cmd_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pty_process_tty_name</name><parameter_list>(<parameter><decl><type><name>PtyProcess</name> <modifier>*</modifier></type><name>ptyproc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="string">"?"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>pty_process_resize</name><parameter_list>(<parameter><decl><type><name>PtyProcess</name> <modifier>*</modifier></type><name>ptyproc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>height</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ptyproc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kConpty</name>

<operator>&amp;&amp;</operator> <name><name>ptyproc</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>conpty</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_conpty_set_size</name><argument_list>(<argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>conpty</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ptyproc</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>winpty</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>winpty_set_size</name><argument_list>(<argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>winpty</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>pty_process_close</name><parameter_list>(<parameter><decl><type><name>PtyProcess</name> <modifier>*</modifier></type><name>ptyproc</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>(</operator><name>Process</name> <operator>*</operator><operator>)</operator><name>ptyproc</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pty_process_close_master</name><argument_list>(<argument><expr><name>ptyproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>internal_close_cb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>proc</name><operator>-&gt;</operator><name>internal_close_cb</name></name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>pty_process_close_master</name><parameter_list>(<parameter><decl><type><name>PtyProcess</name> <modifier>*</modifier></type><name>ptyproc</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ptyproc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kWinpty</name>

<operator>&amp;&amp;</operator> <name><name>ptyproc</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>winpty</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>winpty_free</name><argument_list>(<argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>winpty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>winpty</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>pty_process_teardown</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pty_process_connect_cb</name><parameter_list>(<parameter><decl><type><name>uv_connect_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wait_eof_timer_cb</name><parameter_list>(<parameter><decl><type><name>uv_timer_t</name> <modifier>*</modifier></type><name>wait_eof_timer</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>PtyProcess</name> <modifier>*</modifier></type><name>ptyproc</name> <init>= <expr><name><name>wait_eof_timer</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>(</operator><name>Process</name> <operator>*</operator><operator>)</operator><name>ptyproc</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>closed</name></name> <operator>||</operator> <operator>!</operator><call><name>uv_is_readable</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>uvstream</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_timer_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ptyproc</name><operator>-&gt;</operator><name>wait_eof_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pty_process_finish2</name><argument_list>(<argument><expr><name>ptyproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pty_process_finish2</name><parameter_list>(<parameter><decl><type><name>PtyProcess</name> <modifier>*</modifier></type><name>ptyproc</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>(</operator><name>Process</name> <operator>*</operator><operator>)</operator><name>ptyproc</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UnregisterWaitEx</name><argument_list>(<argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>finish_wait</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ptyproc</name><operator>-&gt;</operator><name>wait_eof_timer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>exit_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>process_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exit_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <ternary><condition><expr><name><name>proc</name><operator>-&gt;</operator><name>exit_signal</name></name></expr> ?</condition><then> <expr><literal type="number">128</literal> <operator>+</operator> <name><name>proc</name><operator>-&gt;</operator><name>exit_signal</name></name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>exit_code</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>process_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptyproc</name><operator>-&gt;</operator><name>process_handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>proc</name><operator>-&gt;</operator><name>internal_exit_cb</name></name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>build_cmd_line</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>cmd_line</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_cmdexe</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>utf8_cmd_line_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QUEUE</name></type> <name>args_q</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>argv</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>buf_len</name> <init>= <expr><ternary><condition><expr><name>is_cmdexe</name></expr> ?</condition><then> <expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ArgNode</name> <modifier>*</modifier></type><name>arg_node</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>arg_node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg_node</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_cmdexe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><name><name>arg_node</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>quote_cmd_arg</name><argument_list>(<argument><expr><name><name>arg_node</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>utf8_cmd_line_len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>arg_node</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arg_node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>QUEUE_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args_q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arg_node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>utf8_cmd_line_len</name> <operator>+=</operator> <name>argc</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf8_cmd_line</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>utf8_cmd_line_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>utf8_cmd_line</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>QUEUE</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args_q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ArgNode</name> <modifier>*</modifier></type><name>arg_node</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>ArgNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xstrlcat</name><argument_list>(<argument><expr><name>utf8_cmd_line</name></expr></argument>, <argument><expr><name><name>arg_node</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>utf8_cmd_line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>arg_node</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>arg_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>QUEUE_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args_q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>xstrlcat</name><argument_list>(<argument><expr><name>utf8_cmd_line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>utf8_cmd_line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>utf8_to_utf16</name><argument_list>(<argument><expr><name>utf8_cmd_line</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>cmd_line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>utf8_cmd_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>quote_cmd_arg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dest_remaining</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>src_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>quote_hit</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dest_remaining</name></expr></argument>, <argument><expr><literal type="string">"\"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">" \t\""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest_remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"\"\\"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dest_remaining</name></expr></argument>, <argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dest_remaining</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dest_remaining</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>src_len</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dest_remaining</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>quote_hit</name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dest_remaining</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>quote_hit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dest_remaining</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dest</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>quote_hit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dest_remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>dest</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>start</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <operator>*</operator><name>dest</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>translate_winpty_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>winpty_errno</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>winpty_errno</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>winpty_errno</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>winpty_errno</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>WINPTY_ERROR_OUT_OF_MEMORY</name></expr>:</case> <return>return <expr><name>UV_ENOMEM</name></expr>;</return>

<case>case <expr><name>WINPTY_ERROR_SPAWN_CREATE_PROCESS_FAILED</name></expr>:</case> <return>return <expr><name>UV_EAI_FAIL</name></expr>;</return>

<case>case <expr><name>WINPTY_ERROR_LOST_CONNECTION</name></expr>:</case> <return>return <expr><name>UV_ENOTCONN</name></expr>;</return>

<case>case <expr><name>WINPTY_ERROR_AGENT_EXE_MISSING</name></expr>:</case> <return>return <expr><name>UV_ENOENT</name></expr>;</return>

<case>case <expr><name>WINPTY_ERROR_UNSPECIFIED</name></expr>:</case> <return>return <expr><name>UV_UNKNOWN</name></expr>;</return>

<case>case <expr><name>WINPTY_ERROR_AGENT_DIED</name></expr>:</case> <return>return <expr><name>UV_ESRCH</name></expr>;</return>

<case>case <expr><name>WINPTY_ERROR_AGENT_TIMEOUT</name></expr>:</case> <return>return <expr><name>UV_ETIMEDOUT</name></expr>;</return>

<case>case <expr><name>WINPTY_ERROR_AGENT_CREATION_FAILED</name></expr>:</case> <return>return <expr><name>UV_EAI_FAIL</name></expr>;</return>

<default>default:</default> <return>return <expr><name>UV_UNKNOWN</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

</unit>
