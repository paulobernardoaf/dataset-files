<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\os\os_win_console.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os_win_console.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>os_get_conin_fd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HANDLE</name></type> <name>conin_handle</name> <init>= <expr><call><name>CreateFile</name><argument_list>(<argument><expr><literal type="string">"CONIN$"</literal></expr></argument>,

<argument><expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr></argument>,

<argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPSECURITY_ATTRIBUTES</name><operator>)</operator><name>NULL</name></expr></argument>,

<argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>conin_handle</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conin_fd</name> <init>= <expr><call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>conin_handle</name></expr></argument>, <argument><expr><name>_O_RDONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>conin_fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>conin_fd</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_replace_stdin_to_conin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>conin_fd</name> <init>= <expr><call><name>os_get_conin_fd</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>conin_fd</name> <operator>==</operator> <name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>os_replace_stdout_and_stderr_to_conout</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HANDLE</name></type> <name>conout_handle</name> <init>=

<expr><call><name>CreateFile</name><argument_list>(<argument><expr><literal type="string">"CONOUT$"</literal></expr></argument>,

<argument><expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr></argument>,

<argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPSECURITY_ATTRIBUTES</name><operator>)</operator><name>NULL</name></expr></argument>,

<argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>conout_handle</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>conout_fd</name> <init>= <expr><call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>conout_handle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>conout_fd</name> <operator>==</operator> <name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>conerr_fd</name> <init>= <expr><call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>conout_handle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>conerr_fd</name> <operator>==</operator> <name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
