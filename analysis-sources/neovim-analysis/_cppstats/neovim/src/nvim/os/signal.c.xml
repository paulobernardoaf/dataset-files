<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\os\signal.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/globals.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/signal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/signal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>SignalWatcher</name></type> <name>spipe</name></decl>, <decl><type ref="prev"/><name>shup</name></decl>, <decl><type ref="prev"/><name>squit</name></decl>, <decl><type ref="prev"/><name>sterm</name></decl>, <decl><type ref="prev"/><name>susr1</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPWR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SignalWatcher</name></type> <name>spwr</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>rejecting_deadly</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os/signal.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>signal_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>mask</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_sigmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"Could not unblock signals, nvim might behave strangely."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>signal_watcher_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spipe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>squit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sterm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>signal_watcher_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spipe</name></expr></argument>, <argument><expr><name>on_signal</name></expr></argument>, <argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>signal_watcher_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shup</name></expr></argument>, <argument><expr><name>on_signal</name></expr></argument>, <argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>signal_watcher_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>squit</name></expr></argument>, <argument><expr><name>on_signal</name></expr></argument>, <argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>signal_watcher_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sterm</name></expr></argument>, <argument><expr><name>on_signal</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPWR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>signal_watcher_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spwr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spwr</name></expr></argument>, <argument><expr><name>on_signal</name></expr></argument>, <argument><expr><name>SIGPWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>signal_watcher_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>susr1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>susr1</name></expr></argument>, <argument><expr><name>on_signal</name></expr></argument>, <argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>signal_teardown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>signal_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spipe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>squit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sterm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPWR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>signal_watcher_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spwr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>signal_watcher_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>susr1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>signal_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>signal_watcher_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>squit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPWR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>signal_watcher_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spwr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>signal_watcher_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>susr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>signal_reject_deadly</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>rejecting_deadly</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>signal_accept_deadly</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>rejecting_deadly</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>signal_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>signum</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPWR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SIGPWR</name></expr>:</case>

<return>return <expr><literal type="string">"SIGPWR"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SIGPIPE</name></expr>:</case>

<return>return <expr><literal type="string">"SIGPIPE"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>SIGTERM</name></expr>:</case>

<return>return <expr><literal type="string">"SIGTERM"</literal></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SIGQUIT</name></expr>:</case>

<return>return <expr><literal type="string">"SIGQUIT"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>SIGHUP</name></expr>:</case>

<return>return <expr><literal type="string">"SIGHUP"</literal></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SIGUSR1</name></expr>:</case>

<return>return <expr><literal type="string">"SIGUSR1"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deadly_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_DYING</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WLOG</name><argument_list>(<argument><expr><literal type="string">"got signal %d (%s)"</literal></expr></argument>, <argument><expr><name>signum</name></expr></argument>, <argument><expr><call><name>signal_name</name><argument_list>(<argument><expr><name>signum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Vim: Caught deadly signal '%s'\n"</literal></expr></argument>,

<argument><expr><call><name>signal_name</name><argument_list>(<argument><expr><name>signum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>preserve_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_signal</name><parameter_list>(<parameter><decl><type><name>SignalWatcher</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>signum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>signum</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPWR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SIGPWR</name></expr>:</case>

<expr_stmt><expr><call><name>ml_sync_all</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SIGPIPE</name></expr>:</case>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>SIGTERM</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SIGQUIT</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>SIGHUP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rejecting_deadly</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>deadly_signal</name><argument_list>(<argument><expr><name>signum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SIGUSR1</name></expr>:</case>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_SIGNAL</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"SIGUSR1"</literal></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"invalid signal: %d"</literal></expr></argument>, <argument><expr><name>signum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

</unit>
