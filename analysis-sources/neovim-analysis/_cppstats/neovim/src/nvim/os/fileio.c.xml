<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\os\fileio.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"auto/config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/fileio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/globals.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/rbuffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os/fileio.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>file_open</name><parameter_list>(<parameter><decl><type><name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret_fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>os_open_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TriState</name></type> <name>wr</name> <init>= <expr><name>kNone</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>, <parameter><type><name>fcntl_flags</name></type></parameter>, <parameter><type><name>wrval</name></type></parameter>, <parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (flags &amp; flag) { os_open_flags |= fcntl_flags; assert(cond); if (wrval != kNone) { wr = wrval; } } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>kFileWriteOnly</name></expr></argument>, <argument><expr><name>O_WRONLY</name></expr></argument>, <argument><expr><name>kTrue</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>kFileCreateOnly</name></expr></argument>, <argument><expr><name>O_CREAT</name><operator>|</operator><name>O_EXCL</name><operator>|</operator><name>O_WRONLY</name></expr></argument>, <argument><expr><name>kTrue</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>kFileCreate</name></expr></argument>, <argument><expr><name>O_CREAT</name><operator>|</operator><name>O_WRONLY</name></expr></argument>, <argument><expr><name>kTrue</name></expr></argument>, <argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>kFileCreateOnly</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>kFileTruncate</name></expr></argument>, <argument><expr><name>O_TRUNC</name><operator>|</operator><name>O_WRONLY</name></expr></argument>, <argument><expr><name>kTrue</name></expr></argument>,

<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>kFileCreateOnly</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>kFileAppend</name></expr></argument>, <argument><expr><name>O_APPEND</name><operator>|</operator><name>O_WRONLY</name></expr></argument>, <argument><expr><name>kTrue</name></expr></argument>,

<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>kFileCreateOnly</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>kFileReadOnly</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><name>kFalse</name></expr></argument>, <argument><expr><name>wr</name> <operator>!=</operator> <name>kTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_NOFOLLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>kFileNoSymlink</name></expr></argument>, <argument><expr><name>O_NOFOLLOW</name></expr></argument>, <argument><expr><name>kNone</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLAG</name></cpp:undef>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>wr</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><call><name>os_open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>os_open_flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>fd</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>file_open_fd</name><argument_list>(<argument><expr><name>ret_fp</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>file_open_fd</name><parameter_list>(<parameter><decl><type><name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret_fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<expr_stmt><expr><name><name>ret_fp</name><operator>-&gt;</operator><name>wr</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>kFileCreate</name>

<operator>|</operator><name>kFileCreateOnly</name>

<operator>|</operator><name>kFileTruncate</name>

<operator>|</operator><name>kFileAppend</name>

<operator>|</operator><name>kFileWriteOnly</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret_fp</name><operator>-&gt;</operator><name>non_blocking</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>kFileNonBlocking</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>ret_fp</name><operator>-&gt;</operator><name>wr</name></name> <operator>||</operator> <operator>!</operator><name><name>ret_fp</name><operator>-&gt;</operator><name>non_blocking</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret_fp</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret_fp</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret_fp</name><operator>-&gt;</operator><name>rv</name></name> <operator>=</operator> <call><name>rbuffer_new</name><argument_list>(<argument><expr><name>kRWBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret_fp</name><operator>-&gt;</operator><name>_error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ret_fp</name><operator>-&gt;</operator><name>wr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ret_fp</name><operator>-&gt;</operator><name>rv</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>ret_fp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret_fp</name><operator>-&gt;</operator><name>rv</name><operator>-&gt;</operator><name>full_cb</name></name> <operator>=</operator> <operator>(</operator><name>rbuffer_callback</name><operator>)</operator><operator>&amp;</operator><name>file_rb_write_full_cb</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>FileDescriptor</name> <modifier>*</modifier></type><name>file_open_new</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>error</name> <operator>=</operator> <call><name>file_open</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>fp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>FileDescriptor</name> <modifier>*</modifier></type><name>file_open_fd_new</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_MALLOC FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<decl_stmt><decl><type><name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>error</name> <operator>=</operator> <call><name>file_open_fd</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>fp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>file_close</name><parameter_list>(<parameter><decl><type><name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_fsync</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flush_error</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>do_fsync</name></expr> ?</condition><then> <expr><call><name>file_fsync</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>file_flush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>close_error</name> <init>= <expr><call><name>os_close</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rbuffer_free</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>rv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>close_error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>close_error</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>flush_error</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>file_free</name><parameter_list>(<parameter><decl><type><name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_fsync</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><call><name>file_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>do_fsync</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>file_flush</name><parameter_list>(<parameter><decl><type><name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fp</name><operator>-&gt;</operator><name>wr</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>file_rb_write_full_cb</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>rv</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>error</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>_error</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>_error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>file_fsync</name><parameter_list>(<parameter><decl><type><name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fp</name><operator>-&gt;</operator><name>wr</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flush_error</name> <init>= <expr><call><name>file_flush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flush_error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>flush_error</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fsync_error</name> <init>= <expr><call><name>os_fsync</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fsync_error</name> <operator>!=</operator> <name>UV_EINVAL</name>

<operator>&amp;&amp;</operator> <name>fsync_error</name> <operator>!=</operator> <name>UV_EROFS</name>

<operator>&amp;&amp;</operator> <name>fsync_error</name> <operator>!=</operator> <name>UV_ENOTSUP</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>fsync_error</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>writebuf</name><index>[<expr><name>kRWBufferSize</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>file_rb_write_full_cb</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rv</name></decl></parameter>, <parameter><decl><type><name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>wr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rbuffer_size</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>read_bytes</name> <init>= <expr><call><name>rbuffer_read</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>writebuf</name></expr></argument>, <argument><expr><name>kRWBufferSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>wres</name> <init>= <expr><call><name>os_write</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>writebuf</name></expr></argument>, <argument><expr><name>read_bytes</name></expr></argument>,

<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>non_blocking</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wres</name> <operator>!=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>read_bytes</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wres</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>_error</name></name> <operator>=</operator> <name>UV_EIO</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>_error</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>wres</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>ptrdiff_t</name></type> <name>file_read</name><parameter_list>(<parameter><decl><type><name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ret_buf</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>fp</name><operator>-&gt;</operator><name>wr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>ret_buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>read_remaining</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rv</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>rv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>called_read</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>read_remaining</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>rv_size</name> <init>= <expr><call><name>rbuffer_size</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rv_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>rsize</name> <init>= <expr><call><name>rbuffer_read</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>rv_size</name></expr></argument>, <argument><expr><name>read_remaining</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>rsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>read_remaining</name> <operator>-=</operator> <name>rsize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>eof</name></name>

<operator>||</operator> <operator>(</operator><name>called_read</name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>non_blocking</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>read_remaining</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>rbuffer_size</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rbuffer_reset</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_READV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>write_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>buf</name></expr>, <expr><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>read_remaining</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>iov_base</name> <operator>=</operator> <call><name>rbuffer_write_ptr</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_count</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>kRWBufferSize</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>write_count</name> <operator>==</operator> <name>kRWBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>r_ret</name> <init>= <expr><call><name>os_readv</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>eof</name></name></expr></argument>, <argument><expr><name>iov</name></expr></argument>,

<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>iov</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>non_blocking</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r_ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>r_ret</name> <operator>&gt;</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>read_remaining</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rbuffer_produced</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>r_ret</name> <operator>-</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>read_remaining</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>read_remaining</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>r_ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>read_remaining</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>r_ret</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>r_ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>read_remaining</name> <operator>&gt;=</operator> <name>kRWBufferSize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>r_ret</name> <init>= <expr><call><name>os_read</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>eof</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>read_remaining</name></expr></argument>,

<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>non_blocking</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r_ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>read_remaining</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>r_ret</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><operator>(</operator><name>size</name> <operator>-</operator> <name>read_remaining</name><operator>)</operator></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>r_ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>write_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>r_ret</name> <init>= <expr><call><name>os_read</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>eof</name></name></expr></argument>,

<argument><expr><call><name>rbuffer_write_ptr</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_count</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>kRWBufferSize</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>non_blocking</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>write_count</name> <operator>==</operator> <name>kRWBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r_ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rbuffer_produced</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>r_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>r_ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>called_read</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><operator>(</operator><name>size</name> <operator>-</operator> <name>read_remaining</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>file_write</name><argument_list>(<argument><expr><name>FileDescriptor</name> <operator>*</operator><specifier>const</specifier> <name>fp</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name>buf</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>size_t</name> <name>size</name></expr></argument>)</argument_list>

<name>FUNC_ATTR_WARN_UNUSED_RESULT</name> <name>FUNC_ATTR_NONNULL_ARG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>wr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>written</name> <init>= <expr><call><name>rbuffer_write</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>rv</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>_error</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>error</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>_error</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>_error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>written</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UV_EIO</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>written</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>skipbuf</name><index>[<expr><name>kRWBufferSize</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ptrdiff_t</name></type> <name>file_skip</name><parameter_list>(<parameter><decl><type><name>FileDescriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>fp</name><operator>-&gt;</operator><name>wr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>read_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>new_read_bytes</name> <init>= <expr><call><name>file_read</name><argument_list>(

<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>skipbuf</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>size</name> <operator>-</operator> <name>read_bytes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>skipbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_read_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>new_read_bytes</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>new_read_bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>read_bytes</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>new_read_bytes</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>read_bytes</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>file_eof</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>read_bytes</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>msgpack_file_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;</operator> <name>PTRDIFF_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>written_bytes</name> <init>= <expr><call><name>file_write</name><argument_list>(<argument><expr><operator>(</operator><name>FileDescriptor</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>written_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>msgpack_file_write_error</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>written_bytes</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>msgpack_file_write_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E5420: Failed to write to file: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>os_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
