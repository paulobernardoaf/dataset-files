<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\option_defs.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval/typval.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOPT_BOOL</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOPT_NUM</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOPT_STRING</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOPT_GLOBAL</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOPT_WIN</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOPT_BUF</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOPT_UNSET</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SREQ_GLOBAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SREQ_WIN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SREQ_BUF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_EFM</name></cpp:macro> <cpp:value>"%f(%l) \\=: %t%*\\D%n: %m,%*[^\"]\"%f\"%*\\D%l: %m,%f(%l) \\=: %m,%*[^ ] %f %l: %m,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,%f|%l| %m"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_EFM</name></cpp:macro> <cpp:value>"%*[^\"]\"%f\"%*\\D%l: %m,\"%f\"%*\\D%l: %m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,\"%f\"\\, line %l%*\\D%c%*[^ ] %m,%D%*\\a[%*\\d]: Entering directory %*[`']%f',%X%*\\a[%*\\d]: Leaving directory %*[`']%f',%D%*\\a: Entering directory %*[`']%f',%X%*\\a: Leaving directory %*[`']%f',%DMaking %*\\a in %f,%f|%l| %m"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_GREPFORMAT</name></cpp:macro> <cpp:value>"%f:%l:%m,%f:%l%m,%f %l%m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DOS</name></cpp:macro> <cpp:value>"dos"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MAC</name></cpp:macro> <cpp:value>"mac"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_UNIX</name></cpp:macro> <cpp:value>"unix"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CRNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_FF</name></cpp:macro> <cpp:value>"dos"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_FFS_VIM</name></cpp:macro> <cpp:value>"dos,unix"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_FFS_VI</name></cpp:macro> <cpp:value>"dos,unix"</cpp:value></cpp:define> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_FF</name></cpp:macro> <cpp:value>"unix"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_FFS_VIM</name></cpp:macro> <cpp:value>"unix,dos"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_FFS_VI</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_UCSBOM</name></cpp:macro> <cpp:value>"ucs-bom"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_DFLT</name></cpp:macro> <cpp:value>"utf-8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOL_UNKNOWN</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOL_UNIX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOL_DOS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOL_MAC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_WRAP</name></cpp:macro> <cpp:value>'t'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_WRAP_COMS</name></cpp:macro> <cpp:value>'c'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_RET_COMS</name></cpp:macro> <cpp:value>'r'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_OPEN_COMS</name></cpp:macro> <cpp:value>'o'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_Q_COMS</name></cpp:macro> <cpp:value>'q'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_Q_NUMBER</name></cpp:macro> <cpp:value>'n'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_Q_SECOND</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_INS_VI</name></cpp:macro> <cpp:value>'v'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_INS_LONG</name></cpp:macro> <cpp:value>'l'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_INS_BLANK</name></cpp:macro> <cpp:value>'b'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_MBYTE_BREAK</name></cpp:macro> <cpp:value>'m'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_MBYTE_JOIN</name></cpp:macro> <cpp:value>'M'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_MBYTE_JOIN2</name></cpp:macro> <cpp:value>'B'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_ONE_LETTER</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_WHITE_PAR</name></cpp:macro> <cpp:value>'w'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_AUTO</name></cpp:macro> <cpp:value>'a'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_REMOVE_COMS</name></cpp:macro> <cpp:value>'j'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_PERIOD_ABBR</name></cpp:macro> <cpp:value>'p'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_FO_VI</name></cpp:macro> <cpp:value>"vt"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_FO_VIM</name></cpp:macro> <cpp:value>"tcqj"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FO_ALL</name></cpp:macro> <cpp:value>"tcroq2vlb1mMBn,awjp"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_ALTREAD</name></cpp:macro> <cpp:value>'a'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_ALTWRITE</name></cpp:macro> <cpp:value>'A'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_BAR</name></cpp:macro> <cpp:value>'b'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_BSLASH</name></cpp:macro> <cpp:value>'B'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_SEARCH</name></cpp:macro> <cpp:value>'c'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_CONCAT</name></cpp:macro> <cpp:value>'C'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_DOTTAG</name></cpp:macro> <cpp:value>'d'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_DIGRAPH</name></cpp:macro> <cpp:value>'D'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_EXECBUF</name></cpp:macro> <cpp:value>'e'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_EMPTYREGION</name></cpp:macro> <cpp:value>'E'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_FNAMER</name></cpp:macro> <cpp:value>'f'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_FNAMEW</name></cpp:macro> <cpp:value>'F'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_INTMOD</name></cpp:macro> <cpp:value>'i'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_INDENT</name></cpp:macro> <cpp:value>'I'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_ENDOFSENT</name></cpp:macro> <cpp:value>'J'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_KOFFSET</name></cpp:macro> <cpp:value>'K'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_LITERAL</name></cpp:macro> <cpp:value>'l'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_LISTWM</name></cpp:macro> <cpp:value>'L'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_SHOWMATCH</name></cpp:macro> <cpp:value>'m'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_MATCHBSL</name></cpp:macro> <cpp:value>'M'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_NUMCOL</name></cpp:macro> <cpp:value>'n'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_LINEOFF</name></cpp:macro> <cpp:value>'o'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_OVERNEW</name></cpp:macro> <cpp:value>'O'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_LISP</name></cpp:macro> <cpp:value>'p'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_FNAMEAPP</name></cpp:macro> <cpp:value>'P'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_JOINCOL</name></cpp:macro> <cpp:value>'q'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_REDO</name></cpp:macro> <cpp:value>'r'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_REMMARK</name></cpp:macro> <cpp:value>'R'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_BUFOPT</name></cpp:macro> <cpp:value>'s'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_BUFOPTGLOB</name></cpp:macro> <cpp:value>'S'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_TAGPAT</name></cpp:macro> <cpp:value>'t'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_UNDO</name></cpp:macro> <cpp:value>'u'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_BACKSPACE</name></cpp:macro> <cpp:value>'v'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_FWRITE</name></cpp:macro> <cpp:value>'W'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_ESC</name></cpp:macro> <cpp:value>'x'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_REPLCNT</name></cpp:macro> <cpp:value>'X'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_YANK</name></cpp:macro> <cpp:value>'y'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_KEEPRO</name></cpp:macro> <cpp:value>'Z'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_DOLLAR</name></cpp:macro> <cpp:value>'$'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_FILTER</name></cpp:macro> <cpp:value>'!'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_MATCH</name></cpp:macro> <cpp:value>'%'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_PLUS</name></cpp:macro> <cpp:value>'+'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_REGAPPEND</name></cpp:macro> <cpp:value>'&gt;'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_SCOLON</name></cpp:macro> <cpp:value>';'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_CHANGEW</name></cpp:macro> <cpp:value>'_'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_VIM</name></cpp:macro> <cpp:value>"aABceFs_"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPO_VI</name></cpp:macro> <cpp:value>"aAbBcCdDeEfFiIJKlLmMnoOpPqrRsStuvWxXyZ$!%+&gt;;_"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WW_ALL</name></cpp:macro> <cpp:value>"bshl&lt;&gt;[],~"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_NORMAL</name></cpp:macro> <cpp:value>'n'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_VISUAL</name></cpp:macro> <cpp:value>'v'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_INSERT</name></cpp:macro> <cpp:value>'i'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_COMMAND</name></cpp:macro> <cpp:value>'c'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_HELP</name></cpp:macro> <cpp:value>'h'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_RETURN</name></cpp:macro> <cpp:value>'r'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_A</name></cpp:macro> <cpp:value>"nvich"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_ALL</name></cpp:macro> <cpp:value>"anvichr"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_NONE</name></cpp:macro> <cpp:value>' '</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_NONEF</name></cpp:macro> <cpp:value>'x'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COCU_ALL</name></cpp:macro> <cpp:value>"nvic"</cpp:value></cpp:define> 

<enum>enum <block>{

<decl><name>SHM_RO</name> <init>= <expr><literal type="char">'r'</literal></expr></init></decl>, 

<decl><name>SHM_MOD</name> <init>= <expr><literal type="char">'m'</literal></expr></init></decl>, 

<decl><name>SHM_FILE</name> <init>= <expr><literal type="char">'f'</literal></expr></init></decl>, 

<decl><name>SHM_LAST</name> <init>= <expr><literal type="char">'i'</literal></expr></init></decl>, 

<decl><name>SHM_TEXT</name> <init>= <expr><literal type="char">'x'</literal></expr></init></decl>, 

<decl><name>SHM_LINES</name> <init>= <expr><literal type="char">'l'</literal></expr></init></decl>, 

<decl><name>SHM_NEW</name> <init>= <expr><literal type="char">'n'</literal></expr></init></decl>, 

<decl><name>SHM_WRI</name> <init>= <expr><literal type="char">'w'</literal></expr></init></decl>, 

<decl><name>SHM_ABBREVIATIONS</name> <init>= <expr><literal type="char">'a'</literal></expr></init></decl>, 

<decl><name>SHM_WRITE</name> <init>= <expr><literal type="char">'W'</literal></expr></init></decl>, 

<decl><name>SHM_TRUNC</name> <init>= <expr><literal type="char">'t'</literal></expr></init></decl>, 

<decl><name>SHM_TRUNCALL</name> <init>= <expr><literal type="char">'T'</literal></expr></init></decl>, 

<decl><name>SHM_OVER</name> <init>= <expr><literal type="char">'o'</literal></expr></init></decl>, 

<decl><name>SHM_OVERALL</name> <init>= <expr><literal type="char">'O'</literal></expr></init></decl>, 

<decl><name>SHM_SEARCH</name> <init>= <expr><literal type="char">'s'</literal></expr></init></decl>, 

<decl><name>SHM_ATTENTION</name> <init>= <expr><literal type="char">'A'</literal></expr></init></decl>, 

<decl><name>SHM_INTRO</name> <init>= <expr><literal type="char">'I'</literal></expr></init></decl>, 

<decl><name>SHM_COMPLETIONMENU</name> <init>= <expr><literal type="char">'c'</literal></expr></init></decl>, 

<decl><name>SHM_RECORDING</name> <init>= <expr><literal type="char">'q'</literal></expr></init></decl>, 

<decl><name>SHM_FILEINFO</name> <init>= <expr><literal type="char">'F'</literal></expr></init></decl>, 

<decl><name>SHM_SEARCHCOUNT</name> <init>= <expr><literal type="char">'S'</literal></expr></init></decl>, 

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHM_ALL_ABBREVIATIONS</name></cpp:macro> <cpp:value>((char_u[]) { SHM_RO, SHM_MOD, SHM_FILE, SHM_LAST, SHM_TEXT, SHM_LINES, SHM_NEW, SHM_WRI, 0, })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_ASEL</name></cpp:macro> <cpp:value>'a'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_ASELML</name></cpp:macro> <cpp:value>'A'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_BOT</name></cpp:macro> <cpp:value>'b'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_CONDIALOG</name></cpp:macro> <cpp:value>'c'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_TABLINE</name></cpp:macro> <cpp:value>'e'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_FORG</name></cpp:macro> <cpp:value>'f'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_GREY</name></cpp:macro> <cpp:value>'g'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_HORSCROLL</name></cpp:macro> <cpp:value>'h'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_ICON</name></cpp:macro> <cpp:value>'i'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_LEFT</name></cpp:macro> <cpp:value>'l'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_VLEFT</name></cpp:macro> <cpp:value>'L'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_MENUS</name></cpp:macro> <cpp:value>'m'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_NOSYSMENU</name></cpp:macro> <cpp:value>'M'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_POINTER</name></cpp:macro> <cpp:value>'p'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_ASELPLUS</name></cpp:macro> <cpp:value>'P'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_RIGHT</name></cpp:macro> <cpp:value>'r'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_VRIGHT</name></cpp:macro> <cpp:value>'R'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_TOOLBAR</name></cpp:macro> <cpp:value>'T'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_FOOTER</name></cpp:macro> <cpp:value>'F'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_VERTICAL</name></cpp:macro> <cpp:value>'v'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_KEEPWINSIZE</name></cpp:macro> <cpp:value>'k'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO_ALL</name></cpp:macro> <cpp:value>"aAbcefFghilmMprTvk"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_NEST</name></cpp:macro> <cpp:value>'n'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_BLANK</name></cpp:macro> <cpp:value>'b'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_START</name></cpp:macro> <cpp:value>'s'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_MIDDLE</name></cpp:macro> <cpp:value>'m'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_END</name></cpp:macro> <cpp:value>'e'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_AUTO_END</name></cpp:macro> <cpp:value>'x'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_FIRST</name></cpp:macro> <cpp:value>'f'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_LEFT</name></cpp:macro> <cpp:value>'l'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_RIGHT</name></cpp:macro> <cpp:value>'r'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_NOBACK</name></cpp:macro> <cpp:value>'O'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_ALL</name></cpp:macro> <cpp:value>"nbsmexflrO"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_MAX_LEN</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define> 

<enum>enum <block>{

<decl><name>STL_FILEPATH</name> <init>= <expr><literal type="char">'f'</literal></expr></init></decl>, 

<decl><name>STL_FULLPATH</name> <init>= <expr><literal type="char">'F'</literal></expr></init></decl>, 

<decl><name>STL_FILENAME</name> <init>= <expr><literal type="char">'t'</literal></expr></init></decl>, 

<decl><name>STL_COLUMN</name> <init>= <expr><literal type="char">'c'</literal></expr></init></decl>, 

<decl><name>STL_VIRTCOL</name> <init>= <expr><literal type="char">'v'</literal></expr></init></decl>, 

<decl><name>STL_VIRTCOL_ALT</name> <init>= <expr><literal type="char">'V'</literal></expr></init></decl>, 

<decl><name>STL_LINE</name> <init>= <expr><literal type="char">'l'</literal></expr></init></decl>, 

<decl><name>STL_NUMLINES</name> <init>= <expr><literal type="char">'L'</literal></expr></init></decl>, 

<decl><name>STL_BUFNO</name> <init>= <expr><literal type="char">'n'</literal></expr></init></decl>, 

<decl><name>STL_KEYMAP</name> <init>= <expr><literal type="char">'k'</literal></expr></init></decl>, 

<decl><name>STL_OFFSET</name> <init>= <expr><literal type="char">'o'</literal></expr></init></decl>, 

<decl><name>STL_OFFSET_X</name> <init>= <expr><literal type="char">'O'</literal></expr></init></decl>, 

<decl><name>STL_BYTEVAL</name> <init>= <expr><literal type="char">'b'</literal></expr></init></decl>, 

<decl><name>STL_BYTEVAL_X</name> <init>= <expr><literal type="char">'B'</literal></expr></init></decl>, 

<decl><name>STL_ROFLAG</name> <init>= <expr><literal type="char">'r'</literal></expr></init></decl>, 

<decl><name>STL_ROFLAG_ALT</name> <init>= <expr><literal type="char">'R'</literal></expr></init></decl>, 

<decl><name>STL_HELPFLAG</name> <init>= <expr><literal type="char">'h'</literal></expr></init></decl>, 

<decl><name>STL_HELPFLAG_ALT</name> <init>= <expr><literal type="char">'H'</literal></expr></init></decl>, 

<decl><name>STL_FILETYPE</name> <init>= <expr><literal type="char">'y'</literal></expr></init></decl>, 

<decl><name>STL_FILETYPE_ALT</name> <init>= <expr><literal type="char">'Y'</literal></expr></init></decl>, 

<decl><name>STL_PREVIEWFLAG</name> <init>= <expr><literal type="char">'w'</literal></expr></init></decl>, 

<decl><name>STL_PREVIEWFLAG_ALT</name> <init>= <expr><literal type="char">'W'</literal></expr></init></decl>, 

<decl><name>STL_MODIFIED</name> <init>= <expr><literal type="char">'m'</literal></expr></init></decl>, 

<decl><name>STL_MODIFIED_ALT</name> <init>= <expr><literal type="char">'M'</literal></expr></init></decl>, 

<decl><name>STL_QUICKFIX</name> <init>= <expr><literal type="char">'q'</literal></expr></init></decl>, 

<decl><name>STL_PERCENTAGE</name> <init>= <expr><literal type="char">'p'</literal></expr></init></decl>, 

<decl><name>STL_ALTPERCENT</name> <init>= <expr><literal type="char">'P'</literal></expr></init></decl>, 

<decl><name>STL_ARGLISTSTAT</name> <init>= <expr><literal type="char">'a'</literal></expr></init></decl>, 

<decl><name>STL_PAGENUM</name> <init>= <expr><literal type="char">'N'</literal></expr></init></decl>, 

<decl><name>STL_VIM_EXPR</name> <init>= <expr><literal type="char">'{'</literal></expr></init></decl>, 

<decl><name>STL_SEPARATE</name> <init>= <expr><literal type="char">'='</literal></expr></init></decl>, 

<decl><name>STL_TRUNCMARK</name> <init>= <expr><literal type="char">'&lt;'</literal></expr></init></decl>, 

<decl><name>STL_USER_HL</name> <init>= <expr><literal type="char">'*'</literal></expr></init></decl>, 

<decl><name>STL_HIGHLIGHT</name> <init>= <expr><literal type="char">'#'</literal></expr></init></decl>, 

<decl><name>STL_TABPAGENR</name> <init>= <expr><literal type="char">'T'</literal></expr></init></decl>, 

<decl><name>STL_TABCLOSENR</name> <init>= <expr><literal type="char">'X'</literal></expr></init></decl>, 

<decl><name>STL_CLICK_FUNC</name> <init>= <expr><literal type="char">'@'</literal></expr></init></decl>, 

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_ALL</name></cpp:macro> <cpp:value>((char_u[]) { STL_FILEPATH, STL_FULLPATH, STL_FILENAME, STL_COLUMN, STL_VIRTCOL, STL_VIRTCOL_ALT, STL_LINE, STL_NUMLINES, STL_BUFNO, STL_KEYMAP, STL_OFFSET, STL_OFFSET_X, STL_BYTEVAL, STL_BYTEVAL_X, STL_ROFLAG, STL_ROFLAG_ALT, STL_HELPFLAG, STL_HELPFLAG_ALT, STL_FILETYPE, STL_FILETYPE_ALT, STL_PREVIEWFLAG, STL_PREVIEWFLAG_ALT, STL_MODIFIED, STL_MODIFIED_ALT, STL_QUICKFIX, STL_PERCENTAGE, STL_ALTPERCENT, STL_ARGLISTSTAT, STL_PAGENUM, STL_VIM_EXPR, STL_SEPARATE, STL_TRUNCMARK, STL_USER_HL, STL_HIGHLIGHT, STL_TABPAGENR, STL_TABCLOSENR, STL_CLICK_FUNC, 0, })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIM_FULL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIM_LONGEST</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIM_LIST</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS_INDENT</name></cpp:macro> <cpp:value>'i'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS_EOL</name></cpp:macro> <cpp:value>'o'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS_START</name></cpp:macro> <cpp:value>'s'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LISPWORD_VALUE</name></cpp:macro> <cpp:value>"defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_aleph</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_acd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_ambw</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_ar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_aw</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_awa</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_bs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_bg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_bk</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_bkc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name> <name>int</name></type> <name>bkc_flags</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_OPTION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_bkc_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{<expr><literal type="string">"yes"</literal></expr>, <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"no"</literal></expr>, <expr><literal type="string">"breaksymlink"</literal></expr>, <expr><literal type="string">"breakhardlink"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKC_YES</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKC_AUTO</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKC_NO</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKC_BREAKSYMLINK</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKC_BREAKHARDLINK</name></cpp:macro> <cpp:value>0x010</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_bdir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_bex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_bo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name></type> <name><name>breakat_flags</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name></type> <name>bo_flags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_OPTION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_bo_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"all"</literal></expr>, <expr><literal type="string">"backspace"</literal></expr>, <expr><literal type="string">"cursor"</literal></expr>, <expr><literal type="string">"complete"</literal></expr>,

<expr><literal type="string">"copy"</literal></expr>, <expr><literal type="string">"ctrlg"</literal></expr>, <expr><literal type="string">"error"</literal></expr>, <expr><literal type="string">"esc"</literal></expr>, <expr><literal type="string">"ex"</literal></expr>,

<expr><literal type="string">"hangul"</literal></expr>, <expr><literal type="string">"insertmode"</literal></expr>, <expr><literal type="string">"lang"</literal></expr>, <expr><literal type="string">"mess"</literal></expr>,

<expr><literal type="string">"showmatch"</literal></expr>, <expr><literal type="string">"operator"</literal></expr>, <expr><literal type="string">"register"</literal></expr>, <expr><literal type="string">"shell"</literal></expr>,

<expr><literal type="string">"spell"</literal></expr>, <expr><literal type="string">"wildmode"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_ALL</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_BS</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_CRSR</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_COMPL</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_COPY</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_CTRLG</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_ERROR</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_ESC</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_EX</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_HANGUL</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_IM</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_LANG</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_MESS</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_MATCH</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_OPER</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_REG</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_SH</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_SPELL</name></cpp:macro> <cpp:value>0x20000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BO_WILD</name></cpp:macro> <cpp:value>0x40000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_bsk</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_breakat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_cmp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name></type> <name>cmp_flags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_OPTION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_cmp_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"internal"</literal></expr>, <expr><literal type="string">"keepascii"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP_INTERNAL</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP_KEEPASCII</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_enc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_deco</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_ccv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_cedit</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_cb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name></type> <name>cb_flags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_OPTION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_cb_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"unnamed"</literal></expr>, <expr><literal type="string">"unnamedplus"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CB_UNNAMED</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CB_UNNAMEDPLUS</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CB_UNNAMEDMASK</name></cpp:macro> <cpp:value>(CB_UNNAMED | CB_UNNAMEDPLUS)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_cwh</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_ch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_columns</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_confirm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_cp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_cot</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_pb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_ph</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_pw</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_cpo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_csprg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_csre</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_csqf</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSQF_CMDS</name></cpp:macro> <cpp:value>"sgdctefia"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSQF_FLAGS</name></cpp:macro> <cpp:value>"+-0"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_cst</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_csto</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_cspc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_csverbose</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_debug</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_def</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_inc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_dip</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_dex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_dict</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_dg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_dir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_dy</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name></type> <name>dy_flags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_OPTION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_dy_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"lastline"</literal></expr>, <expr><literal type="string">"truncate"</literal></expr>, <expr><literal type="string">"uhex"</literal></expr>, <expr><literal type="string">"msgsep"</literal></expr>,

<expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DY_LASTLINE</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DY_TRUNCATE</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DY_UHEX</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DY_MSGSEP</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_ed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_emoji</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_ead</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_ea</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_ep</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_eb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_ef</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_efm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_gefm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_gp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_ei</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_exrc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_fencs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_ffs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_fic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_fcl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_fdls</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_fdo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name></type> <name>fdo_flags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_OPTION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_fdo_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"all"</literal></expr>, <expr><literal type="string">"block"</literal></expr>, <expr><literal type="string">"hor"</literal></expr>, <expr><literal type="string">"mark"</literal></expr>, <expr><literal type="string">"percent"</literal></expr>,

<expr><literal type="string">"quickfix"</literal></expr>, <expr><literal type="string">"search"</literal></expr>, <expr><literal type="string">"tag"</literal></expr>, <expr><literal type="string">"insert"</literal></expr>,

<expr><literal type="string">"undo"</literal></expr>, <expr><literal type="string">"jump"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDO_ALL</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDO_BLOCK</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDO_HOR</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDO_MARK</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDO_PERCENT</name></cpp:macro> <cpp:value>0x010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDO_QUICKFIX</name></cpp:macro> <cpp:value>0x020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDO_SEARCH</name></cpp:macro> <cpp:value>0x040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDO_TAG</name></cpp:macro> <cpp:value>0x080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDO_INSERT</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDO_UNDO</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDO_JUMP</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_fp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_fs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_gd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_pdev</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_penc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_pexpr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_pmfn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_pmcs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_pfn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_popt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_header</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_prompt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_guicursor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_guifont</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_guifontset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_guifontwide</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_hf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_hh</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_hlg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_hid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_hl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_hls</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_hi</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_hkmap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_hkmapp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_arshape</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_icon</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_iconstring</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_ic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_is</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_icm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_im</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_isf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_isi</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_isp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_js</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_jop</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name></type> <name>jop_flags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_OPTION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_jop_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"stack"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOP_STACK</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_kp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_km</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_langmap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_lnr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_lrm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_lm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_lines</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_linespace</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_lispwords</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_ls</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_stal</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_lcs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_lz</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_lpl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_magic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_menc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_mef</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_mp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_cc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name><name>p_cc_cols</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_mat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_mco</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_mfd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_mmd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_mmp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_mis</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_msm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_mle</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_mls</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_mouse</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_mousem</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_mouset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_more</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_opfunc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_para</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_paste</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_pt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_pex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_pm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_path</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_cdpath</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_pyx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_rdb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name></type> <name>rdb_flags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_OPTION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_rdb_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{

<expr><literal type="string">"compositor"</literal></expr>,

<expr><literal type="string">"nothrottle"</literal></expr>,

<expr><literal type="string">"invalid"</literal></expr>,

<expr><literal type="string">"nodelta"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDB_COMPOSITOR</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDB_NOTHROTTLE</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDB_INVALID</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDB_NODELTA</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_rdt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_remap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_re</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_report</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_pvh</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_ari</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_ri</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_ru</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_ruf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_pp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_rtp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_scbk</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_sj</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_so</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_sbo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_sections</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_secure</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_sel</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_slm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_ssop</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name></type> <name>ssop_flags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_OPTION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_ssop_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{

<expr><literal type="string">"buffers"</literal></expr>, <expr><literal type="string">"winpos"</literal></expr>, <expr><literal type="string">"resize"</literal></expr>, <expr><literal type="string">"winsize"</literal></expr>,

<expr><literal type="string">"localoptions"</literal></expr>, <expr><literal type="string">"options"</literal></expr>, <expr><literal type="string">"help"</literal></expr>, <expr><literal type="string">"blank"</literal></expr>, <expr><literal type="string">"globals"</literal></expr>, <expr><literal type="string">"slash"</literal></expr>, <expr><literal type="string">"unix"</literal></expr>,

<expr><literal type="string">"sesdir"</literal></expr>, <expr><literal type="string">"curdir"</literal></expr>, <expr><literal type="string">"folds"</literal></expr>, <expr><literal type="string">"cursor"</literal></expr>, <expr><literal type="string">"tabpages"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_BUFFERS</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_WINPOS</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_RESIZE</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_WINSIZE</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_LOCALOPTIONS</name></cpp:macro> <cpp:value>0x010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_OPTIONS</name></cpp:macro> <cpp:value>0x020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_HELP</name></cpp:macro> <cpp:value>0x040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_BLANK</name></cpp:macro> <cpp:value>0x080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_GLOBALS</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_SLASH</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_UNIX</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_SESDIR</name></cpp:macro> <cpp:value>0x800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_CURDIR</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_FOLDS</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_CURSOR</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSOP_TABPAGES</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_sh</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_shcf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_sp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_shq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_sxq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_sxe</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_srr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_stmp</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_ssl</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_stl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_sr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_shm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_sbr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_sc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_sft</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_sm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_smd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_ss</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_siso</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_scs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_sta</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_sb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_tpm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_tal</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_sps</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_spr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_sol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_su</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_swb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name></type> <name>swb_flags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_OPTION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_swb_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{ <expr><literal type="string">"useopen"</literal></expr>, <expr><literal type="string">"usetab"</literal></expr>, <expr><literal type="string">"split"</literal></expr>, <expr><literal type="string">"newtab"</literal></expr>, <expr><literal type="string">"vsplit"</literal></expr>, <expr><literal type="string">"uselast"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWB_USEOPEN</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWB_USETAB</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWB_SPLIT</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWB_NEWTAB</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWB_VSPLIT</name></cpp:macro> <cpp:value>0x010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWB_USELAST</name></cpp:macro> <cpp:value>0x020</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_tbs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_tc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name></type> <name>tc_flags</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_OPTION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_tc_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{ <expr><literal type="string">"followic"</literal></expr>, <expr><literal type="string">"ignore"</literal></expr>, <expr><literal type="string">"match"</literal></expr>, <expr><literal type="string">"followscs"</literal></expr>, <expr><literal type="string">"smart"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TC_FOLLOWIC</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TC_IGNORE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TC_MATCH</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TC_FOLLOWSCS</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TC_SMART</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_tl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_tr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_tags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_tgst</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_tbidi</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_terse</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_to</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_timeout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_tm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_title</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_titlelen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_titleold</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_titlestring</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_tsr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_tgc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_ttimeout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_ttm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_udir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_ul</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_ur</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_uc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_ut</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_fcs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_shada</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <modifier>*</modifier></type><name>p_shadafile</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_vdir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_vop</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name></type> <name>vop_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_vb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_ve</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name></type> <name>ve_flags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_OPTION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_ve_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"block"</literal></expr>, <expr><literal type="string">"insert"</literal></expr>, <expr><literal type="string">"all"</literal></expr>, <expr><literal type="string">"onemore"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE_BLOCK</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE_INSERT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE_ALL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE_ONEMORE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_verbose</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_OPTION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p_vfile</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></init></decl>;</decl_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p_vfile</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_warn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_wop</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name></type> <name>wop_flags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_OPTION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_wop_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{ <expr><literal type="string">"tagfile"</literal></expr>, <expr><literal type="string">"pum"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WOP_TAGFILE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WOP_PUM</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_window</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_wak</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_wig</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_ww</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_wc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_wcm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_wic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>p_wim</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_wmnu</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_wh</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_wmh</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_wmw</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_wiw</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_ws</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_write</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_wa</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_wb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>p_wd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_force_on</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>p_force_off</name></decl>;</decl_stmt> 

<enum>enum <block>{

<decl><name>BV_AI</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>

, <decl><name>BV_AR</name></decl>

, <decl><name>BV_BH</name></decl>

, <decl><name>BV_BKC</name></decl>

, <decl><name>BV_BT</name></decl>

, <decl><name>BV_EFM</name></decl>

, <decl><name>BV_GP</name></decl>

, <decl><name>BV_MP</name></decl>

, <decl><name>BV_BIN</name></decl>

, <decl><name>BV_BL</name></decl>

, <decl><name>BV_BOMB</name></decl>

, <decl><name>BV_CHANNEL</name></decl>

, <decl><name>BV_CI</name></decl>

, <decl><name>BV_CIN</name></decl>

, <decl><name>BV_CINK</name></decl>

, <decl><name>BV_CINO</name></decl>

, <decl><name>BV_CINW</name></decl>

, <decl><name>BV_CM</name></decl>

, <decl><name>BV_CMS</name></decl>

, <decl><name>BV_COM</name></decl>

, <decl><name>BV_CPT</name></decl>

, <decl><name>BV_DICT</name></decl>

, <decl><name>BV_TSR</name></decl>

, <decl><name>BV_CFU</name></decl>

, <decl><name>BV_DEF</name></decl>

, <decl><name>BV_INC</name></decl>

, <decl><name>BV_EOL</name></decl>

, <decl><name>BV_FIXEOL</name></decl>

, <decl><name>BV_EP</name></decl>

, <decl><name>BV_ET</name></decl>

, <decl><name>BV_FENC</name></decl>

, <decl><name>BV_FP</name></decl>

, <decl><name>BV_BEXPR</name></decl>

, <decl><name>BV_FEX</name></decl>

, <decl><name>BV_FF</name></decl>

, <decl><name>BV_FLP</name></decl>

, <decl><name>BV_FO</name></decl>

, <decl><name>BV_FT</name></decl>

, <decl><name>BV_IMI</name></decl>

, <decl><name>BV_IMS</name></decl>

, <decl><name>BV_INDE</name></decl>

, <decl><name>BV_INDK</name></decl>

, <decl><name>BV_INEX</name></decl>

, <decl><name>BV_INF</name></decl>

, <decl><name>BV_ISK</name></decl>

, <decl><name>BV_KMAP</name></decl>

, <decl><name>BV_KP</name></decl>

, <decl><name>BV_LISP</name></decl>

, <decl><name>BV_LW</name></decl>

, <decl><name>BV_MENC</name></decl>

, <decl><name>BV_MA</name></decl>

, <decl><name>BV_ML</name></decl>

, <decl><name>BV_MOD</name></decl>

, <decl><name>BV_MPS</name></decl>

, <decl><name>BV_NF</name></decl>

, <decl><name>BV_OFU</name></decl>

, <decl><name>BV_PATH</name></decl>

, <decl><name>BV_PI</name></decl>

, <decl><name>BV_QE</name></decl>

, <decl><name>BV_RO</name></decl>

, <decl><name>BV_SCBK</name></decl>

, <decl><name>BV_SI</name></decl>

, <decl><name>BV_SMC</name></decl>

, <decl><name>BV_SYN</name></decl>

, <decl><name>BV_SPC</name></decl>

, <decl><name>BV_SPF</name></decl>

, <decl><name>BV_SPL</name></decl>

, <decl><name>BV_STS</name></decl>

, <decl><name>BV_SUA</name></decl>

, <decl><name>BV_SW</name></decl>

, <decl><name>BV_SWF</name></decl>

, <decl><name>BV_TFU</name></decl>

, <decl><name>BV_TAGS</name></decl>

, <decl><name>BV_TC</name></decl>

, <decl><name>BV_TS</name></decl>

, <decl><name>BV_TW</name></decl>

, <decl><name>BV_TX</name></decl>

, <decl><name>BV_UDF</name></decl>

, <decl><name>BV_UL</name></decl>

, <decl><name>BV_WM</name></decl>

, <decl><name>BV_COUNT</name></decl> 

}</block>;</enum>

<enum>enum <block>{

<decl><name>WV_LIST</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>

, <decl><name>WV_ARAB</name></decl>

, <decl><name>WV_COCU</name></decl>

, <decl><name>WV_COLE</name></decl>

, <decl><name>WV_CRBIND</name></decl>

, <decl><name>WV_BRI</name></decl>

, <decl><name>WV_BRIOPT</name></decl>

, <decl><name>WV_DIFF</name></decl>

, <decl><name>WV_FDC</name></decl>

, <decl><name>WV_FEN</name></decl>

, <decl><name>WV_FDI</name></decl>

, <decl><name>WV_FDL</name></decl>

, <decl><name>WV_FDM</name></decl>

, <decl><name>WV_FML</name></decl>

, <decl><name>WV_FDN</name></decl>

, <decl><name>WV_FDE</name></decl>

, <decl><name>WV_FDT</name></decl>

, <decl><name>WV_FMR</name></decl>

, <decl><name>WV_LBR</name></decl>

, <decl><name>WV_NU</name></decl>

, <decl><name>WV_RNU</name></decl>

, <decl><name>WV_NUW</name></decl>

, <decl><name>WV_PVW</name></decl>

, <decl><name>WV_RL</name></decl>

, <decl><name>WV_RLC</name></decl>

, <decl><name>WV_SCBIND</name></decl>

, <decl><name>WV_SCROLL</name></decl>

, <decl><name>WV_SISO</name></decl>

, <decl><name>WV_SO</name></decl>

, <decl><name>WV_SPELL</name></decl>

, <decl><name>WV_CUC</name></decl>

, <decl><name>WV_CUL</name></decl>

, <decl><name>WV_CC</name></decl>

, <decl><name>WV_STL</name></decl>

, <decl><name>WV_WFH</name></decl>

, <decl><name>WV_WFW</name></decl>

, <decl><name>WV_WRAP</name></decl>

, <decl><name>WV_SCL</name></decl>

, <decl><name>WV_WINHL</name></decl>

, <decl><name>WV_FCS</name></decl>

, <decl><name>WV_LCS</name></decl>

, <decl><name>WV_WINBL</name></decl>

, <decl><name>WV_COUNT</name></decl> 

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_LOCAL_UNDOLEVEL</name></cpp:macro> <cpp:value>-123456</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SB_MAX</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>sctx_T</name></type> <name>script_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl>;</decl_stmt> 

}</block></struct></type> <name>LastSet</name>;</typedef>

</unit>
