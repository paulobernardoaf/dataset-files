<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\fold.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fold.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/change.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/diff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_session.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/indent.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_updates.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/extmark.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/undo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ops.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>linenr_T</name></type> <name>fd_top</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>fd_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>garray_T</name></type> <name>fd_nested</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>fd_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>TriState</name></type> <name>fd_small</name></decl>;</decl_stmt> 

}</block></struct></type> <name>fold_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_OPEN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_CLOSED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_LEVEL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LEVEL</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>off</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum_save</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>lvl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>lvl_next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>had_end</name></decl>;</decl_stmt> 

}</block></struct></type> <name>fline_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>fold_changed</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>LevelGetter</name>)<parameter_list>(<parameter><decl><type><name>fline_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fold.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_nofold</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E490: No fold found"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>invalid_top</name> <init>= <expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>invalid_bot</name> <init>= <expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>prev_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_lnum_lvl</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONE_NOTHING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONE_ACTION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONE_FOLD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>foldstartmarkerlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>foldendmarker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>foldendmarkerlen</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>copyFoldingState</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp_from</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp_to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>wp_to</name><operator>-&gt;</operator><name>w_fold_manual</name></name> <operator>=</operator> <name><name>wp_from</name><operator>-&gt;</operator><name>w_fold_manual</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp_to</name><operator>-&gt;</operator><name>w_foldinvalid</name></name> <operator>=</operator> <name><name>wp_from</name><operator>-&gt;</operator><name>w_foldinvalid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cloneFoldGrowArray</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp_from</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp_to</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>hasAnyFolding</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>terminal</name></name> <operator>&amp;&amp;</operator> <name><name>win</name><operator>-&gt;</operator><name>w_p_fen</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>foldmethodIsManual</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hasFolding</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>firstp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lastp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>firstp</name></expr></argument>, <argument><expr><name>lastp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hasFoldingWin</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>win</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>firstp</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lastp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>cache</name></decl></parameter>, 

<parameter><decl><type><name>foldinfo_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>infop</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>had_folded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum_rel</name> <init>= <expr><name>lnum</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_level</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>maybe_small</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>low_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>checkupdate</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>infop</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>fi_level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cache</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><call><name>find_wl_entry</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>had_folded</name> <operator>=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>wl_folded</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name> <init>= <expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>w_folds</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>foldFind</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>lnum_rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum_rel</name> <operator>==</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&amp;&amp;</operator> <name>low_level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>low_level</name> <operator>=</operator> <name>level</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>+=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>+=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>had_folded</name> <operator>=</operator> <call><name>check_closed</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_level</name></expr></argument>, <argument><expr><name>level</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>maybe_small</name></expr></argument>, <argument><expr><name>lnum</name> <operator>-</operator> <name>lnum_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>had_folded</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last</name> <operator>+=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum_rel</name> <operator>-=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>had_folded</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>infop</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>fi_level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>fi_lnum</name></name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name>lnum_rel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>fi_low_level</name></name> <operator>=</operator> <ternary><condition><expr><name>low_level</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>level</name></expr> </then><else>: <expr><name>low_level</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&gt;</operator> <name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lastp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>lastp</name> <operator>=</operator> <name>last</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>firstp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>firstp</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>infop</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>fi_level</name></name> <operator>=</operator> <name>level</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>fi_lnum</name></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>fi_low_level</name></name> <operator>=</operator> <ternary><condition><expr><name>low_level</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>low_level</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>foldLevel</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>invalid_top</name> <operator>==</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>checkupdate</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>==</operator> <name>prev_lnum</name> <operator>&amp;&amp;</operator> <name>prev_lnum_lvl</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>prev_lnum_lvl</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name>invalid_top</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name>invalid_bot</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>foldLevelWin</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>lineFolded</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>win</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>foldedCount</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name></type> <name>foldedCount</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>foldinfo_T</name> <modifier>*</modifier></type><name>infop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>last</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>infop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>last</name> <operator>-</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>foldmethodIsManual</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdm</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>foldmethodIsIndent</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>foldmethodIsExpr</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>foldmethodIsMarker</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>foldmethodIsSyntax</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>foldmethodIsDiff</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>closeFold</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>setFoldRepeat</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>closeFoldRecurse</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setManualFold</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>opFoldRange</name><parameter_list>(

<parameter><decl><type><name>linenr_T</name></type> <name>first</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>last</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opening</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>recurse</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>had_visual</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><name>DONE_NOTHING</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum_next</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name>first</name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name>last</name></expr>;</condition> <incr><expr><name>lnum</name> <operator>=</operator> <name>lnum_next</name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>lnum_next</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opening</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>recurse</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setManualFold</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>opening</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opening</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>recurse</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>done</name> <operator>==</operator> <name>DONE_NOTHING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nofold</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>had_visual</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>openFold</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>setFoldRepeat</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>openFoldRecurse</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setManualFold</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>foldOpenCursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>checkupdate</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>DONE_NOTHING</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setManualFold</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>done</name> <operator>&amp;</operator> <name>DONE_ACTION</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>newFoldLevel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>newFoldLevelWin</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsDiff</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition> <block>{<block_content>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <call><name>foldmethodIsDiff</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>newFoldLevelWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>newFoldLevelWin</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>checkupdate</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_fold_manual</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_folds</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_flags</name> <operator>=</operator> <name>FD_LEVEL</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_fold_manual</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>changed_window_setting_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>foldCheckClose</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_fcl</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>checkupdate</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>checkCloseRec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>changed_window_setting</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkCloseRec</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_flags</name> <operator>==</operator> <name>FD_OPEN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>lnum</name> <operator>&lt;</operator> <name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_top</name>

<operator>||</operator> <name>lnum</name> <operator>&gt;=</operator> <name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_top</name> <operator>+</operator> <name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_flags</name> <operator>=</operator> <name>FD_LEVEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>|=</operator> <call><name>checkCloseRec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_nested</name></expr></argument>, <argument><expr><name>lnum</name> <operator>-</operator> <name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_top</name></expr></argument>,

<argument><expr><name>level</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>foldManualAllowed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>create</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsManual</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>foldmethodIsMarker</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>create</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E350: Cannot create fold with current 'foldmethod'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E351: Cannot delete fold with current 'foldmethod'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>foldCreate</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>fold_ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cont</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_level</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>closed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>start_rel</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>end_rel</name> <init>= <expr><name>end</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>start_rel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>end_rel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_rel</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_rel</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsMarker</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldCreateMarkers</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>checkupdate</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_folds</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>foldFind</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>start_rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>&gt;</operator> <name>end_rel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_rel</name> <operator>-=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_rel</name> <operator>-=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_level</name> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>==</operator> <name>FD_LEVEL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_level</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>closed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>==</operator> <name>FD_CLOSED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>closed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fp</name> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fold_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>fold_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cont</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <name>cont</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>cont</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><index>[<expr><name>cont</name></expr>]</index></name><operator>.</operator><name>fd_top</name> <operator>&gt;</operator> <name>end_rel</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>cont</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fold_ga</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_rel</name> <operator>&gt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start_rel</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end_rel</name> <operator>&lt;</operator> <name><name>fp</name><index>[<expr><name>cont</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_top</name> <operator>+</operator> <name><name>fp</name><index>[<expr><name>cont</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end_rel</name> <operator>=</operator> <name><name>fp</name><index>[<expr><name>cont</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_top</name> <operator>+</operator> <name><name>fp</name><index>[<expr><name>cont</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>fold_ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fold_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fold_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>cont</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>cont</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>cont</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>fold_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>j</name></expr>]</index><operator>.</operator><name>fd_top</name> <operator>-=</operator> <name>start_rel</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>fp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name>i</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fold_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>=</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>cont</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name> <operator>=</operator> <name>fold_ga</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>=</operator> <name>start_rel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>=</operator> <name>end_rel</name> <operator>-</operator> <name>start_rel</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_level</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>closed</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>closeFold</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_level</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_fold_manual</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>=</operator> <name>FD_CLOSED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_small</name></name> <operator>=</operator> <name>kNone</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_window_setting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>deleteFold</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>start</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>end</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>recursive</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>had_visual</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>found_fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>found_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>maybe_small</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>did_one</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>first_lnum</name> <init>= <expr><name>MAXLNUM</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>last_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>checkupdate</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name> <init>= <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_folds</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>found_ga</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_level</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>foldFind</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>lnum</name> <operator>-</operator> <name>lnum_off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>found_ga</name> <operator>=</operator> <name>gap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>found_fp</name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>found_off</name> <operator>=</operator> <name>lnum_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_closed</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_level</name></expr></argument>, <argument><expr><name>level</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>maybe_small</name></expr></argument>, <argument><expr><name>lnum_off</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum_off</name> <operator>+=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>found_ga</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>found_fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>found_fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>+</operator> <name>found_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsManual</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>deleteFoldEntry</name><argument_list>(<argument><expr><name>found_ga</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>found_fp</name> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>found_ga</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator></expr></argument>, <argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first_lnum</name> <operator>&gt;</operator> <name><name>found_fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name>found_off</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first_lnum</name> <operator>=</operator> <name><name>found_fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name>found_off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_lnum</name> <operator>&lt;</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_one</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parseMarker</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>deleteFoldMarkers</name><argument_list>(<argument><expr><name>found_fp</name></expr></argument>, <argument><expr><name>recursive</name></expr></argument>, <argument><expr><name>found_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>did_one</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_window_setting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_one</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nofold</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>had_visual</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_lnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name>first_lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>last_lnum</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>num_changed</name> <init>= <expr><name>last_lnum</name> <operator>-</operator> <name>first_lnum</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>buf_updates_send_changes</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>first_lnum</name></expr></argument>, <argument><expr><name>num_changed</name></expr></argument>,

<argument><expr><name>num_changed</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>clearFolding</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>deleteFoldRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_foldinvalid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>foldUpdate</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>bot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl_busy</name> <operator>||</operator> <name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_diff_redraw</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>foldFind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>fp</name> <operator>&lt;</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_folds</name><operator>.</operator><name>ga_len</name></name>

<operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&lt;</operator> <name>bot</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_small</name></name> <operator>=</operator> <name>kNone</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsIndent</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>foldmethodIsExpr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>foldmethodIsMarker</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>foldmethodIsDiff</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>foldmethodIsSyntax</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_got_int</name> <init>= <expr><name>got_int</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>foldUpdateIEMS</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>bot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>|=</operator> <name>save_got_int</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>foldUpdateAfterInsert</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsManual</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> 

<operator>||</operator> <call><name>foldmethodIsSyntax</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>foldmethodIsExpr</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>foldUpdateAll</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_foldinvalid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>foldMoveTo</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>updown</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>dir</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>count</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>checkupdate</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>long</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name> <init>= <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_folds</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_level</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>maybe_small</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum_found</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>last</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>foldFind</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name>lnum_off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>updown</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>&gt;=</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>fp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_closed</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_level</name></expr></argument>, <argument><expr><name>level</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>maybe_small</name></expr></argument>, <argument><expr><name>lnum_off</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>updown</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>updown</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>fp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_top</name> <operator>+</operator> <name>lnum_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum_found</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>&gt;</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>fp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_top</name> <operator>+</operator> <name>lnum_off</name> <operator>+</operator> <name><name>fp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum_found</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name>lnum_off</name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum_found</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name>lnum_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum_found</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum_off</name> <operator>+=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>lnum_found</name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum_found</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>foldInitWin</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>new_win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_win</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>fold_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>find_wl_entry</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>win</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_valid</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <name><name>win</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>foldAdjustVisual</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name> <operator>||</operator> <operator>!</operator><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ltoreq</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>&amp;</operator><name>VIsual</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>&amp;</operator><name>VIsual</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>start</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>start</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>start</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>end</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>end</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>end</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>end</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>end</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>end</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mb_adjust_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>foldAdjustCursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>cloneFoldGrowArray</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>from_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>to_p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>ga_itemsize</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>ga_growsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GA_EMPTY</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>from_p</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>from</name><operator>-&gt;</operator><name>ga_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>to_p</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>to</name><operator>-&gt;</operator><name>ga_data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>from</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>to_p</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>=</operator> <name><name>from_p</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to_p</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>=</operator> <name><name>from_p</name><operator>-&gt;</operator><name>fd_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to_p</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>=</operator> <name><name>from_p</name><operator>-&gt;</operator><name>fd_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to_p</name><operator>-&gt;</operator><name>fd_small</name></name> <operator>=</operator> <name><name>from_p</name><operator>-&gt;</operator><name>fd_small</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cloneFoldGrowArray</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>from_p</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>to_p</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>to</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>from_p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>to_p</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>foldFind</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>fold_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>fpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>low</name> <operator>&lt;=</operator> <name>high</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>low</name> <operator>+</operator> <name>high</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_top</name> <operator>&gt;</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_top</name> <operator>+</operator> <name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_len</name> <operator>&lt;=</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fpp</name> <operator>=</operator> <name>fp</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>fpp</name> <operator>=</operator> <name>fp</name> <operator>+</operator> <name>low</name></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>foldLevelWin</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum_rel</name> <init>= <expr><name>lnum</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>foldFind</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>lnum_rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum_rel</name> <operator>-=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>level</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkupdate</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_foldinvalid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldUpdate</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>MAXLNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_foldinvalid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setFoldRepeat</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_open</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>DONE_NOTHING</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setManualFold</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>do_open</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>done</name> <operator>&amp;</operator> <name>DONE_ACTION</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>done</name> <operator>&amp;</operator> <name>DONE_FOLD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nofold</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>linenr_T</name></type>

<name>setManualFold</name><parameter_list>(

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opening</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>recurse</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>donep</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsDiff</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>dlnum</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <call><name>foldmethodIsDiff</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dlnum</name> <operator>=</operator> <call><name>diff_lnum_win</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dlnum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setManualFoldWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>dlnum</name></expr></argument>, <argument><expr><name>opening</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>setManualFoldWin</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>opening</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>donep</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>linenr_T</name></type>

<name>setManualFoldWin</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opening</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>recurse</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>donep</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>found</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_level</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_fold</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>next</name> <init>= <expr><name>MAXLNUM</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>checkupdate</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>foldFind</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>&lt;</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>found_fold</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>fp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_top</name> <operator>+</operator> <name>off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_level</name> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>==</operator> <name>FD_LEVEL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_level</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fdl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>=</operator> <name>FD_CLOSED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>=</operator> <name>FD_OPEN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>fp2</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fp2</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fd_flags</name> <operator>=</operator> <name>FD_LEVEL</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opening</name> <operator>&amp;&amp;</operator> <name>recurse</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>!=</operator> <name>FD_CLOSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>|=</operator> <name>DONE_ACTION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>=</operator> <name>FD_CLOSED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>==</operator> <name>FD_CLOSED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>opening</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>=</operator> <name>FD_OPEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>|=</operator> <name>DONE_ACTION</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>recurse</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenNested</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum</name> <operator>-=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>found_fold</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opening</name> <operator>&amp;&amp;</operator> <name>found</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>found</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>=</operator> <name>FD_CLOSED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>|=</operator> <name>DONE_ACTION</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_fold_manual</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name> <operator>&amp;</operator> <name>DONE_ACTION</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>changed_window_setting_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>done</name> <operator>|=</operator> <name>DONE_FOLD</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>donep</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nofold</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>donep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>donep</name> <operator>|=</operator> <name>done</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>next</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldOpenNested</name><parameter_list>(<parameter><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fpr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>fpr</name><operator>-&gt;</operator><name>fd_nested</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fpr</name><operator>-&gt;</operator><name>fd_nested</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>foldOpenNested</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_flags</name> <operator>=</operator> <name>FD_OPEN</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deleteFoldEntry</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>gap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>recursive</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>recursive</name> <operator>||</operator> <call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>deleteFoldRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-</operator> <name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>moved</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>moved</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>nfp</name> <init>= <expr><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name><operator>.</operator><name>ga_data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>moved</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>nfp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_top</name> <operator>+=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>==</operator> <name>FD_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nfp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_flags</name> <operator>=</operator> <name>FD_LEVEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_small</name></name> <operator>==</operator> <name>kNone</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>nfp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_small</name> <operator>=</operator> <name>kNone</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>fp</name> <operator>+</operator> <name>moved</name></expr></argument>, <argument><expr><name>fp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>nfp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>moved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>nfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>+=</operator> <name>moved</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>deleteFoldRecurse</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELETE_FOLD_NESTED</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>deleteFoldRecurse(&amp;((fd)-&gt;fd_nested))</cpp:value></cpp:define>

<expr_stmt><expr><call><name>GA_DEEP_CLEAR</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>fold_T</name></expr></argument>, <argument><expr><name>DELETE_FOLD_NESTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>foldMarkAdjust</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>line1</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>line2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>amount</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>amount_after</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>amount</name> <operator>==</operator> <name>MAXLNUM</name> <operator>&amp;&amp;</operator> <name>line2</name> <operator>&gt;=</operator> <name>line1</name> <operator>&amp;&amp;</operator> <name>line2</name> <operator>-</operator> <name>line1</name> <operator>&gt;=</operator> <operator>-</operator><name>amount_after</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>line2</name> <operator>=</operator> <name>line1</name> <operator>-</operator> <name>amount_after</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>amount</name> <operator>==</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>line2</name> <operator>==</operator> <name>MAXLNUM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>line1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>foldMarkAdjustRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>amount_after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldMarkAdjustRecurse</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>line1</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>line2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>amount</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>amount_after</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>top</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>amount</name> <operator>==</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>line2</name> <operator>==</operator> <name>MAXLNUM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>line1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>line1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>foldFind</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fp</name> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>fp</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;</operator> <name>line1</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&gt;</operator> <name>line2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>amount_after</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+=</operator> <name>amount_after</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&gt;=</operator> <name>top</name> <operator>&amp;&amp;</operator> <name>last</name> <operator>&lt;=</operator> <name>line2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>amount</name> <operator>==</operator> <name>MAXLNUM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>deleteFoldEntry</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>fp</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&lt;</operator> <name>top</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldMarkAdjustRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><name>line1</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>,

<argument><expr><name>line2</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>amount_after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;=</operator> <name>line2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>amount</name> <operator>==</operator> <name>MAXLNUM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>=</operator> <name>line1</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>+=</operator> <name>amount_after</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>amount</name> <operator>==</operator> <name>MAXLNUM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldMarkAdjustRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><name>line1</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>,

<argument><expr><name>line2</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>, <argument><expr><name>amount</name></expr></argument>,

<argument><expr><name>amount_after</name> <operator>+</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>-</operator> <name>top</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-=</operator> <name>line2</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>=</operator> <name>line1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>foldMarkAdjustRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><name>line1</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>,

<argument><expr><name>line2</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>, <argument><expr><name>amount</name></expr></argument>,

<argument><expr><name>amount_after</name> <operator>-</operator> <name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>+=</operator> <name>amount_after</name> <operator>-</operator> <name>amount</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>getDeepestNesting</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>checkupdate</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>getDeepestNestingRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getDeepestNestingRecurse</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxlevel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>getDeepestNestingRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_nested</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name>maxlevel</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxlevel</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>maxlevel</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_closed</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>win</name></decl></parameter>,

<parameter><decl><type><name>fold_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>const</specifier></type> <name>use_levelp</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>level</name></decl></parameter>, 

<parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>const</specifier></type> <name>maybe_smallp</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>lnum_off</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>closed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>use_levelp</name> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>==</operator> <name>FD_LEVEL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>use_levelp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_p_fdl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>closed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>==</operator> <name>FD_CLOSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>closed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_small</name></name> <operator>==</operator> <name>kNone</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>maybe_smallp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>closed</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>maybe_smallp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_small</name></name> <operator>=</operator> <name>kNone</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>checkSmall</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>lnum_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_small</name></name> <operator>==</operator> <name>kTrue</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>closed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>closed</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>checkSmall</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>wp</name></decl></parameter>,

<parameter><decl><type><name>fold_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>lnum_off</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_small</name></name> <operator>==</operator> <name>kNone</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setSmallMaybe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_fml</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_small</name></name> <operator>=</operator> <name>kFalse</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>plines_win_nofold</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name>lnum_off</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_fml</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_small</name></name> <operator>=</operator> <name>kFalse</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_small</name></name> <operator>=</operator> <name>kTrue</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setSmallMaybe</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd_small</name> <operator>=</operator> <name>kNone</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldCreateMarkers</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MODIFIABLE</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_modifiable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>parseMarker</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>foldAddMarker</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fmr</name></name></expr></argument>, <argument><expr><name>foldstartmarkerlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>foldAddMarker</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>foldendmarker</name></expr></argument>, <argument><expr><name>foldendmarkerlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>num_changed</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <name>end</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>buf_updates_send_changes</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>num_changed</name></expr></argument>, <argument><expr><name>num_changed</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldAddMarker</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>marker</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>markerlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cms</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cms</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cms</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>line_is_comment</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>line_len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_comment</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line_is_comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>line_len</name> <operator>+</operator> <name>markerlen</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>cms</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newline</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>line_is_comment</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>newline</name> <operator>+</operator> <name>line_len</name></expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>markerlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>added</name> <operator>=</operator> <name>markerlen</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newline</name> <operator>+</operator> <name>line_len</name></expr></argument>, <argument><expr><name>cms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newline</name> <operator>+</operator> <name>line_len</name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>cms</name><operator>)</operator></expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>markerlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newline</name> <operator>+</operator> <name>line_len</name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>cms</name><operator>)</operator> <operator>+</operator> <name>markerlen</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>added</name> <operator>=</operator> <name>markerlen</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>cms</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>newline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>added</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>lnum</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>line_len</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>added</name></expr></argument>, <argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>deleteFoldMarkers</name><parameter_list>(

<parameter><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>recursive</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum_off</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>recursive</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>deleteFoldMarkers</name><argument_list>(<argument><expr><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><name>lnum_off</name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>foldDelMarker</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name>lnum_off</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fmr</name></name></expr></argument>, <argument><expr><name>foldstartmarkerlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>foldDelMarker</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name>lnum_off</name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>foldendmarker</name></expr></argument>,

<argument><expr><name>foldendmarkerlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldDelMarker</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>marker</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>markerlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cms</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cms</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cms2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>markerlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>markerlen</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cms</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cms2</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cms</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name>line</name> <operator>&gt;=</operator> <name>cms2</name> <operator>-</operator> <name>cms</name>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <operator>(</operator><name>cms2</name> <operator>-</operator> <name>cms</name><operator>)</operator></expr></argument>, <argument><expr><name>cms</name></expr></argument>, <argument><expr><name>cms2</name> <operator>-</operator> <name>cms</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>cms2</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>cms2</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>-=</operator> <name>cms2</name> <operator>-</operator> <name>cms</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>cms</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>&gt;=</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newline</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newline</name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>newline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>lnum</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>kExtmarkUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_foldtext</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnume</name></decl></parameter>,

<parameter><decl><type><name>foldinfo_T</name> <modifier>*</modifier></type><name>foldinfo</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>got_fdt_error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_did_emsg</name> <init>= <expr><name>did_emsg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>last_wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>last_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last_wp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>last_wp</name> <operator>!=</operator> <name>wp</name> <operator>||</operator> <name>last_lnum</name> <operator>&gt;</operator> <name>lnum</name> <operator>||</operator> <name>last_lnum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>got_fdt_error</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_fdt_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdt</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>dashes</name><index>[<expr><name>MAX_LEVEL</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_FOLDSTART</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator> <name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_FOLDEND</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator> <name>lnume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>foldinfo</name><operator>-&gt;</operator><name>fi_level</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>dashes</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>dashes</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dashes</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dashes</name><index>[<expr><name>level</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FOLDDASHES</name></expr></argument>, <argument><expr><name>dashes</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_FOLDLEVEL</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator> <name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_fdt_error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>save_curwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>emsg_silent</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>eval_to_string_safe</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdt</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>was_set_insecurely</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"foldtext"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_silent</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>did_emsg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>got_fdt_error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>save_curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_wp</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_FOLDDASHES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_emsg</name> <operator>&amp;&amp;</operator> <name>save_did_emsg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>save_did_emsg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>text</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isprintc</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>TAB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>transstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>count</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name>lnume</name> <operator>-</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>FOLD_TEXT_LEN</name></expr></argument>,

<argument><expr><call><name>NGETTEXT</name><argument_list>(<argument><expr><literal type="string">"+--%3ld line folded"</literal></expr></argument>,

<argument><expr><literal type="string">"+--%3ld lines folded "</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>text</name></expr>;</return>

</block_content>}</block>

<function><type><name>void</name></type> <name>foldtext_cleanup</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did1</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did2</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cms_start</name> <init>= <expr><call><name>skipwhite</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cms</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>cms_slen</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>cms_start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cms_slen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>cms_start</name><index>[<expr><name>cms_slen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>cms_slen</name></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cms_end</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cms_start</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>cms_elen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cms_end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cms_elen</name> <operator>=</operator> <name>cms_slen</name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>cms_end</name> <operator>-</operator> <name>cms_start</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cms_slen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>cms_end</name> <operator>-</operator> <name>cms_start</name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cms_slen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>cms_start</name><index>[<expr><name>cms_slen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>cms_slen</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cms_end</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cms_elen</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>cms_end</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cms_end</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>parseMarker</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fmr</name></name></expr></argument>, <argument><expr><name>foldstartmarkerlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>foldstartmarkerlen</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>foldendmarker</name></expr></argument>, <argument><expr><name>foldendmarkerlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>foldendmarkerlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><name>p</name> <operator>&gt;</operator> <name>str</name> <operator>&amp;&amp;</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>--</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>str</name> <operator>+</operator> <name>cms_slen</name>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>cms_slen</name></expr></argument>, <argument><expr><name>cms_start</name></expr></argument>, <argument><expr><name>cms_slen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>+</operator> <name>cms_slen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>cms_slen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cms_end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did1</name> <operator>&amp;&amp;</operator> <name>cms_slen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cms_start</name></expr></argument>, <argument><expr><name>cms_slen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>cms_slen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did1</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>did2</name> <operator>&amp;&amp;</operator> <name>cms_elen</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cms_end</name></expr></argument>, <argument><expr><name>cms_elen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>cms_elen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did2</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldUpdateIEMS</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>bot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fline_T</name></type> <name>fline</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>getlevel</name>)<parameter_list>(<parameter><decl><type><name>fline_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>invalid_top</name> <operator>!=</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_foldinvalid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_foldinvalid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setSmallMaybe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsDiff</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&gt;</operator> <name>diff_context</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>top</name> <operator>-=</operator> <name>diff_context</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>bot</name> <operator>+=</operator> <name>diff_context</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fold_changed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>wp</name></name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>lvl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>lvl_next</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>MAX_LEVEL</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>had_end</name></name> <operator>=</operator> <name>MAX_LEVEL</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>invalid_top</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

<expr_stmt><expr><name>invalid_bot</name> <operator>=</operator> <name>bot</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsMarker</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>getlevel</name> <operator>=</operator> <name>foldlevelMarker</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parseMarker</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>level</name> <init>= <expr><call><name>foldLevelWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>top</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>top</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>lvl</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getlevel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fline</name><operator>.</operator><name>lvl</name></name> <operator>&gt;</operator> <name>level</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>lvl</name></name> <operator>=</operator> <name>level</name> <operator>-</operator> <operator>(</operator><name><name>fline</name><operator>.</operator><name>lvl</name></name> <operator>-</operator> <name><name>fline</name><operator>.</operator><name>lvl_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>lvl</name></name> <operator>=</operator> <name><name>fline</name><operator>.</operator><name>lvl_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getlevel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsExpr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>getlevel</name> <operator>=</operator> <name>foldlevelExpr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>fline</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>foldmethodIsSyntax</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>getlevel</name> <operator>=</operator> <name>foldlevelSyntax</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>foldmethodIsDiff</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>getlevel</name> <operator>=</operator> <name>foldlevelDiff</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>getlevel</name> <operator>=</operator> <name>foldlevelIndent</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>lvl</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>--</operator><name><name>fline</name><operator>.</operator><name>lnum</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>lvl_next</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getlevel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fline</name><operator>.</operator><name>lvl</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>foldlevelSyntax</name> <operator>==</operator> <name>getlevel</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name> <init>= <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fpn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>current_fdl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>fold_start_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum_rel</name> <init>= <expr><name><name>fline</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>current_fdl</name> <operator>&lt;</operator> <name><name>fline</name><operator>.</operator><name>lvl</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>foldFind</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>lnum_rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fpn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>current_fdl</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_start_lnum</name> <operator>+=</operator> <name><name>fpn</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name><name>fpn</name><operator>-&gt;</operator><name>fd_nested</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum_rel</name> <operator>-=</operator> <name><name>fpn</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>fpn</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>current_fdl</name> <operator>==</operator> <name><name>fline</name><operator>.</operator><name>lvl</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>fold_end_lnum</name> <init>= <expr><name>fold_start_lnum</name> <operator>+</operator> <name><name>fpn</name><operator>-&gt;</operator><name>fd_len</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fold_end_lnum</name> <operator>&gt;</operator> <name>bot</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name>fold_end_lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>start</name> <init>= <expr><name><name>fline</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>end</name> <init>= <expr><name>bot</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fline</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fline</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>getlevel</name> <operator>!=</operator> <name>foldlevelMarker</name>

<operator>&amp;&amp;</operator> <name>getlevel</name> <operator>!=</operator> <name>foldlevelSyntax</name>

<operator>&amp;&amp;</operator> <name>getlevel</name> <operator>!=</operator> <name>foldlevelExpr</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>&lt;=</operator> <name>end</name>

<operator>&amp;&amp;</operator> <call><name>foldFind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>end</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>fline</name><operator>.</operator><name>lvl</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>foldFind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>, <argument><expr><name><name>fline</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&lt;</operator> <name><name>fline</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>getlevel</name> <operator>==</operator> <name>foldlevelSyntax</name>

<operator>&amp;&amp;</operator> <call><name>foldLevelWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>fline</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>fline</name><operator>.</operator><name>lvl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>fline</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fline</name><operator>.</operator><name>lvl</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>invalid_top</name> <operator>=</operator> <name><name>fline</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>invalid_bot</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>foldUpdateIEMSRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fline</name></expr></argument>, <argument><expr><name>getlevel</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,

<argument><expr><name>FD_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>fline</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fline</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>fline</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fline</name><operator>.</operator><name>lvl</name></name> <operator>=</operator> <name><name>fline</name><operator>.</operator><name>lvl_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getlevel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>foldRemove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fold_changed</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>changed_window_setting_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>bot</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>&gt;</operator> <name>top</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>invalid_top</name> <operator>=</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>linenr_T</name></type> <name>foldUpdateIEMSRecurse</name><parameter_list>(

<parameter><decl><type><name>garray_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>gap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>startlnum</name></decl></parameter>,

<parameter><decl><type><name>fline_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>flp</name></decl></parameter>, <parameter><decl><type><name>LevelGetter</name></type> <name>getlevel</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>bot</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>topflags</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>ll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lvl</name> <init>= <expr><name>level</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>startlnum2</name> <init>= <expr><name>startlnum</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>firstlnum</name> <init>= <expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>finish</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>linecount</name> <init>= <expr><name><name>flp</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name><name>flp</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>concat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>getlevel</name> <operator>==</operator> <name>foldlevelMarker</name> <operator>&amp;&amp;</operator> <name><name>flp</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>-</operator> <name>level</name>

<operator>&amp;&amp;</operator> <name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>foldFind</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>startlnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name>

<operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&gt;=</operator> <name>startlnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lnum_save</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lvl</name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&gt;</operator> <name>MAX_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lvl</name> <operator>=</operator> <name>MAX_LEVEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name>firstlnum</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>level</name> <operator>&gt;</operator> <name>lvl</name> <operator>-</operator> <name><name>flp</name><operator>-&gt;</operator><name>start</name></name> <operator>||</operator> <name>level</name> <operator>&gt;=</operator> <name><name>flp</name><operator>-&gt;</operator><name>had_end</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lvl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name>bot</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>finish</name> <operator>&amp;&amp;</operator> <name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>getlevel</name> <operator>!=</operator> <name>foldlevelMarker</name>

<operator>&amp;&amp;</operator> <name>getlevel</name> <operator>!=</operator> <name>foldlevelExpr</name>

<operator>&amp;&amp;</operator> <name>getlevel</name> <operator>!=</operator> <name>foldlevelSyntax</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fp2</name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&gt;=</operator> <name>level</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ll</name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>foldFind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp2</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><name>ll</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ll</name> <operator>-=</operator> <name><name>fp2</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&lt;</operator> <name>level</name> <operator>+</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>foldFind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>fp2</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>fp2</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>&lt;=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>lvl</name> <operator>&gt;=</operator> <name>level</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>finish</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>lvl</name> <operator>!=</operator> <name>level</name>

<operator>||</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum_save</name></name> <operator>&gt;=</operator> <name>bot</name>

<operator>||</operator> <name><name>flp</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>flp</name><operator>-&gt;</operator><name>had_end</name></name> <operator>&lt;=</operator> <name>MAX_LEVEL</name>

<operator>||</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name>linecount</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>flp</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>flp</name><operator>-&gt;</operator><name>had_end</name></name> <operator>&lt;=</operator> <name>MAX_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>concat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>concat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>foldFind</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>startlnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name>fp</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name>

<operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&lt;=</operator> <name>firstlnum</name><operator>)</operator>

<operator>||</operator> <call><name>foldFind</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>firstlnum</name> <operator>-</operator> <name>concat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name>fp</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>lvl</name> <operator>&lt;</operator> <name>level</name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&lt;</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>lvl</name> <operator>&gt;=</operator> <name>level</name>

<operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&lt;=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum_save</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>+</operator> <name>concat</name> <operator>&gt;</operator> <name>firstlnum</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>==</operator> <name>firstlnum</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&gt;=</operator> <name>startlnum</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&gt;</operator> <name>firstlnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldMarkAdjustRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>MAXLNUM</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>-</operator> <name>firstlnum</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>foldMarkAdjustRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>firstlnum</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>MAXLNUM</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>-</operator> <name>firstlnum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>+=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>-</operator> <name>firstlnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>=</operator> <name>firstlnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>flp</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>lvl</name> <operator>==</operator> <name>level</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>firstlnum</name> <operator>!=</operator> <name>startlnum</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>breakstart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>breakend</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>firstlnum</name> <operator>!=</operator> <name>startlnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>breakstart</name> <operator>=</operator> <name>startlnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>breakend</name> <operator>=</operator> <name>firstlnum</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>breakstart</name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>breakend</name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>foldRemove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><name>breakstart</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>,

<argument><expr><name>breakend</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fp</name> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>foldSplit</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>breakstart</name></expr></argument>, <argument><expr><name>breakend</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>getlevel</name> <operator>==</operator> <name>foldlevelMarker</name>

<operator>||</operator> <name>getlevel</name> <operator>==</operator> <name>foldlevelExpr</name>

<operator>||</operator> <name>getlevel</name> <operator>==</operator> <name>foldlevelSyntax</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>finish</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>==</operator> <name>startlnum</name> <operator>&amp;&amp;</operator> <name>concat</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fp</name> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fp2</name> <operator>=</operator> <name>fp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp2</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>fp2</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>==</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldMerge</name><argument_list>(<argument><expr><name>fp2</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>fp2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&gt;=</operator> <name>startlnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>deleteFoldEntry</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fp</name> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>=</operator> <name>startlnum</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>foldMarkAdjustRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>MAXLNUM</name></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>MAXLNUM</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fp</name> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>foldInsert</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>=</operator> <name>firstlnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>=</operator> <name>bot</name> <operator>-</operator> <name>firstlnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>topflags</name> <operator>==</operator> <name>FD_OPEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_fold_manual</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>=</operator> <name>FD_OPEN</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>=</operator> <name>topflags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>topflags</name> <operator>!=</operator> <name>FD_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_fold_manual</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>=</operator> <operator>(</operator><name>fp</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>fd_flags</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_small</name></name> <operator>=</operator> <name>kNone</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>getlevel</name> <operator>==</operator> <name>foldlevelMarker</name>

<operator>||</operator> <name>getlevel</name> <operator>==</operator> <name>foldlevelExpr</name>

<operator>||</operator> <name>getlevel</name> <operator>==</operator> <name>foldlevelSyntax</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>finish</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fold_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lvl</name> <argument_list type="generic">&lt; <argument><expr><name>level</name> <operator>||</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument> &gt;</argument_list></name> <name>linecount</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&gt;</operator> <name>level</name> <operator>&amp;&amp;</operator> <name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bot</name> <operator>&lt;</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum_save</name></name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fp</name> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <call><name>foldUpdateIEMSRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>startlnum2</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>, <argument><expr><name>flp</name></expr></argument>, <argument><expr><name>getlevel</name></expr></argument>,

<argument><expr><name>bot</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lnum_save</name></name> <operator>+=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>off</name></name> <operator>-=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bot</name> <operator>+=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>startlnum2</name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum_save</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ll</name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev_lnum</name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_lnum_lvl</name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name>linecount</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getlevel</name><argument_list>(<argument><expr><name>flp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>flp</name><operator>-&gt;</operator><name>had_end</name></name> <operator>&lt;=</operator> <name>MAX_LEVEL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>prev_lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name>linecount</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lnum_save</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>bot</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>&lt;</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_small</name></name> <operator>=</operator> <name>kNone</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>&gt;</operator> <name>linecount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>=</operator> <name>linecount</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>foldRemove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><name>startlnum2</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>,

<argument><expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&lt;</operator> <name>level</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>!=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>bot</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>getlevel</name> <operator>==</operator> <name>foldlevelMarker</name>

<operator>||</operator> <name>getlevel</name> <operator>==</operator> <name>foldlevelExpr</name>

<operator>||</operator> <name>getlevel</name> <operator>==</operator> <name>foldlevelSyntax</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fp</name> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>foldSplit</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>bot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>fold_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>fp2</name> <operator>=</operator> <name>fp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp2</name> <operator>&gt;=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name>

<operator>||</operator> <name><name>fp2</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&gt;</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp2</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>fp2</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>&gt;</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp2</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&lt;</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldMarkAdjustRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp2</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>-</operator> <name><name>fp2</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>MAXLNUM</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>fp2</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>-</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp2</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>-</operator> <name><name>fp2</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp2</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&gt;=</operator> <name>level</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldMerge</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>, <argument><expr><name>fp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fold_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>deleteFoldEntry</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fp2</name> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bot</name> <operator>&lt;</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bot</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldInsert</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>fp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fold_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>fold_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldSplit</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>gap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>top</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>bot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>foldInsert</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fp</name> <init>= <expr><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_top</name> <operator>=</operator> <name>bot</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_top</name> <operator>&gt;</operator> <name>bot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_len</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-</operator> <operator>(</operator><name><name>fp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_top</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_flags</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_small</name> <operator>=</operator> <name>kNone</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_small</name></name> <operator>=</operator> <name>kNone</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>gap1</name> <init>= <expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>gap2</name> <init>= <expr><operator>&amp;</operator><name><name>fp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_nested</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><call><name>foldFind</name><argument_list>(<argument><expr><name>gap1</name></expr></argument>, <argument><expr><name>bot</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap1</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap1</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-</operator> <name>fp2</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap2</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>idx</name></expr>]</index> <operator>=</operator> <name><name>fp2</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap2</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>fd_top</name>

<operator>-=</operator> <name><name>fp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd_top</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>gap2</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gap1</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>=</operator> <name>top</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldRemove</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>bot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bot</name> <operator>&lt;</operator> <name>top</name></expr>)</condition> <block>{<block_content>

<return>return;</return> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>foldFind</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&lt;</operator> <name>top</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldRemove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><name>top</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>, <argument><expr><name>bot</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>bot</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldSplit</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fp</name> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>bot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>=</operator> <name>top</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>fold_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>&gt;=</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name>

<operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&gt;</operator> <name>bot</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&gt;=</operator> <name>top</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fold_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>bot</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldMarkAdjustRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>bot</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>MAXLNUM</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>-</operator> <name>bot</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-=</operator> <name>bot</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>=</operator> <name>bot</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>deleteFoldEntry</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fp</name> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldReverseOrder</name><parameter_list>(

<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>start_arg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>end_arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>start</name> <init>= <expr><name>start_arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>end</name> <init>= <expr><name>end_arg</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>start</name><operator>++</operator></expr><operator>,</operator> <expr><name>end</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name>end</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>left</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <operator>*</operator><name>right</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>truncate_fold</name><parameter_list>(<parameter><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>foldRemove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>, <argument><expr><name>MAXLNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOLD_END</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fp)-&gt;fd_top + (fp)-&gt;fd_len - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_FOLD</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>gap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fp) &lt; ((fold_T *)(gap)-&gt;ga_data + (gap)-&gt;ga_len))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOLD_INDEX</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>gap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t)(fp - ((fold_T *)(gap)-&gt;ga_data)))</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>foldMoveRange</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>line1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>line2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>range_len</name> <init>= <expr><name>line2</name> <operator>-</operator> <name>line1</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>linenr_T</name></type> <name>move_len</name> <init>= <expr><name>dest</name> <operator>-</operator> <name>line2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>at_start</name> <init>= <expr><call><name>foldFind</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>line1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>at_start</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FOLD_END</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldMoveRange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><name>line1</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>, <argument><expr><name>line2</name> <operator>-</operator>

<name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>, <argument><expr><name>dest</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>FOLD_END</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>line2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldMarkAdjustRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><name>line1</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>,

<argument><expr><name>line2</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>, <argument><expr><name>MAXLNUM</name></expr></argument>, <argument><expr><operator>-</operator><name>range_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-=</operator> <name>range_len</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>truncate_fold</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>line1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>fp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALID_FOLD</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&gt;</operator> <name>dest</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&gt;</operator> <name>line2</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><call><name>VALID_FOLD</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FOLD_END</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>dest</name></expr>;</condition> <incr><expr><name>fp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>-=</operator> <name>range_len</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>VALID_FOLD</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&lt;=</operator> <name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>truncate_fold</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>-=</operator> <name>range_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>FOLD_END</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>foldMarkAdjustRecurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><name>line2</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>,

<argument><expr><name>dest</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>, <argument><expr><name>MAXLNUM</name></expr></argument>, <argument><expr><operator>-</operator><name>move_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-=</operator> <name>move_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+=</operator> <name>move_len</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>move_start</name> <init>= <expr><call><name>FOLD_INDEX</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>move_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dest_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><call><name>VALID_FOLD</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&lt;=</operator> <name>dest</name></expr>;</condition> <incr><expr><name>fp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>&lt;=</operator> <name>line2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FOLD_END</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>line2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>truncate_fold</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+=</operator> <name>move_len</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>move_end</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>move_end</name> <operator>=</operator> <call><name>FOLD_INDEX</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FOLD_END</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>truncate_fold</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>-=</operator> <name>range_len</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dest_index</name> <operator>=</operator> <call><name>FOLD_INDEX</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>move_end</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>foldReverseOrder</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>move_start</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>dest_index</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>foldReverseOrder</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>move_start</name></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>move_start</name> <operator>+</operator> <name>dest_index</name> <operator>-</operator> <name>move_end</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>foldReverseOrder</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>move_start</name> <operator>+</operator> <name>dest_index</name> <operator>-</operator> <name>move_end</name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>dest_index</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FOLD_END</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VALID_FOLD</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FOLD_INDEX</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldMerge</name><parameter_list>(<parameter><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp1</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap1</name> <init>= <expr><operator>&amp;</operator><name><name>fp1</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap2</name> <init>= <expr><operator>&amp;</operator><name><name>fp2</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>foldFind</name><argument_list>(<argument><expr><name>gap1</name></expr></argument>, <argument><expr><name><name>fp1</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-</operator> <literal type="number">1L</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp3</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>foldFind</name><argument_list>(<argument><expr><name>gap2</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fp4</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldMerge</name><argument_list>(<argument><expr><name>fp3</name></expr></argument>, <argument><expr><name>gap2</name></expr></argument>, <argument><expr><name>fp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><name>gap2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap1</name></expr></argument>, <argument><expr><name><name>gap2</name><operator>-&gt;</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>gap2</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap1</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>gap1</name><operator>-&gt;</operator><name>ga_len</name></name></expr>]</index>

<operator>=</operator> <operator>(</operator><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap2</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>idx</name></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap1</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>gap1</name><operator>-&gt;</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>fd_top</name> <operator>+=</operator> <name><name>fp1</name><operator>-&gt;</operator><name>fd_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>gap1</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>gap2</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp1</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>+=</operator> <name><name>fp2</name><operator>-&gt;</operator><name>fd_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>deleteFoldEntry</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>fp2</name> <operator>-</operator> <operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldlevelIndent</name><parameter_list>(<parameter><decl><type><name>fline_T</name> <modifier>*</modifier></type><name>flp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+</operator> <name><name>flp</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>flp</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_p_fdi</name></name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>lnum</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <call><name>get_indent_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>get_sw_value</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>&gt;</operator> <name><name>flp</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_p_fdn</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>flp</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_p_fdn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldlevelDiff</name><parameter_list>(<parameter><decl><type><name>fline_T</name> <modifier>*</modifier></type><name>flp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>diff_infold</name><argument_list>(<argument><expr><name><name>flp</name><operator>-&gt;</operator><name>wp</name></name></expr></argument>, <argument><expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+</operator> <name><name>flp</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldlevelExpr</name><parameter_list>(<parameter><decl><type><name>fline_T</name> <modifier>*</modifier></type><name>flp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+</operator> <name><name>flp</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>win</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>wp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_LNUM</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator> <name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>had_end</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>MAX_LEVEL</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>save_keytyped</name> <init>= <expr><name>KeyTyped</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>eval_foldexpr</name><argument_list>(<argument><expr><name><name>flp</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_p_fde</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>save_keytyped</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'='</literal></expr>:</case> <expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>win</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parseMarker</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>foldendmarker</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fmr</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>foldstartmarkerlen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>foldendmarker</name><operator>++</operator> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fmr</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>foldendmarkerlen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>foldendmarker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldlevelMarker</name><parameter_list>(<parameter><decl><type><name>fline_T</name> <modifier>*</modifier></type><name>flp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>startmarker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cstart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_lvl</name> <init>= <expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>startmarker</name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_p_fmr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cstart</name> <operator>=</operator> <operator>*</operator><name>startmarker</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>startmarker</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cend</name> <operator>=</operator> <operator>*</operator><name>foldendmarker</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>flp</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+</operator> <name><name>flp</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>cstart</name>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>startmarker</name></expr></argument>, <argument><expr><name>foldstartmarkerlen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>foldstartmarkerlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <name>start_lvl</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>start_lvl</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>flp</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>cend</name> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>foldendmarker</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>foldendmarkerlen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>foldendmarkerlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>&gt;</operator> <name>start_lvl</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <name>start_lvl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl_next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foldlevelSyntax</name><parameter_list>(<parameter><decl><type><name>fline_T</name> <modifier>*</modifier></type><name>flp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>flp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+</operator> <name><name>flp</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <call><name>syn_get_foldlevel</name><argument_list>(<argument><expr><name><name>flp</name><operator>-&gt;</operator><name>wp</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <name><name>flp</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>syn_get_foldlevel</name><argument_list>(<argument><expr><name><name>flp</name><operator>-&gt;</operator><name>wp</name></name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>n</name> <operator>-</operator> <name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>flp</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>put_folds</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsManual</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"silent! normal! zE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>put_folds_recurse</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_fold_manual</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>put_foldopen_recurse</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_folds_recurse</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>put_folds_recurse</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">",%"</literal> <name>PRId64</name> <literal type="string">"fold"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name>off</name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name>off</name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_len</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>fp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_foldopen_recurse</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><name>fold_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>!=</operator> <name>FD_LEVEL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name>off</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>put_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"normal! zo"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_foldopen_recurse</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_nested</name></name></expr></argument>,

<argument><expr><name>off</name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>==</operator> <name>FD_CLOSED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>put_fold_open_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>foldLevelWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>==</operator> <name>FD_CLOSED</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>&gt;=</operator> <name>level</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>!=</operator> <name>FD_CLOSED</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>&lt;</operator> <name>level</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>put_fold_open_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>fp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_fold_open_close</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>fold_T</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>fd_top</name></name> <operator>+</operator> <name>off</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"normal! z%c"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>fp</name><operator>-&gt;</operator><name>fd_flags</name></name> <operator>==</operator> <name>FD_CLOSED</name></expr> ?</condition><then> <expr><literal type="char">'c'</literal></expr> </then><else>: <expr><literal type="char">'o'</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

</unit>
