<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\tui\input.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/tui/input.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/aucmd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os_win_console.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/rstream.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_BUFFER_SIZE</name></cpp:macro> <cpp:value>0xfff</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tui/input.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>tinput_init</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>paste</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>in_fd</name></name> <operator>=</operator> <name>STDIN_FILENO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>waiting_for_bg_response</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ttimeout</name></name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><name>p_ttimeout</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>ttimeoutlen</name></name> <operator>=</operator> <name>p_ttm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>key_buffer</name></name> <operator>=</operator> <call><name>rbuffer_new</name><argument_list>(<argument><expr><name>KEY_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>key_buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>key_buffer_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_isatty</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>in_fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>in_fd</name></name> <operator>=</operator> <call><name>os_get_conin_fd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>os_isatty</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>in_fd</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>os_isatty</name><argument_list>(<argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>in_fd</name></name> <operator>=</operator> <name>STDERR_FILENO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>input_global_fd_init</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>in_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>term</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>term</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TERMKEY_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>TERMKEY_VERSION_MINOR</name> <operator>&gt;</operator> <literal type="number">18</literal></expr></cpp:if>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>tk</name></name> <operator>=</operator> <call><name>termkey_new_abstract</name><argument_list>(<argument><expr><name>term</name></expr></argument>,

<argument><expr><name>TERMKEY_FLAG_UTF8</name> <operator>|</operator> <name>TERMKEY_FLAG_NOSTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>termkey_hook_terminfo_getstr</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>tk</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>tk_ti_hook_fn</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>termkey_start</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>tk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>tk</name></name> <operator>=</operator> <call><name>termkey_new_abstract</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>TERMKEY_FLAG_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>curflags</name> <init>= <expr><call><name>termkey_get_canonflags</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>tk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>termkey_set_canonflags</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>tk</name></name></expr></argument>, <argument><expr><name>curflags</name> <operator>|</operator> <name>TERMKEY_CANON_DELBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rstream_init_fd</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>read_stream</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>in_fd</name></name></expr></argument>, <argument><expr><literal type="number">0xfff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_watcher_init</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>timer_handle</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>tinput_destroy</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rbuffer_free</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>key_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>key_buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>key_buffer_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_watcher_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>timer_handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>read_stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>termkey_destroy</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>tk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>tinput_start</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rstream_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>read_stream</name></name></expr></argument>, <argument><expr><name>tinput_read_cb</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>tinput_stop</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rstream_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>read_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_watcher_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>timer_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tinput_done_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>input_done</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tinput_wait_enqueue</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<macro><name>RBUFFER_UNTIL_EMPTY</name><argument_list>(<argument>input-&gt;key_buffer</argument>, <argument>buf</argument>, <argument>len</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>String</name></type> <name>keys</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <name>buf</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <name>len</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>paste</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>String</name></type> <name>copy</name> <init>= <expr><call><name>copy_string</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>multiqueue_put</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>, <argument><expr><name>tinput_paste_event</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,

<argument><expr><name><name>copy</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>copy</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>input</name><operator>-&gt;</operator><name>paste</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>paste</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>paste</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rbuffer_consumed</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>key_buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rbuffer_reset</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>key_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>consumed</name> <init>= <expr><call><name>input_enqueue</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>consumed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rbuffer_consumed</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>key_buffer</name></name></expr></argument>, <argument><expr><name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rbuffer_reset</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>key_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>key_buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>waiting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>key_buffer_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>key_buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tinput_paste_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>String</name></type> <name>keys</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intptr_t</name></type> <name>phase</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>nvim_paste</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>phase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><literal type="string">"paste: %s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>api_free_string</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tinput_flush</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wait_until_empty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>drain_boundary</name> <init>= <expr><ternary><condition><expr><name>wait_until_empty</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0xff</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>key_buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>loop_schedule_fast</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><call><name>event_create</name><argument_list>(<argument><expr><name>tinput_wait_enqueue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>waiting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>waiting</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>key_buffer_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>key_buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>key_buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><call><name>rbuffer_size</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>key_buffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>drain_boundary</name></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tinput_enqueue</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rbuffer_size</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>key_buffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator>

<call><name>rbuffer_capacity</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>key_buffer</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tinput_flush</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rbuffer_write</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>key_buffer</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>forward_simple_utf8</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>TermKeyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>utf8</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"&lt;lt&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>tinput_enqueue</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>forward_modified_utf8</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>TermKeyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TERMKEY_TYPE_KEYSYM</name>

<operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>code</name><operator>.</operator><name>sym</name></name> <operator>==</operator> <name>TERMKEY_SYM_ESCAPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"&lt;Esc&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TERMKEY_TYPE_KEYSYM</name>

<operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>code</name><operator>.</operator><name>sym</name></name> <operator>==</operator> <name>TERMKEY_SYM_SUSPEND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"&lt;C-Z&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>termkey_strfkey</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>tk</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>TERMKEY_FORMAT_VIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>tinput_enqueue</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>forward_mouse_event</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>TermKeyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>, <decl><type ref="prev"/><name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_pressed_button</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TermKeyMouseEvent</name></type> <name>ev</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>termkey_interpret_mouse</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>tk</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>button</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ev</name> <operator>==</operator> <name>TERMKEY_MOUSE_RELEASE</name> <operator>||</operator> <name>ev</name> <operator>==</operator> <name>TERMKEY_MOUSE_DRAG</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>button</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>last_pressed_button</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>ev</name> <operator>!=</operator> <name>TERMKEY_MOUSE_PRESS</name> <operator>&amp;&amp;</operator> <name>ev</name> <operator>!=</operator> <name>TERMKEY_MOUSE_DRAG</name>

<operator>&amp;&amp;</operator> <name>ev</name> <operator>!=</operator> <name>TERMKEY_MOUSE_RELEASE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>row</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>col</name><operator>--</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>TERMKEY_KEYMOD_SHIFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"S-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>TERMKEY_KEYMOD_CTRL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"C-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>TERMKEY_KEYMOD_ALT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"A-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"Left"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"Middle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"Right"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>ev</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TERMKEY_MOUSE_PRESS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"ScrollWheelUp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>button</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>,

<argument><expr><literal type="string">"ScrollWheelDown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"Mouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_pressed_button</name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TERMKEY_MOUSE_DRAG</name></expr>:</case>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"Drag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TERMKEY_MOUSE_RELEASE</name></expr>:</case>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"Release"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TERMKEY_MOUSE_UNKNOWN</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"&gt;&lt;%d,%d&gt;"</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tinput_enqueue</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TermKeyResult</name></type> <name>tk_getkey</name><parameter_list>(<parameter><decl><type><name>TermKey</name> <modifier>*</modifier></type><name>tk</name></decl></parameter>, <parameter><decl><type><name>TermKeyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>force</name></expr> ?</condition><then> <expr><call><name>termkey_getkey_force</name><argument_list>(<argument><expr><name>tk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>termkey_getkey</name><argument_list>(<argument><expr><name>tk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tinput_timer_cb</name><parameter_list>(<parameter><decl><type><name>TimeWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tk_getkeys</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TermKeyKey</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TermKeyResult</name></type> <name>result</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>tk_getkey</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>tk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>TERMKEY_RES_KEY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TERMKEY_TYPE_UNICODE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>key</name><operator>.</operator><name>modifiers</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>forward_simple_utf8</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TERMKEY_TYPE_UNICODE</name>

<operator>||</operator> <name><name>key</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TERMKEY_TYPE_FUNCTION</name>

<operator>||</operator> <name><name>key</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TERMKEY_TYPE_KEYSYM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>forward_modified_utf8</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TERMKEY_TYPE_MOUSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>forward_mouse_event</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>TERMKEY_RES_AGAIN</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>ttimeout</name></name> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>ttimeoutlen</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>time_watcher_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>timer_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_watcher_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>timer_handle</name></name></expr></argument>, <argument><expr><name>tinput_timer_cb</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>input</name><operator>-&gt;</operator><name>ttimeoutlen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tk_getkeys</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tinput_timer_cb</name><parameter_list>(<parameter><decl><type><name>TimeWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>tk_getkeys</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tinput_flush</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>handle_focus_event</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rbuffer_size</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>rbuffer_cmp</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"\x1b[I"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>rbuffer_cmp</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"\x1b[O"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>focus_gained</name> <init>= <expr><operator>*</operator><call><name>rbuffer_get</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'I'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rbuffer_consumed</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aucmd_schedule_focusgained</name><argument_list>(<argument><expr><name>focus_gained</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>handle_bracketed_paste</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rbuffer_size</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">5</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>rbuffer_cmp</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"\x1b[200~"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>rbuffer_cmp</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"\x1b[201~"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>enable</name> <init>= <expr><operator>*</operator><call><name>rbuffer_get</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>paste</name></name> <operator>&amp;&amp;</operator> <name>enable</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rbuffer_consumed</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>paste</name></name> <operator>==</operator> <name>enable</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tinput_flush</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>paste</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>paste</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>paste</name></name> <operator>=</operator> <ternary><condition><expr><name><name>input</name><operator>-&gt;</operator><name>paste</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tinput_flush</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>paste</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>handle_forced_escape</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rbuffer_size</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>rbuffer_cmp</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"\x1b\x00"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>rcnt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>termkey_push_bytes</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>tk</name></name></expr></argument>, <argument><expr><call><name>rbuffer_read_ptr</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rcnt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rbuffer_consumed</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tk_getkeys</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_bg_deferred</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bgvalue</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><literal type="string">"bg"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strequal</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_bg</name></expr></argument>, <argument><expr><name>bgvalue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>starting</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>bgvalue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal><operator>)</operator></expr>

?</condition><then> <expr><literal type="string">"autocmd VimEnter * ++once ++nested set bg=light"</literal></expr>

</then><else>: <expr><literal type="string">"autocmd VimEnter * ++once ++nested set bg=dark"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"bg"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>bgvalue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_option_was_set</name><argument_list>(<argument><expr><literal type="string">"bg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>handle_background_color</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>waiting_for_bg_response</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>component</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_components</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>rgb</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>rgb_max</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>eat_backslash</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bad</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rbuffer_size</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">9</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>rbuffer_cmp</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"\x1b]11;rgb:"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>header_size</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_components</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>rbuffer_size</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">10</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>rbuffer_cmp</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"\x1b]11;rgba:"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>header_size</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_components</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>waiting_for_bg_response</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>waiting_for_bg_response</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"did not get a response for terminal background query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>waiting_for_bg_response</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rbuffer_consumed</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>RBUFFER_EACH</name><argument_list>(<argument>input-&gt;read_stream.buffer</argument>, <argument>c</argument>, <argument>i</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eat_backslash</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\x07'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\x1b'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>eat_backslash</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bad</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>++</operator><name>component</name> <operator>&lt;</operator> <name>num_components</name><operator>)</operator></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ascii_isxdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>component</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>rgb_max</name><index>[<expr><name>component</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rgb_max</name><index>[<expr><name>component</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>rgb_max</name><index>[<expr><name>component</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><index>[<expr><name>component</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>rgb</name><index>[<expr><name>component</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <call><name>hex2nr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bad</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>rbuffer_consumed</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>bad</name> <operator>&amp;&amp;</operator> <name><name>rgb_max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>rgb_max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>rgb_max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>rgb_max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>rgb_max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>rgb_max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>luminance</name> <init>= <expr><operator>(</operator><literal type="number">0.299</literal> <operator>*</operator> <name>r</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">0.587</literal> <operator>*</operator> <name>g</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">0.114</literal> <operator>*</operator> <name>b</name><operator>)</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bgvalue</name> <init>= <expr><ternary><condition><expr><name>luminance</name> <operator>&lt;</operator> <literal type="number">0.5</literal></expr> ?</condition><then> <expr><literal type="string">"dark"</literal></expr> </then><else>: <expr><literal type="string">"light"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"bg response: %s"</literal></expr></argument>, <argument><expr><name>bgvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>loop_schedule_deferred</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>,

<argument><expr><call><name>event_create</name><argument_list>(<argument><expr><name>set_bg_deferred</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bgvalue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"failed to parse bg response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIT_TESTING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>bool</name></type> <name>ut_handle_background_color</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>handle_background_color</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tinput_read_cb</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count_</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>eof</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eof</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>loop_schedule_fast</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><call><name>event_create</name><argument_list>(<argument><expr><name>tinput_done_event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>handle_focus_event</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>handle_bracketed_paste</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>handle_forced_escape</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>handle_background_color</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>RBUFFER_EACH</name><argument_list>(<argument>input-&gt;read_stream.buffer</argument>, <argument>c</argument>, <argument>i</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\x1b'</literal> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>paste</name></name></expr>)</condition> <block>{<block_content>

<macro><name>RBUFFER_UNTIL_EMPTY</name><argument_list>(<argument>input-&gt;read_stream.buffer</argument>, <argument>ptr</argument>, <argument>len</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>consumed</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>consumed</name> <operator>&lt;=</operator> <name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tinput_enqueue</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rbuffer_consumed</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>count</name> <operator>-=</operator> <name>consumed</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<macro><name>RBUFFER_UNTIL_EMPTY</name><argument_list>(<argument>input-&gt;read_stream.buffer</argument>, <argument>ptr</argument>, <argument>len</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>consumed</name> <init>= <expr><call><name>termkey_push_bytes</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>tk</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>consumed</name> <operator>&lt;=</operator> <name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rbuffer_consumed</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tk_getkeys</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>count</name> <operator>-=</operator> <name>consumed</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block> while <condition>(<expr><call><name>rbuffer_size</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>tinput_flush</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rbuffer_reset</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>read_stream</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
