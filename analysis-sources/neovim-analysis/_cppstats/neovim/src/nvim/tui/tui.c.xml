<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\tui\tui.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unibilium.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TERMIOS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kvec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/signal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/tty.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui_bridge.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ugrid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/tui/input.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/tui/tui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/tui/terminfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor_shape.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CNORM_COMMAND_MAX_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTBUF_SIZE</name></cpp:macro> <cpp:value>0xffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOO_MANY_EVENTS</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STARTS_WITH</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>prefix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strlen(str) &gt;= (sizeof(prefix) - 1) &amp;&amp; 0 == memcmp((str), (prefix), sizeof(prefix) - 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMUX_WRAP</name><parameter_list>(<parameter><type><name>is_tmux</name></type></parameter>, <parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((is_tmux) ? "\x1bPtmux;\x1b" seq "\x1b\\" : seq)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINUXSET0C</name></cpp:macro> <cpp:value>"\x1b[?0c"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINUXSET1C</name></cpp:macro> <cpp:value>"\x1b[?1c"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_UNIBI_HAS_VAR_FROM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIBI_SET_NUM_VAR</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (var) = unibi_var_from_num((num)); } while (0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIBI_SET_NUM_VAR</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(var).i = (num);</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>top</name></decl>, <name>bot</name>, <name>left</name>, <name>right</name>;</decl_stmt>

}</block></struct></type> <name>Rect</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>UIBridgeData</name> <modifier>*</modifier></type><name>bridge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unibi_var_t</name></type> <name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>OUTBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bufpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>norm</name><index>[<expr><name>CNORM_COMMAND_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>invis</name><index>[<expr><name>CNORM_COMMAND_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>normlen</name></decl>, <name>invislen</name>;</decl_stmt>

<decl_stmt><decl><type><name>TermInput</name></type> <name>input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_loop_t</name></type> <name>write_loop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unibi_term</name> <modifier>*</modifier></type><name>ut</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>uv_tty_t</name></type> <name>tty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_pipe_t</name></type> <name>pipe</name></decl>;</decl_stmt>

}</block> <decl><name>output_handle</name></decl>;</union>

<decl_stmt><decl><type><name>bool</name></type> <name>out_isatty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SignalWatcher</name></type> <name>winch_handle</name></decl>, <name>cont_handle</name>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cont_received</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UGrid</name></type> <name>grid</name></decl>;</decl_stmt>

<macro><name>kvec_t</name><argument_list>(<argument>Rect</argument>)</argument_list></macro> <expr_stmt><expr><name>invalid_regions</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <name>col</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>scroll_region_is_full_screen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_change_scroll_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_set_lr_margin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>can_set_left_right_margin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_scroll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_erase_chars</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>immediate_wrap_after_last_column</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>mouse_enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>busy</name></decl>, <name>is_invisible</name>, <name>want_invisible</name>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cork</name></decl>, <name>overflow</name>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cursor_color_changed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_starting</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cursorentry_T</name></type> <name><name>cursor_shapes</name><index>[<expr><name>SHAPE_IDX_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HlAttrs</name></type> <name>clear_attrs</name></decl>;</decl_stmt>

<macro><name>kvec_t</name><argument_list>(<argument>HlAttrs</argument>)</argument_list></macro> <expr_stmt><expr><name>attrs</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>print_attr_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>default_attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_clear_attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ModeShape</name></type> <name>showing_mode</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>enable_mouse</name></decl>, <name>disable_mouse</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enable_bracketed_paste</name></decl>, <name>disable_bracketed_paste</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enable_lr_margin</name></decl>, <name>disable_lr_margin</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enter_strikethrough_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>set_rgb_foreground</name></decl>, <name>set_rgb_background</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>set_cursor_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reset_cursor_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enable_focus_reporting</name></decl>, <name>disable_focus_reporting</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>resize_screen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reset_scroll_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>set_cursor_style</name></decl>, <name>reset_cursor_style</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_title</name></decl>, <name>restore_title</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>get_bg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>set_underline_style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>set_underline_color</name></decl>;</decl_stmt>

}</block> <decl><name>unibi_ext</name></decl>;</struct>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>space_buf</name></decl>;</decl_stmt>

}</block></struct></type> <name>TUIData</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <specifier>volatile</specifier></type> <name>got_winch</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>did_user_set_dimensions</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>cursor_style_enabled</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tui/tui.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>UI</name> <modifier>*</modifier></type><name>tui_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UI</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>tui_stop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>grid_resize</name></name> <operator>=</operator> <name>tui_grid_resize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>grid_clear</name></name> <operator>=</operator> <name>tui_grid_clear</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>grid_cursor_goto</name></name> <operator>=</operator> <name>tui_grid_cursor_goto</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>mode_info_set</name></name> <operator>=</operator> <name>tui_mode_info_set</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>update_menu</name></name> <operator>=</operator> <name>tui_update_menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>busy_start</name></name> <operator>=</operator> <name>tui_busy_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>busy_stop</name></name> <operator>=</operator> <name>tui_busy_stop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>mouse_on</name></name> <operator>=</operator> <name>tui_mouse_on</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>mouse_off</name></name> <operator>=</operator> <name>tui_mouse_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>mode_change</name></name> <operator>=</operator> <name>tui_mode_change</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>grid_scroll</name></name> <operator>=</operator> <name>tui_grid_scroll</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>hl_attr_define</name></name> <operator>=</operator> <name>tui_hl_attr_define</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>bell</name></name> <operator>=</operator> <name>tui_bell</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>visual_bell</name></name> <operator>=</operator> <name>tui_visual_bell</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>default_colors_set</name></name> <operator>=</operator> <name>tui_default_colors_set</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>tui_flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>suspend</name></name> <operator>=</operator> <name>tui_suspend</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>set_title</name></name> <operator>=</operator> <name>tui_set_title</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>set_icon</name></name> <operator>=</operator> <name>tui_set_icon</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>option_set</name></name><operator>=</operator> <name>tui_option_set</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>raw_line</name></name> <operator>=</operator> <name>tui_raw_line</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUILinegrid</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>kUITermColors</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><call><name>ui_bridge_attach</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>tui_main</name></expr></argument>, <argument><expr><name>tui_scheduler</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>unibi_pre_fmt_str</name><parameter_list>(<parameter><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>unibi_index</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>unibi_get_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0U</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>unibi_run</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>termname_set_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>termname</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_tty_option</name><argument_list>(<argument><expr><literal type="string">"term"</literal></expr></argument>, <argument><expr><name>termname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>terminfo_start</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>scroll_region_is_full_screen</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>default_attr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>can_clear_attr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>is_invisible</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>want_invisible</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>busy</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cork</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>overflow</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cursor_color_changed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>showing_mode</name></name> <operator>=</operator> <name>SHAPE_IDX_N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enable_mouse</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>disable_mouse</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_cursor_color</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_color</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enable_bracketed_paste</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>disable_bracketed_paste</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enter_strikethrough_mode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enable_lr_margin</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>disable_lr_margin</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enable_focus_reporting</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>disable_focus_reporting</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>resize_screen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_scroll_region</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_cursor_style</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_style</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>get_bg</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_underline_color</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>out_fd</name></name> <operator>=</operator> <name>STDOUT_FILENO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>out_isatty</name></name> <operator>=</operator> <call><name>os_isatty</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>out_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>os_tty_guess_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>out_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_setenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>termname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>term</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>os_env_var_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name> <operator>=</operator> <call><name>unibi_from_term</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>os_env_var_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>termname</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name> <operator>=</operator> <call><name>terminfo_from_builtin</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>termname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>loop_schedule_deferred</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>,

<argument><expr><call><name>event_create</name><argument_list>(<argument><expr><name>termname_set_event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>termname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>colorterm</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"COLORTERM"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>termprg</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"TERM_PROGRAM"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vte_version_env</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"VTE_VERSION"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>vtev</name> <init>= <expr><ternary><condition><expr><name>vte_version_env</name></expr> ?</condition><then> <expr><call><name>strtol</name><argument_list>(<argument><expr><name>vte_version_env</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>iterm_env</name> <init>= <expr><name>termprg</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>termprg</name></expr></argument>, <argument><expr><literal type="string">"iTerm.app"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>nsterm</name> <init>= <expr><operator>(</operator><name>termprg</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>termprg</name></expr></argument>, <argument><expr><literal type="string">"Apple_Terminal"</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"nsterm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>konsole</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"konsole"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"KONSOLE_PROFILE_NAME"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"KONSOLE_DBUS_SESSION"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>konsolev_env</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"KONSOLE_VERSION"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>konsolev</name> <init>= <expr><ternary><condition><expr><name>konsolev_env</name></expr> ?</condition><then> <expr><call><name>strtol</name><argument_list>(<argument><expr><name>konsolev_env</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>konsole</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>patch_terminfo_bugs</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>colorterm</name></expr></argument>, <argument><expr><name>vtev</name></expr></argument>, <argument><expr><name>konsolev</name></expr></argument>, <argument><expr><name>iterm_env</name></expr></argument>, <argument><expr><name>nsterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>augment_terminfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>colorterm</name></expr></argument>, <argument><expr><name>vtev</name></expr></argument>, <argument><expr><name>konsolev</name></expr></argument>, <argument><expr><name>iterm_env</name></expr></argument>, <argument><expr><name>nsterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>can_change_scroll_region</name></name> <operator>=</operator>

<operator>!</operator><operator>!</operator><call><name>unibi_get_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_change_scroll_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>can_set_lr_margin</name></name> <operator>=</operator>

<operator>!</operator><operator>!</operator><call><name>unibi_get_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_set_lr_margin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>can_set_left_right_margin</name></name> <operator>=</operator>

<operator>!</operator><operator>!</operator><call><name>unibi_get_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_set_left_margin_parm</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><call><name>unibi_get_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_set_right_margin_parm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>can_scroll</name></name> <operator>=</operator>

<operator>!</operator><operator>!</operator><call><name>unibi_get_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_delete_line</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><call><name>unibi_get_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_parm_delete_line</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><call><name>unibi_get_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_insert_line</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><call><name>unibi_get_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_parm_insert_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>can_erase_chars</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>unibi_get_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_erase_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>immediate_wrap_after_last_column</name></name> <operator>=</operator>

<call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"conemu"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"cygwin"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"win32con"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"interix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bce</name></name> <operator>=</operator> <call><name>unibi_get_bool</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_back_color_erase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>normlen</name></name> <operator>=</operator> <call><name>unibi_pre_fmt_str</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>unibi_cursor_normal</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>norm</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>data</name><operator>-&gt;</operator><name>norm</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>invislen</name></name> <operator>=</operator> <call><name>unibi_pre_fmt_str</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>unibi_cursor_invisible</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>invis</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>data</name><operator>-&gt;</operator><name>invis</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t_colors</name> <operator>=</operator> <call><name>unibi_get_num</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_max_colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_enter_ca_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>save_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_keypad_xmit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_clear_screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>waiting_for_bg_response</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>get_bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enable_bracketed_paste</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_loop_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>write_loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>out_isatty</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_tty_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>write_loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>output_handle</name><operator>.</operator><name>tty</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>out_fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>uv_tty_set_mode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>output_handle</name><operator>.</operator><name>tty</name></name></expr></argument>, <argument><expr><name>UV_TTY_MODE_RAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>uv_tty_set_mode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>output_handle</name><operator>.</operator><name>tty</name></name></expr></argument>, <argument><expr><name>UV_TTY_MODE_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>write_loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>output_handle</name><operator>.</operator><name>pipe</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_pipe_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>output_handle</name><operator>.</operator><name>pipe</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>out_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flush_buf</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>terminfo_stop</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tui_mode_change</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>STRING_INIT</name></expr></argument>, <argument><expr><name>SHAPE_IDX_N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tui_mouse_off</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_exit_attribute_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_cursor_normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_keypad_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_exit_ca_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>restore_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>cursor_color_changed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>disable_bracketed_paste</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>disable_focus_reporting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_buf</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_tty_reset_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>output_handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>write_loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uv_loop_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>write_loop</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unibi_destroy</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_terminal_start</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>print_attr_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ugrid_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>terminfo_start</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tui_guess_size</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>winch_handle</name></name></expr></argument>, <argument><expr><name>sigwinch_cb</name></expr></argument>, <argument><expr><name>SIGWINCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tinput_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_terminal_after_startup</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enable_focus_reporting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_buf</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_terminal_stop</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uv_is_closing</name><argument_list>(<argument><expr><call><name>STRUCT_CAST</name><argument_list>(<argument><expr><name>uv_handle_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>output_handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"TUI already stopped (race?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tinput_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>winch_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>terminfo_stop</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ugrid_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_stop</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>tui_terminal_stop</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>tui_is_stopped</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_main</name><parameter_list>(<parameter><decl><type><name>UIBridgeData</name> <modifier>*</modifier></type><name>bridge</name></decl></parameter>, <parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Loop</name></type> <name>tui_loop</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>loop_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tui_loop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TUIData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bridge</name></name> <operator>=</operator> <name>bridge</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <operator>&amp;</operator><name>tui_loop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>is_starting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kv_init</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>invalid_regions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_init</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>winch_handle</name></name></expr></argument>, <argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_init</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cont_handle</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>signal_watcher_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cont_handle</name></name></expr></argument>, <argument><expr><name>sigcont_cb</name></expr></argument>, <argument><expr><name>SIGCONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><name>HLATTRS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TERMKEY_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>TERMKEY_VERSION_MINOR</name> <operator>&gt;</operator> <literal type="number">18</literal></expr></cpp:if>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>tk_ti_hook_fn</name></name> <operator>=</operator> <name>tui_tk_ti_getstr</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>tinput_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tui_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tui_terminal_start</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CONTINUE</name><argument_list>(<argument><expr><name>bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>loop_schedule_deferred</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>,

<argument><expr><call><name>event_create</name><argument_list>(<argument><expr><name>show_termcap_event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>ms</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ms</name> <operator>&lt;</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tui_is_stopped</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>ms</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><call><name>loop_poll_events</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tui_loop</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">20</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tui_is_stopped</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tui_terminal_after_startup</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>tui_is_stopped</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>loop_poll_events</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tui_loop</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></while>

<expr_stmt><expr><call><name>ui_bridge_stopped</name><argument_list>(<argument><expr><name>bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tinput_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cont_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cont_handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal_watcher_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>winch_handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>loop_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tui_loop</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>invalid_regions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>space_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_scheduler</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>loop_schedule_fast</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sigcont_cb</name><parameter_list>(<parameter><decl><type><name>SignalWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>TUIData</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><operator>-&gt;</operator><name>cont_received</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sigwinch_cb</name><parameter_list>(<parameter><decl><type><name>SignalWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>got_winch</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tui_is_stopped</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tui_guess_size</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_schedule_refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>attrs_differ</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id2</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rgb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id1</name> <operator>==</operator> <name>id2</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>id1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>id2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HlAttrs</name></type> <name>a1</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>id1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HlAttrs</name></type> <name>a2</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>id2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rgb</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>a1</name><operator>.</operator><name>rgb_fg_color</name></name> <operator>!=</operator> <name><name>a2</name><operator>.</operator><name>rgb_fg_color</name></name>

<operator>||</operator> <name><name>a1</name><operator>.</operator><name>rgb_bg_color</name></name> <operator>!=</operator> <name><name>a2</name><operator>.</operator><name>rgb_bg_color</name></name>

<operator>||</operator> <name><name>a1</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>!=</operator> <name><name>a2</name><operator>.</operator><name>rgb_ae_attr</name></name>

<operator>||</operator> <name><name>a1</name><operator>.</operator><name>rgb_sp_color</name></name> <operator>!=</operator> <name><name>a2</name><operator>.</operator><name>rgb_sp_color</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>a1</name><operator>.</operator><name>cterm_fg_color</name></name> <operator>!=</operator> <name><name>a2</name><operator>.</operator><name>cterm_fg_color</name></name>

<operator>||</operator> <name><name>a1</name><operator>.</operator><name>cterm_bg_color</name></name> <operator>!=</operator> <name><name>a2</name><operator>.</operator><name>cterm_bg_color</name></name>

<operator>||</operator> <name><name>a1</name><operator>.</operator><name>cterm_ae_attr</name></name> <operator>!=</operator> <name><name>a2</name><operator>.</operator><name>cterm_ae_attr</name></name>

<operator>||</operator> <operator>(</operator><name><name>a1</name><operator>.</operator><name>cterm_ae_attr</name></name> <operator>&amp;</operator> <operator>(</operator><name>HL_UNDERLINE</name><operator>|</operator><name>HL_UNDERCURL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>a1</name><operator>.</operator><name>rgb_sp_color</name></name> <operator>!=</operator> <name><name>a2</name><operator>.</operator><name>rgb_sp_color</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_attrs</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>attrs_differ</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>print_attr_id</name></name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>print_attr_id</name></name> <operator>=</operator> <name>attr_id</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>print_attr_id</name></name> <operator>=</operator> <name>attr_id</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HlAttrs</name></type> <name>attrs</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><ternary><condition><expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name></expr> ?</condition><then> <expr><name><name>attrs</name><operator>.</operator><name>rgb_ae_attr</name></name></expr> </then><else>: <expr><name><name>attrs</name><operator>.</operator><name>cterm_ae_attr</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bold</name> <init>= <expr><name>attr</name> <operator>&amp;</operator> <name>HL_BOLD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>italic</name> <init>= <expr><name>attr</name> <operator>&amp;</operator> <name>HL_ITALIC</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>reverse</name> <init>= <expr><name>attr</name> <operator>&amp;</operator> <name>HL_INVERSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>standout</name> <init>= <expr><name>attr</name> <operator>&amp;</operator> <name>HL_STANDOUT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>strikethrough</name> <init>= <expr><name>attr</name> <operator>&amp;</operator> <name>HL_STRIKETHROUGH</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>underline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>undercurl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_underline_style</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>underline</name> <operator>=</operator> <name>attr</name> <operator>&amp;</operator> <name>HL_UNDERLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>undercurl</name> <operator>=</operator> <name>attr</name> <operator>&amp;</operator> <name>HL_UNDERCURL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>underline</name> <operator>=</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_UNDERLINE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_UNDERCURL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>undercurl</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unibi_get_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_set_attributes</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bold</name> <operator>||</operator> <name>reverse</name> <operator>||</operator> <name>underline</name> <operator>||</operator> <name>standout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>standout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>underline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_set_attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>default_attr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_exit_attribute_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>default_attr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_exit_attribute_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bold</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_enter_bold_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>underline</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_enter_underline_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>standout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_enter_standout_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reverse</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_enter_reverse_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>italic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_enter_italics_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>strikethrough</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enter_strikethrough_mode</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enter_strikethrough_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>undercurl</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_underline_style</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_underline_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>undercurl</name> <operator>||</operator> <name>underline</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_underline_color</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><name><name>attrs</name><operator>.</operator><name>rgb_sp_color</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>color</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>color</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>color</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_underline_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_FG_INDEXED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fg</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>attrs</name><operator>.</operator><name>rgb_fg_color</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>

?</condition><then> <expr><name><name>attrs</name><operator>.</operator><name>rgb_fg_color</name></name></expr> </then><else>: <expr><name><name>data</name><operator>-&gt;</operator><name>clear_attrs</name><operator>.</operator><name>rgb_fg_color</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>fg</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>fg</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fg</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_rgb_foreground</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fg</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>attrs</name><operator>.</operator><name>cterm_fg_color</name></name></expr>

?</condition><then> <expr><name><name>attrs</name><operator>.</operator><name>cterm_fg_color</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>clear_attrs</name><operator>.</operator><name>cterm_fg_color</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_set_a_foreground</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_BG_INDEXED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bg</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>attrs</name><operator>.</operator><name>rgb_bg_color</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>

?</condition><then> <expr><name><name>attrs</name><operator>.</operator><name>rgb_bg_color</name></name></expr> </then><else>: <expr><name><name>data</name><operator>-&gt;</operator><name>clear_attrs</name><operator>.</operator><name>rgb_bg_color</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bg</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>bg</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>bg</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bg</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_rgb_background</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bg</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>attrs</name><operator>.</operator><name>cterm_bg_color</name></name></expr>

?</condition><then> <expr><name><name>attrs</name><operator>.</operator><name>cterm_bg_color</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>clear_attrs</name><operator>.</operator><name>cterm_bg_color</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bg</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_set_a_background</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>default_attr</name></name> <operator>=</operator> <name>fg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><name>bold</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>italic</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>underline</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>undercurl</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>reverse</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>standout</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>strikethrough</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>can_clear_attr</name></name> <operator>=</operator> <operator>!</operator><name>reverse</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>standout</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>underline</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>undercurl</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>strikethrough</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>bce</name></name> <operator>||</operator> <name>bg</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>final_column_wrap</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>row</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>grid</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <name><name>ui</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>row</name></name> <operator>&lt;</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>row</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_cell</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>UCell</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>immediate_wrap_after_last_column</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>final_column_wrap</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_attrs</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>col</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>immediate_wrap_after_last_column</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>final_column_wrap</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>cheap_to_print</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UCell</name> <modifier>*</modifier></type><name>cell</name> <init>= <expr><name><name>grid</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>attrs_differ</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>cell</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>print_attr_id</name></name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>default_attr</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>cell</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cell</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cursor_goto</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name><name>grid</name><operator>-&gt;</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>==</operator> <name><name>grid</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>row</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <name>col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_cursor_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ugrid_goto</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>row</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>safe_move</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><literal type="number">0</literal> <operator>==</operator> <name>col</name></expr> ?</condition><then> <expr><name>col</name> <operator>!=</operator> <name><name>grid</name><operator>-&gt;</operator><name>col</name></name></expr> </then><else>:

<expr><ternary><condition><expr><name>row</name> <operator>!=</operator> <name><name>grid</name><operator>-&gt;</operator><name>row</name></name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>:

<expr><ternary><condition><expr><literal type="number">1</literal> <operator>==</operator> <name>col</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>col</name></name> <operator>&amp;&amp;</operator> <call><name>cheap_to_print</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><ternary><condition><expr><literal type="number">2</literal> <operator>==</operator> <name>col</name></expr> ?</condition><then> <expr><literal type="number">5</literal> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>col</name></name> <operator>&amp;&amp;</operator> <call><name>cheap_to_print</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><name>false</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_carriage_return</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ugrid_goto</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name><name>grid</name><operator>-&gt;</operator><name>row</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>col</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>immediate_wrap_after_last_column</name></name> <operator>||</operator> <name><name>grid</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name><name>ui</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>grid</name><operator>-&gt;</operator><name>col</name></name> <operator>-</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> 

<while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_cursor_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_parm_left_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ugrid_goto</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>col</name> <operator>&gt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>col</name> <operator>-</operator> <name><name>grid</name><operator>-&gt;</operator><name>col</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_cursor_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_parm_right_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ugrid_goto</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <name><name>grid</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>row</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>row</name> <operator>-</operator> <name><name>grid</name><operator>-&gt;</operator><name>row</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> 

<while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_cursor_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_parm_down_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ugrid_goto</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>row</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>row</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>grid</name><operator>-&gt;</operator><name>row</name></name> <operator>-</operator> <name>row</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_cursor_up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_parm_up_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ugrid_goto</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>safe_move</name>:</label>

<expr_stmt><expr><call><name>unibi_goto</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ugrid_goto</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_region</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>attr_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>update_attrs</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>can_clear_attr</name></name>

<operator>&amp;&amp;</operator> <name>left</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>right</name> <operator>==</operator> <name><name>ui</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name>bot</name> <operator>==</operator> <name><name>ui</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_clear_screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ugrid_goto</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cursor_goto</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_clr_eos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name>right</name><operator>-</operator><name>left</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>top</name></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>bot</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>cursor_goto</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>can_clear_attr</name></name> <operator>&amp;&amp;</operator> <name>right</name> <operator>==</operator> <name><name>ui</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_clr_eol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>can_erase_chars</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>can_clear_attr</name></name> <operator>&amp;&amp;</operator> <name>width</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_erase_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>space_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>col</name></name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>immediate_wrap_after_last_column</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>final_column_wrap</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_scroll_region</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_change_scroll_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>right</name> <operator>!=</operator> <name><name>ui</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enable_lr_margin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>can_set_lr_margin</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_set_lr_margin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_set_left_margin_parm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_set_right_margin_parm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_scroll_region</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fullwidth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_scroll_region</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_scroll_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_change_scroll_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fullwidth</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>can_set_lr_margin</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_set_lr_margin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_set_left_margin_parm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_set_right_margin_parm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>disable_lr_margin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_grid_resize</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ugrid_resize</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>space_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>space_buf</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>data</name><operator>-&gt;</operator><name>space_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>space_buf</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>invalid_regions</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Rect</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><call><name>kv_A</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>invalid_regions</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>bot</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>bot</name></name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_winch</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>is_starting</name></name> <operator>||</operator> <name>did_user_set_dimensions</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>resize_screen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>scroll_region_is_full_screen</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reset_scroll_region</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name><name>grid</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>got_winch</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_grid_clear</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ugrid_clear</name><argument_list>(<argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>invalid_regions</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_region</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_grid_cursor_goto</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>grid</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>col</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>CursorShape</name></type> <name>tui_cursor_decode_shape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shape_str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CursorShape</name></type> <name>shape</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>shape_str</name></expr></argument>, <argument><expr><literal type="string">"block"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shape</name> <operator>=</operator> <name>SHAPE_BLOCK</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>shape_str</name></expr></argument>, <argument><expr><literal type="string">"vertical"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shape</name> <operator>=</operator> <name>SHAPE_VER</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>shape_str</name></expr></argument>, <argument><expr><literal type="string">"horizontal"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shape</name> <operator>=</operator> <name>SHAPE_HOR</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>WLOG</name><argument_list>(<argument><expr><literal type="string">"Unknown shape value '%s'"</literal></expr></argument>, <argument><expr><name>shape_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shape</name> <operator>=</operator> <name>SHAPE_BLOCK</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>shape</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cursorentry_T</name></type> <name>decode_cursor_entry</name><parameter_list>(<parameter><decl><type><name>Dictionary</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cursorentry_T</name></type> <name>r</name> <init>= <expr><name><name>shape_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>key</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"cursor_shape"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>shape</name></name> <operator>=</operator> <call><name>tui_cursor_decode_shape</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"blinkon"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>blinkon</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"blinkoff"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>blinkoff</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"attr_id"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>id</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_mode_info_set</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>guicursor_enabled</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>cursor_style_enabled</name> <operator>=</operator> <name>guicursor_enabled</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>guicursor_enabled</name></expr>)</condition> <block>{<block_content>

<return>return;</return> 

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>kObjectTypeDictionary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>cursorentry_T</name></type> <name>r</name> <init>= <expr><call><name>decode_cursor_entry</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>dictionary</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cursor_shapes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>tui_set_mode</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>showing_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_update_menu</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_busy_start</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>TUIData</name> <operator>*</operator><operator>)</operator><name><name>ui</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>busy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_busy_stop</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>TUIData</name> <operator>*</operator><operator>)</operator><name><name>ui</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>busy</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_mouse_on</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>mouse_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enable_mouse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mouse_enabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_mouse_off</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>mouse_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>disable_mouse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mouse_enabled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_set_mode</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>ModeShape</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cursor_style_enabled</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cursorentry_T</name></type> <name>c</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>cursor_shapes</name><index>[<expr><name>mode</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>.</operator><name>id</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>kv_size</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>HlAttrs</name></type> <name>aep</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>want_invisible</name></name> <operator>=</operator> <name><name>aep</name><operator>.</operator><name>hl_blend</name></name> <operator>==</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>want_invisible</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_cursor_invisible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>aep</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;</operator> <name>HL_INVERSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aep</name><operator>.</operator><name>rgb_bg_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_cursor_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cursor_color_changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>.</operator><name>id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shape</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>.</operator><name>shape</name></name></expr>)</condition> <block>{<block_content>

<default>default:</default> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHAPE_BLOCK</name></expr>:</case> <expr_stmt><expr><name>shape</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHAPE_HOR</name></expr>:</case> <expr_stmt><expr><name>shape</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHAPE_VER</name></expr>:</case> <expr_stmt><expr><name>shape</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>shape</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>c</name><operator>.</operator><name>blinkon</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out_ext</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_cursor_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_mode_change</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>mode_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tui_set_mode</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><operator>(</operator><name>ModeShape</name><operator>)</operator><name>mode_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>is_starting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>showing_mode</name></name> <operator>=</operator> <operator>(</operator><name>ModeShape</name><operator>)</operator><name>mode_idx</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_grid_scroll</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>startrow</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>endrow</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>startcol</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>endcol</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>Integer</name> <name>cols</name></type> <name>FUNC_ATTR_UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>startrow</name></expr></init></decl>, <decl><type ref="prev"/><name>bot</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>endrow</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>startcol</name></expr></init></decl>, <decl><type ref="prev"/><name>right</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>endcol</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fullwidth</name> <init>= <expr><name>left</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>right</name> <operator>==</operator> <name><name>ui</name><operator>-&gt;</operator><name>width</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>scroll_region_is_full_screen</name></name> <operator>=</operator> <name>fullwidth</name>

<operator>&amp;&amp;</operator> <name>top</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bot</name> <operator>==</operator> <name><name>ui</name><operator>-&gt;</operator><name>height</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ugrid_scroll</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>bot</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_scroll</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>can_scroll</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>scroll_region_is_full_screen</name></name>

<operator>||</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>can_change_scroll_region</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>left</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>right</name> <operator>==</operator> <name><name>ui</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>can_set_lr_margin</name></name>

<operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>can_set_left_right_margin</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>can_scroll</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>scroll_region_is_full_screen</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_scroll_region</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>bot</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cursor_goto</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_attrs</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_delete_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_parm_delete_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_insert_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_parm_insert_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>scroll_region_is_full_screen</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reset_scroll_region</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>fullwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>endrow</name> <operator>=</operator> <name>endrow</name> <operator>-</operator> <name>rows</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>startrow</name> <operator>=</operator> <name>startrow</name> <operator>-</operator> <name>rows</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>invalidate</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>startrow</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>endrow</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>startcol</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>endcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_hl_attr_define</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>HlAttrs</name></type> <name>attrs</name></decl></parameter>,

<parameter><decl><type><name>HlAttrs</name></type> <name>cterm_attrs</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>kv_a</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>attrs</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_bell</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_bell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_visual_bell</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_flash_screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_default_colors_set</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>rgb_fg</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>rgb_bg</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>rgb_sp</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>cterm_fg</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>cterm_bg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>clear_attrs</name><operator>.</operator><name>rgb_fg_color</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>rgb_fg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>clear_attrs</name><operator>.</operator><name>rgb_bg_color</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>rgb_bg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>clear_attrs</name><operator>.</operator><name>rgb_sp_color</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>rgb_sp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>clear_attrs</name><operator>.</operator><name>cterm_fg_color</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>cterm_fg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>clear_attrs</name><operator>.</operator><name>cterm_bg_color</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>cterm_bg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>print_attr_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>grid</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>grid</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_flush</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nrevents</name> <init>= <expr><call><name>loop_size</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nrevents</name> <operator>&gt;</operator> <name>TOO_MANY_EVENTS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>WLOG</name><argument_list>(<argument><expr><literal type="string">"TUI event-queue flooded (thread_events=%zu); purging"</literal></expr></argument>, <argument><expr><name>nrevents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>loop_purge</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tui_busy_stop</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>invalid_regions</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>r</name> <init>= <expr><call><name>kv_pop</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>invalid_regions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>bot</name></name> <operator>&lt;=</operator> <name><name>grid</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>.</operator><name>right</name></name> <operator>&lt;=</operator> <name><name>grid</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name><name>r</name><operator>.</operator><name>top</name></name></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>r</name><operator>.</operator><name>bot</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>clear_attr</name> <init>= <expr><name><name>grid</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name><name>r</name><operator>.</operator><name>right</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>attr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clear_col</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>clear_col</name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>right</name></name></expr>;</init> <condition><expr><name>clear_col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>clear_col</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>UCell</name> <modifier>*</modifier></type><name>cell</name> <init>= <expr><operator>&amp;</operator><name><name>grid</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>clear_col</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cell</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name><name>cell</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <name><name>cell</name><operator>-&gt;</operator><name>attr</name></name> <operator>==</operator> <name>clear_attr</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<macro><name>UGRID_FOREACH_CELL</name><argument_list>(<argument>grid</argument>, <argument>row</argument>, <argument>r.left</argument>, <argument>clear_col</argument>, <argument>{

cursor_goto(ui, row, curcol);

print_cell(ui, cell);

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_col</name> <operator>&lt;</operator> <name><name>r</name><operator>.</operator><name>right</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clear_region</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>clear_col</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>clear_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

<expr_stmt><expr><call><name>cursor_goto</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_buf</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_termcap_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unibi_term</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ut</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>terminfo_info_msg</name><argument_list>(<argument><expr><name>ut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>suspend_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>enable_mouse</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>mouse_enabled</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tui_terminal_stop</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cont_received</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_set_blocking</name><argument_list>(<argument><expr><call><name>input_global_fd</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGTSTP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>cont_received</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>loop_poll_events</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>tui_terminal_start</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tui_terminal_after_startup</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enable_mouse</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tui_mouse_on</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stream_set_blocking</name><argument_list>(<argument><expr><call><name>input_global_fd</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CONTINUE</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bridge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_suspend</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>multiqueue_put_event</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>loop</name><operator>-&gt;</operator><name>fast_events</name></name></expr></argument>,

<argument><expr><call><name>event_create</name><argument_list>(<argument><expr><name>suspend_event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_set_title</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>title</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <call><name>unibi_get_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_to_status_line</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>unibi_get_str</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_from_status_line</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_to_status_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>title</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>title</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_from_status_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_set_icon</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>icon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_option_set</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"termguicolors"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name> <operator>=</operator> <name><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>boolean</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>print_attr_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>grid</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>grid</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ttimeout"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>ttimeout</name></name> <operator>=</operator> <name><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>boolean</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ttimeoutlen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>ttimeoutlen</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_raw_line</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>linerow</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>startcol</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>endcol</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>clearcol</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>clearattr</name></decl></parameter>,

<parameter><decl><type><name>LineFlags</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>schar_T</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>sattr_T</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>grid</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>Integer</name></type> <name>c</name> <init>= <expr><name>startcol</name></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>endcol</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>linerow</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>chunk</name><index>[<expr><name>c</name><operator>-</operator><name>startcol</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>attrs</name><index>[<expr><name>c</name><operator>-</operator><name>startcol</name></expr>]</index></name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>linerow</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>attr</name> <operator>=</operator> <name><name>attrs</name><index>[<expr><name>c</name><operator>-</operator><name>startcol</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<macro><name>UGRID_FOREACH_CELL</name><argument_list>(<argument>grid</argument>, <argument>(int)linerow</argument>, <argument>(int)startcol</argument>, <argument>(int)endcol</argument>, <argument>{

cursor_goto(ui, (int)linerow, curcol);

print_cell(ui, cell);

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>clearcol</name> <operator>&gt;</operator> <name>endcol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ugrid_clear_chunk</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>linerow</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>endcol</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>clearcol</name></expr></argument>,

<argument><expr><operator>(</operator><name>sattr_T</name><operator>)</operator><name>clearattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_region</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>linerow</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>linerow</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>endcol</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>clearcol</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>clearattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>kLineFlagWrap</name> <operator>&amp;&amp;</operator> <name><name>ui</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name><name>grid</name><operator>-&gt;</operator><name>width</name></name>

<operator>&amp;&amp;</operator> <name>linerow</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>endcol</name> <operator>!=</operator> <name><name>grid</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name><name>grid</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>linerow</name></expr>]</index><index>[<expr><name><name>grid</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cursor_goto</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>linerow</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_cell</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grid</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>linerow</name></expr>]</index><index>[<expr><name><name>grid</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>size</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>final_column_wrap</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>invalidate</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name> <modifier>*</modifier></type><name>intersects</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>invalid_regions</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Rect</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><call><name>kv_A</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>invalid_regions</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>top</name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>bot</name></name> <operator>||</operator> <name>bot</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>top</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>left</name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>right</name></name> <operator>||</operator> <name>right</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>left</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>intersects</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>intersects</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>intersects</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name><name>intersects</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>intersects</name><operator>-&gt;</operator><name>bot</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>bot</name></expr></argument>, <argument><expr><name><name>intersects</name><operator>-&gt;</operator><name>bot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>intersects</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>intersects</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>intersects</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name><name>intersects</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<macro><name>kv_push</name><argument_list>(<argument>data-&gt;invalid_regions</argument>, <argument>((Rect) { top, bot, left, right })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tui_guess_size</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>is_starting</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>Columns</name> <operator>!=</operator> <name>DFLT_COLS</name> <operator>||</operator> <name>Rows</name> <operator>!=</operator> <name>DFLT_ROWS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>did_user_set_dimensions</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Columns</name> <operator>&gt;=</operator> <name>INT_MIN</name> <operator>&amp;&amp;</operator> <name>Columns</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Rows</name> <operator>&gt;=</operator> <name>INT_MIN</name> <operator>&amp;&amp;</operator> <name>Rows</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>out_isatty</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>uv_tty_get_winsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>output_handle</name><operator>.</operator><name>tty</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advance</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"LINES"</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"%d%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>advance</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>advance</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>val</name> <operator>=</operator> <call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"%d%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>advance</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>advance</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>unibi_get_num</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>unibi_get_num</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></argument>, <argument><expr><name>unibi_columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>DFLT_COLS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name>DFLT_ROWS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bridge</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>ui</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bridge</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>ui</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unibi_goto</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNIBI_SET_NUM_VAR</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_out</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>unibi_cursor_address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIBI_OUT</name><parameter_list>(<parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { TUIData *data = ui-&gt;data; const char *str = NULL; if (unibi_index &gt;= 0) { str = fn(data-&gt;ut, (unsigned)unibi_index); } if (str) { unibi_var_t vars[26 + 26]; size_t orig_pos = data-&gt;bufpos; memset(&amp;vars, 0, sizeof(vars)); data-&gt;cork = true; retry: unibi_format(vars, vars + 26, str, data-&gt;params, out, ui, NULL, NULL); if (data-&gt;overflow) { data-&gt;bufpos = orig_pos; flush_buf(ui); goto retry; } data-&gt;cork = false; } } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unibi_out</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unibi_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_OUT</name><argument_list>(<argument><expr><name>unibi_get_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unibi_out_ext</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unibi_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UNIBI_OUT</name><argument_list>(<argument><expr><name>unibi_get_ext_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UNIBI_OUT</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>out</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>available</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>bufpos</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>cork</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>overflow</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>available</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>cork</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>overflow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>flush_buf</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>bufpos</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unibi_set_if_empty</name><parameter_list>(<parameter><decl><type><name>unibi_term</name> <modifier>*</modifier></type><name>ut</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>unibi_string</name></name></type> <name>str</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>unibi_get_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_set_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unibi_find_ext_str</name><parameter_list>(<parameter><decl><type><name>unibi_term</name> <modifier>*</modifier></type><name>ut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>max</name> <init>= <expr><call><name>unibi_count_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>n</name> <init>= <expr><call><name>unibi_get_ext_str_name</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unibi_find_ext_bool</name><parameter_list>(<parameter><decl><type><name>unibi_term</name> <modifier>*</modifier></type><name>ut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>max</name> <init>= <expr><call><name>unibi_count_ext_bool</name><argument_list>(<argument><expr><name>ut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>n</name> <init>= <expr><call><name>unibi_get_ext_bool_name</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>patch_terminfo_bugs</name><parameter_list>(<parameter><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>term</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>colorterm</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>vte_version</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>konsolev</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>iterm_env</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nsterm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unibi_term</name> <modifier>*</modifier></type><name>ut</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xterm_version</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"XTERM_VERSION"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

bool roxterm = !!os_getenv("ROXTERM_ID");

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>bool</name></type> <name>xterm</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"xterm"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <name>nsterm</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>kitty</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"xterm-kitty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>linuxvt</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"linux"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bsdvt</name> <init>= <expr><call><name>terminfo_is_bsd_console</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>rxvt</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"rxvt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>teraterm</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"teraterm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>putty</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"putty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>screen</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"screen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>tmux</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"tmux"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>!</operator><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"TMUX"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>st</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"st"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>gnome</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"gnome"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"vte"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>iterm</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"iterm"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"iterm2"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"iTerm.app"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"iTerm2.app"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>alacritty</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"alacritty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>iterm_pretending_xterm</name> <init>= <expr><name>xterm</name> <operator>&amp;&amp;</operator> <name>iterm_env</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>gnome_pretending_xterm</name> <init>= <expr><name>xterm</name> <operator>&amp;&amp;</operator> <name>colorterm</name>

<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>colorterm</name></expr></argument>, <argument><expr><literal type="string">"gnome-terminal"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>mate_pretending_xterm</name> <init>= <expr><name>xterm</name> <operator>&amp;&amp;</operator> <name>colorterm</name>

<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>colorterm</name></expr></argument>, <argument><expr><literal type="string">"mate-terminal"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>true_xterm</name> <init>= <expr><name>xterm</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><name>xterm_version</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>bsdvt</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cygwin</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"cygwin"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fix_normal</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>unibi_get_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_cursor_normal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fix_normal</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STARTS_WITH</name><argument_list>(<argument><expr><name>fix_normal</name></expr></argument>, <argument><expr><literal type="string">"\x1b[?12l"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fix_normal</name> <operator>+=</operator> <sizeof>sizeof <name/></sizeof>"\x1b[?12l" <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_cursor_normal</name></expr></argument>, <argument><expr><name>fix_normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>linuxvt</name>

<operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fix_normal</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><sizeof>sizeof <name>LINUXSET0C</name></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><call><name>strchr</name><argument_list>(<argument><expr><name>fix_normal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><sizeof>sizeof <name>LINUXSET0C</name></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name>LINUXSET0C</name></expr></argument>, <argument><expr><sizeof>sizeof <name>LINUXSET0C</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fix_normal</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>fix_normal</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><sizeof>sizeof <name>LINUXSET0C</name></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fix_invisible</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>unibi_get_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_cursor_invisible</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fix_invisible</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>linuxvt</name>

<operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fix_invisible</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><sizeof>sizeof <name>LINUXSET1C</name></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><call><name>strchr</name><argument_list>(<argument><expr><name>fix_invisible</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><sizeof>sizeof <name>LINUXSET1C</name></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name>LINUXSET1C</name></expr></argument>, <argument><expr><sizeof>sizeof <name>LINUXSET1C</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fix_invisible</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>fix_invisible</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><sizeof>sizeof <name>LINUXSET1C</name></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmux</name> <operator>||</operator> <name>screen</name> <operator>||</operator> <name>kitty</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_set_bool</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_back_color_erase</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xterm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_to_status_line</name></expr></argument>, <argument><expr><literal type="string">"\x1b]0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_from_status_line</name></expr></argument>, <argument><expr><literal type="string">"\x07"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_set_tb_margin</name></expr></argument>, <argument><expr><literal type="string">"\x1b[%i%p1%d;%p2%dr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_enter_italics_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[3m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_exit_italics_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[23m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>true_xterm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_set_lr_margin</name></expr></argument>, <argument><expr><literal type="string">"\x1b[%i%p1%d;%p2%ds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_set_left_margin_parm</name></expr></argument>, <argument><expr><literal type="string">"\x1b[%i%p1%ds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_set_right_margin_parm</name></expr></argument>, <argument><expr><literal type="string">"\x1b[%i;%p2%ds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unibi_get_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_set_lr_margin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ILOG</name><argument_list>(<argument><expr><literal type="string">"Disabling smglr with TERM=xterm for non-xterm."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_set_lr_margin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unibi_set_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_cursor_down</name></expr></argument>, <argument><expr><literal type="string">"\x1b[B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rxvt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_enter_italics_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[3m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_exit_italics_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[23m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_to_status_line</name></expr></argument>, <argument><expr><literal type="string">"\x1b]2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_from_status_line</name></expr></argument>, <argument><expr><literal type="string">"\x07"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_enter_ca_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[?1049h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_exit_ca_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[?1049l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>screen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_to_status_line</name></expr></argument>, <argument><expr><literal type="string">"\x1b_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_from_status_line</name></expr></argument>, <argument><expr><literal type="string">"\x1b\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tmux</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_to_status_line</name></expr></argument>, <argument><expr><literal type="string">"\x1b_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_from_status_line</name></expr></argument>, <argument><expr><literal type="string">"\x1b\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_enter_italics_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[3m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_exit_italics_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[23m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"interix"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_carriage_return</name></expr></argument>, <argument><expr><literal type="string">"\x0d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>linuxvt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_parm_up_cursor</name></expr></argument>, <argument><expr><literal type="string">"\x1b[%p1%dA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_parm_down_cursor</name></expr></argument>, <argument><expr><literal type="string">"\x1b[%p1%dB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_parm_right_cursor</name></expr></argument>, <argument><expr><literal type="string">"\x1b[%p1%dC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_parm_left_cursor</name></expr></argument>, <argument><expr><literal type="string">"\x1b[%p1%dD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>putty</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>iterm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_set_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_enter_ca_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[?1049h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_exit_ca_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[?1049l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_set_tb_margin</name></expr></argument>, <argument><expr><literal type="string">"\x1b[%i%p1%d;%p2%dr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_orig_pair</name></expr></argument>, <argument><expr><literal type="string">"\x1b[39;49m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_enter_dim_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[2m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_enter_italics_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[3m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_exit_italics_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[23m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_exit_underline_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[24m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_exit_standout_mode</name></expr></argument>, <argument><expr><literal type="string">"\x1b[27m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XTERM_SETAF_256_COLON</name></cpp:macro> <cpp:value>"\x1b[%?%p1%{8}%&lt;%t3%p1%d%e%p1%{16}%&lt;%t9%p1%{8}%-%d%e38:5:%p1%d%;m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XTERM_SETAB_256_COLON</name></cpp:macro> <cpp:value>"\x1b[%?%p1%{8}%&lt;%t4%p1%d%e%p1%{16}%&lt;%t10%p1%{8}%-%d%e48:5:%p1%d%;m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XTERM_SETAF_256</name></cpp:macro> <cpp:value>"\x1b[%?%p1%{8}%&lt;%t3%p1%d%e%p1%{16}%&lt;%t9%p1%{8}%-%d%e38;5;%p1%d%;m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XTERM_SETAB_256</name></cpp:macro> <cpp:value>"\x1b[%?%p1%{8}%&lt;%t4%p1%d%e%p1%{16}%&lt;%t10%p1%{8}%-%d%e48;5;%p1%d%;m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XTERM_SETAF_16</name></cpp:macro> <cpp:value>"\x1b[%?%p1%{8}%&lt;%t3%p1%d%e%p1%{16}%&lt;%t9%p1%{8}%-%d%e39%;m"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XTERM_SETAB_16</name></cpp:macro> <cpp:value>"\x1b[%?%p1%{8}%&lt;%t4%p1%d%e%p1%{16}%&lt;%t10%p1%{8}%-%d%e39%;m"</cpp:value></cpp:define>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>get_bg</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.get_bg"</literal></expr></argument>,

<argument><expr><literal type="string">"\x1b]11;?\x07"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unibi_get_num</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_max_colors</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>true_xterm</name> <operator>||</operator> <name>iterm</name> <operator>||</operator> <name>iterm_pretending_xterm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_set_num</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_max_colors</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_set_a_foreground</name></expr></argument>, <argument><expr><name>XTERM_SETAF_256_COLON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_set_a_background</name></expr></argument>, <argument><expr><name>XTERM_SETAB_256_COLON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>konsolev</name> <operator>||</operator> <name>xterm</name> <operator>||</operator> <name>gnome</name> <operator>||</operator> <name>rxvt</name> <operator>||</operator> <name>st</name> <operator>||</operator> <name>putty</name>

<operator>||</operator> <name>linuxvt</name> 

<operator>||</operator> <name>mate_pretending_xterm</name> <operator>||</operator> <name>gnome_pretending_xterm</name>

<operator>||</operator> <name>tmux</name>

<operator>||</operator> <operator>(</operator><name>colorterm</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>colorterm</name></expr></argument>, <argument><expr><literal type="string">"256"</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>term</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"256"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_set_num</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_max_colors</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_set_a_foreground</name></expr></argument>, <argument><expr><name>XTERM_SETAF_256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_set_a_background</name></expr></argument>, <argument><expr><name>XTERM_SETAB_256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unibi_get_num</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_max_colors</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>colorterm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unibi_set_num</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_max_colors</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_set_a_foreground</name></expr></argument>, <argument><expr><name>XTERM_SETAF_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unibi_set_if_empty</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>unibi_set_a_background</name></expr></argument>, <argument><expr><name>XTERM_SETAB_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>st</name> <operator>||</operator> <operator>(</operator><name>vte_version</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>vte_version</name> <operator>&lt;</operator> <literal type="number">3900</literal><operator>)</operator> <operator>||</operator> <name>konsolev</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_style</name></name> <operator>=</operator> <call><name>unibi_find_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"Se"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_cursor_style</name></name> <operator>=</operator> <call><name>unibi_find_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"Ss"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_cursor_style</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>bsdvt</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>konsolev</name> <operator>||</operator> <name>konsolev</name> <operator>&gt;=</operator> <literal type="number">180770</literal><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>xterm</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>vte_version</name><operator>)</operator> 

<operator>||</operator> <name>putty</name>

<operator>||</operator> <operator>(</operator><name>vte_version</name> <operator>&gt;=</operator> <literal type="number">3900</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>konsolev</name> <operator>&gt;=</operator> <literal type="number">180770</literal><operator>)</operator> 

<operator>||</operator> <name>tmux</name> 

<operator>||</operator> <name>screen</name>

<operator>||</operator> <name>st</name> 

<operator>||</operator> <name>rxvt</name> 

<operator>||</operator> <name>iterm</name> <operator>||</operator> <name>iterm_pretending_xterm</name>

<operator>||</operator> <name>teraterm</name> 

<operator>||</operator> <name>alacritty</name> 

<operator>||</operator> <name>cygwin</name>

<operator>||</operator> <operator>(</operator><name>linuxvt</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>xterm_version</name> <operator>||</operator> <operator>(</operator><name>vte_version</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>colorterm</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_cursor_style</name></name> <operator>=</operator>

<operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"Ss"</literal></expr></argument>, <argument><expr><literal type="string">"\x1b[%p1%d q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_style</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_style</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"Se"</literal></expr></argument>,

<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unibi_set_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_style</name></name></expr></argument>,

<argument><expr><literal type="string">"\x1b[ q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>linuxvt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_cursor_style</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"Ss"</literal></expr></argument>,

<argument><expr><literal type="string">"\x1b[?"</literal>

<literal type="string">"%?"</literal>

<literal type="string">"%p1%{2}%&lt;"</literal> <literal type="string">"%t%{8}"</literal> 

<literal type="string">"%e%p1%{2}%="</literal> <literal type="string">"%t%{112}"</literal> 

<literal type="string">"%e%p1%{3}%="</literal> <literal type="string">"%t%{4}"</literal> 

<literal type="string">"%e%p1%{4}%="</literal> <literal type="string">"%t%{4}"</literal> 

<literal type="string">"%e%p1%{5}%="</literal> <literal type="string">"%t%{2}"</literal> 

<literal type="string">"%e%p1%{6}%="</literal> <literal type="string">"%t%{2}"</literal> 

<literal type="string">"%e%{0}"</literal> 

<literal type="string">"%;"</literal> <literal type="string">"%dc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_style</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_style</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"Se"</literal></expr></argument>,

<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unibi_set_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_style</name></name></expr></argument>,

<argument><expr><literal type="string">"\x1b[?c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>konsolev</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>konsolev</name> <operator>&lt;</operator> <literal type="number">180770</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_cursor_style</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"Ss"</literal></expr></argument>,

<argument><expr><call><name>TMUX_WRAP</name><argument_list>(<argument><expr><name>tmux</name></expr></argument>, <argument><expr><literal type="string">"\x1b]50;CursorShape=%?"</literal>

<literal type="string">"%p1%{3}%&lt;"</literal> <literal type="string">"%t%{0}"</literal> 

<literal type="string">"%e%p1%{5}%&lt;"</literal> <literal type="string">"%t%{2}"</literal> 

<literal type="string">"%e%{1}"</literal> 

<literal type="string">"%;%d;BlinkingCursorEnabled=%?"</literal>

<literal type="string">"%p1%{1}%&lt;"</literal> <literal type="string">"%t%{1}"</literal> 

<literal type="string">"%e%p1%{1}%&amp;"</literal> 

<literal type="string">"%;%d\x07"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_style</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_style</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"Se"</literal></expr></argument>,

<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unibi_set_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_style</name></name></expr></argument>,

<argument><expr><literal type="string">"\x1b]50;\x07"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>augment_terminfo</name><parameter_list>(<parameter><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>term</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>colorterm</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>vte_version</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>konsolev</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>iterm_env</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nsterm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unibi_term</name> <modifier>*</modifier></type><name>ut</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>ut</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>xterm</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"xterm"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <name>nsterm</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bsdvt</name> <init>= <expr><call><name>terminfo_is_bsd_console</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>dtterm</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"dtterm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>rxvt</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"rxvt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>teraterm</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"teraterm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>putty</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"putty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>screen</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"screen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>tmux</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"tmux"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>!</operator><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"TMUX"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>iterm</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"iterm"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"iterm2"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"iTerm.app"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"iTerm2.app"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>alacritty</name> <init>= <expr><call><name>terminfo_is_term_family</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"alacritty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>iterm_pretending_xterm</name> <init>= <expr><name>xterm</name> <operator>&amp;&amp;</operator> <name>iterm_env</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xterm_version</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"XTERM_VERSION"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>true_xterm</name> <init>= <expr><name>xterm</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><name>xterm_version</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>bsdvt</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dtterm</name> 

<operator>||</operator> <name>xterm</name> 

<operator>||</operator> <name>konsolev</name> 

<operator>||</operator> <name>teraterm</name> 

<operator>||</operator> <name>rxvt</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>resize_screen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>,

<argument><expr><literal type="string">"ext.resize_screen"</literal></expr></argument>,

<argument><expr><literal type="string">"\x1b[8;%p1%d;%p2%dt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>putty</name> <operator>||</operator> <name>xterm</name> <operator>||</operator> <name>rxvt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_scroll_region</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>,

<argument><expr><literal type="string">"ext.reset_scroll_region"</literal></expr></argument>,

<argument><expr><literal type="string">"\x1b[r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enter_strikethrough_mode</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_find_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"smxx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_colon_rgb</name> <init>= <expr><operator>!</operator><name>tmux</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>screen</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>vte_version</name> 

<operator>&amp;&amp;</operator> <operator>(</operator><name>iterm</name> <operator>||</operator> <name>iterm_pretending_xterm</name> 

<operator>||</operator> <name>true_xterm</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_rgb_foreground</name></name> <operator>=</operator> <call><name>unibi_find_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"setrgbf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_rgb_foreground</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_colon_rgb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_rgb_foreground</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"setrgbf"</literal></expr></argument>,

<argument><expr><literal type="string">"\x1b[38:2:%p1%d:%p2%d:%p3%dm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_rgb_foreground</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"setrgbf"</literal></expr></argument>,

<argument><expr><literal type="string">"\x1b[38;2;%p1%d;%p2%d;%p3%dm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_rgb_background</name></name> <operator>=</operator> <call><name>unibi_find_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"setrgbb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_rgb_background</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_colon_rgb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_rgb_background</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"setrgbb"</literal></expr></argument>,

<argument><expr><literal type="string">"\x1b[48:2:%p1%d:%p2%d:%p3%dm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_rgb_background</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"setrgbb"</literal></expr></argument>,

<argument><expr><literal type="string">"\x1b[48;2;%p1%d;%p2%d;%p3%dm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iterm</name> <operator>||</operator> <name>iterm_pretending_xterm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_cursor_color</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>TMUX_WRAP</name><argument_list>(<argument><expr><name>tmux</name></expr></argument>, <argument><expr><literal type="string">"\033]Pl%p1%06x\033\\"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>xterm</name> <operator>||</operator> <name>rxvt</name> <operator>||</operator> <name>alacritty</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>vte_version</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>vte_version</name> <operator>&gt;=</operator> <literal type="number">3900</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_cursor_color</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.set_cursor_color"</literal></expr></argument>, <argument><expr><literal type="string">"\033]12;#%p1%06x\007"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_cursor_color</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>reset_cursor_color</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.reset_cursor_color"</literal></expr></argument>, <argument><expr><literal type="string">"\x1b]112\x07"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>save_title</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.save_title"</literal></expr></argument>, <argument><expr><literal type="string">"\x1b[22;0;0t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>restore_title</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.restore_title"</literal></expr></argument>, <argument><expr><literal type="string">"\x1b[23;0;0t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enable_lr_margin</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.enable_lr_margin"</literal></expr></argument>, <argument><expr><literal type="string">"\x1b[?69h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>disable_lr_margin</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.disable_lr_margin"</literal></expr></argument>, <argument><expr><literal type="string">"\x1b[?69l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enable_bracketed_paste</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.enable_bpaste"</literal></expr></argument>, <argument><expr><literal type="string">"\x1b[?2004h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>disable_bracketed_paste</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.disable_bpaste"</literal></expr></argument>, <argument><expr><literal type="string">"\x1b[?2004l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enable_focus_reporting</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.enable_focus"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>rxvt</name></expr> ?</condition><then> <expr><literal type="string">"\x1b[?1004h\x1b]777;focus;on\x7"</literal></expr> </then><else>: <expr><literal type="string">"\x1b[?1004h"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>disable_focus_reporting</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.disable_focus"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>rxvt</name></expr> ?</condition><then> <expr><literal type="string">"\x1b[?1004l\x1b]777;focus;off\x7"</literal></expr> </then><else>: <expr><literal type="string">"\x1b[?1004l"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>enable_mouse</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.enable_mouse"</literal></expr></argument>, <argument><expr><literal type="string">"\x1b[?1002h\x1b[?1006h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>disable_mouse</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.disable_mouse"</literal></expr></argument>, <argument><expr><literal type="string">"\x1b[?1002l\x1b[?1006l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_underline_style</name></name> <operator>=</operator> <call><name>unibi_find_ext_str</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"Smulx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_underline_style</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ext_bool_Su</name> <init>= <expr><call><name>unibi_find_ext_bool</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"Su"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>vte_version</name> <operator>&gt;=</operator> <literal type="number">5102</literal>

<operator>||</operator> <operator>(</operator><name>ext_bool_Su</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>

<operator>&amp;&amp;</operator> <call><name>unibi_get_ext_bool</name><argument_list>(<argument><expr><name>ut</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ext_bool_Su</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_underline_style</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.set_underline_style"</literal></expr></argument>, <argument><expr><literal type="string">"\x1b[4:%p1%dm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_underline_style</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>unibi_ext</name><operator>.</operator><name>set_underline_color</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>unibi_add_ext_str</name><argument_list>(

<argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="string">"ext.set_underline_color"</literal></expr></argument>, <argument><expr><literal type="string">"\x1b[58:2::%p1%d:%p2%d:%p3%dm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flush_buf</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uv_write_t</name></type> <name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_buf_t</name></type> <name><name>bufs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>bufp</name> <init>= <expr><operator>&amp;</operator><name><name>bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TUIData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>busy</name></name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>is_invisible</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>is_invisible</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bufp</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>invis</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufp</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>UV_BUF_LEN</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>invislen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bufp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>is_invisible</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bufp</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufp</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>UV_BUF_LEN</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bufpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bufp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>busy</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>is_invisible</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>want_invisible</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bufp</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>norm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bufp</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>UV_BUF_LEN</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>normlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bufp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>is_invisible</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>uv_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><call><name>STRUCT_CAST</name><argument_list>(<argument><expr><name>uv_stream_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>output_handle</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>bufs</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>bufp</name> <operator>-</operator> <name>bufs</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>write_loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>overflow</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TERMKEY_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>TERMKEY_VERSION_MINOR</name> <operator>&gt;</operator> <literal type="number">18</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tui_get_stty_erase</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>stty_erase</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TERMIOS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tcgetattr</name><argument_list>(<argument><expr><call><name>input_global_fd</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stty_erase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name><name>t</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VERASE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stty_erase</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"stty/termios:erase=%s"</literal></expr></argument>, <argument><expr><name>stty_erase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>stty_erase</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tui_tk_ti_getstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stty_erase</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stty_erase</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stty_erase</name> <operator>=</operator> <call><name>tui_get_stty_erase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"key_backspace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"libtermkey:kbs=%s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stty_erase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>stty_erase</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"key_dc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"libtermkey:kdch1=%s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strequal</name><argument_list>(<argument><expr><name>stty_erase</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>stty_erase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>DEL</name></expr> ?</condition><then> <expr><name>CTRL_H_STR</name></expr> </then><else>: <expr><name>DEL_STR</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"key_mouse"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"libtermkey:kmous=%s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
