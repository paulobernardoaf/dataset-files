<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\tui\input.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termkey.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/stream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/time.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>term_input</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>in_fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>paste</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>waiting</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ttimeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>waiting_for_bg_response</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ttimeoutlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TermKey</name> <modifier>*</modifier></type><name>tk</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TERMKEY_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>TERMKEY_VERSION_MINOR</name> <operator>&gt;</operator> <literal type="number">18</literal></expr></cpp:if>

<decl_stmt><decl><type><name>TermKey_Terminfo_Getstr_Hook</name> <modifier>*</modifier></type><name>tk_ti_hook_fn</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>TimeWatcher</name></type> <name>timer_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Stream</name></type> <name>read_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>key_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_mutex_t</name></type> <name>key_buffer_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uv_cond_t</name></type> <name>key_buffer_cond</name></decl>;</decl_stmt>

}</block></struct></type> <name>TermInput</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tui/input.h.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIT_TESTING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>bool</name></type> <name>ut_handle_background_color</name><parameter_list>(<parameter><decl><type><name>TermInput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
