<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\terminal.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vterm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/terminal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/change.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/keymap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/edit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mouse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/state.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/handle.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>terminal_state</name> <block>{

<decl_stmt><decl><type><name>VimState</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_rd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>close</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>got_bsl</name></decl>;</decl_stmt> 

}</block></struct></type> <name>TerminalState</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"terminal.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFRESH_DELAY</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>TimeWatcher</name></type> <name>refresh_timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>refresh_pending</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>cols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermScreenCell</name></type> <name><name>cells</name><index>[]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>ScrollbackLine</name>;</typedef>

<struct>struct <name>terminal</name> <block>{

<decl_stmt><decl><type><name>TerminalOptions</name></type> <name>opts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>vts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>textbuf</name><index>[<expr><literal type="number">0x1fff</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScrollbackLine</name> <modifier>*</modifier><modifier>*</modifier></type><name>sb_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>sb_current</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>sb_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sb_pending</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>handle_T</name></type> <name>buf_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>closed</name></decl>, <decl><type ref="prev"/><name>destroy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>forward_mouse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>invalid_start</name></decl>, <decl><type ref="prev"/><name>invalid_end</name></decl>;</decl_stmt> 

<struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>visible</name></decl>;</decl_stmt>

}</block> <decl><name>cursor</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>pressed_button</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>pending_resize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name><name>color_set</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>refcount</name></decl>;</decl_stmt> 

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>VTermScreenCallbacks</name></type> <name>vterm_screen_callbacks</name> <init>= <expr><block>{

<expr><operator>.</operator><name>damage</name> <operator>=</operator> <name>term_damage</name></expr>,

<expr><operator>.</operator><name>moverect</name> <operator>=</operator> <name>term_moverect</name></expr>,

<expr><operator>.</operator><name>movecursor</name> <operator>=</operator> <name>term_movecursor</name></expr>,

<expr><operator>.</operator><name>settermprop</name> <operator>=</operator> <name>term_settermprop</name></expr>,

<expr><operator>.</operator><name>bell</name> <operator>=</operator> <name>term_bell</name></expr>,

<expr><operator>.</operator><name>sb_pushline</name> <operator>=</operator> <name>term_sb_push</name></expr>,

<expr><operator>.</operator><name>sb_popline</name> <operator>=</operator> <name>term_sb_pop</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <call><name>PMap</name><argument_list>(<argument><expr><name>ptr_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>invalidated_terminals</name></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>terminal_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>invalidated_terminals</name> <operator>=</operator> <call><call><name>pmap_new</name><argument_list>(<argument><expr><name>ptr_t</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_watcher_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>refresh_timer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>refresh_timer</name><operator>.</operator><name>events</name></name> <operator>=</operator> <call><name>multiqueue_new_child</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>terminal_teardown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>time_watcher_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refresh_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multiqueue_free</name><argument_list>(<argument><expr><name><name>refresh_timer</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_watcher_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refresh_timer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>pmap_free</name></type>(<name>ptr_t</name>)<parameter_list>(<parameter><decl><type><name>invalidated_terminals</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></function>

<function><type><name>Terminal</name> <modifier>*</modifier></type><name>terminal_open</name><parameter_list>(<parameter><decl><type><name>TerminalOptions</name></type> <name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Terminal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>opts</name></name> <operator>=</operator> <name>opts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>visible</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>buf_handle</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>terminal</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <call><name>vterm_new</name><argument_list>(<argument><expr><name><name>opts</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_set_utf8</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>vterm_obtain_state</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>vts</name></name> <operator>=</operator> <call><name>vterm_obtain_screen</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_screen_enable_altscreen</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vts</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_screen_set_callbacks</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vterm_screen_callbacks</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_screen_set_damage_merge</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vts</name></name></expr></argument>, <argument><expr><name>VTERM_DAMAGE_SCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_screen_reset</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vts</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>invalid_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>invalid_end</name></name> <operator>=</operator> <name><name>opts</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refresh_screen</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"buftype"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"terminal"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ul</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_scbk</name></name> <operator>=</operator> 

<ternary><condition><expr><operator>(</operator><name>p_scbk</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">10000</literal></expr> </then><else>: <expr><call><name>MAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p_scbk</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"wrap"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_set_term_title</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RESET_BINDING</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>(</operator><name>pos_T</name><operator>)</operator><block>{ <expr><operator>.</operator><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>coladd</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TERMOPEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_scbk</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_scbk</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>SB_MAX</name></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_scbk</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>sb_size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_scbk</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>sb_buffer</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ScrollbackLine</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>rv</name><operator>-&gt;</operator><name>sb_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RgbValue</name></type> <name>color_val</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>var</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"terminal_color_%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>get_config_string</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>color_val</name> <operator>=</operator> <call><name>name_to_color</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color_val</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VTermColor</name></type> <name>color</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_color_rgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>color</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>color_val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>color_val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>color_val</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_state_set_palette_color</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>color_set</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>terminal_close</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>forward_mouse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exiting</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refresh_terminal</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>handle_get_buffer</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>buf_handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name> <operator>||</operator> <name>exiting</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>buf_handle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>terminal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>refcount</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>term</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>close_cb</name></name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>terminal_receive</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TERMCLOSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>terminal_check_size</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curwidth</name></decl>, <decl><type ref="prev"/><name>curheight</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_get_size</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>terminal</name></name> <operator>==</operator> <name>term</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>win_width</name> <init>=

<expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>win_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>MAX</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curheight</name> <operator>==</operator> <name>height</name> <operator>&amp;&amp;</operator> <name>curwidth</name> <operator>==</operator> <name>width</name><operator>)</operator> <operator>||</operator> <name>height</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>width</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vterm_set_size</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_screen_flush_damage</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>pending_resize</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_terminal</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>terminal_enter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>terminal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>TerminalState</name></type> <name>state</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name>state</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TerminalState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>term</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>terminal</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>stop_insert_mode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>terminal_check_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_state</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>save_rd</name></name> <operator>=</operator> <name>RedrawingDisabled</name></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>TERM_FOCUS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mapped_ctrl_c</name> <operator>|=</operator> <name>TERM_FOCUS</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_w_p_cul</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cul</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_w_p_cuc</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cuc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cuc</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adjust_topline</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>invalidate_terminal</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ui_busy_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TERMENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>execute</name></name> <operator>=</operator> <name>terminal_execute</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>check</name></name> <operator>=</operator> <name>terminal_check</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state_enter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_state</name></expr>;</expr_stmt>

<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>save_rd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TERMLEAVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>save_curwin</name> <operator>==</operator> <name>curwin</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>=</operator> <name>save_w_p_cul</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cuc</name></name> <operator>=</operator> <name>save_w_p_cuc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>invalidate_terminal</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>terminal</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>term</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>close</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>terminal_check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unshowmode</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_busy_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>close</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>wipe</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>term</name><operator>-&gt;</operator><name>buf_handle</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>term</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>close_cb</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>term</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wipe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><literal type="string">"bwipeout!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>terminal_check_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>terminal</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>,

<argument><expr><call><name>row_to_linenr</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><ternary><condition><expr><call><name>is_focused</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mb_check_adjust_col</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>terminal_check</name><parameter_list>(<parameter><decl><type><name>VimState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stop_insert_mode</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>terminal_check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>must_redraw</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_maketitle</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>terminal_execute</name><parameter_list>(<parameter><decl><type><name>VimState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TerminalState</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>TerminalState</name> <operator>*</operator><operator>)</operator><name>state</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>K_LEFTMOUSE</name></expr>:</case>

<case>case <expr><name>K_LEFTDRAG</name></expr>:</case>

<case>case <expr><name>K_LEFTRELEASE</name></expr>:</case>

<case>case <expr><name>K_MIDDLEMOUSE</name></expr>:</case>

<case>case <expr><name>K_MIDDLEDRAG</name></expr>:</case>

<case>case <expr><name>K_MIDDLERELEASE</name></expr>:</case>

<case>case <expr><name>K_RIGHTMOUSE</name></expr>:</case>

<case>case <expr><name>K_RIGHTDRAG</name></expr>:</case>

<case>case <expr><name>K_RIGHTRELEASE</name></expr>:</case>

<case>case <expr><name>K_MOUSEDOWN</name></expr>:</case>

<case>case <expr><name>K_MOUSEUP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>send_mouse_event</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>K_EVENT</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>term</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multiqueue_process_events</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>term</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>term</name><operator>-&gt;</operator><name>buf_handle</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>K_COMMAND</name></expr>:</case>

<expr_stmt><expr><call><name>do_cmdline</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>getcmdkeycmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Ctrl_N</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>got_bsl</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>Ctrl_BSL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>got_bsl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>got_bsl</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>term</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>got_bsl</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>terminal_send_key</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name><name>curbuf</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>term</name><operator>-&gt;</operator><name>buf_handle</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>terminal_destroy</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>handle_get_buffer</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>buf_handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>buf_handle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>terminal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>refcount</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><call><name>pmap_has</name><argument_list>(<argument><expr><name>ptr_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>invalidated_terminals</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refresh_terminal</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>pmap_del</name></type>(<name>ptr_t</name>)<parameter_list>(<parameter><decl><type><name>invalidated_terminals</name></type></decl></parameter>, <parameter><decl><type><name>term</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>terminal_send</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>term</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>write_cb</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>terminal_paste</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>y_array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>y_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>y_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>terminal_send</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>terminal</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>terminal_send</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>terminal</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>y_array</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>y_array</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>terminal_flush_output</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>vterm_output_read</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>textbuf</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>textbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>terminal_send</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>textbuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>terminal_send_key</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermModifier</name></type> <name>mod</name> <init>= <expr><name>VTERM_MOD_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_ZERO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_AT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>VTermKey</name></type> <name>key</name> <init>= <expr><call><name>convert_key</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_keyboard_key</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vterm_keyboard_unichar</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>c</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>terminal_flush_output</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>terminal_receive</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vterm_input_write</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_screen_flush_damage</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_rgb</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vterm_state_convert_color_to_rgb</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>RGB_</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>rgb</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>rgb</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>rgb</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>terminal_get_line_attributes</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linenr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>term_attrs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>, <decl><type ref="prev"/><name>width</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_get_size</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>vterm_obtain_state</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>linenr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><call><name>linenr_to_row</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>linenr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VTermScreenCell</name></type> <name>cell</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>color_valid</name> <init>= <expr><call><name>fetch_cell</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fg_default</name> <init>= <expr><operator>!</operator><name>color_valid</name> <operator>||</operator> <call><name>VTERM_COLOR_IS_DEFAULT_FG</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cell</name><operator>.</operator><name>fg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bg_default</name> <init>= <expr><operator>!</operator><name>color_valid</name> <operator>||</operator> <call><name>VTERM_COLOR_IS_DEFAULT_BG</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cell</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vt_fg</name> <init>= <expr><ternary><condition><expr><name>fg_default</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name>get_rgb</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>fg</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vt_bg</name> <init>= <expr><ternary><condition><expr><name>bg_default</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name>get_rgb</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fg_indexed</name> <init>= <expr><call><name>VTERM_COLOR_IS_INDEXED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cell</name><operator>.</operator><name>fg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bg_indexed</name> <init>= <expr><call><name>VTERM_COLOR_IS_INDEXED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cell</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vt_fg_idx</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>!</operator><name>fg_default</name> <operator>&amp;&amp;</operator> <name>fg_indexed</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>cell</name><operator>.</operator><name>fg</name><operator>.</operator><name>indexed</name><operator>.</operator><name>idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vt_bg_idx</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>!</operator><name>bg_default</name> <operator>&amp;&amp;</operator> <name>bg_indexed</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>cell</name><operator>.</operator><name>bg</name><operator>.</operator><name>indexed</name><operator>.</operator><name>idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fg_set</name> <init>= <expr><name>vt_fg_idx</name> <operator>&amp;&amp;</operator> <name>vt_fg_idx</name> <operator>&lt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>color_set</name><index>[<expr><name>vt_fg_idx</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bg_set</name> <init>= <expr><name>vt_bg_idx</name> <operator>&amp;&amp;</operator> <name>vt_bg_idx</name> <operator>&lt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>color_set</name><index>[<expr><name>vt_bg_idx</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hl_attrs</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>bold</name></name></expr> ?</condition><then> <expr><name>HL_BOLD</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>italic</name></name></expr> ?</condition><then> <expr><name>HL_ITALIC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>reverse</name></name></expr> ?</condition><then> <expr><name>HL_INVERSE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>underline</name></name></expr> ?</condition><then> <expr><name>HL_UNDERLINE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>strike</name></name></expr> ?</condition><then> <expr><name>HL_STRIKETHROUGH</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>fg_indexed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fg_set</name><operator>)</operator></expr> ?</condition><then> <expr><name>HL_FG_INDEXED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>bg_indexed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>bg_set</name><operator>)</operator></expr> ?</condition><then> <expr><name>HL_BG_INDEXED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hl_attrs</name> <operator>||</operator><operator>!</operator><name>fg_default</name> <operator>||</operator> <operator>!</operator><name>bg_default</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>attr_id</name> <operator>=</operator> <macro><name>hl_get_term_attr</name><argument_list>(<argument>&amp;(HlAttrs) {

.cterm_ae_attr = (int16_t)hl_attrs</argument>,

<argument>.cterm_fg_color = vt_fg_idx</argument>,

<argument>.cterm_bg_color = vt_bg_idx</argument>,

<argument>.rgb_ae_attr = (int16_t)hl_attrs</argument>,

<argument>.rgb_fg_color = vt_fg</argument>,

<argument>.rgb_bg_color = vt_bg</argument>,

<argument>.rgb_sp_color = -<literal type="number">1</literal></argument>,

<argument>.hl_blend = -<literal type="number">1</literal></argument>,

<argument>}</argument>)</argument_list></macro></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>visible</name></name> <operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name>row</name>

<operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name>col</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>attr_id</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>attr_id</name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>is_focused</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name></expr>

?</condition><then> <expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_TERM</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_TERMNC</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>term_attrs</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <name>attr_id</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>Buffer</name></type> <name>terminal_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>term</name><operator>-&gt;</operator><name>buf_handle</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>term_damage</name><parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>rect</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>invalidate_terminal</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>term_moverect</name><parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>invalidate_terminal</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>dest</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>.</operator><name>start_row</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>dest</name><operator>.</operator><name>end_row</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>.</operator><name>end_row</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>term_movecursor</name><parameter_list>(<parameter><decl><type><name>VTermPos</name></type> <name>new</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>visible</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name><name>new</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>new</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_terminal</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>old</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>old</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_terminal</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>new</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buf_set_term_title</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>

FUNC_ATTR_NONNULL_ALL

<block>{<block_content>

<decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dict_set_var</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_vars</name></name></expr></argument>,

<argument><expr><call><name>STATIC_CSTR_AS_STRING</name><argument_list>(<argument><expr><literal type="string">"term_title"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>false</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_redraw_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>term_settermprop</name><parameter_list>(<parameter><decl><type><name>VTermProp</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>VTermValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>prop</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VTERM_PROP_ALTSCREEN</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>VTERM_PROP_CURSORVISIBLE</name></expr>:</case>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>visible</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>boolean</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_terminal</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VTERM_PROP_TITLE</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>handle_get_buffer</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>buf_handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>buf_set_term_title</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VTERM_PROP_MOUSE</name></expr>:</case>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>forward_mouse</name></name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><name><name>val</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>term_bell</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ui_call_bell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>term_sb_push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermScreenCell</name> <modifier>*</modifier></type><name>cells</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>sb_size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cols</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScrollbackLine</name> <modifier>*</modifier></type><name>sbrow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name> <operator>==</operator> <name><name>term</name><operator>-&gt;</operator><name>sb_size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name><index>[<expr><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>cols</name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sbrow</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name><index>[<expr><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name><index>[<expr><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sbrow</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sbrow</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ScrollbackLine</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>c</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sbrow</name><operator>-&gt;</operator><name>cells</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbrow</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sbrow</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>sb_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>sb_pending</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>sb_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>sb_pending</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sbrow</name><operator>-&gt;</operator><name>cells</name></name></expr></argument>, <argument><expr><name>cells</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cells</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>pmap_put</name></type>(<name>ptr_t</name>)<parameter_list>(<parameter><decl><type><name>invalidated_terminals</name></type></decl></parameter>, <parameter><decl><type><name>term</name></type></decl></parameter>, <parameter><decl><type><name>NULL</name></type></decl></parameter>)</parameter_list>;</function_decl>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>term_sb_pop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>VTermScreenCell</name> <modifier>*</modifier></type><name>cells</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>sb_pending</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>sb_pending</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ScrollbackLine</name> <modifier>*</modifier></type><name>sbrow</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>cols_to_copy</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cols</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cols_to_copy</name> <operator>&gt;</operator> <name><name>sbrow</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cols_to_copy</name> <operator>=</operator> <name><name>sbrow</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cells</name></expr></argument>, <argument><expr><name><name>sbrow</name><operator>-&gt;</operator><name>cells</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cells</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>cols_to_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>col</name> <init>= <expr><name>cols_to_copy</name></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>cols</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>cells</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cells</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>sbrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>pmap_put</name></type>(<name>ptr_t</name>)<parameter_list>(<parameter><decl><type><name>invalidated_terminals</name></type></decl></parameter>, <parameter><decl><type><name>term</name></type></decl></parameter>, <parameter><decl><type><name>NULL</name></type></decl></parameter>)</parameter_list>;</function_decl>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>convert_modifiers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VTermModifier</name> <modifier>*</modifier></type><name>statep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>statep</name> <operator>|=</operator> <name>VTERM_MOD_SHIFT</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>statep</name> <operator>|=</operator> <name>VTERM_MOD_CTRL</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_ALT</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>statep</name> <operator>|=</operator> <name>VTERM_MOD_ALT</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>K_S_TAB</name></expr>:</case>

<case>case <expr><name>K_S_UP</name></expr>:</case>

<case>case <expr><name>K_S_DOWN</name></expr>:</case>

<case>case <expr><name>K_S_LEFT</name></expr>:</case>

<case>case <expr><name>K_S_RIGHT</name></expr>:</case>

<case>case <expr><name>K_S_F1</name></expr>:</case>

<case>case <expr><name>K_S_F2</name></expr>:</case>

<case>case <expr><name>K_S_F3</name></expr>:</case>

<case>case <expr><name>K_S_F4</name></expr>:</case>

<case>case <expr><name>K_S_F5</name></expr>:</case>

<case>case <expr><name>K_S_F6</name></expr>:</case>

<case>case <expr><name>K_S_F7</name></expr>:</case>

<case>case <expr><name>K_S_F8</name></expr>:</case>

<case>case <expr><name>K_S_F9</name></expr>:</case>

<case>case <expr><name>K_S_F10</name></expr>:</case>

<case>case <expr><name>K_S_F11</name></expr>:</case>

<case>case <expr><name>K_S_F12</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>statep</name> <operator>|=</operator> <name>VTERM_MOD_SHIFT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>K_C_LEFT</name></expr>:</case>

<case>case <expr><name>K_C_RIGHT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>statep</name> <operator>|=</operator> <name>VTERM_MOD_CTRL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VTermKey</name></type> <name>convert_key</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VTermModifier</name> <modifier>*</modifier></type><name>statep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>convert_modifiers</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>statep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>K_BS</name></expr>:</case> <return>return <expr><name>VTERM_KEY_BACKSPACE</name></expr>;</return>

<case>case <expr><name>K_S_TAB</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>TAB</name></expr>:</case> <return>return <expr><name>VTERM_KEY_TAB</name></expr>;</return>

<case>case <expr><name>Ctrl_M</name></expr>:</case> <return>return <expr><name>VTERM_KEY_ENTER</name></expr>;</return>

<case>case <expr><name>ESC</name></expr>:</case> <return>return <expr><name>VTERM_KEY_ESCAPE</name></expr>;</return>

<case>case <expr><name>K_S_UP</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_UP</name></expr>:</case> <return>return <expr><name>VTERM_KEY_UP</name></expr>;</return>

<case>case <expr><name>K_S_DOWN</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_DOWN</name></expr>:</case> <return>return <expr><name>VTERM_KEY_DOWN</name></expr>;</return>

<case>case <expr><name>K_S_LEFT</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_C_LEFT</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_LEFT</name></expr>:</case> <return>return <expr><name>VTERM_KEY_LEFT</name></expr>;</return>

<case>case <expr><name>K_S_RIGHT</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_C_RIGHT</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_RIGHT</name></expr>:</case> <return>return <expr><name>VTERM_KEY_RIGHT</name></expr>;</return>

<case>case <expr><name>K_INS</name></expr>:</case> <return>return <expr><name>VTERM_KEY_INS</name></expr>;</return>

<case>case <expr><name>K_DEL</name></expr>:</case> <return>return <expr><name>VTERM_KEY_DEL</name></expr>;</return>

<case>case <expr><name>K_HOME</name></expr>:</case> <return>return <expr><name>VTERM_KEY_HOME</name></expr>;</return>

<case>case <expr><name>K_END</name></expr>:</case> <return>return <expr><name>VTERM_KEY_END</name></expr>;</return>

<case>case <expr><name>K_PAGEUP</name></expr>:</case> <return>return <expr><name>VTERM_KEY_PAGEUP</name></expr>;</return>

<case>case <expr><name>K_PAGEDOWN</name></expr>:</case> <return>return <expr><name>VTERM_KEY_PAGEDOWN</name></expr>;</return>

<case>case <expr><name>K_K0</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_KINS</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_0</name></expr>;</return>

<case>case <expr><name>K_K1</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_KEND</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_1</name></expr>;</return>

<case>case <expr><name>K_K2</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_KDOWN</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_2</name></expr>;</return>

<case>case <expr><name>K_K3</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_KPAGEDOWN</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_3</name></expr>;</return>

<case>case <expr><name>K_K4</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_KLEFT</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_4</name></expr>;</return>

<case>case <expr><name>K_K5</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_KORIGIN</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_5</name></expr>;</return>

<case>case <expr><name>K_K6</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_KRIGHT</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_6</name></expr>;</return>

<case>case <expr><name>K_K7</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_KHOME</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_7</name></expr>;</return>

<case>case <expr><name>K_K8</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_KUP</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_8</name></expr>;</return>

<case>case <expr><name>K_K9</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_KPAGEUP</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_9</name></expr>;</return>

<case>case <expr><name>K_KDEL</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_KPOINT</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_PERIOD</name></expr>;</return>

<case>case <expr><name>K_KENTER</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_ENTER</name></expr>;</return>

<case>case <expr><name>K_KPLUS</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_PLUS</name></expr>;</return>

<case>case <expr><name>K_KMINUS</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_MINUS</name></expr>;</return>

<case>case <expr><name>K_KMULTIPLY</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_MULT</name></expr>;</return>

<case>case <expr><name>K_KDIVIDE</name></expr>:</case> <return>return <expr><name>VTERM_KEY_KP_DIVIDE</name></expr>;</return>

<case>case <expr><name>K_S_F1</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_F1</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_S_F2</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_F2</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_S_F3</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_F3</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_S_F4</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_F4</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_S_F5</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_F5</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_S_F6</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_F6</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_S_F7</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_F7</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_S_F8</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_F8</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_S_F9</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_F9</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_S_F10</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_F10</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_S_F11</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_F11</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_S_F12</name></expr>:</case> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_F12</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F13</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F14</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F15</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F16</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F17</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F18</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F19</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F20</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F21</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F22</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F23</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F24</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F25</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F26</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F27</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F28</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F29</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F30</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F31</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F32</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F33</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F34</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F35</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F36</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>K_F37</name></expr>:</case> <return>return <expr><call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default> <return>return <expr><name>VTERM_KEY_NONE</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mouse_action</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>drag</name></decl></parameter>, <parameter><decl><type><name>VTermModifier</name></type> <name>mod</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>pressed_button</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>term</name><operator>-&gt;</operator><name>pressed_button</name></name> <operator>!=</operator> <name>button</name> <operator>||</operator> <operator>!</operator><name>drag</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_mouse_button</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>pressed_button</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>pressed_button</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vterm_mouse_move</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>pressed_button</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_mouse_button</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>pressed_button</name></name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>send_mouse_event</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>mouse_row</name></expr></init></decl>, <decl><type ref="prev"/><name>col</name> <init>= <expr><name>mouse_col</name></expr></init></decl>, <decl><type ref="prev"/><name>grid</name> <init>= <expr><name>mouse_grid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>mouse_win</name> <init>= <expr><call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>grid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mouse_win</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>forward_mouse</name></name> <operator>&amp;&amp;</operator> <name><name>mouse_win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>terminal</name></name> <operator>==</operator> <name>term</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>drag</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>K_LEFTDRAG</name></expr>:</case> <expr_stmt><expr><name>drag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_LEFTMOUSE</name></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_MIDDLEDRAG</name></expr>:</case> <expr_stmt><expr><name>drag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_MIDDLEMOUSE</name></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_RIGHTDRAG</name></expr>:</case> <expr_stmt><expr><name>drag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>K_RIGHTMOUSE</name></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_MOUSEDOWN</name></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_MOUSEUP</name></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>mouse_action</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>drag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>vterm_output_read</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>textbuf</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>textbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>terminal_send</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>textbuf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_MOUSEDOWN</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MOUSEUP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>mouse_win</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>direction</name> <init>= <expr><ternary><condition><expr><name>c</name> <operator>==</operator> <name>K_MOUSEDOWN</name></expr> ?</condition><then> <expr><name>MSCR_DOWN</name></expr> </then><else>: <expr><name>MSCR_UP</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name> <operator>|</operator> <name>MOD_MASK_CTRL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>scroll_redraw</name><argument_list>(<argument><expr><name>direction</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>scroll_redraw</name><argument_list>(<argument><expr><name>direction</name></expr></argument>, <argument><expr><literal type="number">3L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>save_curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>mouse_win</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_terminal</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mouse_win</name> <operator>==</operator> <name>curwin</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>ins_char_typebuf</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fetch_row</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>line_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>textbuf</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>end_col</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VTermScreenCell</name></type> <name>cell</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fetch_cell</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cell_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cell_len</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>+</operator> <name>cell_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cell_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>cell_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name><name>term</name><operator>-&gt;</operator><name>textbuf</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name><name>cell</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>textbuf</name><index>[<expr><name>line_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fetch_cell</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>VTermScreenCell</name> <modifier>*</modifier></type><name>cell</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ScrollbackLine</name> <modifier>*</modifier></type><name>sbrow</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name><index>[<expr><operator>-</operator><name>row</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>col</name> <operator>&lt;</operator> <name><name>sbrow</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cell</name> <operator>=</operator> <name><name>sbrow</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cell</name> <operator>=</operator> <operator>(</operator><name>VTermScreenCell</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>chars</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<macro><name>vterm_screen_get_cell</name><argument_list>(<argument>term-&gt;vts</argument>, <argument>(VTermPos){.row = row</argument>, <argument>.col = col}</argument>,

<argument>cell</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>invalidate_terminal</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_row</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start_row</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>end_row</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>invalid_start</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>invalid_start</name></name></expr></argument>, <argument><expr><name>start_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>invalid_end</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>invalid_end</name></name></expr></argument>, <argument><expr><name>end_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<function_decl><type><name>pmap_put</name></type>(<name>ptr_t</name>)<parameter_list>(<parameter><decl><type><name>invalidated_terminals</name></type></decl></parameter>, <parameter><decl><type><name>term</name></type></decl></parameter>, <parameter><decl><type><name>NULL</name></type></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>refresh_pending</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>time_watcher_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refresh_timer</name></expr></argument>, <argument><expr><name>refresh_timer_cb</name></expr></argument>, <argument><expr><name>REFRESH_DELAY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>refresh_pending</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refresh_terminal</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>handle_get_buffer</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>buf_handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>valid</name> <operator>=</operator> <call><name>buf_valid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>buf_handle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ml_before</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aco_save_T</name></type> <name>aco</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aucmd_prepbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refresh_size</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refresh_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refresh_screen</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aucmd_restbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ml_added</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>ml_before</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>adjust_topline</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ml_added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refresh_timer_cb</name><parameter_list>(<parameter><decl><type><name>TimeWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>refresh_pending</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exiting</name></expr>)</condition> <block>{<block_content> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>stub</name></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name>stub</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>map_foreach</name><argument_list>(<argument>invalidated_terminals</argument>, <argument>term</argument>, <argument>stub</argument>, <argument>{

refresh_terminal(term);

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>pmap_clear</name></type>(<name>ptr_t</name>)<parameter_list>(<parameter><decl><type><name>invalidated_terminals</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refresh_size</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>pending_resize</name></name> <operator>||</operator> <name><name>term</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>pending_resize</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_get_size</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>invalid_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>invalid_end</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>term</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>resize_cb</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>height</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_scrollback_option_changed</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_scbk</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_scbk</name></name> <operator>=</operator> <name>SB_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>scbk</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_scbk</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name> <operator>&lt;</operator> <name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>sb_pending</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scbk</name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>diff</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name> <operator>-</operator> <name>scbk</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>diff</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name><index>[<expr><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>deleted_lines</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sb_region</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ScrollbackLine</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>scbk</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>scbk</name> <operator>!=</operator> <name><name>term</name><operator>-&gt;</operator><name>sb_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>sb_buffer</name></name></expr></argument>, <argument><expr><name>sb_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>sb_size</name></name> <operator>=</operator> <name>scbk</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refresh_scrollback</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_get_size</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>sb_pending</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>height</name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>sb_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>deleted_lines</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fetch_row</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>-</operator><name><name>term</name><operator>-&gt;</operator><name>sb_pending</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_index</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>height</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>buf_index</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>textbuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>appended_lines</name><argument_list>(<argument><expr><name>buf_index</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>sb_pending</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>int</name></type> <name>max_line_count</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name> <operator>+</operator> <name>height</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>&gt;</operator> <name>max_line_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>deleted_lines</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>on_scrollback_option_changed</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refresh_screen</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_get_size</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>invalid_end</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>invalid_end</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>invalid_start</name></name></expr></init></decl>, <decl><type ref="prev"/><name>linenr</name> <init>= <expr><call><name>row_to_linenr</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</init>

<condition><expr><name>r</name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>invalid_end</name></name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr><operator>,</operator> <expr><name>linenr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fetch_row</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>linenr</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>linenr</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>textbuf</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>changed</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>linenr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>textbuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>added</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>change_start</name> <init>= <expr><call><name>row_to_linenr</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>invalid_start</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>change_end</name> <init>= <expr><name>change_start</name> <operator>+</operator> <name>changed</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name>change_start</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>change_end</name></expr></argument>, <argument><expr><name>added</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>invalid_start</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>invalid_end</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>adjust_topline</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>added</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>ml_end</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>following</name> <init>= <expr><name>ml_end</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name>added</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>following</name> <operator>||</operator> <operator>(</operator><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <call><name>is_focused</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>ml_end</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_topline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>ml_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mb_check_adjust_col</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>row_to_linenr</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>row</name> <operator>!=</operator> <name>INT_MAX</name></expr> ?</condition><then> <expr><name>row</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>INT_MAX</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>linenr_to_row</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linenr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>linenr</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>sb_current</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_focused</name><parameter_list>(<parameter><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>State</name> <operator>&amp;</operator> <name>TERM_FOCUS</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>terminal</name></name> <operator>==</operator> <name>term</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_config_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Object</name></type> <name>obj</name> <init>= <expr><call><name>dict_get_value</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_vars</name></name></expr></argument>, <argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeNil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>dict_get_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>globvardict</name></expr></argument>, <argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeString</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>obj</name><operator>.</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>data</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>api_free_object</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
