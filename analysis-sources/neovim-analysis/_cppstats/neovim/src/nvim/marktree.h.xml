<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\marktree.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MT_MAX_DEPTH</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MT_BRANCH_FACTOR</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int32_t</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>col</name></decl>;</decl_stmt>

}</block></struct></type> <name>mtpos_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int32_t</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>right_gravity</name></decl>;</decl_stmt>

}</block></struct></type> <name>mtmark_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>mtnode_s</name></name></type> <name>mtnode_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>oldcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

}</block></struct></type> <name>iterstate_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>mtpos_t</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lvl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>iterstate_t</name></type> <name><name>s</name><index>[<expr><name>MT_MAX_DEPTH</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>MarkTreeIter</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>mtpos_t</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>

}</block></struct></type> <name>mtkey_t</name>;</typedef>

<struct>struct <name>mtnode_s</name> <block>{

<decl_stmt><decl><type><name>int32_t</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mtkey_t</name></type> <name><name>key</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>MT_BRANCH_FACTOR</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name><name>ptr</name><index>[]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>mtnode_t</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n_keys</name></decl>, <name>n_nodes</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>next_id</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PMap</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>id2node</name></expr>;</expr_stmt>

}</block></struct></type> <name>MarkTree</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"marktree.h.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARKTREE_PAIRED_FLAG</name></cpp:macro> <cpp:value>(((uint64_t)1) &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARKTREE_END_FLAG</name></cpp:macro> <cpp:value>(((uint64_t)1) &lt;&lt; 0)</cpp:value></cpp:define>

</unit>
