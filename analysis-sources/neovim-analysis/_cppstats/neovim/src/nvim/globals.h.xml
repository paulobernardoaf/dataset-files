<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\globals.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/iconv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/menu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os_defs.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOSIZE</name></cpp:macro> <cpp:value>(1024+1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_BUF_LEN</name></cpp:macro> <cpp:value>480</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_BUF_CLEN</name></cpp:macro> <cpp:value>(MSG_BUF_LEN / 6)</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PATHSEPSTR</name></cpp:macro> <cpp:value>"\\"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PATHSEPSTR</name></cpp:macro> <cpp:value>"/"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FILETYPE_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILETYPE_FILE</name></cpp:macro> <cpp:value>"filetype.vim"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FTPLUGIN_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTPLUGIN_FILE</name></cpp:macro> <cpp:value>"ftplugin.vim"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INDENT_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT_FILE</name></cpp:macro> <cpp:value>"indent.vim"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FTOFF_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTOFF_FILE</name></cpp:macro> <cpp:value>"ftoff.vim"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FTPLUGOF_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTPLUGOF_FILE</name></cpp:macro> <cpp:value>"ftplugof.vim"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INDOFF_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDOFF_FILE</name></cpp:macro> <cpp:value>"indoff.vim"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_ERRORFILE</name></cpp:macro> <cpp:value>"errors.err"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SYS_VIMRC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYS_VIMRC_FILE</name></cpp:macro> <cpp:value>"$VIM" _PATHSEPSTR "sysinit.vim"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DFLT_HELPFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_HELPFILE</name></cpp:macro> <cpp:value>"$VIMRUNTIME" _PATHSEPSTR "doc" _PATHSEPSTR "help.txt"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SYNTAX_FNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNTAX_FNAME</name></cpp:macro> <cpp:value>"$VIMRUNTIME" _PATHSEPSTR "syntax" _PATHSEPSTR "%s.vim"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXRC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXRC_FILE</name></cpp:macro> <cpp:value>".exrc"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VIMRC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIMRC_FILE</name></cpp:macro> <cpp:value>".nvimrc"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>EXTERN</name></macro> <struct>struct <name>nvim_stats_s</name> <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>fsync</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>redraw</name></decl>;</decl_stmt>

}</block> <decl><name>g_stats</name> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></argument>)</argument_list></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_SCREEN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_BUFFERS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_COLS</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_ROWS</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>Rows</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>DFLT_ROWS</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>Columns</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>DFLT_COLS</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>__int64</name></type> <name>off_T</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_lseek</name></cpp:macro> <cpp:value>lseek64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_fseek</name></cpp:macro> <cpp:value>fseeko64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_ftell</name></cpp:macro> <cpp:value>ftello64</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_lseek</name></cpp:macro> <cpp:value>_lseeki64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_fseek</name></cpp:macro> <cpp:value>_fseeki64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_ftell</name></cpp:macro> <cpp:value>_ftelli64</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>off_t</name></type> <name>off_T</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSEEKO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_lseek</name></cpp:macro> <cpp:value>lseek</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_ftell</name></cpp:macro> <cpp:value>ftello</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_fseek</name></cpp:macro> <cpp:value>fseeko</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_lseek</name></cpp:macro> <cpp:value>lseek</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_ftell</name></cpp:macro> <cpp:value>ftell</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_fseek</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fseek(a, (long)b, c)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>mod_mask</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0x0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>lua_attr_active</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>cmdline_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redraw_cmdline</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>clear_cmdline</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>mode_displayed</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cmdline_star</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redrawing_cmdline</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cmdline_was_last_drawn</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>exec_from_reg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>colnr_T</name> <name>dollar_vcol</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>compl_length</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>compl_interrupted</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>compl_busy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>compl_cont_status</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_ADDING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_INTRPT</name></cpp:macro> <cpp:value>(2 + 4)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_N_ADDS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_S_IPOS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_SOL</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_LOCAL</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cmdmsg_rl</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>msg_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>msg_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>msg_scrolled</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>msg_scrolled_ign</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>msg_did_scroll</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>keep_msg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>keep_msg_attr</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>keep_msg_more</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_fileinfo</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_scroll</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_didout</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_didany</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_nowait</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>emsg_off</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>info_message</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_hist_off</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_clr_eos</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>emsg_skip</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>emsg_severe</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_endif</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>dict_T</name></type> <name>vimvardict</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>dict_T</name></type> <name>globvardict</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>did_emsg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name></type> <name>called_vim_beep</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>did_emsg_syntax</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>called_emsg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ex_exitval</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>emsg_on_display</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>rc_did_emsg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_wait_return</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_wait_return</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_wait_return</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_maketitle</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>quit_more</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ex_keep_indent</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>vgetc_busy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>didset_vim</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>didset_vimruntime</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>lines_left</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_no_more</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>sourcing_name</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>linenr_T</name> <name>sourcing_lnum</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ex_nesting_level</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>debug_break_level</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>debug_did_msg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>debug_tick</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>debug_backtrace_level</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_YES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROF_PAUSED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>do_profiling</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>PROF_NONE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>except_T</name> <modifier>*</modifier></type><name>current_exception</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_rethrow</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>check_cstack</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>trylevel</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>force_abort</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name><name>struct</name> <name>msglist</name></name> <modifier>*</modifier><modifier>*</modifier><name>msg_list</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>suppress_errthrow</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>except_T</name> <modifier>*</modifier><name>caught_stack</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>may_garbage_collect</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>want_garbage_collect</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>garbage_collect_at_exit</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SID_MODELINE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SID_CMDARG</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SID_CARG</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SID_ENV</name></cpp:macro> <cpp:value>-4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SID_ERROR</name></cpp:macro> <cpp:value>-5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SID_NONE</name></cpp:macro> <cpp:value>-6</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SID_LUA</name></cpp:macro> <cpp:value>-7</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SID_API_CLIENT</name></cpp:macro> <cpp:value>-8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SID_STR</name></cpp:macro> <cpp:value>-9</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>EXTERN</name> <name>sctx_T</name> <name>current_sctx</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <block>{ <expr><literal type="number">0</literal> <name>COMMA</name> <literal type="number">0</literal> <name>COMMA</name> <literal type="number">0</literal></expr> }</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>uint64_t</name> <name>current_channel_id</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>did_source_packages</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<macro><name>EXTERN</name></macro> <struct>struct <name>caller_scope</name> <block>{

<decl_stmt><decl><type><name>sctx_T</name></type> <name>script_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sourcing_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>autocmd_fname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>autocmd_match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>sourcing_lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>autocmd_bufnr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>funccalp</name></decl>;</decl_stmt>

}</block> <decl><name>provider_caller_scope</name></decl>;</struct>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>provider_call_nesting</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>t_colors</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">256</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>highlight_match</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>linenr_T</name></type> <name>search_match_lines</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>colnr_T</name></type> <name>search_match_endcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_smartcase</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_check_timestamps</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_check_timestamps</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_check_timestamps</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>autocmd_busy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>autocmd_no_enter</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>autocmd_no_leave</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>modified_was_set</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_filetype</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>keep_filetype</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bufref_T</name> <name>au_new_curbuf</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>buf_T</name> <modifier>*</modifier><name>au_pending_free_buf</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>win_T</name> <modifier>*</modifier><name>au_pending_free_win</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>mouse_grid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>mouse_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>mouse_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>mouse_past_bottom</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>mouse_past_eol</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>mouse_dragging</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>vimmenu_T</name> <modifier>*</modifier><name>root_menu</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>sys_menu</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>updating_screen</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>win_T</name> <modifier>*</modifier></type><name>firstwin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>win_T</name> <modifier>*</modifier></type><name>lastwin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>win_T</name> <modifier>*</modifier><name>prevwin</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_WINDOW</name></cpp:macro> <cpp:value>(firstwin == lastwin)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_FRAMES</name><parameter_list>(<parameter><type><name>frp</name></type></parameter>, <parameter><type><name>first_frame</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (frp = first_frame; frp != NULL; frp = frp-&gt;fr_next)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_TAB_WINDOWS</name><parameter_list>(<parameter><type><name>tp</name></type></parameter>, <parameter><type><name>wp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR_ALL_TABS(tp) FOR_ALL_WINDOWS_IN_TAB(wp, tp)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_WINDOWS_IN_TAB</name><parameter_list>(<parameter><type><name>wp</name></type></parameter>, <parameter><type><name>tp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (win_T *wp = ((tp) == curtab) ? firstwin : (tp)-&gt;tp_firstwin; wp != NULL; wp = wp-&gt;w_next)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>win_T</name> <modifier>*</modifier></type><name>curwin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>win_T</name> <modifier>*</modifier></type><name>aucmd_win</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>aucmd_win_used</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>frame_T</name> <modifier>*</modifier></type><name>topframe</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>tabpage_T</name> <modifier>*</modifier></type><name>first_tabpage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>tabpage_T</name> <modifier>*</modifier></type><name>lastused_tabpage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>tabpage_T</name> <modifier>*</modifier></type><name>curtab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redraw_tabline</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_TABS</name><parameter_list>(<parameter><type><name>tp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (tabpage_T *tp = first_tabpage; tp != NULL; tp = tp-&gt;tp_next)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>buf_T</name> <modifier>*</modifier><name>firstbuf</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>buf_T</name> <modifier>*</modifier><name>lastbuf</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>buf_T</name> <modifier>*</modifier><name>curbuf</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_BUFFERS</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (buf_T *buf = firstbuf; buf != NULL; buf = buf-&gt;b_next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_BUFFERS_BACKWARDS</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (buf_T *buf = lastbuf; buf != NULL; buf = buf-&gt;b_prev)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_SIGNS_IN_BUF</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>sign</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (sign = buf-&gt;b_signlist; sign != NULL; sign = sign-&gt;next)</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>EXTERN</name> <name>alist_T</name></type> <name>global_alist</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>max_alist_id</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>arg_had_last</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>ru_col</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>ru_wid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>sc_col</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>starting</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NO_SCREEN</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>exiting</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>stdin_isatty</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>stdout_isatty</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <specifier>volatile</specifier> <name>int</name> <name>full_screen</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>restricted</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>secure</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>textlock</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>curbuf_lock</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>allbuf_lock</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>sandbox</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>silent_mode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>pos_T</name></type> <name>VIsual</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>VIsual_active</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>VIsual_select</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>VIsual_reselect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>VIsual_mode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="char">'v'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redo_VIsual_busy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>pos_T</name></type> <name>where_paste_started</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>did_ai</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>colnr_T</name> <name>ai_col</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>end_comment_pending</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NUL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_syncbind</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>did_si</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>can_si</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>can_si_back</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>pos_T</name> <name>saved_cursor</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>pos_T</name></type> <name>Insstart</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>pos_T</name></type> <name>Insstart_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>orig_line_count</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>vr_lines_changed</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>inhibit_delete_count</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_JPN</name></cpp:macro> <cpp:value>932</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_JPNU</name></cpp:macro> <cpp:value>9932</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_KOR</name></cpp:macro> <cpp:value>949</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_KORU</name></cpp:macro> <cpp:value>9949</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_CHS</name></cpp:macro> <cpp:value>936</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_CHSU</name></cpp:macro> <cpp:value>9936</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_CHT</name></cpp:macro> <cpp:value>950</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_CHTU</name></cpp:macro> <cpp:value>9950</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_2BYTE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_DEBUG</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>enc_utf8</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>has_mbyte</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>fenc_default</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>State</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NORMAL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>debug_mode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>finish_op</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name> <name>opcount</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>motion_force</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>exmode_active</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ex_no_reprint</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator><name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>reg_recording</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>reg_executing</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_mapping</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_zero_mapping</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_u_sync</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>u_sync_once</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>force_restart_edit</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>restart_edit</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>arrow_used</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ins_at_eol</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>edit_submode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>edit_submode_pre</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>edit_submode_extra</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>hlf_T</name></type> <name>edit_submode_highl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_abbr</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>mapped_ctrl_c</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>cmdmod_T</name></type> <name>cmdmod</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_silent</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>emsg_silent</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>emsg_noredir</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>cmd_silent</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEA_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEA_DIALOG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEA_QUIT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEA_RECOVER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>swap_exists_action</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>SEA_NONE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>swap_exists_did_quit</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name></type> <name><name>IObuff</name><index>[<expr><name>IOSIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name></type> <name><name>NameBuff</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name></type> <name><name>msg_buf</name><index>[<expr><name>MSG_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name></type> <name><name>os_buf</name><index>[ 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAXPATHL</name> <operator>&gt;</operator> <name>IOSIZE</name></expr></cpp:if>

<expr><name>MAXPATHL</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>IOSIZE</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>RedrawingDisabled</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>readonlymode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>recoverymode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>typebuf_T</name> <name>typebuf</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ex_normal_busy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ex_normal_lock</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ignore_script</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>stop_insert_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name></type> <name>KeyTyped</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>KeyStuffed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>maptick</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>must_redraw</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>skip_redraw</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>do_redraw</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>must_redraw_pum</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_highlight_changed</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>FILE</name> <modifier>*</modifier><name>scriptout</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <specifier>volatile</specifier> <name>int</name> <name>got_int</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>bangredo</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>searchcmdlen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>reg_do_extmatch</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>reg_extmatch_T</name> <modifier>*</modifier><name>re_extmatch_in</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>reg_extmatch_T</name> <modifier>*</modifier><name>re_extmatch_out</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_outofmem_msg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_swapwrite_msg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>global_busy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>listcmd_busy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_start_insertmode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>last_cmdline</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>repeat_cmdline</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>new_last_cmdline</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>autocmd_fname</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>autocmd_bufnr</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>autocmd_match</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_cursorhold</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>postponed_split</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>postponed_split_flags</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>postponed_split_tab</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>g_do_tagpreview</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>g_tag_at_cursor</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>replace_offset</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>escape_chars</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" \t\\\"|"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>keep_help_flag</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>empty_option</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redir_off</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>FILE</name> <modifier>*</modifier><name>redir_fd</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redir_reg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redir_vname</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>garray_T</name> <modifier>*</modifier><name>capture_ga</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name></type> <name><name>langmap_mapchar</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>save_p_ls</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>save_p_wmh</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>wild_menu_showing</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>WM_SHOWN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>WM_SCROLLED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>WM_LIST</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 

}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PATHDEF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>default_vim_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>default_vimruntime_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>default_lib_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char_u</name> <modifier>*</modifier></type><name>compiled_user</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char_u</name> <modifier>*</modifier></type><name>compiled_sys</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>globaldir</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>km_stopsel</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>km_startsel</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cedit_key</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cmdwin_type</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cmdwin_result</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cmdwin_level</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>no_lines_msg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"--No lines in buffer--"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>sub_nsubs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>linenr_T</name></type> <name>sub_nlines</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name></type> <name><name>wim_flags</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_IN_ICON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_IN_TITLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>stl_syntax</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>no_hlsearch</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>linenr_T</name></type> <name>printer_page_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>typebuf_was_filled</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name>psepc</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="char">'\\'</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name>psepcN</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="char">'/'</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>pseps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <block>{ <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>TriState</name> <name>virtual_op</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>kNone</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>disptick_T</name> <name>display_tick</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>linenr_T</name> <name>spell_redraw_lnum</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_abort</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E470: Command aborted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_afterinit</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E905: Cannot set this option after startup"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_api_spawn_failed</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E903: Could not spawn API job"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_argreq</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E471: Argument required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_backslash</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E10: \\ should be followed by /, ? or &amp;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_cmdwin</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E11: Invalid in command-line window; &lt;CR&gt; executes, CTRL-C quits"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_curdir</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E12: Command not allowed from exrc/vimrc in current dir or tag search"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_endif</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E171: Missing :endif"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_endtry</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E600: Missing :endtry"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_endwhile</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E170: Missing :endwhile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_endfor</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E170: Missing :endfor"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_while</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E588: :endwhile without :while"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_for</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E588: :endfor without :for"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_exists</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E13: File exists (add ! to override)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_failed</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E472: Command failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_internal</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E473: Internal error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_intern2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E685: Internal error: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_interr</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Interrupted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_invaddr</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E14: Invalid address"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_invarg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E474: Invalid argument"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_invarg2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E475: Invalid argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_invargval</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E475: Invalid value for argument %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_invargNval</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E475: Invalid value for argument %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_duparg2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E983: Duplicate argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_invexpr2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E15: Invalid expression: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_invrange</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E16: Invalid range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_invcmd</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E476: Invalid command"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_isadir2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E17: \"%s\" is a directory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_invchan</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E900: Invalid channel id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_invchanjob</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E900: Invalid channel id: not a job"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_jobtblfull</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E901: Job table is full"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_jobspawn</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E903: Process failed to start: %s: \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_channotpty</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E904: channel is not a pty"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_stdiochan2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E905: Couldn't open stdio channel: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_invstream</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E906: invalid stream for channel"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_invstreamrpc</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E906: invalid stream for rpc channel, use 'rpc'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_streamkey</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E5210: dict key '%s' already set for buffered stream in channel %"</literal>

<name>PRIu64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_libcall</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E364: Library call failed for \"%s()\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_fsync</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E667: Fsync failed: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_mkdir</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E739: Cannot create directory %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_markinval</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E19: Mark has invalid line number"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_marknotset</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E20: Mark not set"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_modifiable</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E21: Cannot make changes, 'modifiable' is off"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_nesting</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E22: Scripts nested too deep"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_noalt</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E23: No alternate file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_noabbr</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E24: No such abbreviation"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_nobang</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E477: No ! allowed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_nogroup</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E28: No such highlight group name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_noinstext</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E29: No inserted text yet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_nolastcmd</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E30: No previous command line"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_nomap</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E31: No such mapping"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_nomatch</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E479: No match"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_nomatch2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E480: No match: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_noname</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E32: No file name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_nopresub</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E33: No previous substitute regular expression"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_noprev</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E34: No previous command"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_noprevre</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E35: No previous regular expression"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_norange</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E481: No range allowed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_noroom</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E36: Not enough room"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_notmp</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E483: Can't get temp file name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_notopen</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E484: Can't open file %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_notopen_2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E484: Can't open file %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_notread</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E485: Can't read file %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_null</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E38: Null argument"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_number_exp</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E39: Number expected"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_openerrf</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E40: Can't open errorfile %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_outofmem</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E41: Out of memory!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_patnotf</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Pattern not found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_patnotf2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E486: Pattern not found: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_positive</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E487: Argument must be positive"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_prev_dir</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E459: Cannot go back to previous directory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_quickfix</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E42: No Errors"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_loclist</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E776: No location list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_re_damg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E43: Damaged match string"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_re_corr</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E44: Corrupted regexp program"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_readonly</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E45: 'readonly' option is set (add ! to override)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_readonlyvar</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E46: Cannot change read-only variable \"%.*s\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_dictreq</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E715: Dictionary required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_toomanyarg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E118: Too many arguments for function: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_dictkey</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E716: Key not present in Dictionary: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_listreq</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E714: List required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_listdictarg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E712: Argument of %s must be a List or Dictionary"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_readerrf</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E47: Error while reading errorfile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_sandbox</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E48: Not allowed in sandbox"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_secure</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E523: Not allowed here"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_screenmode</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E359: Screen mode setting not supported"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_scroll</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E49: Invalid scroll size"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_shellempty</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E91: 'shell' option is empty"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_signdata</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E255: Couldn't read in sign data!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_swapclose</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E72: Close error on swap file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_tagstack</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E73: tag stack empty"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_toocompl</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E74: Command too complex"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_longname</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E75: Name too long"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_toomsbra</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E76: Too many ["</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_toomany</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E77: Too many file names"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_trailing</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E488: Trailing characters"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_trailing2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E488: Trailing characters: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_umark</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E78: Unknown mark"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_wildexpand</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E79: Cannot expand wildcards"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_winheight</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E591: 'winheight' cannot be smaller than 'winminheight'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_winwidth</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E592: 'winwidth' cannot be smaller than 'winminwidth'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_write</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E80: Error while writing"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_zerocount</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E939: Positive count required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_usingsid</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E81: Using &lt;SID&gt; not in a script context"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_maxmempat</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E363: pattern uses more memory than 'maxmempattern'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_emptybuf</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E749: empty buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_nobufnr</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E86: Buffer %"</literal> <name>PRId64</name> <literal type="string">" does not exist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_invalpat</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E682: Invalid search pattern or delimiter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_bufloaded</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E139: File is loaded in another buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_notset</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E764: Option '%s' is not set"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_invalidreg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E850: Invalid register name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_dirnotf</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E919: Directory not found in '%s': \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_au_recursive</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E952: Autocommand caused recursive behavior"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_unsupportedoption</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E519: Option not supported"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_fnametoolong</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E856: Filename too long"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_float_as_string</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E806: using Float as a String"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_autocmd_err</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator><call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E5500: autocmd has thrown an exception: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_cmdmap_err</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator><call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E5520: &lt;Cmd&gt; mapping must end with &lt;CR&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_cmdmap_repeated</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator><call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E5521: &lt;Cmd&gt; mapping must end with &lt;CR&gt; before second &lt;Cmd&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_cmdmap_key</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator><call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E5522: &lt;Cmd&gt; mapping must not include %s key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_api_error</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator><call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E5555: API call: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_luv_api_disabled</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator><call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E5560: %s must not be called in a lua loop callback"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_floatonly</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator><call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E5601: Cannot close window, only floating window would remain"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>e_floatexchange</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator><call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"E5602: Cannot exchange or rotate float"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>top_bot_msg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"search hit TOP, continuing at BOTTOM"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>bot_top_msg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"search hit BOTTOM, continuing at TOP"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>line_msg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">" line "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>time_t</name></type> <name>starttime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>FILE</name> <modifier>*</modifier><name>time_fd</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>vim_ignored</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>embedded_mode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bool</name> <name>headless_mode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <block>{

<decl><name>kUnknown</name></decl>,

<decl><name>kWorking</name></decl>,

<decl><name>kBroken</name></decl>

}</block></enum></type> <name>WorkingStatus</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>kCdScopeInvalid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>kCdScopeWindow</name></decl>, 

<decl><name>kCdScopeTab</name></decl>, 

<decl><name>kCdScopeGlobal</name></decl>, 

}</block></enum></type> <name>CdScope</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_CD_SCOPE</name></cpp:macro> <cpp:value>kCdScopeWindow</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CD_SCOPE</name></cpp:macro> <cpp:value>kCdScopeGlobal</cpp:value></cpp:define>

</unit>
