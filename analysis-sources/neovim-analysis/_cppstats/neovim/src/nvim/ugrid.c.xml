<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\ugrid.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/assert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ugrid.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ugrid.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>ugrid_init</name><parameter_list>(<parameter><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>cells</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ugrid_free</name><parameter_list>(<parameter><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>destroy_cells</name><argument_list>(<argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ugrid_resize</name><parameter_list>(<parameter><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>destroy_cells</name><argument_list>(<argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>cells</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UCell</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UCell</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ugrid_clear</name><parameter_list>(<parameter><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_region</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>height</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>width</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ugrid_clear_chunk</name><parameter_list>(<parameter><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endcol</name></decl></parameter>, <parameter><decl><type><name>sattr_T</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_region</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>endcol</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ugrid_goto</name><parameter_list>(<parameter><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ugrid_scroll</name><parameter_list>(<parameter><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>stop</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>bot</name> <operator>-</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>bot</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>top</name> <operator>-</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>stop</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>UCell</name> <modifier>*</modifier></type><name>target_row</name> <init>= <expr><name><name>grid</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>left</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UCell</name> <modifier>*</modifier></type><name>source_row</name> <init>= <expr><name><name>grid</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>i</name> <operator>+</operator> <name>count</name></expr>]</index></name> <operator>+</operator> <name>left</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>right</name> <operator>&gt;=</operator> <name>left</name> <operator>&amp;&amp;</operator> <name>left</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>target_row</name></expr></argument>, <argument><expr><name>source_row</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UCell</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>right</name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>left</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_region</name><parameter_list>(<parameter><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>,

<parameter><decl><type><name>sattr_T</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>top</name></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <name>bot</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<macro><name>UGRID_FOREACH_CELL</name><argument_list>(<argument>grid</argument>, <argument>row</argument>, <argument>left</argument>, <argument>right+<literal type="number">1</literal></argument>, <argument>{

cell-&gt;data[<literal type="number">0</literal>] = <literal type="char">' '</literal>;

cell-&gt;data[<literal type="number">1</literal>] = <literal type="number">0</literal>;

cell-&gt;attr = attr;

}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy_cells</name><parameter_list>(<parameter><decl><type><name>UGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>cells</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>cells</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
