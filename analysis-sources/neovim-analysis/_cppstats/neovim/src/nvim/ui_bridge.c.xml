<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\ui_bridge.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui_bridge.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ugrid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui_bridge.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((UIBridgeData *)b)-&gt;ui)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_BRIDGE_CALL</name><parameter_list>(<parameter><type><name>ui</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>argc</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((UIBridgeData *)ui)-&gt;scheduler( event_create(ui_bridge_##name##_event, argc, __VA_ARGS__), UI(ui))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT2PTR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)(intptr_t)i)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR2INT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Integer)(intptr_t)p)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui_events_bridge.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>UI</name> <modifier>*</modifier></type><name>ui_bridge_attach</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>ui_main_fn</name></type> <name>ui_main</name></decl></parameter>, <parameter><decl><type><name>event_scheduler</name></type> <name>scheduler</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UIBridgeData</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UIBridgeData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>ui</name></name> <operator>=</operator> <name>ui</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>rgb</name></name> <operator>=</operator> <name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>stop</name></name> <operator>=</operator> <name>ui_bridge_stop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>grid_resize</name></name> <operator>=</operator> <name>ui_bridge_grid_resize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>grid_clear</name></name> <operator>=</operator> <name>ui_bridge_grid_clear</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>grid_cursor_goto</name></name> <operator>=</operator> <name>ui_bridge_grid_cursor_goto</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>mode_info_set</name></name> <operator>=</operator> <name>ui_bridge_mode_info_set</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>update_menu</name></name> <operator>=</operator> <name>ui_bridge_update_menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>busy_start</name></name> <operator>=</operator> <name>ui_bridge_busy_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>busy_stop</name></name> <operator>=</operator> <name>ui_bridge_busy_stop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>mouse_on</name></name> <operator>=</operator> <name>ui_bridge_mouse_on</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>mouse_off</name></name> <operator>=</operator> <name>ui_bridge_mouse_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>mode_change</name></name> <operator>=</operator> <name>ui_bridge_mode_change</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>grid_scroll</name></name> <operator>=</operator> <name>ui_bridge_grid_scroll</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>hl_attr_define</name></name> <operator>=</operator> <name>ui_bridge_hl_attr_define</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>bell</name></name> <operator>=</operator> <name>ui_bridge_bell</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>visual_bell</name></name> <operator>=</operator> <name>ui_bridge_visual_bell</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>default_colors_set</name></name> <operator>=</operator> <name>ui_bridge_default_colors_set</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>flush</name></name> <operator>=</operator> <name>ui_bridge_flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>suspend</name></name> <operator>=</operator> <name>ui_bridge_suspend</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>set_title</name></name> <operator>=</operator> <name>ui_bridge_set_title</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>set_icon</name></name> <operator>=</operator> <name>ui_bridge_set_icon</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>option_set</name></name> <operator>=</operator> <name>ui_bridge_option_set</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>raw_line</name></name> <operator>=</operator> <name>ui_bridge_raw_line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>inspect</name></name> <operator>=</operator> <name>ui_bridge_inspect</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>scheduler</name></name> <operator>=</operator> <name>scheduler</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>UIExtension</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name> <operator>&lt;</operator> <name>kUIExtCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>bridge</name><operator>.</operator><name>ui_ext</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ui</name><operator>-&gt;</operator><name>ui_ext</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>ui_main</name></name> <operator>=</operator> <name>ui_main</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rv</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uv_thread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rv</name><operator>-&gt;</operator><name>ui_thread</name></name></expr></argument>, <argument><expr><name>ui_thread_run</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>rv</name><operator>-&gt;</operator><name>ready</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rv</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_attach_impl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rv</name><operator>-&gt;</operator><name>bridge</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>rv</name><operator>-&gt;</operator><name>bridge</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_bridge_stopped</name><parameter_list>(<parameter><decl><type><name>UIBridgeData</name> <modifier>*</modifier></type><name>bridge</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bridge</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bridge</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bridge</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_thread_run</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UIBridgeData</name> <modifier>*</modifier></type><name>bridge</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>bridge</name><operator>-&gt;</operator><name>ui_main</name></name><argument_list>(<argument><expr><name>bridge</name></expr></argument>, <argument><expr><name><name>bridge</name><operator>-&gt;</operator><name>ui</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_bridge_stop</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ui_detach_impl</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>UIBridgeData</name> <modifier>*</modifier></type><name>bridge</name> <init>= <expr><operator>(</operator><name>UIBridgeData</name> <operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>stopped</name> <init>= <expr><name><name>bridge</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UI_BRIDGE_CALL</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bridge</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stopped</name> <operator>=</operator> <name><name>bridge</name><operator>-&gt;</operator><name>stopped</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bridge</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stopped</name></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>loop_poll_events</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>uv_thread_join</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bridge</name><operator>-&gt;</operator><name>ui_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bridge</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uv_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bridge</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>bridge</name><operator>-&gt;</operator><name>ui</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_bridge_stop_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><call><name>UI</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>stop</name></name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_bridge_hl_attr_define</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>HlAttrs</name></type> <name>attrs</name></decl></parameter>,

<parameter><decl><type><name>HlAttrs</name></type> <name>cterm_attrs</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HlAttrs</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HlAttrs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name>attrs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UI_BRIDGE_CALL</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>hl_attr_define</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ui</name></expr></argument>, <argument><expr><call><name>INT2PTR</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_bridge_hl_attr_define_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><call><name>UI</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>info</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>hl_attr_define</name></name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><call><name>PTR2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>HlAttrs</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>HlAttrs</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_bridge_raw_line_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><call><name>UI</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>raw_line</name></name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><call><name>PTR2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PTR2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PTR2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>PTR2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PTR2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PTR2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>LineFlags</name><operator>)</operator><call><name>PTR2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_bridge_raw_line</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>grid</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>startcol</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>endcol</name></decl></parameter>,

<parameter><decl><type><name>Integer</name></type> <name>clearcol</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>clearattr</name></decl></parameter>,

<parameter><decl><type><name>LineFlags</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>schar_T</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>sattr_T</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>ncol</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>endcol</name><operator>-</operator><name>startcol</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>schar_T</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>xmemdup</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>ncol</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sattr_T</name> <modifier>*</modifier></type><name>hl</name> <init>= <expr><call><name>xmemdup</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>ncol</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UI_BRIDGE_CALL</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>raw_line</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>ui</name></expr></argument>, <argument><expr><call><name>INT2PTR</name><argument_list>(<argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2PTR</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>INT2PTR</name><argument_list>(<argument><expr><name>startcol</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2PTR</name><argument_list>(<argument><expr><name>endcol</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2PTR</name><argument_list>(<argument><expr><name>clearcol</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>INT2PTR</name><argument_list>(<argument><expr><name>clearattr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2PTR</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_bridge_suspend</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UIBridgeData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>UIBridgeData</name> <operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UI_BRIDGE_CALL</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>suspend</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>ready</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>uv_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_bridge_suspend_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><call><name>UI</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>suspend</name></name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_bridge_option_set</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>String</name></type> <name>copy_name</name> <init>= <expr><call><name>copy_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Object</name> <modifier>*</modifier></type><name>copy_value</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Object</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>copy_value</name> <operator>=</operator> <call><name>copy_object</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UI_BRIDGE_CALL</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>option_set</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ui</name></expr></argument>, <argument><expr><name><name>copy_name</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><call><name>INT2PTR</name><argument_list>(<argument><expr><name><name>copy_name</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>copy_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"termguicolors"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>rgb</name></name> <operator>=</operator> <name><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>boolean</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_bridge_option_set_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><call><name>UI</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><operator>*</operator><operator>(</operator><name>Object</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>option_set</name></name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>api_free_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>api_free_object</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ui_bridge_inspect</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Dictionary</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>, <argument><expr><literal type="string">"chan"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
