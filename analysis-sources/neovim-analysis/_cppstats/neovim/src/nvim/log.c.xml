<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\log.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"auto/config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_FILE_ENV</name></cpp:macro> <cpp:value>"NVIM_LOG_FILE"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>log_file_path</name><index>[<expr><name>MAXPATHL</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uv_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXECINFO_BACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;execinfo.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>log_try_create</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>log_file</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>log_file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>log_path_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>log_file_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_file_path</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"$"</literal> <name>LOG_FILE_ENV</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>log_file_path</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><literal type="string">"$"</literal> <name>LOG_FILE_ENV</name></expr></argument>, <argument><expr><name>log_file_path</name></expr></argument>)</argument_list></call>

<operator>||</operator> <name><name>log_file_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal>

<operator>||</operator> <call><name>os_isdir</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>log_file_path</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>log_try_create</name><argument_list>(<argument><expr><name>log_file_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>defaultpath</name> <init>= <expr><call><name>stdpaths_user_data_subpath</name><argument_list>(<argument><expr><literal type="string">"log"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><name>log_file_path</name></expr></argument>, <argument><expr><name>defaultpath</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>defaultpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>||</operator> <operator>!</operator><call><name>log_try_create</name><argument_list>(<argument><expr><name>log_file_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>xstrlcpy</name><argument_list>(<argument><expr><name>log_file_path</name></expr></argument>, <argument><expr><literal type="string">".nvimlog"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>||</operator> <operator>!</operator><call><name>log_try_create</name><argument_list>(<argument><expr><name>log_file_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>log_file_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>os_setenv</name><argument_list>(<argument><expr><name>LOG_FILE_ENV</name></expr></argument>, <argument><expr><name>log_file_path</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>log_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>uv_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_path_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>log_lock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>log_unlock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>logmsg</name><argument_list>(<argument><expr><name>int</name> <name>log_level</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>context</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>func_name</name></expr></argument>,

<argument><expr><name>int</name> <name>line_num</name></expr></argument>, <argument><expr><name>bool</name> <name>eol</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list>

<name>FUNC_ATTR_UNUSED</name> <name>FUNC_ATTR_PRINTF</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>log_level</name> <operator>&lt;</operator> <name>MIN_LOG_LEVEL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>entered_free_all_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>log_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>log_file</name> <init>= <expr><call><name>open_log_file</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>log_file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v_do_log_to_file</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>func_name</name></expr></argument>, <argument><expr><name>line_num</name></expr></argument>,

<argument><expr><name>eol</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log_file</name> <operator>!=</operator> <name>stderr</name> <operator>&amp;&amp;</operator> <name>log_file</name> <operator>!=</operator> <name>stdout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>log_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>log_uv_handles</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>loop</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>log_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>log_file</name> <init>= <expr><call><name>open_log_file</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>log_file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>uv_print_all_handles</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log_file</name> <operator>!=</operator> <name>stderr</name> <operator>&amp;&amp;</operator> <name>log_file</name> <operator>!=</operator> <name>stdout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>log_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>FILE</name> <modifier>*</modifier></type><name>open_log_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>opening_log_file</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opening_log_file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_log_to_file</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>ERROR_LOG_LEVEL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><literal type="string">"Cannot LOG() recursively."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>stderr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>log_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>opening_log_file</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>log_path_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>log_file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>log_file_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opening_log_file</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log_file</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>log_file</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>do_log_to_file</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>ERROR_LOG_LEVEL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><literal type="string">"Logging to stderr, failed to open $"</literal> <name>LOG_FILE_ENV</name> <literal type="string">": %s"</literal></expr></argument>,

<argument><expr><name>log_file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>stderr</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EXECINFO_BACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>log_callstack_to_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>log_file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>func_name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>line_num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>trace</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trace_size</name> <init>= <expr><call><name>backtrace</name><argument_list>(<argument><expr><name>trace</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>exepath</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>exepathlen</name> <init>= <expr><name>MAXPATHL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_exepath</name><argument_list>(<argument><expr><name>exepath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exepathlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">24</literal> <operator>+</operator> <name>exepathlen</name> <operator>&lt;</operator> <name>IOSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>cmdbuf</name><index>[<expr><name>IOSIZE</name> <operator>+</operator> <operator>(</operator><literal type="number">20</literal> <operator>*</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmdbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmdbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"addr2line -e %s -f -p"</literal></expr></argument>, <argument><expr><name>exepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>trace_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" %p"</literal></expr></argument>, <argument><expr><name><name>trace</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xstrlcat</name><argument_list>(<argument><expr><name>cmdbuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmdbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>do_log_to_file</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>, <argument><expr><name>DEBUG_LOG_LEVEL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>func_name</name></expr></argument>, <argument><expr><name>line_num</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><literal type="string">"trace:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>popen</name><argument_list>(<argument><expr><name>cmdbuf</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>linebuf</name><index>[<expr><name>IOSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>linebuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>linebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log_file</name> <operator>!=</operator> <name>stderr</name> <operator>&amp;&amp;</operator> <name>log_file</name> <operator>!=</operator> <name>stdout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>log_callstack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>func_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>line_num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>log_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>log_file</name> <init>= <expr><call><name>open_log_file</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>log_file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>log_callstack_to_file</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>, <argument><expr><name>func_name</name></expr></argument>, <argument><expr><name>line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>log_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>do_log_to_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>log_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_num</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>eol</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

FUNC_ATTR_PRINTF<parameter_list>(</parameter_list>7<operator>,</operator> 8</function>)

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>v_do_log_to_file</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>func_name</name></expr></argument>,

<argument><expr><name>line_num</name></expr></argument>, <argument><expr><name>eol</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>v_do_log_to_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>log_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_level</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func_name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line_num</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>eol</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>log_levels</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>DEBUG_LOG_LEVEL</name></expr>]</index> <operator>=</operator> <literal type="string">"DEBUG"</literal></expr>,

<expr><index>[<expr><name>INFO_LOG_LEVEL</name></expr>]</index> <operator>=</operator> <literal type="string">"INFO "</literal></expr>,

<expr><index>[<expr><name>WARN_LOG_LEVEL</name></expr>]</index> <operator>=</operator> <literal type="string">"WARN "</literal></expr>,

<expr><index>[<expr><name>ERROR_LOG_LEVEL</name></expr>]</index> <operator>=</operator> <literal type="string">"ERROR"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>log_level</name> <operator>&gt;=</operator> <name>DEBUG_LOG_LEVEL</name> <operator>&amp;&amp;</operator> <name>log_level</name> <operator>&lt;=</operator> <name>ERROR_LOG_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>local_time</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>os_localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_time</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>date_time</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strftime</name><argument_list>(<argument><expr><name>date_time</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date_time</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%dT%H:%M:%S"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>local_time</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>millis</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>curtime</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curtime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>millis</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curtime</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pid</name> <init>= <expr><call><name>os_get_pid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>line_num</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>func_name</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>

?</condition><then> <expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>, <argument><expr><literal type="string">"%s %s.%03d %-5"</literal> <name>PRId64</name> <literal type="string">" %s"</literal></expr></argument>,

<argument><expr><name><name>log_levels</name><index>[<expr><name>log_level</name></expr>]</index></name></expr></argument>, <argument><expr><name>date_time</name></expr></argument>, <argument><expr><name>millis</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>context</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"?:"</literal></expr> </then><else>: <expr><name>context</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>, <argument><expr><literal type="string">"%s %s.%03d %-5"</literal> <name>PRId64</name> <literal type="string">" %s%s:%d: "</literal></expr></argument>,

<argument><expr><name><name>log_levels</name><index>[<expr><name>log_level</name></expr>]</index></name></expr></argument>, <argument><expr><name>date_time</name></expr></argument>, <argument><expr><name>millis</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>context</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>context</name></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>func_name</name></expr></argument>, <argument><expr><name>line_num</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fflush</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
