<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats\neovim\src\nvim\mouse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mouse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/state.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui_compositor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os_unix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fold.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/diff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_defs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mouse.c.generated.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>orig_topline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>orig_topfill</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>jump_to_mouse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>inclusive</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>which_button</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>on_status_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>on_sep_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_row</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_col</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>dragwin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_drag</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old_curwin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>mouse_row</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>mouse_col</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>grid</name> <init>= <expr><name>mouse_grid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mouse_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fdc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mouse_past_bottom</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_past_eol</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOUSE_RELEASED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dragwin</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_drag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>MOUSE_FOCUS</name> <operator>|</operator> <name>MOUSE_DID_MOVE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dragwin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_drag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MOUSE_DID_MOVE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>prev_row</name> <operator>==</operator> <name>mouse_row</name>

<operator>&amp;&amp;</operator> <name>prev_col</name> <operator>==</operator> <name>mouse_col</name></expr>)</condition> <block>{<block_content>

<label><name>retnomove</name>:</label>

<if_stmt><if>if <condition>(<expr><name>on_status_line</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>IN_STATUS_LINE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>on_sep_line</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>IN_SEP_LINE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOUSE_MAY_STOP_VIS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>IN_BUFFER</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_row</name> <operator>=</operator> <name>mouse_row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_col</name> <operator>=</operator> <name>mouse_col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOUSE_SETPOS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>retnomove</name>;</goto></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name>Rows</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;=</operator> <name>Columns</name>

<operator>&amp;&amp;</operator> <name><name>default_grid</name><operator>.</operator><name>chars</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mouse_char</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name><name>default_grid</name><operator>.</operator><name>chars</name><index>[<expr><name><name>default_grid</name><operator>.</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name>

<operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mouse_char</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>old_curwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_cursor</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MOUSE_FOCUS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>IN_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>grid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>IN_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fdc</name> <operator>=</operator> <call><name>win_fdccol_count</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dragwin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grid</name> <operator>==</operator> <name>DEFAULT_GRID_HANDLE</name> <operator>&amp;&amp;</operator> <name>row</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>on_status_line</name> <operator>=</operator> <name>row</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dragwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>on_status_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>grid</name> <operator>==</operator> <name>DEFAULT_GRID_HANDLE</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>on_sep_line</name> <operator>=</operator> <name>col</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dragwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>on_sep_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>on_status_line</name> <operator>&amp;&amp;</operator> <name>on_sep_line</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stl_connected</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>on_sep_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>on_status_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>on_status_line</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>on_sep_line</name>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>

?</condition><then> <expr><name>col</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <name>fdc</name></expr>

</then><else>: <expr><name>col</name> <operator>&gt;=</operator> <name>fdc</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>cmdwin_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MOUSE_MAY_STOP_VIS</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wp</name> <operator>!=</operator> <name>curwin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>on_sep_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dragwin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MOUSE_RELEASED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>old_curwin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_mouse_topline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>on_status_line</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>==</operator> <name>old_curwin</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>IN_STATUS_LINE</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>IN_STATUS_LINE</name> <operator>|</operator> <name>CURSOR_MOVED</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>on_sep_line</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>==</operator> <name>old_curwin</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>IN_SEP_LINE</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>IN_SEP_LINE</name> <operator>|</operator> <name>CURSOR_MOVED</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>on_status_line</name> <operator>&amp;&amp;</operator> <name>which_button</name> <operator>==</operator> <name>MOUSE_LEFT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dragwin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>row</name> <operator>-</operator> <name><name>dragwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>-</operator> <name><name>dragwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <literal type="number">1</literal>

<operator>-</operator> <name>on_status_line</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_drag_status_line</name><argument_list>(<argument><expr><name>dragwin</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_drag</name> <operator>|=</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>IN_STATUS_LINE</name></expr>;</return> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>on_sep_line</name> <operator>&amp;&amp;</operator> <name>which_button</name> <operator>==</operator> <name>MOUSE_LEFT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dragwin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>col</name> <operator>-</operator> <name><name>dragwin</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>-</operator> <name><name>dragwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <literal type="number">1</literal>

<operator>-</operator> <name>on_sep_line</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_drag_vsep_line</name><argument_list>(<argument><expr><name>dragwin</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_drag</name> <operator>|=</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>IN_SEP_LINE</name></expr>;</return> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOUSE_MAY_STOP_VIS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>row</name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>first</name> <operator>=</operator> <name>true</name></expr>;</init> <condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&lt;</operator> <call><name>diff_check</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>plines</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;</operator> <operator>-</operator><name>row</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&lt;</operator> <call><name>diff_check</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>check_topfill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator>

<operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>first</name> <operator>=</operator> <name>true</name></expr>;</init> <condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>plines</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;</operator> <name>row</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator>

<call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>check_topfill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator>

<operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height_inner</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mouse_dragging</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_TOPLINE</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><name>col</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <name>fdc</name></expr> </then><else>:

<expr><name>col</name> <operator>&gt;=</operator> <name>fdc</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>cmdwin_type</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mouse_char</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mouse_comp_pos</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mouse_past_bottom</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MOUSE_RELEASED</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>which_button</name> <operator>==</operator> <name>MOUSE_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>mouse_adjust_click</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MOUSE_MAY_VIS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>old_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>may_start_select</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_smd</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>coladvance</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>inclusive</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>inclusive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mouse_past_eol</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>inclusive</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>inclusive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>IN_BUFFER</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>old_curwin</name> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>old_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name><name>old_cursor</name><operator>.</operator><name>col</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>|=</operator> <name>CURSOR_MOVED</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mouse_char</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>foldclosed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>|=</operator> <name>MOUSE_FOLD_OPEN</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mouse_char</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>|=</operator> <name>MOUSE_FOLD_CLOSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mouse_comp_pos</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rowp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>colp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lnump</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><operator>*</operator><name>colp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><operator>*</operator><name>rowp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_p_diff</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>win</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>row</name> <operator>-=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>row</name> <operator>-=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>plines_win_nofill</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>plines_win</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>row</name></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>row</name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>retval</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>off</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>row</name> <operator>*</operator> <operator>(</operator><name><name>win</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <name>off</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>win</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>colp</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rowp</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lnump</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>win_T</name> <modifier>*</modifier></type><name>mouse_find_win</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>gridp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rowp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>colp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp_grid</name> <init>= <expr><call><name>mouse_find_grid_win</name><argument_list>(<argument><expr><name>gridp</name></expr></argument>, <argument><expr><name>rowp</name></expr></argument>, <argument><expr><name>colp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp_grid</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>wp_grid</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>gridp</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>topframe</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rowp</name> <operator>-=</operator> <name><name>firstwin</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>fp</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</init> <condition><expr><name><name>fp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>fp</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>colp</name> <operator>&lt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>colp</name> <operator>-=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>fp</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</init> <condition><expr><name><name>fp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>fp</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rowp</name> <operator>&lt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>rowp</name> <operator>-=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_win</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>wp</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>mouse_find_grid_win</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>gridp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rowp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>colp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>gridp</name> <operator>==</operator> <name><name>msg_grid</name><operator>.</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>gridp</name> <operator>=</operator> <name>DEFAULT_GRID_HANDLE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>gridp</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>get_win_by_grid_handle</name><argument_list>(<argument><expr><operator>*</operator><name>gridp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>chars</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_floating</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_float_config</name><operator>.</operator><name>focusable</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rowp</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>*</operator><name>rowp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>colp</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>*</operator><name>colp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>wp</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>gridp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><call><name>ui_comp_mouse_focus</name><argument_list>(<argument><expr><operator>*</operator><name>rowp</name></expr></argument>, <argument><expr><operator>*</operator><name>colp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name> <operator>!=</operator> <name>grid</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>gridp</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rowp</name> <operator>-=</operator> <name><name>grid</name><operator>-&gt;</operator><name>comp_row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>colp</name> <operator>-=</operator> <name><name>grid</name><operator>-&gt;</operator><name>comp_col</name></name></expr>;</expr_stmt>

<return>return <expr><name>wp</name></expr>;</return>

</block_content>}</block>

<expr_stmt><expr><operator>*</operator><name>gridp</name> <operator>=</operator> <name>DEFAULT_GRID_HANDLE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>setmouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_mouse</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>checkfor</name> <init>= <expr><name>MOUSE_NORMAL</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_VISUAL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>==</operator> <name>HITRETURN</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>ASKMORE</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>SETWSIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_RETURN</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_INSERT</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_COMMAND</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>==</operator> <name>CONFIRM</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>EXTERNCMD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mouse_has</name><argument_list>(<argument><expr><name>checkfor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_call_mouse_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ui_call_mouse_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mouse_has</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>p_mouse</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>MOUSE_A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>MOUSE_HELP</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>MOUSE_RETURN</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_help</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default> <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt> <break>break;</break>

</block_content>}</block></switch></block_content></block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_mouse_topline</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>orig_topline</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_topfill</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>colnr_T</name></type> <name>scroll_line_len</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>numchar</name> <init>= <expr><call><name>chartabsize</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>numchar</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>col</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>linenr_T</name></type> <name>find_longest_lnum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></init></decl>;</init> <condition><expr><name>lnum</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>;</condition> <incr><expr><name>lnum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>len</name> <init>= <expr><call><name>scroll_line_len</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>max</name>

<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>lnum</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr></argument>)</argument_list></call>

<operator>&lt;</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ret</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mouse_scroll_horiz</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name> <operator>|</operator> <name>MOD_MASK_CTRL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leftcol</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>MSCR_RIGHT</name></expr> ?</condition><then> <expr><operator>-</operator><name>step</name></expr> </then><else>: <expr><operator>+</operator><name>step</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>leftcol</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>leftcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>==</operator> <name>leftcol</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>leftcol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>virtual_active</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>leftcol</name> <operator>&gt;</operator> <call><name>scroll_line_len</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <call><name>find_longest_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>leftcol_changed</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mouse_adjust_click</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_smc</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_smc</name></name> <operator>&amp;&amp;</operator> <call><name>conceal_cursor_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>col</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr_row_offset</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>row</name> <operator>*</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator>

<name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vcol</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>vcol</name> <operator>&lt;</operator> <name>offset</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <call><name>chartabsize</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>vcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>ptr_row_offset</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vcol</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_end</name> <operator>=</operator> <name>ptr_row_offset</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>vcol</name> <operator>&lt;</operator> <name>col</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr_end</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <call><name>chartabsize</name><argument_list>(<argument><expr><name>ptr_end</name></expr></argument>, <argument><expr><name>vcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_end</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>int</name></type> <name>matchid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_matchid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nudge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cwidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vcol</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>incr</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>nudge++; ptr_end += utfc_ptr2len(ptr_end)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decr</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>nudge--; ptr_end -= utfc_ptr2len(ptr_end)</cpp:value></cpp:define>

<while>while <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name>ptr_end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cwidth</name> <operator>=</operator> <call><name>chartabsize</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>vcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>cwidth</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cwidth</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <name>nudge</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cwidth</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>cwidth</name></expr></argument>, <argument><expr><name>nudge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cwidth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cwidth</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>matchid</name> <operator>=</operator> <call><name>syn_get_concealed_id</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matchid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>incr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>==</operator> <name>ptr_row_offset</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>==</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>conceal</name></name> <operator>!=</operator> <name>NUL</name>

<operator>||</operator> <call><name>syn_get_sub_char</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_matchid</name> <operator>=</operator> <name>matchid</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>prev_matchid</name> <operator>==</operator> <name>matchid</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>incr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>matchid</name> <operator>=</operator> <call><name>syn_get_concealed_id</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>col</name> <operator>+</operator> <name>nudge</name></expr>;</return>

</block_content>}</block></function>

</unit>
